
013_FREERTOS_CMSIS_COUNTING_SEMAPHORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068e4  080068e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080068e4  080068e4  000168e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068ec  080068ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068ec  080068ec  000168ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080068f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b48  20004b48  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a5b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d0  00000000  00000000  00039aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001338  00000000  00000000  0003e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003139  00000000  00000000  0003f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016010  00000000  00000000  00042691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4beb  00000000  00000000  000586a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d28c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058f0  00000000  00000000  0012d2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006798 	.word	0x08006798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006798 	.word	0x08006798

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fb2e 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f840 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8d0 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f8a4 	bl	8000680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f002 fd7a 	bl	8003030 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 800053c:	4a11      	ldr	r2, [pc, #68]	; (8000584 <main+0x60>)
 800053e:	2100      	movs	r1, #0
 8000540:	2002      	movs	r0, #2
 8000542:	f002 fe6c 	bl	800321e <osSemaphoreNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <main+0x64>)
 800054a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 800054c:	4a0f      	ldr	r2, [pc, #60]	; (800058c <main+0x68>)
 800054e:	2100      	movs	r1, #0
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <main+0x6c>)
 8000552:	f002 fdb7 	bl	80030c4 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0x70>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <main+0x74>)
 800055e:	2100      	movs	r1, #0
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <main+0x78>)
 8000562:	f002 fdaf 	bl	80030c4 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <main+0x7c>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <main+0x80>)
 800056e:	2100      	movs	r1, #0
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <main+0x84>)
 8000572:	f002 fda7 	bl	80030c4 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <main+0x88>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f002 fd7c 	bl	8003078 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x5c>
 8000582:	bf00      	nop
 8000584:	0800685c 	.word	0x0800685c
 8000588:	200000e0 	.word	0x200000e0
 800058c:	080067f0 	.word	0x080067f0
 8000590:	0800080d 	.word	0x0800080d
 8000594:	200000d4 	.word	0x200000d4
 8000598:	08006814 	.word	0x08006814
 800059c:	08000835 	.word	0x08000835
 80005a0:	200000d8 	.word	0x200000d8
 80005a4:	08006838 	.word	0x08006838
 80005a8:	0800085d 	.word	0x0800085d
 80005ac:	200000dc 	.word	0x200000dc

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 f820 	bl	8006604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a26      	ldr	r2, [pc, #152]	; (8000678 <SystemClock_Config+0xc8>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <SystemClock_Config+0xcc>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062c:	2307      	movs	r3, #7
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fe2b 	bl	8001290 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 f936 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 800064c:	23b0      	movs	r3, #176	; 0xb0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f88e 	bl	8001780 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800066a:	f000 f921 	bl	80008b0 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f001 fd62 	bl	8002180 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f8f5 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000090 	.word	0x20000090
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <MX_GPIO_Init+0xe4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a31      	ldr	r2, [pc, #196]	; (80007b8 <MX_GPIO_Init+0xe4>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_GPIO_Init+0xe4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_GPIO_Init+0xe4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a2a      	ldr	r2, [pc, #168]	; (80007b8 <MX_GPIO_Init+0xe4>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_GPIO_Init+0xe4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <MX_GPIO_Init+0xe4>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_GPIO_Init+0xe4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_GPIO_Init+0xe4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_GPIO_Init+0xe4>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_GPIO_Init+0xe4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000760:	4816      	ldr	r0, [pc, #88]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000762:	f000 fd63 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000766:	2301      	movs	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_GPIO_Init+0xec>)
 800077c:	f000 fbba 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000780:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <MX_GPIO_Init+0xe8>)
 800079a:	f000 fbab 	bl	8000ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2105      	movs	r1, #5
 80007a2:	2006      	movs	r0, #6
 80007a4:	f000 faea 	bl	8000d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a8:	2006      	movs	r0, #6
 80007aa:	f000 fb03 	bl	8000db4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40020000 	.word	0x40020000

080007c4 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fe7f 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80007d6:	200a      	movs	r0, #10
 80007d8:	f7ff fe7c 	bl	80004d4 <ITM_SendChar>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	80fb      	strh	r3, [r7, #6]
	Task_action('!');
 80007ee:	2021      	movs	r0, #33	; 0x21
 80007f0:	f7ff ffe8 	bl	80007c4 <Task_action>
	osSemaphoreRelease(myCountingSem01Handle);
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HAL_GPIO_EXTI_Callback+0x24>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fdeb 	bl	80033d4 <osSemaphoreRelease>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000e0 	.word	0x200000e0

0800080c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreRelease(myCountingSem01Handle);
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <StartTask1+0x24>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fddb 	bl	80033d4 <osSemaphoreRelease>
	  Task_action('1');
 800081e:	2031      	movs	r0, #49	; 0x31
 8000820:	f7ff ffd0 	bl	80007c4 <Task_action>
	  osDelay(2000);
 8000824:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000828:	f002 fcde 	bl	80031e8 <osDelay>
	  osSemaphoreRelease(myCountingSem01Handle);
 800082c:	e7f2      	b.n	8000814 <StartTask1+0x8>
 800082e:	bf00      	nop
 8000830:	200000e0 	.word	0x200000e0

08000834 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreRelease(myCountingSem01Handle);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <StartTask2+0x24>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fdc7 	bl	80033d4 <osSemaphoreRelease>
	  Task_action('2');
 8000846:	2032      	movs	r0, #50	; 0x32
 8000848:	f7ff ffbc 	bl	80007c4 <Task_action>
	  osDelay(2000);
 800084c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000850:	f002 fcca 	bl	80031e8 <osDelay>
	  osSemaphoreRelease(myCountingSem01Handle);
 8000854:	e7f2      	b.n	800083c <StartTask2+0x8>
 8000856:	bf00      	nop
 8000858:	200000e0 	.word	0x200000e0

0800085c <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <StartTask3+0x2c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fd5f 	bl	8003330 <osSemaphoreAcquire>
    osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <StartTask3+0x2c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fd58 	bl	8003330 <osSemaphoreAcquire>
    Task_action('3');
 8000880:	2033      	movs	r0, #51	; 0x33
 8000882:	f7ff ff9f 	bl	80007c4 <Task_action>
    osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000886:	e7ed      	b.n	8000864 <StartTask3+0x8>
 8000888:	200000e0 	.word	0x200000e0

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089e:	f000 f995 	bl	8000bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40002000 	.word	0x40002000

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_MspInit+0x54>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <HAL_MspInit+0x54>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x54>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_MspInit+0x54>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_MspInit+0x54>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_MspInit+0x54>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	210f      	movs	r1, #15
 80008fe:	f06f 0001 	mvn.w	r0, #1
 8000902:	f000 fa3b 	bl	8000d7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_UART_MspInit+0x94>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d133      	bne.n	800099e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_UART_MspInit+0x98>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x98>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800096e:	230c      	movs	r3, #12
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097e:	2307      	movs	r3, #7
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <HAL_UART_MspInit+0x9c>)
 800098a:	f000 fab3 	bl	8000ef4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	2026      	movs	r0, #38	; 0x26
 8000994:	f000 f9f2 	bl	8000d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000998:	2026      	movs	r0, #38	; 0x26
 800099a:	f000 fa0b 	bl	8000db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <HAL_InitTick+0xe4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a32      	ldr	r2, [pc, #200]	; (8000a98 <HAL_InitTick+0xe4>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_InitTick+0xe4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e0:	f107 0210 	add.w	r2, r7, #16
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f8e8 	bl	8001bc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009f0:	6a3b      	ldr	r3, [r7, #32]
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009fa:	f001 f8b9 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 80009fe:	6378      	str	r0, [r7, #52]	; 0x34
 8000a00:	e004      	b.n	8000a0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a02:	f001 f8b5 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8000a06:	4603      	mov	r3, r0
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a10:	fba2 2303 	umull	r2, r3, r2, r3
 8000a14:	0c9b      	lsrs	r3, r3, #18
 8000a16:	3b01      	subs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <HAL_InitTick+0xf0>)
 8000a1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a26:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a28:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a40:	4817      	ldr	r0, [pc, #92]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a42:	f001 f8ef 	bl	8001c24 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11b      	bne.n	8000a8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a56:	f001 f93f 	bl	8001cd8 <HAL_TIM_Base_Start_IT>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d111      	bne.n	8000a8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a68:	202d      	movs	r0, #45	; 0x2d
 8000a6a:	f000 f9a3 	bl	8000db4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d808      	bhi.n	8000a86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	202d      	movs	r0, #45	; 0x2d
 8000a7a:	f000 f97f 	bl	8000d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0xf4>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e002      	b.n	8000a8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3738      	adds	r7, #56	; 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	200000e4 	.word	0x200000e4
 8000aa4:	40002000 	.word	0x40002000
 8000aa8:	20000004 	.word	0x20000004

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 fbbf 	bl	8001260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART2_IRQHandler+0x10>)
 8000aee:	f001 fb95 	bl	800221c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000090 	.word	0x20000090

08000afc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b02:	f001 f959 	bl	8001db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e4 	.word	0x200000e4

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b50:	4c0b      	ldr	r4, [pc, #44]	; (8000b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5e:	f7ff ffd7 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f005 fd1b 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fcdd 	bl	8000524 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b78:	080068f4 	.word	0x080068f4
  ldr r2, =_sbss
 8000b7c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b80:	20004b48 	.word	0x20004b48

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f8d8 	bl	8000d66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f7ff fefc 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe7e 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	2000012c 	.word	0x2000012c

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000012c 	.word	0x2000012c

08000c0c <__NVIC_SetPriorityGrouping>:
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ff4c 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8e:	f7ff ff61 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000d92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	6978      	ldr	r0, [r7, #20]
 8000d9a:	f7ff ffb1 	bl	8000d00 <NVIC_EncodePriority>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff80 	bl	8000cac <__NVIC_SetPriority>
}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff54 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dde:	f7ff ff09 	bl	8000bf4 <HAL_GetTick>
 8000de2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d008      	beq.n	8000e02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e052      	b.n	8000ea8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0216 	bic.w	r2, r2, #22
 8000e10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_DMA_Abort+0x62>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0208 	bic.w	r2, r2, #8
 8000e40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e52:	e013      	b.n	8000e7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e54:	f7ff fece 	bl	8000bf4 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	d90c      	bls.n	8000e7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2220      	movs	r2, #32
 8000e66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e015      	b.n	8000ea8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1e4      	bne.n	8000e54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8e:	223f      	movs	r2, #63	; 0x3f
 8000e90:	409a      	lsls	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d004      	beq.n	8000ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00c      	b.n	8000ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2205      	movs	r2, #5
 8000ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0201 	bic.w	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	e16b      	b.n	80011e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	f040 815a 	bne.w	80011e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d005      	beq.n	8000f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d130      	bne.n	8000fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d017      	beq.n	8000fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d123      	bne.n	8001038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	69b9      	ldr	r1, [r7, #24]
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0203 	and.w	r2, r3, #3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80b4 	beq.w	80011e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b60      	ldr	r3, [pc, #384]	; (8001200 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a5f      	ldr	r2, [pc, #380]	; (8001200 <HAL_GPIO_Init+0x30c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b5d      	ldr	r3, [pc, #372]	; (8001200 <HAL_GPIO_Init+0x30c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a5b      	ldr	r2, [pc, #364]	; (8001204 <HAL_GPIO_Init+0x310>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_GPIO_Init+0x314>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d02b      	beq.n	800111a <HAL_GPIO_Init+0x226>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_GPIO_Init+0x318>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x222>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x31c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x21e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_GPIO_Init+0x320>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x21a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_GPIO_Init+0x324>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x216>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4d      	ldr	r2, [pc, #308]	; (800121c <HAL_GPIO_Init+0x328>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x212>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x32c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x20e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4b      	ldr	r2, [pc, #300]	; (8001224 <HAL_GPIO_Init+0x330>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x20a>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00e      	b.n	800111c <HAL_GPIO_Init+0x228>
 80010fe:	2308      	movs	r3, #8
 8001100:	e00c      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001102:	2306      	movs	r3, #6
 8001104:	e00a      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001106:	2305      	movs	r3, #5
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x228>
 800110a:	2304      	movs	r3, #4
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x228>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x228>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	; (8001204 <HAL_GPIO_Init+0x310>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_GPIO_Init+0x334>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a32      	ldr	r2, [pc, #200]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_GPIO_Init+0x334>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f ae90 	bls.w	8000f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40021400 	.word	0x40021400
 8001220:	40021800 	.word	0x40021800
 8001224:	40021c00 	.word	0x40021c00
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fab0 	bl	80007e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e267      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d075      	beq.n	800139a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d00c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4b85      	ldr	r3, [pc, #532]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d112      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c6:	4b82      	ldr	r3, [pc, #520]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d2:	d10b      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	4b7e      	ldr	r3, [pc, #504]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d05b      	beq.n	8001398 <HAL_RCC_OscConfig+0x108>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d157      	bne.n	8001398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e242      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x74>
 80012f6:	4b76      	ldr	r3, [pc, #472]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a75      	ldr	r2, [pc, #468]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x98>
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6f      	ldr	r2, [pc, #444]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6c      	ldr	r2, [pc, #432]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001328:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a68      	ldr	r2, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc54 	bl	8000bf4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc50 	bl	8000bf4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e207      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xc0>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc40 	bl	8000bf4 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc3c 	bl	8000bf4 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1f3      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0xe8>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1c7      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4937      	ldr	r1, [pc, #220]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_RCC_OscConfig+0x244>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fbf5 	bl	8000bf4 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fbf1 	bl	8000bf4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1a8      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4925      	ldr	r1, [pc, #148]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_OscConfig+0x244>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fbd4 	bl	8000bf4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fbd0 	bl	8000bf4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e187      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d036      	beq.n	80014e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d016      	beq.n	80014b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_RCC_OscConfig+0x248>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fbb4 	bl	8000bf4 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fbb0 	bl	8000bf4 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e167      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80014a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x200>
 80014ae:	e01b      	b.n	80014e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_OscConfig+0x248>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb9d 	bl	8000bf4 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	e00e      	b.n	80014dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014be:	f7ff fb99 	bl	8000bf4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d907      	bls.n	80014dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e150      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	42470000 	.word	0x42470000
 80014d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ea      	bne.n	80014be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 8097 	beq.w	8001624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b81      	ldr	r3, [pc, #516]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10f      	bne.n	8001526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b7d      	ldr	r3, [pc, #500]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a7c      	ldr	r2, [pc, #496]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b77      	ldr	r3, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b74      	ldr	r3, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a73      	ldr	r2, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb59 	bl	8000bf4 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fb55 	bl	8000bf4 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e10c      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x2ea>
 800156c:	4b64      	ldr	r3, [pc, #400]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a63      	ldr	r2, [pc, #396]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
 8001578:	e01c      	b.n	80015b4 <HAL_RCC_OscConfig+0x324>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x30c>
 8001582:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a5e      	ldr	r2, [pc, #376]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6713      	str	r3, [r2, #112]	; 0x70
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0x324>
 800159c:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d015      	beq.n	80015e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb1a 	bl	8000bf4 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb16 	bl	8000bf4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0cb      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	4b49      	ldr	r3, [pc, #292]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0ee      	beq.n	80015c4 <HAL_RCC_OscConfig+0x334>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fb04 	bl	8000bf4 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb00 	bl	8000bf4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0b5      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ee      	bne.n	80015f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001618:	4b39      	ldr	r3, [pc, #228]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a38      	ldr	r2, [pc, #224]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800161e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80a1 	beq.w	8001770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d05c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d141      	bne.n	80016c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_RCC_OscConfig+0x478>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fad4 	bl	8000bf4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff fad0 	bl	8000bf4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e087      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	019b      	lsls	r3, r3, #6
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	3b01      	subs	r3, #1
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	491b      	ldr	r1, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x478>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff faa9 	bl	8000bf4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff faa5 	bl	8000bf4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e05c      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x416>
 80016c4:	e054      	b.n	8001770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_RCC_OscConfig+0x478>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fa92 	bl	8000bf4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fa8e 	bl	8000bf4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e045      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x444>
 80016f2:	e03d      	b.n	8001770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e038      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000
 8001708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x4ec>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d028      	beq.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d121      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d11a      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	4293      	cmp	r3, r2
 8001746:	d111      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	3b01      	subs	r3, #1
 8001756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0cc      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d90c      	bls.n	80017bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d044      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e067      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff f9c0 	bl	8000bf4 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff f9bc 	bl	8000bf4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e04f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d20c      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f844 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	0800686c 	.word	0x0800686c
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001950:	b094      	sub	sp, #80	; 0x50
 8001952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001964:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d00d      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x40>
 8001970:	2b08      	cmp	r3, #8
 8001972:	f200 80e1 	bhi.w	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x34>
 800197a:	2b04      	cmp	r3, #4
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x3a>
 800197e:	e0db      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001984:	e0db      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001986:	4b73      	ldr	r3, [pc, #460]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800198a:	e0d8      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198c:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001996:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	2200      	movs	r2, #0
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019be:	4622      	mov	r2, r4
 80019c0:	462b      	mov	r3, r5
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4621      	mov	r1, r4
 80019d8:	1a51      	subs	r1, r2, r1
 80019da:	6139      	str	r1, [r7, #16]
 80019dc:	4629      	mov	r1, r5
 80019de:	eb63 0301 	sbc.w	r3, r3, r1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f0:	4659      	mov	r1, fp
 80019f2:	018b      	lsls	r3, r1, #6
 80019f4:	4651      	mov	r1, sl
 80019f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fa:	4651      	mov	r1, sl
 80019fc:	018a      	lsls	r2, r1, #6
 80019fe:	4651      	mov	r1, sl
 8001a00:	ebb2 0801 	subs.w	r8, r2, r1
 8001a04:	4659      	mov	r1, fp
 8001a06:	eb63 0901 	sbc.w	r9, r3, r1
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1e:	4690      	mov	r8, r2
 8001a20:	4699      	mov	r9, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	eb18 0303 	adds.w	r3, r8, r3
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	eb49 0303 	adc.w	r3, r9, r3
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	024b      	lsls	r3, r1, #9
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a48:	4621      	mov	r1, r4
 8001a4a:	024a      	lsls	r2, r1, #9
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a52:	2200      	movs	r2, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a5c:	f7fe fbb8 	bl	80001d0 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	e058      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	4611      	mov	r1, r2
 8001a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a84:	4642      	mov	r2, r8
 8001a86:	464b      	mov	r3, r9
 8001a88:	f04f 0000 	mov.w	r0, #0
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	0159      	lsls	r1, r3, #5
 8001a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a96:	0150      	lsls	r0, r2, #5
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001abc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	00eb      	lsls	r3, r5, #3
 8001ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad2:	00e2      	lsls	r2, r4, #3
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	4643      	mov	r3, r8
 8001ada:	18e3      	adds	r3, r4, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	464b      	mov	r3, r9
 8001ae0:	eb45 0303 	adc.w	r3, r5, r3
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af2:	4629      	mov	r1, r5
 8001af4:	028b      	lsls	r3, r1, #10
 8001af6:	4621      	mov	r1, r4
 8001af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001afc:	4621      	mov	r1, r4
 8001afe:	028a      	lsls	r2, r1, #10
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b06:	2200      	movs	r2, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	61fa      	str	r2, [r7, #28]
 8001b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b10:	f7fe fb5e 	bl	80001d0 <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3750      	adds	r7, #80	; 0x50
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0a9b      	lsrs	r3, r3, #10
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	0800687c 	.word	0x0800687c

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	f7ff ffdc 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0b5b      	lsrs	r3, r3, #13
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	0800687c 	.word	0x0800687c

08001bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	220f      	movs	r2, #15
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_RCC_GetClockConfig+0x60>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0207 	and.w	r2, r3, #7
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e041      	b.n	8001cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f839 	bl	8001cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f9d8 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04e      	b.n	8001d8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d022      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1a:	d01d      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d018      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00e      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_TIM_Base_Start_IT+0xd4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d004      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d010      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7a:	e007      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40000800 	.word	0x40000800
 8001da8:	40000c00 	.word	0x40000c00
 8001dac:	40010400 	.word	0x40010400
 8001db0:	40014000 	.word	0x40014000
 8001db4:	40001800 	.word	0x40001800

08001db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0202 	mvn.w	r2, #2
 8001de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8ee 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8e0 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8f1 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0204 	mvn.w	r2, #4
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8c4 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8b6 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8c7 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0208 	mvn.w	r2, #8
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2204      	movs	r2, #4
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f89a 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f88c 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f89d 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0210 	mvn.w	r2, #16
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f870 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f862 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f873 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fca8 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f902 	bl	800216c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f838 	bl	8002004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0220 	mvn.w	r2, #32
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8cc 	bl	8002158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	; (800212c <TIM_Base_SetConfig+0x114>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d00f      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <TIM_Base_SetConfig+0x118>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00b      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <TIM_Base_SetConfig+0x11c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <TIM_Base_SetConfig+0x120>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3a      	ldr	r2, [pc, #232]	; (800213c <TIM_Base_SetConfig+0x124>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <TIM_Base_SetConfig+0x114>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d027      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <TIM_Base_SetConfig+0x118>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d023      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <TIM_Base_SetConfig+0x11c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2a      	ldr	r2, [pc, #168]	; (8002138 <TIM_Base_SetConfig+0x120>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a29      	ldr	r2, [pc, #164]	; (800213c <TIM_Base_SetConfig+0x124>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d017      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a28      	ldr	r2, [pc, #160]	; (8002140 <TIM_Base_SetConfig+0x128>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <TIM_Base_SetConfig+0x12c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00f      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <TIM_Base_SetConfig+0x130>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM_Base_SetConfig+0x134>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <TIM_Base_SetConfig+0x138>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d003      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a23      	ldr	r2, [pc, #140]	; (8002154 <TIM_Base_SetConfig+0x13c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d108      	bne.n	80020dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <TIM_Base_SetConfig+0x114>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0xf8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <TIM_Base_SetConfig+0x124>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800
 800214c:	40001800 	.word	0x40001800
 8002150:	40001c00 	.word	0x40001c00
 8002154:	40002000 	.word	0x40002000

08002158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e03f      	b.n	8002212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fbb4 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fc7b 	bl	8002ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0ba      	sub	sp, #232	; 0xe8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800224e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800225a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_UART_IRQHandler+0x66>
 800226e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fb65 	bl	800294a <UART_Receive_IT>
      return;
 8002280:	e256      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80de 	beq.w	8002448 <HAL_UART_IRQHandler+0x22c>
 800228c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80d1 	beq.w	8002448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_UART_IRQHandler+0xae>
 80022b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_UART_IRQHandler+0xd2>
 80022d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_UART_IRQHandler+0xf6>
 80022fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d011      	beq.n	8002342 <HAL_UART_IRQHandler+0x126>
 800231e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800232a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0208 	orr.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 81ed 	beq.w	8002726 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800234c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_UART_IRQHandler+0x14e>
 8002358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 faf0 	bl	800294a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_UART_IRQHandler+0x17a>
 800238e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d04f      	beq.n	8002436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9f8 	bl	800278c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d141      	bne.n	800242e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3314      	adds	r3, #20
 80023b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3314      	adds	r3, #20
 80023d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023e6:	e841 2300 	strex	r3, r2, [r1]
 80023ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1d9      	bne.n	80023aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d013      	beq.n	8002426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	4a7d      	ldr	r2, [pc, #500]	; (80025f8 <HAL_UART_IRQHandler+0x3dc>)
 8002404:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fd50 	bl	8000eb0 <HAL_DMA_Abort_IT>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002420:	4610      	mov	r0, r2
 8002422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	e00e      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f99a 	bl	8002760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	e00a      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f996 	bl	8002760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	e006      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f992 	bl	8002760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002442:	e170      	b.n	8002726 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	bf00      	nop
    return;
 8002446:	e16e      	b.n	8002726 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 814a 	bne.w	80026e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8143 	beq.w	80026e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 813c 	beq.w	80026e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	f040 80b4 	bne.w	80025fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8140 	beq.w	800272a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024b2:	429a      	cmp	r2, r3
 80024b4:	f080 8139 	bcs.w	800272a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	f000 8088 	beq.w	80025de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1d9      	bne.n	80024ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3314      	adds	r3, #20
 8002520:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800252a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3314      	adds	r3, #20
 800253a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800253e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002542:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002544:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002546:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800254a:	e841 2300 	strex	r3, r2, [r1]
 800254e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e1      	bne.n	800251a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002560:	e853 3f00 	ldrex	r3, [r3]
 8002564:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3314      	adds	r3, #20
 8002576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800257a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800257c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002580:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e3      	bne.n	8002556 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ae:	f023 0310 	bic.w	r3, r3, #16
 80025b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80025c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c8:	e841 2300 	strex	r3, r2, [r1]
 80025cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e3      	bne.n	800259c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fbf9 	bl	8000dd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8c0 	bl	8002774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025f4:	e099      	b.n	800272a <HAL_UART_IRQHandler+0x50e>
 80025f6:	bf00      	nop
 80025f8:	08002853 	.word	0x08002853
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002604:	b29b      	uxth	r3, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808b 	beq.w	800272e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8086 	beq.w	800272e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	e853 3f00 	ldrex	r3, [r3]
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002646:	647a      	str	r2, [r7, #68]	; 0x44
 8002648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800264c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e3      	bne.n	8002622 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3314      	adds	r3, #20
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	623b      	str	r3, [r7, #32]
   return(result);
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800267e:	633a      	str	r2, [r7, #48]	; 0x30
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002686:	e841 2300 	strex	r3, r2, [r1]
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e3      	bne.n	800265a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	e853 3f00 	ldrex	r3, [r3]
 80026ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0310 	bic.w	r3, r3, #16
 80026b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026c4:	61fa      	str	r2, [r7, #28]
 80026c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	69b9      	ldr	r1, [r7, #24]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	e841 2300 	strex	r3, r2, [r1]
 80026d0:	617b      	str	r3, [r7, #20]
   return(result);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e3      	bne.n	80026a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f848 	bl	8002774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026e4:	e023      	b.n	800272e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_UART_IRQHandler+0x4ea>
 80026f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8bb 	bl	800287a <UART_Transmit_IT>
    return;
 8002704:	e014      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00e      	beq.n	8002730 <HAL_UART_IRQHandler+0x514>
 8002712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8fb 	bl	800291a <UART_EndTransmit_IT>
    return;
 8002724:	e004      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
    return;
 8002726:	bf00      	nop
 8002728:	e002      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
      return;
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
      return;
 800272e:	bf00      	nop
  }
}
 8002730:	37e8      	adds	r7, #232	; 0xe8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop

08002738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800278c:	b480      	push	{r7}
 800278e:	b095      	sub	sp, #84	; 0x54
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	e853 3f00 	ldrex	r3, [r3]
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027b4:	643a      	str	r2, [r7, #64]	; 0x40
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027bc:	e841 2300 	strex	r3, r2, [r1]
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e5      	bne.n	8002794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b01      	cmp	r3, #1
 8002802:	d119      	bne.n	8002838 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	e853 3f00 	ldrex	r3, [r3]
 8002812:	60bb      	str	r3, [r7, #8]
   return(result);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f023 0310 	bic.w	r3, r3, #16
 800281a:	647b      	str	r3, [r7, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002824:	61ba      	str	r2, [r7, #24]
 8002826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6979      	ldr	r1, [r7, #20]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	e841 2300 	strex	r3, r2, [r1]
 8002830:	613b      	str	r3, [r7, #16]
   return(result);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e5      	bne.n	8002804 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002846:	bf00      	nop
 8002848:	3754      	adds	r7, #84	; 0x54
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ff77 	bl	8002760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b21      	cmp	r3, #33	; 0x21
 800288c:	d13e      	bne.n	800290c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d114      	bne.n	80028c2 <UART_Transmit_IT+0x48>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d110      	bne.n	80028c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	621a      	str	r2, [r3, #32]
 80028c0:	e008      	b.n	80028d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	1c59      	adds	r1, r3, #1
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6211      	str	r1, [r2, #32]
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4619      	mov	r1, r3
 80028e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002906:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002930:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fefc 	bl	8002738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b08c      	sub	sp, #48	; 0x30
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b22      	cmp	r3, #34	; 0x22
 800295c:	f040 80ab 	bne.w	8002ab6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002968:	d117      	bne.n	800299a <UART_Receive_IT+0x50>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d113      	bne.n	800299a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002988:	b29a      	uxth	r2, r3
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
 8002998:	e026      	b.n	80029e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d007      	beq.n	80029be <UART_Receive_IT+0x74>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <UART_Receive_IT+0x82>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e008      	b.n	80029de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4619      	mov	r1, r3
 80029f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d15a      	bne.n	8002ab2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0220 	bic.w	r2, r2, #32
 8002a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d135      	bne.n	8002aa8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	e853 3f00 	ldrex	r3, [r3]
 8002a50:	613b      	str	r3, [r7, #16]
   return(result);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f023 0310 	bic.w	r3, r3, #16
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	623a      	str	r2, [r7, #32]
 8002a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	69f9      	ldr	r1, [r7, #28]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e5      	bne.n	8002a42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d10a      	bne.n	8002a9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fe67 	bl	8002774 <HAL_UARTEx_RxEventCallback>
 8002aa6:	e002      	b.n	8002aae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff fe4f 	bl	800274c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e002      	b.n	8002ab8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e000      	b.n	8002ab8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3730      	adds	r7, #48	; 0x30
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac4:	b0c0      	sub	sp, #256	; 0x100
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	68d9      	ldr	r1, [r3, #12]
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	ea40 0301 	orr.w	r3, r0, r1
 8002ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b18:	f021 010c 	bic.w	r1, r1, #12
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b26:	430b      	orrs	r3, r1
 8002b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3a:	6999      	ldr	r1, [r3, #24]
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	ea40 0301 	orr.w	r3, r0, r1
 8002b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b8f      	ldr	r3, [pc, #572]	; (8002d8c <UART_SetConfig+0x2cc>)
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d005      	beq.n	8002b60 <UART_SetConfig+0xa0>
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <UART_SetConfig+0x2d0>)
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d104      	bne.n	8002b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff f81a 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8002b64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b68:	e003      	b.n	8002b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b6a:	f7ff f801 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8002b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7c:	f040 810c 	bne.w	8002d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	1891      	adds	r1, r2, r2
 8002b98:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b9a:	415b      	adcs	r3, r3
 8002b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	eb12 0801 	adds.w	r8, r2, r1
 8002ba8:	4629      	mov	r1, r5
 8002baa:	eb43 0901 	adc.w	r9, r3, r1
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc2:	4690      	mov	r8, r2
 8002bc4:	4699      	mov	r9, r3
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	eb18 0303 	adds.w	r3, r8, r3
 8002bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	eb49 0303 	adc.w	r3, r9, r3
 8002bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002be6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bee:	460b      	mov	r3, r1
 8002bf0:	18db      	adds	r3, r3, r3
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	eb42 0303 	adc.w	r3, r2, r3
 8002bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8002bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c04:	f7fd fae4 	bl	80001d0 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4b61      	ldr	r3, [pc, #388]	; (8002d94 <UART_SetConfig+0x2d4>)
 8002c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	011c      	lsls	r4, r3, #4
 8002c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	1891      	adds	r1, r2, r2
 8002c2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c30:	415b      	adcs	r3, r3
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c38:	4641      	mov	r1, r8
 8002c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c3e:	4649      	mov	r1, r9
 8002c40:	eb43 0b01 	adc.w	fp, r3, r1
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c58:	4692      	mov	sl, r2
 8002c5a:	469b      	mov	fp, r3
 8002c5c:	4643      	mov	r3, r8
 8002c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c66:	464b      	mov	r3, r9
 8002c68:	eb4b 0303 	adc.w	r3, fp, r3
 8002c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c84:	460b      	mov	r3, r1
 8002c86:	18db      	adds	r3, r3, r3
 8002c88:	643b      	str	r3, [r7, #64]	; 0x40
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
 8002c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c9a:	f7fd fa99 	bl	80001d0 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <UART_SetConfig+0x2d4>)
 8002ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2264      	movs	r2, #100	; 0x64
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1acb      	subs	r3, r1, r3
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <UART_SetConfig+0x2d4>)
 8002cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc8:	441c      	add	r4, r3
 8002cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cdc:	4642      	mov	r2, r8
 8002cde:	464b      	mov	r3, r9
 8002ce0:	1891      	adds	r1, r2, r2
 8002ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ce4:	415b      	adcs	r3, r3
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cec:	4641      	mov	r1, r8
 8002cee:	1851      	adds	r1, r2, r1
 8002cf0:	6339      	str	r1, [r7, #48]	; 0x30
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	414b      	adcs	r3, r1
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d04:	4659      	mov	r1, fp
 8002d06:	00cb      	lsls	r3, r1, #3
 8002d08:	4651      	mov	r1, sl
 8002d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0e:	4651      	mov	r1, sl
 8002d10:	00ca      	lsls	r2, r1, #3
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	4642      	mov	r2, r8
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d20:	464b      	mov	r3, r9
 8002d22:	460a      	mov	r2, r1
 8002d24:	eb42 0303 	adc.w	r3, r2, r3
 8002d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d40:	460b      	mov	r3, r1
 8002d42:	18db      	adds	r3, r3, r3
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d46:	4613      	mov	r3, r2
 8002d48:	eb42 0303 	adc.w	r3, r2, r3
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d56:	f7fd fa3b 	bl	80001d0 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <UART_SetConfig+0x2d4>)
 8002d60:	fba3 1302 	umull	r1, r3, r3, r2
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	2164      	movs	r1, #100	; 0x64
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3332      	adds	r3, #50	; 0x32
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <UART_SetConfig+0x2d4>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	f003 0207 	and.w	r2, r3, #7
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4422      	add	r2, r4
 8002d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d88:	e105      	b.n	8002f96 <UART_SetConfig+0x4d6>
 8002d8a:	bf00      	nop
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40011400 	.word	0x40011400
 8002d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002da2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002daa:	4642      	mov	r2, r8
 8002dac:	464b      	mov	r3, r9
 8002dae:	1891      	adds	r1, r2, r2
 8002db0:	6239      	str	r1, [r7, #32]
 8002db2:	415b      	adcs	r3, r3
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
 8002db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dba:	4641      	mov	r1, r8
 8002dbc:	1854      	adds	r4, r2, r1
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	eb43 0501 	adc.w	r5, r3, r1
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	00eb      	lsls	r3, r5, #3
 8002dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd2:	00e2      	lsls	r2, r4, #3
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	4643      	mov	r3, r8
 8002dda:	18e3      	adds	r3, r4, r3
 8002ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002de0:	464b      	mov	r3, r9
 8002de2:	eb45 0303 	adc.w	r3, r5, r3
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e06:	4629      	mov	r1, r5
 8002e08:	008b      	lsls	r3, r1, #2
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e10:	4621      	mov	r1, r4
 8002e12:	008a      	lsls	r2, r1, #2
 8002e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e18:	f7fd f9da 	bl	80001d0 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <UART_SetConfig+0x4e4>)
 8002e22:	fba3 2302 	umull	r2, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	011c      	lsls	r4, r3, #4
 8002e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	61b9      	str	r1, [r7, #24]
 8002e44:	415b      	adcs	r3, r3
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	1851      	adds	r1, r2, r1
 8002e50:	6139      	str	r1, [r7, #16]
 8002e52:	4649      	mov	r1, r9
 8002e54:	414b      	adcs	r3, r1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e64:	4659      	mov	r1, fp
 8002e66:	00cb      	lsls	r3, r1, #3
 8002e68:	4651      	mov	r1, sl
 8002e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e6e:	4651      	mov	r1, sl
 8002e70:	00ca      	lsls	r2, r1, #3
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	4642      	mov	r2, r8
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e80:	464b      	mov	r3, r9
 8002e82:	460a      	mov	r2, r1
 8002e84:	eb42 0303 	adc.w	r3, r2, r3
 8002e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	008b      	lsls	r3, r1, #2
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eae:	4641      	mov	r1, r8
 8002eb0:	008a      	lsls	r2, r1, #2
 8002eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eb6:	f7fd f98b 	bl	80001d0 <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <UART_SetConfig+0x4e4>)
 8002ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	2164      	movs	r1, #100	; 0x64
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	3332      	adds	r3, #50	; 0x32
 8002ed2:	4a34      	ldr	r2, [pc, #208]	; (8002fa4 <UART_SetConfig+0x4e4>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ede:	441c      	add	r4, r3
 8002ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ee8:	677a      	str	r2, [r7, #116]	; 0x74
 8002eea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002efe:	4641      	mov	r1, r8
 8002f00:	1851      	adds	r1, r2, r1
 8002f02:	6039      	str	r1, [r7, #0]
 8002f04:	4649      	mov	r1, r9
 8002f06:	414b      	adcs	r3, r1
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f16:	4659      	mov	r1, fp
 8002f18:	00cb      	lsls	r3, r1, #3
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f20:	4651      	mov	r1, sl
 8002f22:	00ca      	lsls	r2, r1, #3
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4642      	mov	r2, r8
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f30:	464b      	mov	r3, r9
 8002f32:	460a      	mov	r2, r1
 8002f34:	eb42 0303 	adc.w	r3, r2, r3
 8002f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	663b      	str	r3, [r7, #96]	; 0x60
 8002f44:	667a      	str	r2, [r7, #100]	; 0x64
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f52:	4649      	mov	r1, r9
 8002f54:	008b      	lsls	r3, r1, #2
 8002f56:	4641      	mov	r1, r8
 8002f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	008a      	lsls	r2, r1, #2
 8002f60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f64:	f7fd f934 	bl	80001d0 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <UART_SetConfig+0x4e4>)
 8002f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2164      	movs	r1, #100	; 0x64
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	3332      	adds	r3, #50	; 0x32
 8002f80:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <UART_SetConfig+0x4e4>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4422      	add	r2, r4
 8002f94:	609a      	str	r2, [r3, #8]
}
 8002f96:	bf00      	nop
 8002f98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa2:	bf00      	nop
 8002fa4:	51eb851f 	.word	0x51eb851f

08002fa8 <__NVIC_SetPriority>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SysTick_Handler+0x1c>)
 8003002:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003004:	f002 f968 	bl	80052d8 <xTaskGetSchedulerState>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800300e:	f003 f84b 	bl	80060a8 <xPortSysTickHandler>
  }
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000e010 	.word	0xe000e010

0800301c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003020:	2100      	movs	r1, #0
 8003022:	f06f 0004 	mvn.w	r0, #4
 8003026:	f7ff ffbf 	bl	8002fa8 <__NVIC_SetPriority>
#endif
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003036:	f3ef 8305 	mrs	r3, IPSR
 800303a:	603b      	str	r3, [r7, #0]
  return(result);
 800303c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003042:	f06f 0305 	mvn.w	r3, #5
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	e00c      	b.n	8003064 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <osKernelInitialize+0x44>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <osKernelInitialize+0x44>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003058:	2300      	movs	r3, #0
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	e002      	b.n	8003064 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003064:	687b      	ldr	r3, [r7, #4]
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000130 	.word	0x20000130

08003078 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800307e:	f3ef 8305 	mrs	r3, IPSR
 8003082:	603b      	str	r3, [r7, #0]
  return(result);
 8003084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <osKernelStart+0x1a>
    stat = osErrorISR;
 800308a:	f06f 0305 	mvn.w	r3, #5
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	e010      	b.n	80030b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <osKernelStart+0x48>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d109      	bne.n	80030ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800309a:	f7ff ffbf 	bl	800301c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <osKernelStart+0x48>)
 80030a0:	2202      	movs	r2, #2
 80030a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030a4:	f001 fcbc 	bl	8004a20 <vTaskStartScheduler>
      stat = osOK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	e002      	b.n	80030b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030b4:	687b      	ldr	r3, [r7, #4]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000130 	.word	0x20000130

080030c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08e      	sub	sp, #56	; 0x38
 80030c8:	af04      	add	r7, sp, #16
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030d4:	f3ef 8305 	mrs	r3, IPSR
 80030d8:	617b      	str	r3, [r7, #20]
  return(result);
 80030da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d17e      	bne.n	80031de <osThreadNew+0x11a>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d07b      	beq.n	80031de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030ea:	2318      	movs	r3, #24
 80030ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d045      	beq.n	800318a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <osThreadNew+0x48>
        name = attr->name;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <osThreadNew+0x6e>
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b38      	cmp	r3, #56	; 0x38
 8003124:	d805      	bhi.n	8003132 <osThreadNew+0x6e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <osThreadNew+0x72>
        return (NULL);
 8003132:	2300      	movs	r3, #0
 8003134:	e054      	b.n	80031e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00e      	beq.n	800316c <osThreadNew+0xa8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2bbb      	cmp	r3, #187	; 0xbb
 8003154:	d90a      	bls.n	800316c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <osThreadNew+0xa8>
        mem = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e010      	b.n	800318e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10c      	bne.n	800318e <osThreadNew+0xca>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d108      	bne.n	800318e <osThreadNew+0xca>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <osThreadNew+0xca>
          mem = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	e001      	b.n	800318e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d110      	bne.n	80031b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800319c:	9202      	str	r2, [sp, #8]
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f001 fa4c 	bl	8004648 <xTaskCreateStatic>
 80031b0:	4603      	mov	r3, r0
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e013      	b.n	80031de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d110      	bne.n	80031de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f001 fa97 	bl	8004702 <xTaskCreate>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d001      	beq.n	80031de <osThreadNew+0x11a>
            hTask = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031de:	693b      	ldr	r3, [r7, #16]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f0:	f3ef 8305 	mrs	r3, IPSR
 80031f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <osDelay+0x1c>
    stat = osErrorISR;
 80031fc:	f06f 0305 	mvn.w	r3, #5
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e007      	b.n	8003214 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <osDelay+0x2c>
      vTaskDelay(ticks);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f001 fbd2 	bl	80049b8 <vTaskDelay>
    }
  }

  return (stat);
 8003214:	68fb      	ldr	r3, [r7, #12]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800321e:	b580      	push	{r7, lr}
 8003220:	b08a      	sub	sp, #40	; 0x28
 8003222:	af02      	add	r7, sp, #8
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800322e:	f3ef 8305 	mrs	r3, IPSR
 8003232:	613b      	str	r3, [r7, #16]
  return(result);
 8003234:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003236:	2b00      	cmp	r3, #0
 8003238:	d175      	bne.n	8003326 <osSemaphoreNew+0x108>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d072      	beq.n	8003326 <osSemaphoreNew+0x108>
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d86e      	bhi.n	8003326 <osSemaphoreNew+0x108>
    mem = -1;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
 800324c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <osSemaphoreNew+0x4c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b4f      	cmp	r3, #79	; 0x4f
 8003262:	d902      	bls.n	800326a <osSemaphoreNew+0x4c>
        mem = 1;
 8003264:	2301      	movs	r3, #1
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e00c      	b.n	8003284 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <osSemaphoreNew+0x66>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <osSemaphoreNew+0x66>
          mem = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e001      	b.n	8003284 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d04c      	beq.n	8003326 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d128      	bne.n	80032e4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10a      	bne.n	80032ae <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2203      	movs	r2, #3
 800329e:	9200      	str	r2, [sp, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2100      	movs	r1, #0
 80032a4:	2001      	movs	r0, #1
 80032a6:	f000 fa29 	bl	80036fc <xQueueGenericCreateStatic>
 80032aa:	61f8      	str	r0, [r7, #28]
 80032ac:	e005      	b.n	80032ba <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80032ae:	2203      	movs	r2, #3
 80032b0:	2100      	movs	r1, #0
 80032b2:	2001      	movs	r0, #1
 80032b4:	f000 fa9a 	bl	80037ec <xQueueGenericCreate>
 80032b8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d022      	beq.n	8003306 <osSemaphoreNew+0xe8>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01f      	beq.n	8003306 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80032c6:	2300      	movs	r3, #0
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	69f8      	ldr	r0, [r7, #28]
 80032ce:	f000 fb55 	bl	800397c <xQueueGenericSend>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d016      	beq.n	8003306 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80032d8:	69f8      	ldr	r0, [r7, #28]
 80032da:	f000 ffe1 	bl	80042a0 <vQueueDelete>
            hSemaphore = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e010      	b.n	8003306 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fad7 	bl	80038a6 <xQueueCreateCountingSemaphoreStatic>
 80032f8:	61f8      	str	r0, [r7, #28]
 80032fa:	e004      	b.n	8003306 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fb08 	bl	8003914 <xQueueCreateCountingSemaphore>
 8003304:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <osSemaphoreNew+0xfc>
          name = attr->name;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e001      	b.n	800331e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800331e:	6979      	ldr	r1, [r7, #20]
 8003320:	69f8      	ldr	r0, [r7, #28]
 8003322:	f001 f909 	bl	8004538 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003326:	69fb      	ldr	r3, [r7, #28]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003348:	f06f 0303 	mvn.w	r3, #3
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e039      	b.n	80033c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003350:	f3ef 8305 	mrs	r3, IPSR
 8003354:	60fb      	str	r3, [r7, #12]
  return(result);
 8003356:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003358:	2b00      	cmp	r3, #0
 800335a:	d022      	beq.n	80033a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003362:	f06f 0303 	mvn.w	r3, #3
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e02c      	b.n	80033c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800336e:	f107 0308 	add.w	r3, r7, #8
 8003372:	461a      	mov	r2, r3
 8003374:	2100      	movs	r1, #0
 8003376:	6938      	ldr	r0, [r7, #16]
 8003378:	f000 ff12 	bl	80041a0 <xQueueReceiveFromISR>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d003      	beq.n	800338a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003382:	f06f 0302 	mvn.w	r3, #2
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e01c      	b.n	80033c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d019      	beq.n	80033c4 <osSemaphoreAcquire+0x94>
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <osSemaphoreAcquire+0xa0>)
 8003392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	e010      	b.n	80033c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	6938      	ldr	r0, [r7, #16]
 80033a6:	f000 fdef 	bl	8003f88 <xQueueSemaphoreTake>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d009      	beq.n	80033c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80033b6:	f06f 0301 	mvn.w	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e002      	b.n	80033c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80033be:	f06f 0302 	mvn.w	r3, #2
 80033c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80033c4:	697b      	ldr	r3, [r7, #20]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80033ea:	f06f 0303 	mvn.w	r3, #3
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e02c      	b.n	800344c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033f2:	f3ef 8305 	mrs	r3, IPSR
 80033f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80033f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01a      	beq.n	8003434 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	4619      	mov	r1, r3
 8003408:	6938      	ldr	r0, [r7, #16]
 800340a:	f000 fc50 	bl	8003cae <xQueueGiveFromISR>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d003      	beq.n	800341c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003414:	f06f 0302 	mvn.w	r3, #2
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e017      	b.n	800344c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d014      	beq.n	800344c <osSemaphoreRelease+0x78>
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <osSemaphoreRelease+0x84>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	e00b      	b.n	800344c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003434:	2300      	movs	r3, #0
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	6938      	ldr	r0, [r7, #16]
 800343c:	f000 fa9e 	bl	800397c <xQueueGenericSend>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003446:	f06f 0302 	mvn.w	r3, #2
 800344a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800344c:	697b      	ldr	r3, [r7, #20]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <vApplicationGetIdleTaskMemory+0x2c>)
 800346c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a06      	ldr	r2, [pc, #24]	; (800348c <vApplicationGetIdleTaskMemory+0x30>)
 8003472:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	601a      	str	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000134 	.word	0x20000134
 800348c:	200001f0 	.word	0x200001f0

08003490 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <vApplicationGetTimerTaskMemory+0x2c>)
 80034a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <vApplicationGetTimerTaskMemory+0x30>)
 80034a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ae:	601a      	str	r2, [r3, #0]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	200003f0 	.word	0x200003f0
 80034c0:	200004ac 	.word	0x200004ac

080034c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f103 0208 	add.w	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f103 0208 	add.w	r2, r3, #8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f103 0208 	add.w	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d103      	bne.n	8003586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e00c      	b.n	80035a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3308      	adds	r3, #8
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e002      	b.n	8003594 <vListInsert+0x2e>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d2f6      	bcs.n	800358e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6892      	ldr	r2, [r2, #8]
 80035ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d103      	bne.n	800360c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003656:	f002 fc95 	bl	8005f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	441a      	add	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	3b01      	subs	r3, #1
 8003688:	68f9      	ldr	r1, [r7, #12]
 800368a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d114      	bne.n	80036d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01a      	beq.n	80036ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3310      	adds	r3, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fc4b 	bl	8004f54 <xTaskRemoveFromEventList>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d012      	beq.n	80036ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <xQueueGenericReset+0xcc>)
 80036c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	e009      	b.n	80036ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3310      	adds	r3, #16
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fef2 	bl	80034c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3324      	adds	r3, #36	; 0x24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff feed 	bl	80034c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036ea:	f002 fc7b 	bl	8005fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08e      	sub	sp, #56	; 0x38
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <xQueueGenericCreateStatic+0x52>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <xQueueGenericCreateStatic+0x56>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <xQueueGenericCreateStatic+0x58>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	623b      	str	r3, [r7, #32]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xQueueGenericCreateStatic+0x7e>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueGenericCreateStatic+0x82>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueGenericCreateStatic+0x84>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	61fb      	str	r3, [r7, #28]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800379a:	2350      	movs	r3, #80	; 0x50
 800379c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b50      	cmp	r3, #80	; 0x50
 80037a2:	d00a      	beq.n	80037ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61bb      	str	r3, [r7, #24]
}
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f83f 	bl	8003860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3730      	adds	r7, #48	; 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	613b      	str	r3, [r7, #16]
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3350      	adds	r3, #80	; 0x50
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fccf 	bl	80061c8 <pvPortMalloc>
 800382a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d011      	beq.n	8003856 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3350      	adds	r3, #80	; 0x50
 800383a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003844:	79fa      	ldrb	r2, [r7, #7]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f805 	bl	8003860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003856:	69bb      	ldr	r3, [r7, #24]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d103      	bne.n	800387c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e002      	b.n	8003882 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800388e:	2101      	movs	r1, #1
 8003890:	69b8      	ldr	r0, [r7, #24]
 8003892:	f7ff fecb 	bl	800362c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	; 0x28
 80038aa:	af02      	add	r7, sp, #8
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	61bb      	str	r3, [r7, #24]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d90a      	bls.n	80038ec <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	617b      	str	r3, [r7, #20]
}
 80038e8:	bf00      	nop
 80038ea:	e7fe      	b.n	80038ea <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038ec:	2302      	movs	r3, #2
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	2100      	movs	r1, #0
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff ff00 	bl	80036fc <xQueueGenericCreateStatic>
 80038fc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800390a:	69fb      	ldr	r3, [r7, #28]
	}
 800390c:	4618      	mov	r0, r3
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	613b      	str	r3, [r7, #16]
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	d90a      	bls.n	8003958 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	60fb      	str	r3, [r7, #12]
}
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003958:	2202      	movs	r2, #2
 800395a:	2100      	movs	r1, #0
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff45 	bl	80037ec <xQueueGenericCreate>
 8003962:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003970:	697b      	ldr	r3, [r7, #20]
	}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08e      	sub	sp, #56	; 0x38
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800398a:	2300      	movs	r3, #0
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericSend+0x32>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <xQueueGenericSend+0x40>
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <xQueueGenericSend+0x44>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <xQueueGenericSend+0x46>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <xQueueGenericSend+0x60>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSend+0x6e>
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <xQueueGenericSend+0x72>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericSend+0x74>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a0a:	f001 fc65 	bl	80052d8 <xTaskGetSchedulerState>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <xQueueGenericSend+0x9e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <xQueueGenericSend+0xa2>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xQueueGenericSend+0xa4>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	61fb      	str	r3, [r7, #28]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a3a:	f002 faa3 	bl	8005f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <xQueueGenericSend+0xd4>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d129      	bne.n	8003aa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a56:	f000 fc5e 	bl	8004316 <prvCopyDataToQueue>
 8003a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	3324      	adds	r3, #36	; 0x24
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 fa73 	bl	8004f54 <xTaskRemoveFromEventList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a74:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <xQueueGenericSend+0x1f8>)
 8003a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	e00a      	b.n	8003a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d007      	beq.n	8003a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <xQueueGenericSend+0x1f8>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a9c:	f002 faa2 	bl	8005fe4 <vPortExitCritical>
				return pdPASS;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e063      	b.n	8003b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aaa:	f002 fa9b 	bl	8005fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e05c      	b.n	8003b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 faad 	bl	800501c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac6:	f002 fa8d 	bl	8005fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aca:	f001 f819 	bl	8004b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ace:	f002 fa59 	bl	8005f84 <vPortEnterCritical>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d103      	bne.n	8003ae8 <xQueueGenericSend+0x16c>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d103      	bne.n	8003afe <xQueueGenericSend+0x182>
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003afe:	f002 fa71 	bl	8005fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b02:	1d3a      	adds	r2, r7, #4
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fa9c 	bl	8005048 <xTaskCheckForTimeOut>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d124      	bne.n	8003b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b18:	f000 fcf5 	bl	8004506 <prvIsQueueFull>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	3310      	adds	r3, #16
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9c2 	bl	8004eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b32:	f000 fc80 	bl	8004436 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b36:	f000 fff1 	bl	8004b1c <xTaskResumeAll>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f47f af7c 	bne.w	8003a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <xQueueGenericSend+0x1f8>)
 8003b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	e772      	b.n	8003a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b56:	f000 fc6e 	bl	8004436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b5a:	f000 ffdf 	bl	8004b1c <xTaskResumeAll>
 8003b5e:	e76c      	b.n	8003a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b62:	f000 fc68 	bl	8004436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b66:	f000 ffd9 	bl	8004b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3738      	adds	r7, #56	; 0x38
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b090      	sub	sp, #64	; 0x40
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <xQueueGenericSendFromISR+0x3c>
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <xQueueGenericSendFromISR+0x40>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <xQueueGenericSendFromISR+0x42>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d103      	bne.n	8003be2 <xQueueGenericSendFromISR+0x6a>
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <xQueueGenericSendFromISR+0x6e>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <xQueueGenericSendFromISR+0x70>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	623b      	str	r3, [r7, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c02:	f002 faa1 	bl	8006148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c06:	f3ef 8211 	mrs	r2, BASEPRI
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61fa      	str	r2, [r7, #28]
 8003c1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <xQueueGenericSendFromISR+0xbc>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d12f      	bne.n	8003c94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c4a:	f000 fb64 	bl	8004316 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d112      	bne.n	8003c7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d016      	beq.n	8003c8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	3324      	adds	r3, #36	; 0x24
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 f975 	bl	8004f54 <xTaskRemoveFromEventList>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00e      	beq.n	8003c8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e007      	b.n	8003c8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c82:	3301      	adds	r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b25a      	sxtb	r2, r3
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c92:	e001      	b.n	8003c98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3740      	adds	r7, #64	; 0x40
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08e      	sub	sp, #56	; 0x38
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	623b      	str	r3, [r7, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	61fb      	str	r3, [r7, #28]
}
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <xQueueGiveFromISR+0x58>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <xQueueGiveFromISR+0x5c>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <xQueueGiveFromISR+0x5e>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	61bb      	str	r3, [r7, #24]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d26:	f002 fa0f 	bl	8006148 <vPortValidateInterruptPriority>
	__asm volatile
 8003d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	617a      	str	r2, [r7, #20]
 8003d40:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003d42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d22b      	bcs.n	8003dae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d112      	bne.n	8003d98 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	3324      	adds	r3, #36	; 0x24
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 f8e8 	bl	8004f54 <xTaskRemoveFromEventList>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e007      	b.n	8003da8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	b25a      	sxtb	r2, r3
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003da8:	2301      	movs	r3, #1
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
 8003dac:	e001      	b.n	8003db2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f383 8811 	msr	BASEPRI, r3
}
 8003dbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3738      	adds	r7, #56	; 0x38
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xQueueReceive+0x30>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	623b      	str	r3, [r7, #32]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <xQueueReceive+0x3e>
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <xQueueReceive+0x42>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueReceive+0x44>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueReceive+0x5e>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61fb      	str	r3, [r7, #28]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e26:	f001 fa57 	bl	80052d8 <xTaskGetSchedulerState>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <xQueueReceive+0x6e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <xQueueReceive+0x72>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueReceive+0x74>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xQueueReceive+0x8e>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	61bb      	str	r3, [r7, #24]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e56:	f002 f895 	bl	8005f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01f      	beq.n	8003ea6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6a:	f000 fabe 	bl	80043ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00f      	beq.n	8003e9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	3310      	adds	r3, #16
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 f866 	bl	8004f54 <xTaskRemoveFromEventList>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <xQueueReceive+0x1bc>)
 8003e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e9e:	f002 f8a1 	bl	8005fe4 <vPortExitCritical>
				return pdPASS;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e069      	b.n	8003f7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eac:	f002 f89a 	bl	8005fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e062      	b.n	8003f7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eba:	f107 0310 	add.w	r3, r7, #16
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 f8ac 	bl	800501c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ec8:	f002 f88c 	bl	8005fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ecc:	f000 fe18 	bl	8004b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ed0:	f002 f858 	bl	8005f84 <vPortEnterCritical>
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d103      	bne.n	8003eea <xQueueReceive+0x122>
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef0:	b25b      	sxtb	r3, r3
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d103      	bne.n	8003f00 <xQueueReceive+0x138>
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f00:	f002 f870 	bl	8005fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f04:	1d3a      	adds	r2, r7, #4
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 f89b 	bl	8005048 <xTaskCheckForTimeOut>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d123      	bne.n	8003f60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1a:	f000 fade 	bl	80044da <prvIsQueueEmpty>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 ffc1 	bl	8004eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f34:	f000 fa7f 	bl	8004436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f38:	f000 fdf0 	bl	8004b1c <xTaskResumeAll>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d189      	bne.n	8003e56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <xQueueReceive+0x1bc>)
 8003f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	e780      	b.n	8003e56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f56:	f000 fa6e 	bl	8004436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f5a:	f000 fddf 	bl	8004b1c <xTaskResumeAll>
 8003f5e:	e77a      	b.n	8003e56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f62:	f000 fa68 	bl	8004436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f66:	f000 fdd9 	bl	8004b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6c:	f000 fab5 	bl	80044da <prvIsQueueEmpty>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f43f af6f 	beq.w	8003e56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3730      	adds	r7, #48	; 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08e      	sub	sp, #56	; 0x38
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	61fb      	str	r3, [r7, #28]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fd8:	f001 f97e 	bl	80052d8 <xTaskGetSchedulerState>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <xQueueSemaphoreTake+0x60>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <xQueueSemaphoreTake+0x64>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <xQueueSemaphoreTake+0x66>
 8003fec:	2300      	movs	r3, #0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	61bb      	str	r3, [r7, #24]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004008:	f001 ffbc 	bl	8005f84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d024      	beq.n	8004062 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004028:	f001 facc 	bl	80055c4 <pvTaskIncrementMutexHeldCount>
 800402c:	4602      	mov	r2, r0
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00f      	beq.n	800405a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	3310      	adds	r3, #16
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ff88 	bl	8004f54 <xTaskRemoveFromEventList>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800404a:	4b54      	ldr	r3, [pc, #336]	; (800419c <xQueueSemaphoreTake+0x214>)
 800404c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800405a:	f001 ffc3 	bl	8005fe4 <vPortExitCritical>
				return pdPASS;
 800405e:	2301      	movs	r3, #1
 8004060:	e097      	b.n	8004192 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d111      	bne.n	800408c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	617b      	str	r3, [r7, #20]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004084:	f001 ffae 	bl	8005fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004088:	2300      	movs	r3, #0
 800408a:	e082      	b.n	8004192 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800408c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	4618      	mov	r0, r3
 8004098:	f000 ffc0 	bl	800501c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040a0:	f001 ffa0 	bl	8005fe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040a4:	f000 fd2c 	bl	8004b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040a8:	f001 ff6c 	bl	8005f84 <vPortEnterCritical>
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <xQueueSemaphoreTake+0x13a>
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d103      	bne.n	80040d8 <xQueueSemaphoreTake+0x150>
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d8:	f001 ff84 	bl	8005fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040dc:	463a      	mov	r2, r7
 80040de:	f107 030c 	add.w	r3, r7, #12
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 ffaf 	bl	8005048 <xTaskCheckForTimeOut>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d132      	bne.n	8004156 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040f2:	f000 f9f2 	bl	80044da <prvIsQueueEmpty>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d026      	beq.n	800414a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004104:	f001 ff3e 	bl	8005f84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f901 	bl	8005314 <xTaskPriorityInherit>
 8004112:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004114:	f001 ff66 	bl	8005fe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	3324      	adds	r3, #36	; 0x24
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fec7 	bl	8004eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004128:	f000 f985 	bl	8004436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800412c:	f000 fcf6 	bl	8004b1c <xTaskResumeAll>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	f47f af68 	bne.w	8004008 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <xQueueSemaphoreTake+0x214>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	e75e      	b.n	8004008 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800414a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800414c:	f000 f973 	bl	8004436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004150:	f000 fce4 	bl	8004b1c <xTaskResumeAll>
 8004154:	e758      	b.n	8004008 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004158:	f000 f96d 	bl	8004436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800415c:	f000 fcde 	bl	8004b1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004162:	f000 f9ba 	bl	80044da <prvIsQueueEmpty>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f43f af4d 	beq.w	8004008 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004174:	f001 ff06 	bl	8005f84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800417a:	f000 f8b4 	bl	80042e6 <prvGetDisinheritPriorityAfterTimeout>
 800417e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004186:	4618      	mov	r0, r3
 8004188:	f001 f99a 	bl	80054c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800418c:	f001 ff2a 	bl	8005fe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004192:	4618      	mov	r0, r3
 8004194:	3738      	adds	r7, #56	; 0x38
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	623b      	str	r3, [r7, #32]
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <xQueueReceiveFromISR+0x3a>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <xQueueReceiveFromISR+0x3e>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <xQueueReceiveFromISR+0x40>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	61fb      	str	r3, [r7, #28]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041fa:	f001 ffa5 	bl	8006148 <vPortValidateInterruptPriority>
	__asm volatile
 80041fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	61ba      	str	r2, [r7, #24]
 8004214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02f      	beq.n	8004286 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004234:	f000 f8d9 	bl	80043ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	1e5a      	subs	r2, r3, #1
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d112      	bne.n	8004270 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	3310      	adds	r3, #16
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fe7c 	bl	8004f54 <xTaskRemoveFromEventList>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00e      	beq.n	8004280 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e007      	b.n	8004280 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004274:	3301      	adds	r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	b25a      	sxtb	r2, r3
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004280:	2301      	movs	r3, #1
 8004282:	637b      	str	r3, [r7, #52]	; 0x34
 8004284:	e001      	b.n	800428a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004286:	2300      	movs	r3, #0
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f383 8811 	msr	BASEPRI, r3
}
 8004294:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004298:	4618      	mov	r0, r3
 800429a:	3738      	adds	r7, #56	; 0x38
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <vQueueDelete+0x28>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60bb      	str	r3, [r7, #8]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f95f 	bl	800458c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f002 f841 	bl	8006360 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	e001      	b.n	8004308 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004308:	68fb      	ldr	r3, [r7, #12]
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d14d      	bne.n	80043d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4618      	mov	r0, r3
 8004342:	f001 f84f 	bl	80053e4 <xTaskPriorityDisinherit>
 8004346:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	e043      	b.n	80043d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d119      	bne.n	800438a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6858      	ldr	r0, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	461a      	mov	r2, r3
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	f002 f941 	bl	80065e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	441a      	add	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	d32b      	bcc.n	80043d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	e026      	b.n	80043d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68d8      	ldr	r0, [r3, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	461a      	mov	r2, r3
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	f002 f927 	bl	80065e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	425b      	negs	r3, r3
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d207      	bcs.n	80043c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	425b      	negs	r3, r3
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d105      	bne.n	80043d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043e0:	697b      	ldr	r3, [r7, #20]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d018      	beq.n	800442e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d303      	bcc.n	800441e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	461a      	mov	r2, r3
 8004428:	6838      	ldr	r0, [r7, #0]
 800442a:	f002 f8dd 	bl	80065e8 <memcpy>
	}
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800443e:	f001 fda1 	bl	8005f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004448:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800444a:	e011      	b.n	8004470 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d012      	beq.n	800447a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3324      	adds	r3, #36	; 0x24
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fd7b 	bl	8004f54 <xTaskRemoveFromEventList>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004464:	f000 fe52 	bl	800510c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	3b01      	subs	r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	dce9      	bgt.n	800444c <prvUnlockQueue+0x16>
 8004478:	e000      	b.n	800447c <prvUnlockQueue+0x46>
					break;
 800447a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	22ff      	movs	r2, #255	; 0xff
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004484:	f001 fdae 	bl	8005fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004488:	f001 fd7c 	bl	8005f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004492:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004494:	e011      	b.n	80044ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d012      	beq.n	80044c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3310      	adds	r3, #16
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fd56 	bl	8004f54 <xTaskRemoveFromEventList>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044ae:	f000 fe2d 	bl	800510c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044b2:	7bbb      	ldrb	r3, [r7, #14]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	dce9      	bgt.n	8004496 <prvUnlockQueue+0x60>
 80044c2:	e000      	b.n	80044c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	22ff      	movs	r2, #255	; 0xff
 80044ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044ce:	f001 fd89 	bl	8005fe4 <vPortExitCritical>
}
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044e2:	f001 fd4f 	bl	8005f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e001      	b.n	80044f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044f8:	f001 fd74 	bl	8005fe4 <vPortExitCritical>

	return xReturn;
 80044fc:	68fb      	ldr	r3, [r7, #12]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800450e:	f001 fd39 	bl	8005f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	429a      	cmp	r2, r3
 800451c:	d102      	bne.n	8004524 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800451e:	2301      	movs	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e001      	b.n	8004528 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004528:	f001 fd5c 	bl	8005fe4 <vPortExitCritical>

	return xReturn;
 800452c:	68fb      	ldr	r3, [r7, #12]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e014      	b.n	8004572 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004548:	4a0f      	ldr	r2, [pc, #60]	; (8004588 <vQueueAddToRegistry+0x50>)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004554:	490c      	ldr	r1, [pc, #48]	; (8004588 <vQueueAddToRegistry+0x50>)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <vQueueAddToRegistry+0x50>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4413      	add	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800456a:	e006      	b.n	800457a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b07      	cmp	r3, #7
 8004576:	d9e7      	bls.n	8004548 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	200008ac 	.word	0x200008ac

0800458c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e016      	b.n	80045c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800459a:	4a10      	ldr	r2, [pc, #64]	; (80045dc <vQueueUnregisterQueue+0x50>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d10b      	bne.n	80045c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80045aa:	4a0c      	ldr	r2, [pc, #48]	; (80045dc <vQueueUnregisterQueue+0x50>)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2100      	movs	r1, #0
 80045b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80045b4:	4a09      	ldr	r2, [pc, #36]	; (80045dc <vQueueUnregisterQueue+0x50>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	2200      	movs	r2, #0
 80045be:	605a      	str	r2, [r3, #4]
				break;
 80045c0:	e006      	b.n	80045d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b07      	cmp	r3, #7
 80045cc:	d9e5      	bls.n	800459a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	200008ac 	.word	0x200008ac

080045e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045f0:	f001 fcc8 	bl	8005f84 <vPortEnterCritical>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d103      	bne.n	800460a <vQueueWaitForMessageRestricted+0x2a>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004610:	b25b      	sxtb	r3, r3
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d103      	bne.n	8004620 <vQueueWaitForMessageRestricted+0x40>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004620:	f001 fce0 	bl	8005fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3324      	adds	r3, #36	; 0x24
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fc61 	bl	8004efc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff fefb 	bl	8004436 <prvUnlockQueue>
	}
 8004640:	bf00      	nop
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	; 0x38
 800464c:	af04      	add	r7, sp, #16
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	623b      	str	r3, [r7, #32]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xTaskCreateStatic+0x46>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	61fb      	str	r3, [r7, #28]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800468e:	23bc      	movs	r3, #188	; 0xbc
 8004690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2bbc      	cmp	r3, #188	; 0xbc
 8004696:	d00a      	beq.n	80046ae <xTaskCreateStatic+0x66>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	61bb      	str	r3, [r7, #24]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01e      	beq.n	80046f4 <xTaskCreateStatic+0xac>
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01b      	beq.n	80046f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046ce:	2300      	movs	r3, #0
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	9302      	str	r3, [sp, #8]
 80046d6:	f107 0314 	add.w	r3, r7, #20
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f850 	bl	800478c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ee:	f000 f8f3 	bl	80048d8 <prvAddNewTaskToReadyList>
 80046f2:	e001      	b.n	80046f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046f8:	697b      	ldr	r3, [r7, #20]
	}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004702:	b580      	push	{r7, lr}
 8004704:	b08c      	sub	sp, #48	; 0x30
 8004706:	af04      	add	r7, sp, #16
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4618      	mov	r0, r3
 8004718:	f001 fd56 	bl	80061c8 <pvPortMalloc>
 800471c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00e      	beq.n	8004742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004724:	20bc      	movs	r0, #188	; 0xbc
 8004726:	f001 fd4f 	bl	80061c8 <pvPortMalloc>
 800472a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
 8004738:	e005      	b.n	8004746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f001 fe10 	bl	8006360 <vPortFree>
 8004740:	e001      	b.n	8004746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d017      	beq.n	800477c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004754:	88fa      	ldrh	r2, [r7, #6]
 8004756:	2300      	movs	r3, #0
 8004758:	9303      	str	r3, [sp, #12]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	9302      	str	r3, [sp, #8]
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f80e 	bl	800478c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004770:	69f8      	ldr	r0, [r7, #28]
 8004772:	f000 f8b1 	bl	80048d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004776:	2301      	movs	r3, #1
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	e002      	b.n	8004782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004782:	69bb      	ldr	r3, [r7, #24]
	}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	461a      	mov	r2, r3
 80047a4:	21a5      	movs	r1, #165	; 0xa5
 80047a6:	f001 ff2d 	bl	8006604 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047b4:	3b01      	subs	r3, #1
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	617b      	str	r3, [r7, #20]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01f      	beq.n	800482a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e012      	b.n	8004816 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	7819      	ldrb	r1, [r3, #0]
 80047f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	3334      	adds	r3, #52	; 0x34
 8004800:	460a      	mov	r2, r1
 8004802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d9e9      	bls.n	80047f0 <prvInitialiseNewTask+0x64>
 800481c:	e000      	b.n	8004820 <prvInitialiseNewTask+0x94>
			{
				break;
 800481e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004828:	e003      	b.n	8004832 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	2b37      	cmp	r3, #55	; 0x37
 8004836:	d901      	bls.n	800483c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004838:	2337      	movs	r3, #55	; 0x37
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	2200      	movs	r2, #0
 800484c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	3304      	adds	r3, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fe56 	bl	8003504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	3318      	adds	r3, #24
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe fe51 	bl	8003504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	2200      	movs	r2, #0
 800487c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	2200      	movs	r2, #0
 8004884:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	3354      	adds	r3, #84	; 0x54
 800488c:	2260      	movs	r2, #96	; 0x60
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f001 feb7 	bl	8006604 <memset>
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <prvInitialiseNewTask+0x140>)
 800489a:	659a      	str	r2, [r3, #88]	; 0x58
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	4a0c      	ldr	r2, [pc, #48]	; (80048d0 <prvInitialiseNewTask+0x144>)
 80048a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <prvInitialiseNewTask+0x148>)
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	69b8      	ldr	r0, [r7, #24]
 80048ae:	f001 fa3f 	bl	8005d30 <pxPortInitialiseStack>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048c4:	bf00      	nop
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	080068a4 	.word	0x080068a4
 80048d0:	080068c4 	.word	0x080068c4
 80048d4:	08006884 	.word	0x08006884

080048d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048e0:	f001 fb50 	bl	8005f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <prvAddNewTaskToReadyList+0xc4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	4a2c      	ldr	r2, [pc, #176]	; (800499c <prvAddNewTaskToReadyList+0xc4>)
 80048ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048ee:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <prvAddNewTaskToReadyList+0xc8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <prvAddNewTaskToReadyList+0xc8>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <prvAddNewTaskToReadyList+0xc4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d110      	bne.n	8004926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004904:	f000 fc26 	bl	8005154 <prvInitialiseTaskLists>
 8004908:	e00d      	b.n	8004926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800490a:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <prvAddNewTaskToReadyList+0xcc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004912:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <prvAddNewTaskToReadyList+0xc8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	429a      	cmp	r2, r3
 800491e:	d802      	bhi.n	8004926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <prvAddNewTaskToReadyList+0xc8>)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <prvAddNewTaskToReadyList+0xd0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3301      	adds	r3, #1
 800492c:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <prvAddNewTaskToReadyList+0xd0>)
 800492e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <prvAddNewTaskToReadyList+0xd0>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <prvAddNewTaskToReadyList+0xd4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d903      	bls.n	800494c <prvAddNewTaskToReadyList+0x74>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a18      	ldr	r2, [pc, #96]	; (80049ac <prvAddNewTaskToReadyList+0xd4>)
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <prvAddNewTaskToReadyList+0xd8>)
 800495a:	441a      	add	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f7fe fddb 	bl	800351e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004968:	f001 fb3c 	bl	8005fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800496c:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <prvAddNewTaskToReadyList+0xcc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00e      	beq.n	8004992 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <prvAddNewTaskToReadyList+0xc8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	429a      	cmp	r2, r3
 8004980:	d207      	bcs.n	8004992 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <prvAddNewTaskToReadyList+0xdc>)
 8004984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000dc0 	.word	0x20000dc0
 80049a0:	200008ec 	.word	0x200008ec
 80049a4:	20000dcc 	.word	0x20000dcc
 80049a8:	20000ddc 	.word	0x20000ddc
 80049ac:	20000dc8 	.word	0x20000dc8
 80049b0:	200008f0 	.word	0x200008f0
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <vTaskDelay+0x60>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <vTaskDelay+0x30>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60bb      	str	r3, [r7, #8]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049e8:	f000 f88a 	bl	8004b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049ec:	2100      	movs	r1, #0
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fdfc 	bl	80055ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049f4:	f000 f892 	bl	8004b1c <xTaskResumeAll>
 80049f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <vTaskDelay+0x64>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000de8 	.word	0x20000de8
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a2e:	463a      	mov	r2, r7
 8004a30:	1d39      	adds	r1, r7, #4
 8004a32:	f107 0308 	add.w	r3, r7, #8
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fd10 	bl	800345c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	9202      	str	r2, [sp, #8]
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	2300      	movs	r3, #0
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	460a      	mov	r2, r1
 8004a4e:	4924      	ldr	r1, [pc, #144]	; (8004ae0 <vTaskStartScheduler+0xc0>)
 8004a50:	4824      	ldr	r0, [pc, #144]	; (8004ae4 <vTaskStartScheduler+0xc4>)
 8004a52:	f7ff fdf9 	bl	8004648 <xTaskCreateStatic>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4a23      	ldr	r2, [pc, #140]	; (8004ae8 <vTaskStartScheduler+0xc8>)
 8004a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a5c:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <vTaskStartScheduler+0xc8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a64:	2301      	movs	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e001      	b.n	8004a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d102      	bne.n	8004a7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a74:	f000 fe0e 	bl	8005694 <xTimerCreateTimerTask>
 8004a78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d11b      	bne.n	8004ab8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
}
 8004a92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a94:	4b15      	ldr	r3, [pc, #84]	; (8004aec <vTaskStartScheduler+0xcc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3354      	adds	r3, #84	; 0x54
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <vTaskStartScheduler+0xd0>)
 8004a9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <vTaskStartScheduler+0xd4>)
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <vTaskStartScheduler+0xd8>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004aac:	4b13      	ldr	r3, [pc, #76]	; (8004afc <vTaskStartScheduler+0xdc>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ab2:	f001 f9c5 	bl	8005e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ab6:	e00e      	b.n	8004ad6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d10a      	bne.n	8004ad6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60fb      	str	r3, [r7, #12]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <vTaskStartScheduler+0xb4>
}
 8004ad6:	bf00      	nop
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	080067d8 	.word	0x080067d8
 8004ae4:	08005125 	.word	0x08005125
 8004ae8:	20000de4 	.word	0x20000de4
 8004aec:	200008ec 	.word	0x200008ec
 8004af0:	20000010 	.word	0x20000010
 8004af4:	20000de0 	.word	0x20000de0
 8004af8:	20000dcc 	.word	0x20000dcc
 8004afc:	20000dc4 	.word	0x20000dc4

08004b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b04:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <vTaskSuspendAll+0x18>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	4a03      	ldr	r2, [pc, #12]	; (8004b18 <vTaskSuspendAll+0x18>)
 8004b0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b0e:	bf00      	nop
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	20000de8 	.word	0x20000de8

08004b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b2a:	4b42      	ldr	r3, [pc, #264]	; (8004c34 <xTaskResumeAll+0x118>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	603b      	str	r3, [r7, #0]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b48:	f001 fa1c 	bl	8005f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b4c:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <xTaskResumeAll+0x118>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	4a38      	ldr	r2, [pc, #224]	; (8004c34 <xTaskResumeAll+0x118>)
 8004b54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <xTaskResumeAll+0x118>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d162      	bne.n	8004c24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b5e:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <xTaskResumeAll+0x11c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d05e      	beq.n	8004c24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b66:	e02f      	b.n	8004bc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b68:	4b34      	ldr	r3, [pc, #208]	; (8004c3c <xTaskResumeAll+0x120>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3318      	adds	r3, #24
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fd2f 	bl	80035d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fd2a 	bl	80035d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <xTaskResumeAll+0x124>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d903      	bls.n	8004b98 <xTaskResumeAll+0x7c>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <xTaskResumeAll+0x124>)
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4a27      	ldr	r2, [pc, #156]	; (8004c44 <xTaskResumeAll+0x128>)
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fe fcb5 	bl	800351e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <xTaskResumeAll+0x12c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <xTaskResumeAll+0x130>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bc8:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <xTaskResumeAll+0x120>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1cb      	bne.n	8004b68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bd6:	f000 fb5f 	bl	8005298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <xTaskResumeAll+0x134>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004be6:	f000 f847 	bl	8004c78 <xTaskIncrementTick>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bf0:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <xTaskResumeAll+0x130>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f1      	bne.n	8004be6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <xTaskResumeAll+0x134>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <xTaskResumeAll+0x130>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <xTaskResumeAll+0x138>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c24:	f001 f9de 	bl	8005fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c28:	68bb      	ldr	r3, [r7, #8]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000de8 	.word	0x20000de8
 8004c38:	20000dc0 	.word	0x20000dc0
 8004c3c:	20000d80 	.word	0x20000d80
 8004c40:	20000dc8 	.word	0x20000dc8
 8004c44:	200008f0 	.word	0x200008f0
 8004c48:	200008ec 	.word	0x200008ec
 8004c4c:	20000dd4 	.word	0x20000dd4
 8004c50:	20000dd0 	.word	0x20000dd0
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <xTaskGetTickCount+0x1c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c64:	687b      	ldr	r3, [r7, #4]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000dc4 	.word	0x20000dc4

08004c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c82:	4b4f      	ldr	r3, [pc, #316]	; (8004dc0 <xTaskIncrementTick+0x148>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f040 808f 	bne.w	8004daa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c8c:	4b4d      	ldr	r3, [pc, #308]	; (8004dc4 <xTaskIncrementTick+0x14c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c94:	4a4b      	ldr	r2, [pc, #300]	; (8004dc4 <xTaskIncrementTick+0x14c>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d120      	bne.n	8004ce2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ca0:	4b49      	ldr	r3, [pc, #292]	; (8004dc8 <xTaskIncrementTick+0x150>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	603b      	str	r3, [r7, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xTaskIncrementTick+0x46>
 8004cc0:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <xTaskIncrementTick+0x150>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <xTaskIncrementTick+0x154>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <xTaskIncrementTick+0x150>)
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <xTaskIncrementTick+0x154>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <xTaskIncrementTick+0x158>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	4a3d      	ldr	r2, [pc, #244]	; (8004dd0 <xTaskIncrementTick+0x158>)
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	f000 fadb 	bl	8005298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ce2:	4b3c      	ldr	r3, [pc, #240]	; (8004dd4 <xTaskIncrementTick+0x15c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d349      	bcc.n	8004d80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cec:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <xTaskIncrementTick+0x150>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf6:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <xTaskIncrementTick+0x15c>)
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	601a      	str	r2, [r3, #0]
					break;
 8004cfe:	e03f      	b.n	8004d80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d00:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <xTaskIncrementTick+0x150>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d203      	bcs.n	8004d20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d18:	4a2e      	ldr	r2, [pc, #184]	; (8004dd4 <xTaskIncrementTick+0x15c>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d1e:	e02f      	b.n	8004d80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fc57 	bl	80035d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3318      	adds	r3, #24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fc4e 	bl	80035d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <xTaskIncrementTick+0x160>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d903      	bls.n	8004d50 <xTaskIncrementTick+0xd8>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <xTaskIncrementTick+0x160>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <xTaskIncrementTick+0x164>)
 8004d5e:	441a      	add	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7fe fbd9 	bl	800351e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <xTaskIncrementTick+0x168>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3b8      	bcc.n	8004cec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d7e:	e7b5      	b.n	8004cec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d80:	4b17      	ldr	r3, [pc, #92]	; (8004de0 <xTaskIncrementTick+0x168>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	4915      	ldr	r1, [pc, #84]	; (8004ddc <xTaskIncrementTick+0x164>)
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d901      	bls.n	8004d9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <xTaskIncrementTick+0x16c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e004      	b.n	8004db4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <xTaskIncrementTick+0x170>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3301      	adds	r3, #1
 8004db0:	4a0d      	ldr	r2, [pc, #52]	; (8004de8 <xTaskIncrementTick+0x170>)
 8004db2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004db4:	697b      	ldr	r3, [r7, #20]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000de8 	.word	0x20000de8
 8004dc4:	20000dc4 	.word	0x20000dc4
 8004dc8:	20000d78 	.word	0x20000d78
 8004dcc:	20000d7c 	.word	0x20000d7c
 8004dd0:	20000dd8 	.word	0x20000dd8
 8004dd4:	20000de0 	.word	0x20000de0
 8004dd8:	20000dc8 	.word	0x20000dc8
 8004ddc:	200008f0 	.word	0x200008f0
 8004de0:	200008ec 	.word	0x200008ec
 8004de4:	20000dd4 	.word	0x20000dd4
 8004de8:	20000dd0 	.word	0x20000dd0

08004dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004df2:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <vTaskSwitchContext+0xb0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dfa:	4b29      	ldr	r3, [pc, #164]	; (8004ea0 <vTaskSwitchContext+0xb4>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e00:	e046      	b.n	8004e90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004e02:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <vTaskSwitchContext+0xb4>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <vTaskSwitchContext+0xb8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e010      	b.n	8004e32 <vTaskSwitchContext+0x46>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <vTaskSwitchContext+0x40>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	607b      	str	r3, [r7, #4]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <vTaskSwitchContext+0x3e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	491d      	ldr	r1, [pc, #116]	; (8004ea8 <vTaskSwitchContext+0xbc>)
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0e4      	beq.n	8004e10 <vTaskSwitchContext+0x24>
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <vTaskSwitchContext+0xbc>)
 8004e52:	4413      	add	r3, r2
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	3308      	adds	r3, #8
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d104      	bne.n	8004e76 <vTaskSwitchContext+0x8a>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <vTaskSwitchContext+0xc0>)
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <vTaskSwitchContext+0xb8>)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <vTaskSwitchContext+0xc0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3354      	adds	r3, #84	; 0x54
 8004e8c:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <vTaskSwitchContext+0xc4>)
 8004e8e:	6013      	str	r3, [r2, #0]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	20000de8 	.word	0x20000de8
 8004ea0:	20000dd4 	.word	0x20000dd4
 8004ea4:	20000dc8 	.word	0x20000dc8
 8004ea8:	200008f0 	.word	0x200008f0
 8004eac:	200008ec 	.word	0x200008ec
 8004eb0:	20000010 	.word	0x20000010

08004eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60fb      	str	r3, [r7, #12]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <vTaskPlaceOnEventList+0x44>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3318      	adds	r3, #24
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fe fb3f 	bl	8003566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ee8:	2101      	movs	r1, #1
 8004eea:	6838      	ldr	r0, [r7, #0]
 8004eec:	f000 fb7e 	bl	80055ec <prvAddCurrentTaskToDelayedList>
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200008ec 	.word	0x200008ec

08004efc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	617b      	str	r3, [r7, #20]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3318      	adds	r3, #24
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7fe faf6 	bl	800351e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	68b8      	ldr	r0, [r7, #8]
 8004f42:	f000 fb53 	bl	80055ec <prvAddCurrentTaskToDelayedList>
	}
 8004f46:	bf00      	nop
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200008ec 	.word	0x200008ec

08004f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	60fb      	str	r3, [r7, #12]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	3318      	adds	r3, #24
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fb27 	bl	80035d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <xTaskRemoveFromEventList+0xb0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11d      	bne.n	8004fce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fb1e 	bl	80035d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <xTaskRemoveFromEventList+0xb4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d903      	bls.n	8004fb0 <xTaskRemoveFromEventList+0x5c>
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <xTaskRemoveFromEventList+0xb4>)
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4a13      	ldr	r2, [pc, #76]	; (800500c <xTaskRemoveFromEventList+0xb8>)
 8004fbe:	441a      	add	r2, r3
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7fe faa9 	bl	800351e <vListInsertEnd>
 8004fcc:	e005      	b.n	8004fda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3318      	adds	r3, #24
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	480e      	ldr	r0, [pc, #56]	; (8005010 <xTaskRemoveFromEventList+0xbc>)
 8004fd6:	f7fe faa2 	bl	800351e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <xTaskRemoveFromEventList+0xc0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d905      	bls.n	8004ff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <xTaskRemoveFromEventList+0xc4>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e001      	b.n	8004ff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ff8:	697b      	ldr	r3, [r7, #20]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000de8 	.word	0x20000de8
 8005008:	20000dc8 	.word	0x20000dc8
 800500c:	200008f0 	.word	0x200008f0
 8005010:	20000d80 	.word	0x20000d80
 8005014:	200008ec 	.word	0x200008ec
 8005018:	20000dd4 	.word	0x20000dd4

0800501c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <vTaskInternalSetTimeOutState+0x24>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <vTaskInternalSetTimeOutState+0x28>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000dd8 	.word	0x20000dd8
 8005044:	20000dc4 	.word	0x20000dc4

08005048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	613b      	str	r3, [r7, #16]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800508a:	f000 ff7b 	bl	8005f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800508e:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <xTaskCheckForTimeOut+0xbc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d102      	bne.n	80050ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e023      	b.n	80050f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <xTaskCheckForTimeOut+0xc0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d007      	beq.n	80050ca <xTaskCheckForTimeOut+0x82>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d302      	bcc.n	80050ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	e015      	b.n	80050f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d20b      	bcs.n	80050ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff9b 	bl	800501c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e004      	b.n	80050f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050f2:	2301      	movs	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050f6:	f000 ff75 	bl	8005fe4 <vPortExitCritical>

	return xReturn;
 80050fa:	69fb      	ldr	r3, [r7, #28]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000dc4 	.word	0x20000dc4
 8005108:	20000dd8 	.word	0x20000dd8

0800510c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005110:	4b03      	ldr	r3, [pc, #12]	; (8005120 <vTaskMissedYield+0x14>)
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]
}
 8005116:	bf00      	nop
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000dd4 	.word	0x20000dd4

08005124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800512c:	f000 f852 	bl	80051d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <prvIdleTask+0x28>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d9f9      	bls.n	800512c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <prvIdleTask+0x2c>)
 800513a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005148:	e7f0      	b.n	800512c <prvIdleTask+0x8>
 800514a:	bf00      	nop
 800514c:	200008f0 	.word	0x200008f0
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	e00c      	b.n	800517a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <prvInitialiseTaskLists+0x60>)
 800516c:	4413      	add	r3, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe f9a8 	bl	80034c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3301      	adds	r3, #1
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b37      	cmp	r3, #55	; 0x37
 800517e:	d9ef      	bls.n	8005160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005180:	480d      	ldr	r0, [pc, #52]	; (80051b8 <prvInitialiseTaskLists+0x64>)
 8005182:	f7fe f99f 	bl	80034c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005186:	480d      	ldr	r0, [pc, #52]	; (80051bc <prvInitialiseTaskLists+0x68>)
 8005188:	f7fe f99c 	bl	80034c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800518c:	480c      	ldr	r0, [pc, #48]	; (80051c0 <prvInitialiseTaskLists+0x6c>)
 800518e:	f7fe f999 	bl	80034c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005192:	480c      	ldr	r0, [pc, #48]	; (80051c4 <prvInitialiseTaskLists+0x70>)
 8005194:	f7fe f996 	bl	80034c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005198:	480b      	ldr	r0, [pc, #44]	; (80051c8 <prvInitialiseTaskLists+0x74>)
 800519a:	f7fe f993 	bl	80034c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800519e:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <prvInitialiseTaskLists+0x78>)
 80051a0:	4a05      	ldr	r2, [pc, #20]	; (80051b8 <prvInitialiseTaskLists+0x64>)
 80051a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051a4:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <prvInitialiseTaskLists+0x7c>)
 80051a6:	4a05      	ldr	r2, [pc, #20]	; (80051bc <prvInitialiseTaskLists+0x68>)
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200008f0 	.word	0x200008f0
 80051b8:	20000d50 	.word	0x20000d50
 80051bc:	20000d64 	.word	0x20000d64
 80051c0:	20000d80 	.word	0x20000d80
 80051c4:	20000d94 	.word	0x20000d94
 80051c8:	20000dac 	.word	0x20000dac
 80051cc:	20000d78 	.word	0x20000d78
 80051d0:	20000d7c 	.word	0x20000d7c

080051d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051da:	e019      	b.n	8005210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051dc:	f000 fed2 	bl	8005f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <prvCheckTasksWaitingTermination+0x50>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe f9f3 	bl	80035d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051f2:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <prvCheckTasksWaitingTermination+0x54>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	4a0b      	ldr	r2, [pc, #44]	; (8005228 <prvCheckTasksWaitingTermination+0x54>)
 80051fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <prvCheckTasksWaitingTermination+0x58>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3b01      	subs	r3, #1
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <prvCheckTasksWaitingTermination+0x58>)
 8005204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005206:	f000 feed 	bl	8005fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f810 	bl	8005230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <prvCheckTasksWaitingTermination+0x58>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e1      	bne.n	80051dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000d94 	.word	0x20000d94
 8005228:	20000dc0 	.word	0x20000dc0
 800522c:	20000da8 	.word	0x20000da8

08005230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3354      	adds	r3, #84	; 0x54
 800523c:	4618      	mov	r0, r3
 800523e:	f001 f9f7 	bl	8006630 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005248:	2b00      	cmp	r3, #0
 800524a:	d108      	bne.n	800525e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	4618      	mov	r0, r3
 8005252:	f001 f885 	bl	8006360 <vPortFree>
				vPortFree( pxTCB );
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 f882 	bl	8006360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800525c:	e018      	b.n	8005290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005264:	2b01      	cmp	r3, #1
 8005266:	d103      	bne.n	8005270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 f879 	bl	8006360 <vPortFree>
	}
 800526e:	e00f      	b.n	8005290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005276:	2b02      	cmp	r3, #2
 8005278:	d00a      	beq.n	8005290 <prvDeleteTCB+0x60>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60fb      	str	r3, [r7, #12]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <prvDeleteTCB+0x5e>
	}
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <prvResetNextTaskUnblockTime+0x38>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <prvResetNextTaskUnblockTime+0x3c>)
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052b0:	e008      	b.n	80052c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <prvResetNextTaskUnblockTime+0x38>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <prvResetNextTaskUnblockTime+0x3c>)
 80052c2:	6013      	str	r3, [r2, #0]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20000d78 	.word	0x20000d78
 80052d4:	20000de0 	.word	0x20000de0

080052d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <xTaskGetSchedulerState+0x34>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052e6:	2301      	movs	r3, #1
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	e008      	b.n	80052fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ec:	4b08      	ldr	r3, [pc, #32]	; (8005310 <xTaskGetSchedulerState+0x38>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052f4:	2302      	movs	r3, #2
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	e001      	b.n	80052fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052fe:	687b      	ldr	r3, [r7, #4]
	}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20000dcc 	.word	0x20000dcc
 8005310:	20000de8 	.word	0x20000de8

08005314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d051      	beq.n	80053ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <xTaskPriorityInherit+0xc4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	429a      	cmp	r2, r3
 8005336:	d241      	bcs.n	80053bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db06      	blt.n	800534e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005340:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <xTaskPriorityInherit+0xc4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6959      	ldr	r1, [r3, #20]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <xTaskPriorityInherit+0xc8>)
 8005360:	4413      	add	r3, r2
 8005362:	4299      	cmp	r1, r3
 8005364:	d122      	bne.n	80053ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3304      	adds	r3, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe f934 	bl	80035d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005370:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <xTaskPriorityInherit+0xc4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <xTaskPriorityInherit+0xcc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d903      	bls.n	800538e <xTaskPriorityInherit+0x7a>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <xTaskPriorityInherit+0xcc>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a10      	ldr	r2, [pc, #64]	; (80053dc <xTaskPriorityInherit+0xc8>)
 800539c:	441a      	add	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fe f8ba 	bl	800351e <vListInsertEnd>
 80053aa:	e004      	b.n	80053b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <xTaskPriorityInherit+0xc4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e008      	b.n	80053ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <xTaskPriorityInherit+0xc4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d201      	bcs.n	80053ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053ce:	68fb      	ldr	r3, [r7, #12]
	}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200008ec 	.word	0x200008ec
 80053dc:	200008f0 	.word	0x200008f0
 80053e0:	20000dc8 	.word	0x20000dc8

080053e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d056      	beq.n	80054a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053fa:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <xTaskPriorityDisinherit+0xd0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d00a      	beq.n	800541a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	60bb      	str	r3, [r7, #8]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	1e5a      	subs	r2, r3, #1
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544a:	429a      	cmp	r2, r3
 800544c:	d02c      	beq.n	80054a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	2b00      	cmp	r3, #0
 8005454:	d128      	bne.n	80054a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3304      	adds	r3, #4
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe f8bc 	bl	80035d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <xTaskPriorityDisinherit+0xd4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d903      	bls.n	8005488 <xTaskPriorityDisinherit+0xa4>
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4a0c      	ldr	r2, [pc, #48]	; (80054b8 <xTaskPriorityDisinherit+0xd4>)
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4a09      	ldr	r2, [pc, #36]	; (80054bc <xTaskPriorityDisinherit+0xd8>)
 8005496:	441a      	add	r2, r3
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	3304      	adds	r3, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f7fe f83d 	bl	800351e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054a8:	697b      	ldr	r3, [r7, #20]
	}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200008ec 	.word	0x200008ec
 80054b8:	20000dc8 	.word	0x20000dc8
 80054bc:	200008f0 	.word	0x200008f0

080054c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d06a      	beq.n	80055ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d902      	bls.n	8005506 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e002      	b.n	800550c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	429a      	cmp	r2, r3
 8005514:	d04b      	beq.n	80055ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	429a      	cmp	r2, r3
 800551e:	d146      	bne.n	80055ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005520:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	429a      	cmp	r2, r3
 8005528:	d10a      	bne.n	8005540 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	60bb      	str	r3, [r7, #8]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	db04      	blt.n	800555e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	6959      	ldr	r1, [r3, #20]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800556e:	4413      	add	r3, r2
 8005570:	4299      	cmp	r1, r3
 8005572:	d11c      	bne.n	80055ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	3304      	adds	r3, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe f82d 	bl	80035d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d903      	bls.n	8005592 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4a07      	ldr	r2, [pc, #28]	; (80055bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80055a0:	441a      	add	r2, r3
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	3304      	adds	r3, #4
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f7fd ffb8 	bl	800351e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055ae:	bf00      	nop
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	200008ec 	.word	0x200008ec
 80055bc:	200008f0 	.word	0x200008f0
 80055c0:	20000dc8 	.word	0x20000dc8

080055c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80055c8:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d6:	3201      	adds	r2, #1
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80055dc:	681b      	ldr	r3, [r3, #0]
	}
 80055de:	4618      	mov	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	200008ec 	.word	0x200008ec

080055ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055f6:	4b21      	ldr	r3, [pc, #132]	; (800567c <prvAddCurrentTaskToDelayedList+0x90>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055fc:	4b20      	ldr	r3, [pc, #128]	; (8005680 <prvAddCurrentTaskToDelayedList+0x94>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3304      	adds	r3, #4
 8005602:	4618      	mov	r0, r3
 8005604:	f7fd ffe8 	bl	80035d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d10a      	bne.n	8005626 <prvAddCurrentTaskToDelayedList+0x3a>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <prvAddCurrentTaskToDelayedList+0x94>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4819      	ldr	r0, [pc, #100]	; (8005684 <prvAddCurrentTaskToDelayedList+0x98>)
 8005620:	f7fd ff7d 	bl	800351e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005624:	e026      	b.n	8005674 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <prvAddCurrentTaskToDelayedList+0x94>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	429a      	cmp	r2, r3
 800563c:	d209      	bcs.n	8005652 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800563e:	4b12      	ldr	r3, [pc, #72]	; (8005688 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <prvAddCurrentTaskToDelayedList+0x94>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fd ff8b 	bl	8003566 <vListInsert>
}
 8005650:	e010      	b.n	8005674 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005652:	4b0e      	ldr	r3, [pc, #56]	; (800568c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <prvAddCurrentTaskToDelayedList+0x94>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7fd ff81 	bl	8003566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	d202      	bcs.n	8005674 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800566e:	4a08      	ldr	r2, [pc, #32]	; (8005690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000dc4 	.word	0x20000dc4
 8005680:	200008ec 	.word	0x200008ec
 8005684:	20000dac 	.word	0x20000dac
 8005688:	20000d7c 	.word	0x20000d7c
 800568c:	20000d78 	.word	0x20000d78
 8005690:	20000de0 	.word	0x20000de0

08005694 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800569e:	f000 fb07 	bl	8005cb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056a2:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xTimerCreateTimerTask+0x80>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d021      	beq.n	80056ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056b2:	1d3a      	adds	r2, r7, #4
 80056b4:	f107 0108 	add.w	r1, r7, #8
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fd fee7 	bl	8003490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	9202      	str	r2, [sp, #8]
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	2302      	movs	r3, #2
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	460a      	mov	r2, r1
 80056d4:	4910      	ldr	r1, [pc, #64]	; (8005718 <xTimerCreateTimerTask+0x84>)
 80056d6:	4811      	ldr	r0, [pc, #68]	; (800571c <xTimerCreateTimerTask+0x88>)
 80056d8:	f7fe ffb6 	bl	8004648 <xTaskCreateStatic>
 80056dc:	4603      	mov	r3, r0
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <xTimerCreateTimerTask+0x8c>)
 80056e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <xTimerCreateTimerTask+0x8c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056ea:	2301      	movs	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	613b      	str	r3, [r7, #16]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800570a:	697b      	ldr	r3, [r7, #20]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000e1c 	.word	0x20000e1c
 8005718:	080067e0 	.word	0x080067e0
 800571c:	08005859 	.word	0x08005859
 8005720:	20000e20 	.word	0x20000e20

08005724 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xTimerGenericCommand+0x2e>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005752:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <xTimerGenericCommand+0x98>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d02a      	beq.n	80057b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b05      	cmp	r3, #5
 800576a:	dc18      	bgt.n	800579e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800576c:	f7ff fdb4 	bl	80052d8 <xTaskGetSchedulerState>
 8005770:	4603      	mov	r3, r0
 8005772:	2b02      	cmp	r3, #2
 8005774:	d109      	bne.n	800578a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005776:	4b11      	ldr	r3, [pc, #68]	; (80057bc <xTimerGenericCommand+0x98>)
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	f107 0110 	add.w	r1, r7, #16
 800577e:	2300      	movs	r3, #0
 8005780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005782:	f7fe f8fb 	bl	800397c <xQueueGenericSend>
 8005786:	6278      	str	r0, [r7, #36]	; 0x24
 8005788:	e012      	b.n	80057b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800578a:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <xTimerGenericCommand+0x98>)
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f107 0110 	add.w	r1, r7, #16
 8005792:	2300      	movs	r3, #0
 8005794:	2200      	movs	r2, #0
 8005796:	f7fe f8f1 	bl	800397c <xQueueGenericSend>
 800579a:	6278      	str	r0, [r7, #36]	; 0x24
 800579c:	e008      	b.n	80057b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800579e:	4b07      	ldr	r3, [pc, #28]	; (80057bc <xTimerGenericCommand+0x98>)
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f107 0110 	add.w	r1, r7, #16
 80057a6:	2300      	movs	r3, #0
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	f7fe f9e5 	bl	8003b78 <xQueueGenericSendFromISR>
 80057ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3728      	adds	r7, #40	; 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000e1c 	.word	0x20000e1c

080057c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <prvProcessExpiredTimer+0x94>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fd fefd 	bl	80035d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d022      	beq.n	8005832 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	18d1      	adds	r1, r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	6978      	ldr	r0, [r7, #20]
 80057fa:	f000 f8d1 	bl	80059a0 <prvInsertTimerInActiveList>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01f      	beq.n	8005844 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005804:	2300      	movs	r3, #0
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2300      	movs	r3, #0
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	2100      	movs	r1, #0
 800580e:	6978      	ldr	r0, [r7, #20]
 8005810:	f7ff ff88 	bl	8005724 <xTimerGenericCommand>
 8005814:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d113      	bne.n	8005844 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60fb      	str	r3, [r7, #12]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	6978      	ldr	r0, [r7, #20]
 800584a:	4798      	blx	r3
}
 800584c:	bf00      	nop
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000e14 	.word	0x20000e14

08005858 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005860:	f107 0308 	add.w	r3, r7, #8
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f857 	bl	8005918 <prvGetNextExpireTime>
 800586a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4619      	mov	r1, r3
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f803 	bl	800587c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005876:	f000 f8d5 	bl	8005a24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800587a:	e7f1      	b.n	8005860 <prvTimerTask+0x8>

0800587c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005886:	f7ff f93b 	bl	8004b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f866 	bl	8005960 <prvSampleTimeNow>
 8005894:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d130      	bne.n	80058fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <prvProcessTimerOrBlockTask+0x3c>
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d806      	bhi.n	80058b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058aa:	f7ff f937 	bl	8004b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff85 	bl	80057c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058b6:	e024      	b.n	8005902 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <prvProcessTimerOrBlockTask+0x90>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <prvProcessTimerOrBlockTask+0x50>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <prvProcessTimerOrBlockTask+0x52>
 80058cc:	2300      	movs	r3, #0
 80058ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <prvProcessTimerOrBlockTask+0x94>)
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4619      	mov	r1, r3
 80058de:	f7fe fe7f 	bl	80045e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058e2:	f7ff f91b 	bl	8004b1c <xTaskResumeAll>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <prvProcessTimerOrBlockTask+0x98>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	f3bf 8f6f 	isb	sy
}
 80058fc:	e001      	b.n	8005902 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058fe:	f7ff f90d 	bl	8004b1c <xTaskResumeAll>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000e18 	.word	0x20000e18
 8005910:	20000e1c 	.word	0x20000e1c
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005920:	4b0e      	ldr	r3, [pc, #56]	; (800595c <prvGetNextExpireTime+0x44>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <prvGetNextExpireTime+0x16>
 800592a:	2201      	movs	r2, #1
 800592c:	e000      	b.n	8005930 <prvGetNextExpireTime+0x18>
 800592e:	2200      	movs	r2, #0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <prvGetNextExpireTime+0x44>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e001      	b.n	800594c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800594c:	68fb      	ldr	r3, [r7, #12]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000e14 	.word	0x20000e14

08005960 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005968:	f7ff f976 	bl	8004c58 <xTaskGetTickCount>
 800596c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800596e:	4b0b      	ldr	r3, [pc, #44]	; (800599c <prvSampleTimeNow+0x3c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	429a      	cmp	r2, r3
 8005976:	d205      	bcs.n	8005984 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005978:	f000 f936 	bl	8005be8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e002      	b.n	800598a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800598a:	4a04      	ldr	r2, [pc, #16]	; (800599c <prvSampleTimeNow+0x3c>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000e24 	.word	0x20000e24

080059a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d812      	bhi.n	80059ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	1ad2      	subs	r2, r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d302      	bcc.n	80059da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e01b      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059da:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <prvInsertTimerInActiveList+0x7c>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f7fd fdbe 	bl	8003566 <vListInsert>
 80059ea:	e012      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d206      	bcs.n	8005a02 <prvInsertTimerInActiveList+0x62>
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e007      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <prvInsertTimerInActiveList+0x80>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7fd fdaa 	bl	8003566 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a12:	697b      	ldr	r3, [r7, #20]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000e18 	.word	0x20000e18
 8005a20:	20000e14 	.word	0x20000e14

08005a24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a2a:	e0ca      	b.n	8005bc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da18      	bge.n	8005a64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	3304      	adds	r3, #4
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	61fb      	str	r3, [r7, #28]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5a:	6850      	ldr	r0, [r2, #4]
 8005a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	4611      	mov	r1, r2
 8005a62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f2c0 80aa 	blt.w	8005bc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fd fdab 	bl	80035d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a82:	463b      	mov	r3, r7
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff6b 	bl	8005960 <prvSampleTimeNow>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	f200 8097 	bhi.w	8005bc2 <prvProcessReceivedCommands+0x19e>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <prvProcessReceivedCommands+0x78>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005ac5 	.word	0x08005ac5
 8005aa8:	08005b39 	.word	0x08005b39
 8005aac:	08005b4d 	.word	0x08005b4d
 8005ab0:	08005b97 	.word	0x08005b97
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005ac5 	.word	0x08005ac5
 8005abc:	08005b39 	.word	0x08005b39
 8005ac0:	08005b4d 	.word	0x08005b4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	18d1      	adds	r1, r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae4:	f7ff ff5c 	bl	80059a0 <prvInsertTimerInActiveList>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d069      	beq.n	8005bc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d05e      	beq.n	8005bc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	441a      	add	r2, r3
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	2300      	movs	r3, #0
 8005b12:	2100      	movs	r1, #0
 8005b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b16:	f7ff fe05 	bl	8005724 <xTimerGenericCommand>
 8005b1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d14f      	bne.n	8005bc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	61bb      	str	r3, [r7, #24]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005b4a:	e03a      	b.n	8005bc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	617b      	str	r3, [r7, #20]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	18d1      	adds	r1, r2, r3
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b90:	f7ff ff06 	bl	80059a0 <prvInsertTimerInActiveList>
					break;
 8005b94:	e015      	b.n	8005bc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d103      	bne.n	8005bac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba6:	f000 fbdb 	bl	8006360 <vPortFree>
 8005baa:	e00a      	b.n	8005bc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bbe:	e000      	b.n	8005bc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005bc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bc2:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <prvProcessReceivedCommands+0x1c0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	1d39      	adds	r1, r7, #4
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe f8fc 	bl	8003dc8 <xQueueReceive>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f47f af2a 	bne.w	8005a2c <prvProcessReceivedCommands+0x8>
	}
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	3730      	adds	r7, #48	; 0x30
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000e1c 	.word	0x20000e1c

08005be8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bee:	e048      	b.n	8005c82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <prvSwitchTimerLists+0xc0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <prvSwitchTimerLists+0xc0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fd fce5 	bl	80035d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d02e      	beq.n	8005c82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d90e      	bls.n	8005c54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c42:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <prvSwitchTimerLists+0xc0>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7fd fc8a 	bl	8003566 <vListInsert>
 8005c52:	e016      	b.n	8005c82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c54:	2300      	movs	r3, #0
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff fd60 	bl	8005724 <xTimerGenericCommand>
 8005c64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	603b      	str	r3, [r7, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <prvSwitchTimerLists+0xc0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1b1      	bne.n	8005bf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <prvSwitchTimerLists+0xc0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <prvSwitchTimerLists+0xc4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <prvSwitchTimerLists+0xc0>)
 8005c98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c9a:	4a04      	ldr	r2, [pc, #16]	; (8005cac <prvSwitchTimerLists+0xc4>)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000e14 	.word	0x20000e14
 8005cac:	20000e18 	.word	0x20000e18

08005cb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cb6:	f000 f965 	bl	8005f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cba:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <prvCheckForValidListAndQueue+0x60>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d120      	bne.n	8005d04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cc2:	4814      	ldr	r0, [pc, #80]	; (8005d14 <prvCheckForValidListAndQueue+0x64>)
 8005cc4:	f7fd fbfe 	bl	80034c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005cc8:	4813      	ldr	r0, [pc, #76]	; (8005d18 <prvCheckForValidListAndQueue+0x68>)
 8005cca:	f7fd fbfb 	bl	80034c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <prvCheckForValidListAndQueue+0x6c>)
 8005cd0:	4a10      	ldr	r2, [pc, #64]	; (8005d14 <prvCheckForValidListAndQueue+0x64>)
 8005cd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <prvCheckForValidListAndQueue+0x70>)
 8005cd6:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <prvCheckForValidListAndQueue+0x68>)
 8005cd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <prvCheckForValidListAndQueue+0x74>)
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <prvCheckForValidListAndQueue+0x78>)
 8005ce2:	2110      	movs	r1, #16
 8005ce4:	200a      	movs	r0, #10
 8005ce6:	f7fd fd09 	bl	80036fc <xQueueGenericCreateStatic>
 8005cea:	4603      	mov	r3, r0
 8005cec:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <prvCheckForValidListAndQueue+0x60>)
 8005cee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005cf0:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <prvCheckForValidListAndQueue+0x60>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <prvCheckForValidListAndQueue+0x60>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	490b      	ldr	r1, [pc, #44]	; (8005d2c <prvCheckForValidListAndQueue+0x7c>)
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fc1a 	bl	8004538 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d04:	f000 f96e 	bl	8005fe4 <vPortExitCritical>
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000e1c 	.word	0x20000e1c
 8005d14:	20000dec 	.word	0x20000dec
 8005d18:	20000e00 	.word	0x20000e00
 8005d1c:	20000e14 	.word	0x20000e14
 8005d20:	20000e18 	.word	0x20000e18
 8005d24:	20000ec8 	.word	0x20000ec8
 8005d28:	20000e28 	.word	0x20000e28
 8005d2c:	080067e8 	.word	0x080067e8

08005d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d60:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <pxPortInitialiseStack+0x64>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3b14      	subs	r3, #20
 8005d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b04      	subs	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f06f 0202 	mvn.w	r2, #2
 8005d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b20      	subs	r3, #32
 8005d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	08005d99 	.word	0x08005d99

08005d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <prvTaskExitError+0x54>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d00a      	beq.n	8005dc2 <prvTaskExitError+0x2a>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <prvTaskExitError+0x28>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60bb      	str	r3, [r7, #8]
}
 8005dd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dd6:	bf00      	nop
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0fc      	beq.n	8005dd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <pxCurrentTCBConst2>)
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	f380 8809 	msr	PSP, r0
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8811 	msr	BASEPRI, r0
 8005e0a:	4770      	bx	lr
 8005e0c:	f3af 8000 	nop.w

08005e10 <pxCurrentTCBConst2>:
 8005e10:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop

08005e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e18:	4808      	ldr	r0, [pc, #32]	; (8005e3c <prvPortStartFirstTask+0x24>)
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	6800      	ldr	r0, [r0, #0]
 8005e1e:	f380 8808 	msr	MSP, r0
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8814 	msr	CONTROL, r0
 8005e2a:	b662      	cpsie	i
 8005e2c:	b661      	cpsie	f
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	df00      	svc	0
 8005e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e3a:	bf00      	nop
 8005e3c:	e000ed08 	.word	0xe000ed08

08005e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e46:	4b46      	ldr	r3, [pc, #280]	; (8005f60 <xPortStartScheduler+0x120>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <xPortStartScheduler+0x124>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10a      	bne.n	8005e66 <xPortStartScheduler+0x26>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	613b      	str	r3, [r7, #16]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e66:	4b3e      	ldr	r3, [pc, #248]	; (8005f60 <xPortStartScheduler+0x120>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a3f      	ldr	r2, [pc, #252]	; (8005f68 <xPortStartScheduler+0x128>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10a      	bne.n	8005e86 <xPortStartScheduler+0x46>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	60fb      	str	r3, [r7, #12]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	22ff      	movs	r2, #255	; 0xff
 8005e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <xPortStartScheduler+0x130>)
 8005eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005eae:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <xPortStartScheduler+0x134>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eb4:	e009      	b.n	8005eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005eb6:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <xPortStartScheduler+0x134>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <xPortStartScheduler+0x134>)
 8005ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d0ef      	beq.n	8005eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <xPortStartScheduler+0x134>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f1c3 0307 	rsb	r3, r3, #7
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d00a      	beq.n	8005ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	60bb      	str	r3, [r7, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ef8:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <xPortStartScheduler+0x134>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <xPortStartScheduler+0x134>)
 8005f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <xPortStartScheduler+0x134>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <xPortStartScheduler+0x134>)
 8005f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f16:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f2e:	f000 f8dd 	bl	80060ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <xPortStartScheduler+0x13c>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f38:	f000 f8fc 	bl	8006134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f3c:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <xPortStartScheduler+0x140>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a0f      	ldr	r2, [pc, #60]	; (8005f80 <xPortStartScheduler+0x140>)
 8005f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f48:	f7ff ff66 	bl	8005e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f4c:	f7fe ff4e 	bl	8004dec <vTaskSwitchContext>
	prvTaskExitError();
 8005f50:	f7ff ff22 	bl	8005d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	e000ed00 	.word	0xe000ed00
 8005f64:	410fc271 	.word	0x410fc271
 8005f68:	410fc270 	.word	0x410fc270
 8005f6c:	e000e400 	.word	0xe000e400
 8005f70:	20000f18 	.word	0x20000f18
 8005f74:	20000f1c 	.word	0x20000f1c
 8005f78:	e000ed20 	.word	0xe000ed20
 8005f7c:	2000000c 	.word	0x2000000c
 8005f80:	e000ef34 	.word	0xe000ef34

08005f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	607b      	str	r3, [r7, #4]
}
 8005f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <vPortEnterCritical+0x58>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <vPortEnterCritical+0x58>)
 8005fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <vPortEnterCritical+0x58>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10f      	bne.n	8005fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <vPortEnterCritical+0x5c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	603b      	str	r3, [r7, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vPortEnterCritical+0x4a>
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	2000000c 	.word	0x2000000c
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <vPortExitCritical+0x50>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <vPortExitCritical+0x24>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	607b      	str	r3, [r7, #4]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <vPortExitCritical+0x50>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3b01      	subs	r3, #1
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <vPortExitCritical+0x50>)
 8006010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <vPortExitCritical+0x50>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <vPortExitCritical+0x42>
 800601a:	2300      	movs	r3, #0
 800601c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f383 8811 	msr	BASEPRI, r3
}
 8006024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	2000000c 	.word	0x2000000c
	...

08006040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006040:	f3ef 8009 	mrs	r0, PSP
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <pxCurrentTCBConst>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f01e 0f10 	tst.w	lr, #16
 8006050:	bf08      	it	eq
 8006052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	6010      	str	r0, [r2, #0]
 800605c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006064:	f380 8811 	msr	BASEPRI, r0
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f7fe febc 	bl	8004dec <vTaskSwitchContext>
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	f380 8811 	msr	BASEPRI, r0
 800607c:	bc09      	pop	{r0, r3}
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	6808      	ldr	r0, [r1, #0]
 8006082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006086:	f01e 0f10 	tst.w	lr, #16
 800608a:	bf08      	it	eq
 800608c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006090:	f380 8809 	msr	PSP, r0
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst>:
 80060a0:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	607b      	str	r3, [r7, #4]
}
 80060c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060c2:	f7fe fdd9 	bl	8004c78 <xTaskIncrementTick>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <xPortSysTickHandler+0x40>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f383 8811 	msr	BASEPRI, r3
}
 80060de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <vPortSetupTimerInterrupt+0x34>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <vPortSetupTimerInterrupt+0x38>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <vPortSetupTimerInterrupt+0x3c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0a      	ldr	r2, [pc, #40]	; (800612c <vPortSetupTimerInterrupt+0x40>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	099b      	lsrs	r3, r3, #6
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <vPortSetupTimerInterrupt+0x44>)
 800610a:	3b01      	subs	r3, #1
 800610c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800610e:	4b04      	ldr	r3, [pc, #16]	; (8006120 <vPortSetupTimerInterrupt+0x34>)
 8006110:	2207      	movs	r2, #7
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	e000e010 	.word	0xe000e010
 8006124:	e000e018 	.word	0xe000e018
 8006128:	20000000 	.word	0x20000000
 800612c:	10624dd3 	.word	0x10624dd3
 8006130:	e000e014 	.word	0xe000e014

08006134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006144 <vPortEnableVFP+0x10>
 8006138:	6801      	ldr	r1, [r0, #0]
 800613a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800613e:	6001      	str	r1, [r0, #0]
 8006140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006142:	bf00      	nop
 8006144:	e000ed88 	.word	0xe000ed88

08006148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800614e:	f3ef 8305 	mrs	r3, IPSR
 8006152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b0f      	cmp	r3, #15
 8006158:	d914      	bls.n	8006184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <vPortValidateInterruptPriority+0x70>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006164:	4b15      	ldr	r3, [pc, #84]	; (80061bc <vPortValidateInterruptPriority+0x74>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	7afa      	ldrb	r2, [r7, #11]
 800616a:	429a      	cmp	r2, r3
 800616c:	d20a      	bcs.n	8006184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	607b      	str	r3, [r7, #4]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <vPortValidateInterruptPriority+0x78>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <vPortValidateInterruptPriority+0x7c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d90a      	bls.n	80061aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	603b      	str	r3, [r7, #0]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <vPortValidateInterruptPriority+0x60>
	}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	e000e3f0 	.word	0xe000e3f0
 80061bc:	20000f18 	.word	0x20000f18
 80061c0:	e000ed0c 	.word	0xe000ed0c
 80061c4:	20000f1c 	.word	0x20000f1c

080061c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061d4:	f7fe fc94 	bl	8004b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061d8:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <pvPortMalloc+0x180>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061e0:	f000 f920 	bl	8006424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <pvPortMalloc+0x184>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 8093 	bne.w	8006318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01d      	beq.n	8006234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061f8:	2208      	movs	r2, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f023 0307 	bic.w	r3, r3, #7
 8006210:	3308      	adds	r3, #8
 8006212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <pvPortMalloc+0x6c>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	617b      	str	r3, [r7, #20]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d06e      	beq.n	8006318 <pvPortMalloc+0x150>
 800623a:	4b45      	ldr	r3, [pc, #276]	; (8006350 <pvPortMalloc+0x188>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d869      	bhi.n	8006318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006244:	4b43      	ldr	r3, [pc, #268]	; (8006354 <pvPortMalloc+0x18c>)
 8006246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006248:	4b42      	ldr	r3, [pc, #264]	; (8006354 <pvPortMalloc+0x18c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800624e:	e004      	b.n	800625a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d903      	bls.n	800626c <pvPortMalloc+0xa4>
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f1      	bne.n	8006250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800626c:	4b36      	ldr	r3, [pc, #216]	; (8006348 <pvPortMalloc+0x180>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	429a      	cmp	r2, r3
 8006274:	d050      	beq.n	8006318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2208      	movs	r2, #8
 800627c:	4413      	add	r3, r2
 800627e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	2308      	movs	r3, #8
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	429a      	cmp	r2, r3
 8006296:	d91f      	bls.n	80062d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <pvPortMalloc+0xf8>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	613b      	str	r3, [r7, #16]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062d2:	69b8      	ldr	r0, [r7, #24]
 80062d4:	f000 f908 	bl	80064e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062d8:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <pvPortMalloc+0x188>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <pvPortMalloc+0x188>)
 80062e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <pvPortMalloc+0x188>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <pvPortMalloc+0x190>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d203      	bcs.n	80062fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062f2:	4b17      	ldr	r3, [pc, #92]	; (8006350 <pvPortMalloc+0x188>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <pvPortMalloc+0x190>)
 80062f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <pvPortMalloc+0x184>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	431a      	orrs	r2, r3
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <pvPortMalloc+0x194>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a11      	ldr	r2, [pc, #68]	; (800635c <pvPortMalloc+0x194>)
 8006316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006318:	f7fe fc00 	bl	8004b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <pvPortMalloc+0x174>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	60fb      	str	r3, [r7, #12]
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <pvPortMalloc+0x172>
	return pvReturn;
 800633c:	69fb      	ldr	r3, [r7, #28]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3728      	adds	r7, #40	; 0x28
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20004b28 	.word	0x20004b28
 800634c:	20004b3c 	.word	0x20004b3c
 8006350:	20004b2c 	.word	0x20004b2c
 8006354:	20004b20 	.word	0x20004b20
 8006358:	20004b30 	.word	0x20004b30
 800635c:	20004b34 	.word	0x20004b34

08006360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04d      	beq.n	800640e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006372:	2308      	movs	r3, #8
 8006374:	425b      	negs	r3, r3
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	4b24      	ldr	r3, [pc, #144]	; (8006418 <vPortFree+0xb8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <vPortFree+0x44>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	60fb      	str	r3, [r7, #12]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <vPortFree+0x62>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60bb      	str	r3, [r7, #8]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	4b14      	ldr	r3, [pc, #80]	; (8006418 <vPortFree+0xb8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01e      	beq.n	800640e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d11a      	bne.n	800640e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <vPortFree+0xb8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	401a      	ands	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063e8:	f7fe fb8a 	bl	8004b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <vPortFree+0xbc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4413      	add	r3, r2
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <vPortFree+0xbc>)
 80063f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f000 f874 	bl	80064e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <vPortFree+0xc0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4a06      	ldr	r2, [pc, #24]	; (8006420 <vPortFree+0xc0>)
 8006408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800640a:	f7fe fb87 	bl	8004b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800640e:	bf00      	nop
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20004b3c 	.word	0x20004b3c
 800641c:	20004b2c 	.word	0x20004b2c
 8006420:	20004b38 	.word	0x20004b38

08006424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800642a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800642e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006430:	4b27      	ldr	r3, [pc, #156]	; (80064d0 <prvHeapInit+0xac>)
 8006432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00c      	beq.n	8006458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3307      	adds	r3, #7
 8006442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0307 	bic.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a1f      	ldr	r2, [pc, #124]	; (80064d0 <prvHeapInit+0xac>)
 8006454:	4413      	add	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800645c:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <prvHeapInit+0xb0>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006462:	4b1c      	ldr	r3, [pc, #112]	; (80064d4 <prvHeapInit+0xb0>)
 8006464:	2200      	movs	r2, #0
 8006466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	4413      	add	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006470:	2208      	movs	r2, #8
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <prvHeapInit+0xb4>)
 8006484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <prvHeapInit+0xb4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2200      	movs	r2, #0
 800648c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <prvHeapInit+0xb4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <prvHeapInit+0xb4>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <prvHeapInit+0xb8>)
 80064b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <prvHeapInit+0xbc>)
 80064ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <prvHeapInit+0xc0>)
 80064be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064c2:	601a      	str	r2, [r3, #0]
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	20000f20 	.word	0x20000f20
 80064d4:	20004b20 	.word	0x20004b20
 80064d8:	20004b28 	.word	0x20004b28
 80064dc:	20004b30 	.word	0x20004b30
 80064e0:	20004b2c 	.word	0x20004b2c
 80064e4:	20004b3c 	.word	0x20004b3c

080064e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064f0:	4b28      	ldr	r3, [pc, #160]	; (8006594 <prvInsertBlockIntoFreeList+0xac>)
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e002      	b.n	80064fc <prvInsertBlockIntoFreeList+0x14>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	d8f7      	bhi.n	80064f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4413      	add	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d108      	bne.n	800652a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	441a      	add	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	441a      	add	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d118      	bne.n	8006570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <prvInsertBlockIntoFreeList+0xb0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d00d      	beq.n	8006566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e008      	b.n	8006578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <prvInsertBlockIntoFreeList+0xb0>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e003      	b.n	8006578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d002      	beq.n	8006586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20004b20 	.word	0x20004b20
 8006598:	20004b28 	.word	0x20004b28

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4d0d      	ldr	r5, [pc, #52]	; (80065d4 <__libc_init_array+0x38>)
 80065a0:	4c0d      	ldr	r4, [pc, #52]	; (80065d8 <__libc_init_array+0x3c>)
 80065a2:	1b64      	subs	r4, r4, r5
 80065a4:	10a4      	asrs	r4, r4, #2
 80065a6:	2600      	movs	r6, #0
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	4d0b      	ldr	r5, [pc, #44]	; (80065dc <__libc_init_array+0x40>)
 80065ae:	4c0c      	ldr	r4, [pc, #48]	; (80065e0 <__libc_init_array+0x44>)
 80065b0:	f000 f8f2 	bl	8006798 <_init>
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	2600      	movs	r6, #0
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	080068ec 	.word	0x080068ec
 80065d8:	080068ec 	.word	0x080068ec
 80065dc:	080068ec 	.word	0x080068ec
 80065e0:	080068f0 	.word	0x080068f0

080065e4 <__retarget_lock_acquire_recursive>:
 80065e4:	4770      	bx	lr

080065e6 <__retarget_lock_release_recursive>:
 80065e6:	4770      	bx	lr

080065e8 <memcpy>:
 80065e8:	440a      	add	r2, r1
 80065ea:	4291      	cmp	r1, r2
 80065ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80065f0:	d100      	bne.n	80065f4 <memcpy+0xc>
 80065f2:	4770      	bx	lr
 80065f4:	b510      	push	{r4, lr}
 80065f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fe:	4291      	cmp	r1, r2
 8006600:	d1f9      	bne.n	80065f6 <memcpy+0xe>
 8006602:	bd10      	pop	{r4, pc}

08006604 <memset>:
 8006604:	4402      	add	r2, r0
 8006606:	4603      	mov	r3, r0
 8006608:	4293      	cmp	r3, r2
 800660a:	d100      	bne.n	800660e <memset+0xa>
 800660c:	4770      	bx	lr
 800660e:	f803 1b01 	strb.w	r1, [r3], #1
 8006612:	e7f9      	b.n	8006608 <memset+0x4>

08006614 <cleanup_glue>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	460c      	mov	r4, r1
 8006618:	6809      	ldr	r1, [r1, #0]
 800661a:	4605      	mov	r5, r0
 800661c:	b109      	cbz	r1, 8006622 <cleanup_glue+0xe>
 800661e:	f7ff fff9 	bl	8006614 <cleanup_glue>
 8006622:	4621      	mov	r1, r4
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800662a:	f000 b869 	b.w	8006700 <_free_r>
	...

08006630 <_reclaim_reent>:
 8006630:	4b2c      	ldr	r3, [pc, #176]	; (80066e4 <_reclaim_reent+0xb4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4283      	cmp	r3, r0
 8006636:	b570      	push	{r4, r5, r6, lr}
 8006638:	4604      	mov	r4, r0
 800663a:	d051      	beq.n	80066e0 <_reclaim_reent+0xb0>
 800663c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800663e:	b143      	cbz	r3, 8006652 <_reclaim_reent+0x22>
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d14a      	bne.n	80066dc <_reclaim_reent+0xac>
 8006646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	b111      	cbz	r1, 8006652 <_reclaim_reent+0x22>
 800664c:	4620      	mov	r0, r4
 800664e:	f000 f857 	bl	8006700 <_free_r>
 8006652:	6961      	ldr	r1, [r4, #20]
 8006654:	b111      	cbz	r1, 800665c <_reclaim_reent+0x2c>
 8006656:	4620      	mov	r0, r4
 8006658:	f000 f852 	bl	8006700 <_free_r>
 800665c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800665e:	b111      	cbz	r1, 8006666 <_reclaim_reent+0x36>
 8006660:	4620      	mov	r0, r4
 8006662:	f000 f84d 	bl	8006700 <_free_r>
 8006666:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006668:	b111      	cbz	r1, 8006670 <_reclaim_reent+0x40>
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f848 	bl	8006700 <_free_r>
 8006670:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006672:	b111      	cbz	r1, 800667a <_reclaim_reent+0x4a>
 8006674:	4620      	mov	r0, r4
 8006676:	f000 f843 	bl	8006700 <_free_r>
 800667a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800667c:	b111      	cbz	r1, 8006684 <_reclaim_reent+0x54>
 800667e:	4620      	mov	r0, r4
 8006680:	f000 f83e 	bl	8006700 <_free_r>
 8006684:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006686:	b111      	cbz	r1, 800668e <_reclaim_reent+0x5e>
 8006688:	4620      	mov	r0, r4
 800668a:	f000 f839 	bl	8006700 <_free_r>
 800668e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006690:	b111      	cbz	r1, 8006698 <_reclaim_reent+0x68>
 8006692:	4620      	mov	r0, r4
 8006694:	f000 f834 	bl	8006700 <_free_r>
 8006698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800669a:	b111      	cbz	r1, 80066a2 <_reclaim_reent+0x72>
 800669c:	4620      	mov	r0, r4
 800669e:	f000 f82f 	bl	8006700 <_free_r>
 80066a2:	69a3      	ldr	r3, [r4, #24]
 80066a4:	b1e3      	cbz	r3, 80066e0 <_reclaim_reent+0xb0>
 80066a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066a8:	4620      	mov	r0, r4
 80066aa:	4798      	blx	r3
 80066ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80066ae:	b1b9      	cbz	r1, 80066e0 <_reclaim_reent+0xb0>
 80066b0:	4620      	mov	r0, r4
 80066b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066b6:	f7ff bfad 	b.w	8006614 <cleanup_glue>
 80066ba:	5949      	ldr	r1, [r1, r5]
 80066bc:	b941      	cbnz	r1, 80066d0 <_reclaim_reent+0xa0>
 80066be:	3504      	adds	r5, #4
 80066c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c2:	2d80      	cmp	r5, #128	; 0x80
 80066c4:	68d9      	ldr	r1, [r3, #12]
 80066c6:	d1f8      	bne.n	80066ba <_reclaim_reent+0x8a>
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 f819 	bl	8006700 <_free_r>
 80066ce:	e7ba      	b.n	8006646 <_reclaim_reent+0x16>
 80066d0:	680e      	ldr	r6, [r1, #0]
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 f814 	bl	8006700 <_free_r>
 80066d8:	4631      	mov	r1, r6
 80066da:	e7ef      	b.n	80066bc <_reclaim_reent+0x8c>
 80066dc:	2500      	movs	r5, #0
 80066de:	e7ef      	b.n	80066c0 <_reclaim_reent+0x90>
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
 80066e2:	bf00      	nop
 80066e4:	20000010 	.word	0x20000010

080066e8 <__malloc_lock>:
 80066e8:	4801      	ldr	r0, [pc, #4]	; (80066f0 <__malloc_lock+0x8>)
 80066ea:	f7ff bf7b 	b.w	80065e4 <__retarget_lock_acquire_recursive>
 80066ee:	bf00      	nop
 80066f0:	20004b40 	.word	0x20004b40

080066f4 <__malloc_unlock>:
 80066f4:	4801      	ldr	r0, [pc, #4]	; (80066fc <__malloc_unlock+0x8>)
 80066f6:	f7ff bf76 	b.w	80065e6 <__retarget_lock_release_recursive>
 80066fa:	bf00      	nop
 80066fc:	20004b40 	.word	0x20004b40

08006700 <_free_r>:
 8006700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006702:	2900      	cmp	r1, #0
 8006704:	d044      	beq.n	8006790 <_free_r+0x90>
 8006706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800670a:	9001      	str	r0, [sp, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f1a1 0404 	sub.w	r4, r1, #4
 8006712:	bfb8      	it	lt
 8006714:	18e4      	addlt	r4, r4, r3
 8006716:	f7ff ffe7 	bl	80066e8 <__malloc_lock>
 800671a:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <_free_r+0x94>)
 800671c:	9801      	ldr	r0, [sp, #4]
 800671e:	6813      	ldr	r3, [r2, #0]
 8006720:	b933      	cbnz	r3, 8006730 <_free_r+0x30>
 8006722:	6063      	str	r3, [r4, #4]
 8006724:	6014      	str	r4, [r2, #0]
 8006726:	b003      	add	sp, #12
 8006728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800672c:	f7ff bfe2 	b.w	80066f4 <__malloc_unlock>
 8006730:	42a3      	cmp	r3, r4
 8006732:	d908      	bls.n	8006746 <_free_r+0x46>
 8006734:	6825      	ldr	r5, [r4, #0]
 8006736:	1961      	adds	r1, r4, r5
 8006738:	428b      	cmp	r3, r1
 800673a:	bf01      	itttt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	1949      	addeq	r1, r1, r5
 8006742:	6021      	streq	r1, [r4, #0]
 8006744:	e7ed      	b.n	8006722 <_free_r+0x22>
 8006746:	461a      	mov	r2, r3
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	b10b      	cbz	r3, 8006750 <_free_r+0x50>
 800674c:	42a3      	cmp	r3, r4
 800674e:	d9fa      	bls.n	8006746 <_free_r+0x46>
 8006750:	6811      	ldr	r1, [r2, #0]
 8006752:	1855      	adds	r5, r2, r1
 8006754:	42a5      	cmp	r5, r4
 8006756:	d10b      	bne.n	8006770 <_free_r+0x70>
 8006758:	6824      	ldr	r4, [r4, #0]
 800675a:	4421      	add	r1, r4
 800675c:	1854      	adds	r4, r2, r1
 800675e:	42a3      	cmp	r3, r4
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	d1e0      	bne.n	8006726 <_free_r+0x26>
 8006764:	681c      	ldr	r4, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	6053      	str	r3, [r2, #4]
 800676a:	4421      	add	r1, r4
 800676c:	6011      	str	r1, [r2, #0]
 800676e:	e7da      	b.n	8006726 <_free_r+0x26>
 8006770:	d902      	bls.n	8006778 <_free_r+0x78>
 8006772:	230c      	movs	r3, #12
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	e7d6      	b.n	8006726 <_free_r+0x26>
 8006778:	6825      	ldr	r5, [r4, #0]
 800677a:	1961      	adds	r1, r4, r5
 800677c:	428b      	cmp	r3, r1
 800677e:	bf04      	itt	eq
 8006780:	6819      	ldreq	r1, [r3, #0]
 8006782:	685b      	ldreq	r3, [r3, #4]
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	bf04      	itt	eq
 8006788:	1949      	addeq	r1, r1, r5
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	6054      	str	r4, [r2, #4]
 800678e:	e7ca      	b.n	8006726 <_free_r+0x26>
 8006790:	b003      	add	sp, #12
 8006792:	bd30      	pop	{r4, r5, pc}
 8006794:	20004b44 	.word	0x20004b44

08006798 <_init>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr

080067a4 <_fini>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr
