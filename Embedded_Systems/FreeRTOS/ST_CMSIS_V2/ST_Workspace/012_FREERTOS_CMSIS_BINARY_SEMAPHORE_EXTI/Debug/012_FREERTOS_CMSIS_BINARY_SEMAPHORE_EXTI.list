
012_FREERTOS_CMSIS_BINARY_SEMAPHORE_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006858  08006858  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006860  08006860  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b44  20004b44  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a0d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d0  00000000  00000000  00039ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001330  00000000  00000000  0003e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003139  00000000  00000000  0003f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fcc  00000000  00000000  00042639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4bc2  00000000  00000000  00058605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d1c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058d0  00000000  00000000  0012d218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006738 	.word	0x08006738

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006738 	.word	0x08006738

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fafa 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f832 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8c2 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f896 	bl	8000664 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f002 fd46 	bl	8002fc8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <main+0x50>)
 800053e:	2100      	movs	r1, #0
 8000540:	2001      	movs	r0, #1
 8000542:	f002 fe38 	bl	80031b6 <osSemaphoreNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <main+0x54>)
 800054a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <main+0x58>)
 800054e:	2100      	movs	r1, #0
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <main+0x5c>)
 8000552:	f002 fd83 	bl	800305c <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <main+0x60>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <main+0x64>)
 800055e:	2100      	movs	r1, #0
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0x68>)
 8000562:	f002 fd7b 	bl	800305c <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <main+0x6c>)
 800056a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056c:	f002 fd50 	bl	8003010 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x4c>
 8000572:	bf00      	nop
 8000574:	080067d0 	.word	0x080067d0
 8000578:	200000dc 	.word	0x200000dc
 800057c:	08006788 	.word	0x08006788
 8000580:	080007f1 	.word	0x080007f1
 8000584:	200000d4 	.word	0x200000d4
 8000588:	080067ac 	.word	0x080067ac
 800058c:	08000815 	.word	0x08000815
 8000590:	200000d8 	.word	0x200000d8

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fffe 	bl	80065a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <SystemClock_Config+0xc8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a26      	ldr	r2, [pc, #152]	; (800065c <SystemClock_Config+0xc8>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <SystemClock_Config+0xc8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b21      	ldr	r3, [pc, #132]	; (8000660 <SystemClock_Config+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a20      	ldr	r2, [pc, #128]	; (8000660 <SystemClock_Config+0xcc>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fe05 	bl	8001228 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000624:	f000 f910 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000630:	23b0      	movs	r3, #176	; 0xb0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f868 	bl	8001718 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800064e:	f000 f8fb 	bl	8000848 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 fd3c 	bl	8002118 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f8cf 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000090 	.word	0x20000090
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <MX_GPIO_Init+0xe4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a31      	ldr	r2, [pc, #196]	; (800079c <MX_GPIO_Init+0xe4>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MX_GPIO_Init+0xe4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_GPIO_Init+0xe4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2a      	ldr	r2, [pc, #168]	; (800079c <MX_GPIO_Init+0xe4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <MX_GPIO_Init+0xe4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_GPIO_Init+0xe4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a23      	ldr	r2, [pc, #140]	; (800079c <MX_GPIO_Init+0xe4>)
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_GPIO_Init+0xe4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_GPIO_Init+0xe4>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_GPIO_Init+0xe4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000744:	4816      	ldr	r0, [pc, #88]	; (80007a0 <MX_GPIO_Init+0xe8>)
 8000746:	f000 fd3d 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_GPIO_Init+0xec>)
 8000760:	f000 fb94 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000764:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_GPIO_Init+0xe8>)
 800077e:	f000 fb85 	bl	8000e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	2006      	movs	r0, #6
 8000788:	f000 fac4 	bl	8000d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800078c:	2006      	movs	r0, #6
 800078e:	f000 fadd 	bl	8000d4c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	40020000 	.word	0x40020000

080007a8 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe8d 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80007ba:	200a      	movs	r0, #10
 80007bc:	f7ff fe8a 	bl	80004d4 <ITM_SendChar>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
	Task_action('!');
 80007d2:	2021      	movs	r0, #33	; 0x21
 80007d4:	f7ff ffe8 	bl	80007a8 <Task_action>
	osSemaphoreRelease(myBinarySem01Handle);
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <HAL_GPIO_EXTI_Callback+0x24>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fdc5 	bl	800336c <osSemaphoreRelease>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000dc 	.word	0x200000dc

080007f0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySem01Handle, 4000);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <StartTask1+0x20>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fd61 	bl	80032c8 <osSemaphoreAcquire>
	  Task_action('2');
 8000806:	2032      	movs	r0, #50	; 0x32
 8000808:	f7ff ffce 	bl	80007a8 <Task_action>
	  osSemaphoreAcquire(myBinarySem01Handle, 4000);
 800080c:	e7f4      	b.n	80007f8 <StartTask1+0x8>
 800080e:	bf00      	nop
 8000810:	200000dc 	.word	0x200000dc

08000814 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f002 fcaf 	bl	8003180 <osDelay>
 8000822:	e7fb      	b.n	800081c <StartTask2+0x8>

08000824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 f995 	bl	8000b64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40002000 	.word	0x40002000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 fa3b 	bl	8000d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d133      	bne.n	8000936 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <HAL_UART_MspInit+0x9c>)
 8000922:	f000 fab3 	bl	8000e8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2105      	movs	r1, #5
 800092a:	2026      	movs	r0, #38	; 0x26
 800092c:	f000 f9f2 	bl	8000d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000930:	2026      	movs	r0, #38	; 0x26
 8000932:	f000 fa0b 	bl	8000d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40004400 	.word	0x40004400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <HAL_InitTick+0xe4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <HAL_InitTick+0xe4>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <HAL_InitTick+0xe4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f8e8 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000992:	f001 f8b9 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000996:	6378      	str	r0, [r7, #52]	; 0x34
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099a:	f001 f8b5 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 800099e:	4603      	mov	r3, r0
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <HAL_InitTick+0xe8>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	3b01      	subs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <HAL_InitTick+0xec>)
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <HAL_InitTick+0xf0>)
 80009b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xec>)
 80009ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009be:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_InitTick+0xec>)
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_InitTick+0xec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_InitTick+0xec>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009d8:	4817      	ldr	r0, [pc, #92]	; (8000a38 <HAL_InitTick+0xec>)
 80009da:	f001 f8ef 	bl	8001bbc <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11b      	bne.n	8000a24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <HAL_InitTick+0xec>)
 80009ee:	f001 f93f 	bl	8001c70 <HAL_TIM_Base_Start_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d111      	bne.n	8000a24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a00:	202d      	movs	r0, #45	; 0x2d
 8000a02:	f000 f9a3 	bl	8000d4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d808      	bhi.n	8000a1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	202d      	movs	r0, #45	; 0x2d
 8000a12:	f000 f97f 	bl	8000d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_InitTick+0xf4>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e002      	b.n	8000a24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3738      	adds	r7, #56	; 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	200000e0 	.word	0x200000e0
 8000a3c:	40002000 	.word	0x40002000
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f000 fbbf 	bl	80011f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <USART2_IRQHandler+0x10>)
 8000a86:	f001 fb95 	bl	80021b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000090 	.word	0x20000090

08000a94 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a9a:	f001 f959 	bl	8001d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000e0 	.word	0x200000e0

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ad2:	490e      	ldr	r1, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae8:	4c0b      	ldr	r4, [pc, #44]	; (8000b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af6:	f7ff ffd7 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f005 fd1f 	bl	800653c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fd11 	bl	8000524 <main>
  bx  lr    
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b10:	08006868 	.word	0x08006868
  ldr r2, =_sbss
 8000b14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b18:	20004b44 	.word	0x20004b44

08000b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <HAL_Init+0x40>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_Init+0x40>)
 8000b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_Init+0x40>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f8d8 	bl	8000cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f7ff fefc 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff fe7e 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023c00 	.word	0x40023c00

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000128 	.word	0x20000128

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000128 	.word	0x20000128

08000ba4 <__NVIC_SetPriorityGrouping>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ff4c 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d26:	f7ff ff61 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f7ff ffb1 	bl	8000c98 <NVIC_EncodePriority>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff80 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff54 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d76:	f7ff ff09 	bl	8000b8c <HAL_GetTick>
 8000d7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d008      	beq.n	8000d9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e052      	b.n	8000e40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0216 	bic.w	r2, r2, #22
 8000da8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	695a      	ldr	r2, [r3, #20]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <HAL_DMA_Abort+0x62>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0208 	bic.w	r2, r2, #8
 8000dd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0201 	bic.w	r2, r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dea:	e013      	b.n	8000e14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dec:	f7ff fece 	bl	8000b8c <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d90c      	bls.n	8000e14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2203      	movs	r2, #3
 8000e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e015      	b.n	8000e40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1e4      	bne.n	8000dec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e26:	223f      	movs	r2, #63	; 0x3f
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d004      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00c      	b.n	8000e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2205      	movs	r2, #5
 8000e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0201 	bic.w	r2, r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e16b      	b.n	8001180 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 815a 	bne.w	800117a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d130      	bne.n	8000f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 0201 	and.w	r2, r3, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d017      	beq.n	8000f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0203 	and.w	r2, r3, #3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80b4 	beq.w	800117a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b60      	ldr	r3, [pc, #384]	; (8001198 <HAL_GPIO_Init+0x30c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a5f      	ldr	r2, [pc, #380]	; (8001198 <HAL_GPIO_Init+0x30c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102e:	4a5b      	ldr	r2, [pc, #364]	; (800119c <HAL_GPIO_Init+0x310>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <HAL_GPIO_Init+0x314>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d02b      	beq.n	80010b2 <HAL_GPIO_Init+0x226>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a51      	ldr	r2, [pc, #324]	; (80011a4 <HAL_GPIO_Init+0x318>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x222>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <HAL_GPIO_Init+0x31c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x21e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4f      	ldr	r2, [pc, #316]	; (80011ac <HAL_GPIO_Init+0x320>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x21a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x216>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <HAL_GPIO_Init+0x328>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x212>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4c      	ldr	r2, [pc, #304]	; (80011b8 <HAL_GPIO_Init+0x32c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x20e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <HAL_GPIO_Init+0x330>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x20a>
 8001092:	2307      	movs	r3, #7
 8001094:	e00e      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 8001096:	2308      	movs	r3, #8
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 800109a:	2306      	movs	r3, #6
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x228>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x310>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <HAL_GPIO_Init+0x334>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <HAL_GPIO_Init+0x334>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_GPIO_Init+0x334>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_GPIO_Init+0x334>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_GPIO_Init+0x334>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114a:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_GPIO_Init+0x334>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_GPIO_Init+0x334>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <HAL_GPIO_Init+0x334>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae90 	bls.w	8000ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021c00 	.word	0x40021c00
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fad6 	bl	80007c8 <HAL_GPIO_EXTI_Callback>
  }
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40013c00 	.word	0x40013c00

08001228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e267      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d075      	beq.n	8001332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001246:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b04      	cmp	r3, #4
 8001250:	d00c      	beq.n	800126c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001252:	4b85      	ldr	r3, [pc, #532]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	2b08      	cmp	r3, #8
 800125c:	d112      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b82      	ldr	r3, [pc, #520]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126a:	d10b      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d05b      	beq.n	8001330 <HAL_RCC_OscConfig+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d157      	bne.n	8001330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e242      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128c:	d106      	bne.n	800129c <HAL_RCC_OscConfig+0x74>
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6f      	ldr	r2, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6c      	ldr	r2, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 80012c0:	4b69      	ldr	r3, [pc, #420]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a68      	ldr	r2, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b66      	ldr	r3, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc54 	bl	8000b8c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc50 	bl	8000b8c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e207      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xc0>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc40 	bl	8000b8c <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fc3c 	bl	8000b8c <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1f3      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b51      	ldr	r3, [pc, #324]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0xe8>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d063      	beq.n	8001406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1c7      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4937      	ldr	r1, [pc, #220]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e03a      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_OscConfig+0x244>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fbf5 	bl	8000b8c <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fbf1 	bl	8000b8c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1a8      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4925      	ldr	r1, [pc, #148]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_OscConfig+0x244>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fbd4 	bl	8000b8c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fbd0 	bl	8000b8c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e187      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d036      	beq.n	8001480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_RCC_OscConfig+0x248>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fbb4 	bl	8000b8c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fbb0 	bl	8000b8c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e167      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800143c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x200>
 8001446:	e01b      	b.n	8001480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_RCC_OscConfig+0x248>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb9d 	bl	8000b8c <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e00e      	b.n	8001474 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fb99 	bl	8000b8c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d907      	bls.n	8001474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e150      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001468:	40023800 	.word	0x40023800
 800146c:	42470000 	.word	0x42470000
 8001470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ea      	bne.n	8001456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8097 	beq.w	80015bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b81      	ldr	r3, [pc, #516]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b7d      	ldr	r3, [pc, #500]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a7c      	ldr	r2, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b77      	ldr	r3, [pc, #476]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b74      	ldr	r3, [pc, #464]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a73      	ldr	r2, [pc, #460]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb59 	bl	8000b8c <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff fb55 	bl	8000b8c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e10c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x2ea>
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a63      	ldr	r2, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	e01c      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x30c>
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a5e      	ldr	r2, [pc, #376]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a5b      	ldr	r2, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001534:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0304 	bic.w	r3, r3, #4
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d015      	beq.n	8001580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fb1a 	bl	8000b8c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fb16 	bl	8000b8c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0cb      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ee      	beq.n	800155c <HAL_RCC_OscConfig+0x334>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fb04 	bl	8000b8c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fb00 	bl	8000b8c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0b5      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ee      	bne.n	8001588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a38      	ldr	r2, [pc, #224]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a1 	beq.w	8001708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d05c      	beq.n	800168c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d141      	bne.n	800165e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_RCC_OscConfig+0x478>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fad4 	bl	8000b8c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fad0 	bl	8000b8c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e087      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	3b01      	subs	r3, #1
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	491b      	ldr	r1, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff faa9 	bl	8000b8c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff faa5 	bl	8000b8c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e05c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x416>
 800165c:	e054      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fa92 	bl	8000b8c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fa8e 	bl	8000b8c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e045      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
 800168a:	e03d      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e038      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000
 80016a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x4ec>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d028      	beq.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d121      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d11a      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	4293      	cmp	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0cc      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d90c      	bls.n	8001754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d044      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d119      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e067      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4934      	ldr	r1, [pc, #208]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff f9c0 	bl	8000b8c <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff f9bc 	bl	8000b8c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20c      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f844 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	080067e0 	.word	0x080067e0
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b094      	sub	sp, #80	; 0x50
 80018ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	647b      	str	r3, [r7, #68]	; 0x44
 80018f0:	2300      	movs	r3, #0
 80018f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018f4:	2300      	movs	r3, #0
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fc:	4b79      	ldr	r3, [pc, #484]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d00d      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x40>
 8001908:	2b08      	cmp	r3, #8
 800190a:	f200 80e1 	bhi.w	8001ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x34>
 8001912:	2b04      	cmp	r3, #4
 8001914:	d003      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x3a>
 8001916:	e0db      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800191c:	e0db      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191e:	4b73      	ldr	r3, [pc, #460]	; (8001aec <HAL_RCC_GetSysClockFreq+0x208>)
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001922:	e0d8      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001924:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800192c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192e:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	2200      	movs	r2, #0
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
 8001944:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
 8001952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001956:	4622      	mov	r2, r4
 8001958:	462b      	mov	r3, r5
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0159      	lsls	r1, r3, #5
 8001964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001968:	0150      	lsls	r0, r2, #5
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4621      	mov	r1, r4
 8001970:	1a51      	subs	r1, r2, r1
 8001972:	6139      	str	r1, [r7, #16]
 8001974:	4629      	mov	r1, r5
 8001976:	eb63 0301 	sbc.w	r3, r3, r1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001988:	4659      	mov	r1, fp
 800198a:	018b      	lsls	r3, r1, #6
 800198c:	4651      	mov	r1, sl
 800198e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001992:	4651      	mov	r1, sl
 8001994:	018a      	lsls	r2, r1, #6
 8001996:	4651      	mov	r1, sl
 8001998:	ebb2 0801 	subs.w	r8, r2, r1
 800199c:	4659      	mov	r1, fp
 800199e:	eb63 0901 	sbc.w	r9, r3, r1
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019b6:	4690      	mov	r8, r2
 80019b8:	4699      	mov	r9, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	eb18 0303 	adds.w	r3, r8, r3
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	462b      	mov	r3, r5
 80019c4:	eb49 0303 	adc.w	r3, r9, r3
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019d6:	4629      	mov	r1, r5
 80019d8:	024b      	lsls	r3, r1, #9
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e0:	4621      	mov	r1, r4
 80019e2:	024a      	lsls	r2, r1, #9
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ea:	2200      	movs	r2, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019f4:	f7fe fbec 	bl	80001d0 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a00:	e058      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	464b      	mov	r3, r9
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0159      	lsls	r1, r3, #5
 8001a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2e:	0150      	lsls	r0, r2, #5
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4641      	mov	r1, r8
 8001a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a54:	ebb2 040a 	subs.w	r4, r2, sl
 8001a58:	eb63 050b 	sbc.w	r5, r3, fp
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	00eb      	lsls	r3, r5, #3
 8001a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6a:	00e2      	lsls	r2, r4, #3
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	18e3      	adds	r3, r4, r3
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	464b      	mov	r3, r9
 8001a78:	eb45 0303 	adc.w	r3, r5, r3
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	028b      	lsls	r3, r1, #10
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a94:	4621      	mov	r1, r4
 8001a96:	028a      	lsls	r2, r1, #10
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	61fa      	str	r2, [r7, #28]
 8001aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa8:	f7fe fb92 	bl	80001d0 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3750      	adds	r7, #80	; 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	080067f0 	.word	0x080067f0

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffdc 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	080067f0 	.word	0x080067f0

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f839 	bl	8001c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f9d8 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d001      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e04e      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d022      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d01d      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d010      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	e007      	b.n	8001d24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40010400 	.word	0x40010400
 8001d48:	40014000 	.word	0x40014000
 8001d4c:	40001800 	.word	0x40001800

08001d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0202 	mvn.w	r2, #2
 8001d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8ee 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8e0 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8f1 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0204 	mvn.w	r2, #4
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8c4 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8b6 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8c7 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0208 	mvn.w	r2, #8
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f89a 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f88c 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f89d 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0210 	mvn.w	r2, #16
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f870 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f862 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f873 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0201 	mvn.w	r2, #1
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fca8 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	2b80      	cmp	r3, #128	; 0x80
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f902 	bl	8002104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	2b40      	cmp	r3, #64	; 0x40
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f838 	bl	8001f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0220 	mvn.w	r2, #32
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8cc 	bl	80020f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d00f      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <TIM_Base_SetConfig+0x118>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <TIM_Base_SetConfig+0x11c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <TIM_Base_SetConfig+0x120>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2f      	ldr	r2, [pc, #188]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d027      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <TIM_Base_SetConfig+0x118>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d023      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <TIM_Base_SetConfig+0x11c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <TIM_Base_SetConfig+0x120>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d017      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <TIM_Base_SetConfig+0x128>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <TIM_Base_SetConfig+0x12c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <TIM_Base_SetConfig+0x130>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <TIM_Base_SetConfig+0x134>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <TIM_Base_SetConfig+0x138>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a23      	ldr	r2, [pc, #140]	; (80020ec <TIM_Base_SetConfig+0x13c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <TIM_Base_SetConfig+0xf8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40010400 	.word	0x40010400
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800
 80020e4:	40001800 	.word	0x40001800
 80020e8:	40001c00 	.word	0x40001c00
 80020ec:	40002000 	.word	0x40002000

080020f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e03f      	b.n	80021aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fbb4 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800215a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fc7b 	bl	8002a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0ba      	sub	sp, #232	; 0xe8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10f      	bne.n	800221a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fb65 	bl	80028e2 <UART_Receive_IT>
      return;
 8002218:	e256      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800221a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80de 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
 8002224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80d1 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
 800224a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
 800226e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0202 	orr.w	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
 8002292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d011      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
 80022b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0208 	orr.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 81ed 	beq.w	80026be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
 80022f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 faf0 	bl	80028e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_UART_IRQHandler+0x17a>
 8002326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04f      	beq.n	80023ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9f8 	bl	8002724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d141      	bne.n	80023c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800235c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3314      	adds	r3, #20
 800236a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800236e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800237a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1d9      	bne.n	8002342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	2b00      	cmp	r3, #0
 8002394:	d013      	beq.n	80023be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	4a7d      	ldr	r2, [pc, #500]	; (8002590 <HAL_UART_IRQHandler+0x3dc>)
 800239c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fd50 	bl	8000e48 <HAL_DMA_Abort_IT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023bc:	e00e      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f99a 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c4:	e00a      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f996 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	e006      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f992 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023da:	e170      	b.n	80026be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	bf00      	nop
    return;
 80023de:	e16e      	b.n	80026be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 814a 	bne.w	800267e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8143 	beq.w	800267e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 813c 	beq.w	800267e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	f040 80b4 	bne.w	8002594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8140 	beq.w	80026c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800244a:	429a      	cmp	r2, r3
 800244c:	f080 8139 	bcs.w	80026c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002462:	f000 8088 	beq.w	8002576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800247c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330c      	adds	r3, #12
 800248e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800249e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1d9      	bne.n	8002466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3314      	adds	r3, #20
 80024b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	e853 3f00 	ldrex	r3, [r3]
 80024c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3314      	adds	r3, #20
 80024d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e1      	bne.n	80024b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3314      	adds	r3, #20
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f8:	e853 3f00 	ldrex	r3, [r3]
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800251a:	e841 2300 	strex	r3, r2, [r1]
 800251e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e3      	bne.n	80024ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	e853 3f00 	ldrex	r3, [r3]
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002546:	f023 0310 	bic.w	r3, r3, #16
 800254a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002558:	65ba      	str	r2, [r7, #88]	; 0x58
 800255a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800255e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002560:	e841 2300 	strex	r3, r2, [r1]
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e3      	bne.n	8002534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fbf9 	bl	8000d68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800257e:	b29b      	uxth	r3, r3
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8c0 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800258c:	e099      	b.n	80026c2 <HAL_UART_IRQHandler+0x50e>
 800258e:	bf00      	nop
 8002590:	080027eb 	.word	0x080027eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800259c:	b29b      	uxth	r3, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 808b 	beq.w	80026c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8086 	beq.w	80026c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025de:	647a      	str	r2, [r7, #68]	; 0x44
 80025e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	623b      	str	r3, [r7, #32]
   return(result);
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002616:	633a      	str	r2, [r7, #48]	; 0x30
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800261c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e3      	bne.n	80025f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	60fb      	str	r3, [r7, #12]
   return(result);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800265c:	61fa      	str	r2, [r7, #28]
 800265e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	e841 2300 	strex	r3, r2, [r1]
 8002668:	617b      	str	r3, [r7, #20]
   return(result);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f848 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800267c:	e023      	b.n	80026c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_UART_IRQHandler+0x4ea>
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8bb 	bl	8002812 <UART_Transmit_IT>
    return;
 800269c:	e014      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00e      	beq.n	80026c8 <HAL_UART_IRQHandler+0x514>
 80026aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8fb 	bl	80028b2 <UART_EndTransmit_IT>
    return;
 80026bc:	e004      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
    return;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
      return;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
      return;
 80026c6:	bf00      	nop
  }
}
 80026c8:	37e8      	adds	r7, #232	; 0xe8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop

080026d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002724:	b480      	push	{r7}
 8002726:	b095      	sub	sp, #84	; 0x54
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	e853 3f00 	ldrex	r3, [r3]
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800274c:	643a      	str	r2, [r7, #64]	; 0x40
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002754:	e841 2300 	strex	r3, r2, [r1]
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e5      	bne.n	800272c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e5      	bne.n	8002760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	2b01      	cmp	r3, #1
 800279a:	d119      	bne.n	80027d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027bc:	61ba      	str	r2, [r7, #24]
 80027be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6979      	ldr	r1, [r7, #20]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	613b      	str	r3, [r7, #16]
   return(result);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e5      	bne.n	800279c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027de:	bf00      	nop
 80027e0:	3754      	adds	r7, #84	; 0x54
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff ff77 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b21      	cmp	r3, #33	; 0x21
 8002824:	d13e      	bne.n	80028a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d114      	bne.n	800285a <UART_Transmit_IT+0x48>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d110      	bne.n	800285a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800284c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	1c9a      	adds	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	621a      	str	r2, [r3, #32]
 8002858:	e008      	b.n	800286c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	1c59      	adds	r1, r3, #1
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6211      	str	r1, [r2, #32]
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29b      	uxth	r3, r3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4619      	mov	r1, r3
 800287a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fefc 	bl	80026d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b08c      	sub	sp, #48	; 0x30
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b22      	cmp	r3, #34	; 0x22
 80028f4:	f040 80ab 	bne.w	8002a4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d117      	bne.n	8002932 <UART_Receive_IT+0x50>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002920:	b29a      	uxth	r2, r3
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	1c9a      	adds	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
 8002930:	e026      	b.n	8002980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002944:	d007      	beq.n	8002956 <UART_Receive_IT+0x74>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <UART_Receive_IT+0x82>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e008      	b.n	8002976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002970:	b2da      	uxtb	r2, r3
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002990:	2b00      	cmp	r3, #0
 8002992:	d15a      	bne.n	8002a4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0220 	bic.w	r2, r2, #32
 80029a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d135      	bne.n	8002a40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f023 0310 	bic.w	r3, r3, #16
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	330c      	adds	r3, #12
 80029f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fa:	623a      	str	r2, [r7, #32]
 80029fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	69f9      	ldr	r1, [r7, #28]
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e5      	bne.n	80029da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d10a      	bne.n	8002a32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a36:	4619      	mov	r1, r3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fe67 	bl	800270c <HAL_UARTEx_RxEventCallback>
 8002a3e:	e002      	b.n	8002a46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fe4f 	bl	80026e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e002      	b.n	8002a50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3730      	adds	r7, #48	; 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b0c0      	sub	sp, #256	; 0x100
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	68d9      	ldr	r1, [r3, #12]
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	ea40 0301 	orr.w	r3, r0, r1
 8002a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ab0:	f021 010c 	bic.w	r1, r1, #12
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad2:	6999      	ldr	r1, [r3, #24]
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	ea40 0301 	orr.w	r3, r0, r1
 8002ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <UART_SetConfig+0x2cc>)
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d005      	beq.n	8002af8 <UART_SetConfig+0xa0>
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <UART_SetConfig+0x2d0>)
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d104      	bne.n	8002b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af8:	f7ff f81a 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b00:	e003      	b.n	8002b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b02:	f7ff f801 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b14:	f040 810c 	bne.w	8002d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	1891      	adds	r1, r2, r2
 8002b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b32:	415b      	adcs	r3, r3
 8002b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	eb12 0801 	adds.w	r8, r2, r1
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb43 0901 	adc.w	r9, r3, r1
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b5a:	4690      	mov	r8, r2
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	4623      	mov	r3, r4
 8002b60:	eb18 0303 	adds.w	r3, r8, r3
 8002b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b68:	462b      	mov	r3, r5
 8002b6a:	eb49 0303 	adc.w	r3, r9, r3
 8002b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b86:	460b      	mov	r3, r1
 8002b88:	18db      	adds	r3, r3, r3
 8002b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	eb42 0303 	adc.w	r3, r2, r3
 8002b92:	657b      	str	r3, [r7, #84]	; 0x54
 8002b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b9c:	f7fd fb18 	bl	80001d0 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	011c      	lsls	r4, r3, #4
 8002bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	1891      	adds	r1, r2, r2
 8002bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf0:	4692      	mov	sl, r2
 8002bf2:	469b      	mov	fp, r3
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	eb4b 0303 	adc.w	r3, fp, r3
 8002c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	18db      	adds	r3, r3, r3
 8002c20:	643b      	str	r3, [r7, #64]	; 0x40
 8002c22:	4613      	mov	r3, r2
 8002c24:	eb42 0303 	adc.w	r3, r2, r3
 8002c28:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c32:	f7fd facd 	bl	80001d0 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2264      	movs	r2, #100	; 0x64
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	1acb      	subs	r3, r1, r3
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002c54:	fba3 2302 	umull	r2, r3, r3, r2
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c60:	441c      	add	r4, r3
 8002c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	1891      	adds	r1, r2, r2
 8002c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c7c:	415b      	adcs	r3, r3
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c84:	4641      	mov	r1, r8
 8002c86:	1851      	adds	r1, r2, r1
 8002c88:	6339      	str	r1, [r7, #48]	; 0x30
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	414b      	adcs	r3, r1
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	00cb      	lsls	r3, r1, #3
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	00ca      	lsls	r2, r1, #3
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb8:	464b      	mov	r3, r9
 8002cba:	460a      	mov	r2, r1
 8002cbc:	eb42 0303 	adc.w	r3, r2, r3
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cd8:	460b      	mov	r3, r1
 8002cda:	18db      	adds	r3, r3, r3
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cde:	4613      	mov	r3, r2
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cee:	f7fd fa6f 	bl	80001d0 <__aeabi_uldivmod>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2164      	movs	r1, #100	; 0x64
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3332      	adds	r3, #50	; 0x32
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 0207 	and.w	r2, r3, #7
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4422      	add	r2, r4
 8002d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d20:	e105      	b.n	8002f2e <UART_SetConfig+0x4d6>
 8002d22:	bf00      	nop
 8002d24:	40011000 	.word	0x40011000
 8002d28:	40011400 	.word	0x40011400
 8002d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d42:	4642      	mov	r2, r8
 8002d44:	464b      	mov	r3, r9
 8002d46:	1891      	adds	r1, r2, r2
 8002d48:	6239      	str	r1, [r7, #32]
 8002d4a:	415b      	adcs	r3, r3
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d52:	4641      	mov	r1, r8
 8002d54:	1854      	adds	r4, r2, r1
 8002d56:	4649      	mov	r1, r9
 8002d58:	eb43 0501 	adc.w	r5, r3, r1
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	00eb      	lsls	r3, r5, #3
 8002d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6a:	00e2      	lsls	r2, r4, #3
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	4643      	mov	r3, r8
 8002d72:	18e3      	adds	r3, r4, r3
 8002d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d78:	464b      	mov	r3, r9
 8002d7a:	eb45 0303 	adc.w	r3, r5, r3
 8002d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d9e:	4629      	mov	r1, r5
 8002da0:	008b      	lsls	r3, r1, #2
 8002da2:	4621      	mov	r1, r4
 8002da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da8:	4621      	mov	r1, r4
 8002daa:	008a      	lsls	r2, r1, #2
 8002dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002db0:	f7fd fa0e 	bl	80001d0 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002dba:	fba3 2302 	umull	r2, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	011c      	lsls	r4, r3, #4
 8002dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	1891      	adds	r1, r2, r2
 8002dda:	61b9      	str	r1, [r7, #24]
 8002ddc:	415b      	adcs	r3, r3
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de4:	4641      	mov	r1, r8
 8002de6:	1851      	adds	r1, r2, r1
 8002de8:	6139      	str	r1, [r7, #16]
 8002dea:	4649      	mov	r1, r9
 8002dec:	414b      	adcs	r3, r1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	00cb      	lsls	r3, r1, #3
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e06:	4651      	mov	r1, sl
 8002e08:	00ca      	lsls	r2, r1, #3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4642      	mov	r2, r8
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e18:	464b      	mov	r3, r9
 8002e1a:	460a      	mov	r2, r1
 8002e1c:	eb42 0303 	adc.w	r3, r2, r3
 8002e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	008b      	lsls	r3, r1, #2
 8002e40:	4641      	mov	r1, r8
 8002e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e46:	4641      	mov	r1, r8
 8002e48:	008a      	lsls	r2, r1, #2
 8002e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e4e:	f7fd f9bf 	bl	80001d0 <__aeabi_uldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002e58:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	2164      	movs	r1, #100	; 0x64
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	3332      	adds	r3, #50	; 0x32
 8002e6a:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e76:	441c      	add	r4, r3
 8002e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e80:	677a      	str	r2, [r7, #116]	; 0x74
 8002e82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e86:	4642      	mov	r2, r8
 8002e88:	464b      	mov	r3, r9
 8002e8a:	1891      	adds	r1, r2, r2
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	415b      	adcs	r3, r3
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e96:	4641      	mov	r1, r8
 8002e98:	1851      	adds	r1, r2, r1
 8002e9a:	6039      	str	r1, [r7, #0]
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	414b      	adcs	r3, r1
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eae:	4659      	mov	r1, fp
 8002eb0:	00cb      	lsls	r3, r1, #3
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb8:	4651      	mov	r1, sl
 8002eba:	00ca      	lsls	r2, r1, #3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4642      	mov	r2, r8
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ec8:	464b      	mov	r3, r9
 8002eca:	460a      	mov	r2, r1
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	663b      	str	r3, [r7, #96]	; 0x60
 8002edc:	667a      	str	r2, [r7, #100]	; 0x64
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eea:	4649      	mov	r1, r9
 8002eec:	008b      	lsls	r3, r1, #2
 8002eee:	4641      	mov	r1, r8
 8002ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	008a      	lsls	r2, r1, #2
 8002ef8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002efc:	f7fd f968 	bl	80001d0 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002f06:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2164      	movs	r1, #100	; 0x64
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	3332      	adds	r3, #50	; 0x32
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4422      	add	r2, r4
 8002f2c:	609a      	str	r2, [r3, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	51eb851f 	.word	0x51eb851f

08002f40 <__NVIC_SetPriority>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	; (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	; (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <SysTick_Handler+0x1c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002f9c:	f002 f968 	bl	8005270 <xTaskGetSchedulerState>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002fa6:	f003 f84f 	bl	8006048 <xPortSysTickHandler>
  }
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010

08002fb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002fb8:	2100      	movs	r1, #0
 8002fba:	f06f 0004 	mvn.w	r0, #4
 8002fbe:	f7ff ffbf 	bl	8002f40 <__NVIC_SetPriority>
#endif
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fce:	f3ef 8305 	mrs	r3, IPSR
 8002fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8002fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002fda:	f06f 0305 	mvn.w	r3, #5
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	e00c      	b.n	8002ffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <osKernelInitialize+0x44>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <osKernelInitialize+0x44>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	e002      	b.n	8002ffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ffc:	687b      	ldr	r3, [r7, #4]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000012c 	.word	0x2000012c

08003010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003016:	f3ef 8305 	mrs	r3, IPSR
 800301a:	603b      	str	r3, [r7, #0]
  return(result);
 800301c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003022:	f06f 0305 	mvn.w	r3, #5
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	e010      	b.n	800304c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <osKernelStart+0x48>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d109      	bne.n	8003046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003032:	f7ff ffbf 	bl	8002fb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <osKernelStart+0x48>)
 8003038:	2202      	movs	r2, #2
 800303a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800303c:	f001 fcbc 	bl	80049b8 <vTaskStartScheduler>
      stat = osOK;
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	e002      	b.n	800304c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000012c 	.word	0x2000012c

0800305c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af04      	add	r7, sp, #16
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800306c:	f3ef 8305 	mrs	r3, IPSR
 8003070:	617b      	str	r3, [r7, #20]
  return(result);
 8003072:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003074:	2b00      	cmp	r3, #0
 8003076:	d17e      	bne.n	8003176 <osThreadNew+0x11a>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d07b      	beq.n	8003176 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003082:	2318      	movs	r3, #24
 8003084:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d045      	beq.n	8003122 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <osThreadNew+0x48>
        name = attr->name;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <osThreadNew+0x6e>
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b38      	cmp	r3, #56	; 0x38
 80030bc:	d805      	bhi.n	80030ca <osThreadNew+0x6e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <osThreadNew+0x72>
        return (NULL);
 80030ca:	2300      	movs	r3, #0
 80030cc:	e054      	b.n	8003178 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <osThreadNew+0xa8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2bbb      	cmp	r3, #187	; 0xbb
 80030ec:	d90a      	bls.n	8003104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <osThreadNew+0xa8>
        mem = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e010      	b.n	8003126 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10c      	bne.n	8003126 <osThreadNew+0xca>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <osThreadNew+0xca>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <osThreadNew+0xca>
          mem = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e001      	b.n	8003126 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d110      	bne.n	800314e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003134:	9202      	str	r2, [sp, #8]
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6a3a      	ldr	r2, [r7, #32]
 8003140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f001 fa4c 	bl	80045e0 <xTaskCreateStatic>
 8003148:	4603      	mov	r3, r0
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	e013      	b.n	8003176 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d110      	bne.n	8003176 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	b29a      	uxth	r2, r3
 8003158:	f107 0310 	add.w	r3, r7, #16
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f001 fa97 	bl	800469a <xTaskCreate>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <osThreadNew+0x11a>
            hTask = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003176:	693b      	ldr	r3, [r7, #16]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	; 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003188:	f3ef 8305 	mrs	r3, IPSR
 800318c:	60bb      	str	r3, [r7, #8]
  return(result);
 800318e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <osDelay+0x1c>
    stat = osErrorISR;
 8003194:	f06f 0305 	mvn.w	r3, #5
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e007      	b.n	80031ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f001 fbd2 	bl	8004950 <vTaskDelay>
    }
  }

  return (stat);
 80031ac:	68fb      	ldr	r3, [r7, #12]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b08a      	sub	sp, #40	; 0x28
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031c6:	f3ef 8305 	mrs	r3, IPSR
 80031ca:	613b      	str	r3, [r7, #16]
  return(result);
 80031cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d175      	bne.n	80032be <osSemaphoreNew+0x108>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d072      	beq.n	80032be <osSemaphoreNew+0x108>
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d86e      	bhi.n	80032be <osSemaphoreNew+0x108>
    mem = -1;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <osSemaphoreNew+0x4c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b4f      	cmp	r3, #79	; 0x4f
 80031fa:	d902      	bls.n	8003202 <osSemaphoreNew+0x4c>
        mem = 1;
 80031fc:	2301      	movs	r3, #1
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	e00c      	b.n	800321c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d108      	bne.n	800321c <osSemaphoreNew+0x66>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d104      	bne.n	800321c <osSemaphoreNew+0x66>
          mem = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	e001      	b.n	800321c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d04c      	beq.n	80032be <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d128      	bne.n	800327c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10a      	bne.n	8003246 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2203      	movs	r2, #3
 8003236:	9200      	str	r2, [sp, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	2001      	movs	r0, #1
 800323e:	f000 fa29 	bl	8003694 <xQueueGenericCreateStatic>
 8003242:	61f8      	str	r0, [r7, #28]
 8003244:	e005      	b.n	8003252 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003246:	2203      	movs	r2, #3
 8003248:	2100      	movs	r1, #0
 800324a:	2001      	movs	r0, #1
 800324c:	f000 fa9a 	bl	8003784 <xQueueGenericCreate>
 8003250:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d022      	beq.n	800329e <osSemaphoreNew+0xe8>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01f      	beq.n	800329e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800325e:	2300      	movs	r3, #0
 8003260:	2200      	movs	r2, #0
 8003262:	2100      	movs	r1, #0
 8003264:	69f8      	ldr	r0, [r7, #28]
 8003266:	f000 fb55 	bl	8003914 <xQueueGenericSend>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d016      	beq.n	800329e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003270:	69f8      	ldr	r0, [r7, #28]
 8003272:	f000 ffe1 	bl	8004238 <vQueueDelete>
            hSemaphore = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e010      	b.n	800329e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	461a      	mov	r2, r3
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fad7 	bl	800383e <xQueueCreateCountingSemaphoreStatic>
 8003290:	61f8      	str	r0, [r7, #28]
 8003292:	e004      	b.n	800329e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fb08 	bl	80038ac <xQueueCreateCountingSemaphore>
 800329c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e001      	b.n	80032b6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	69f8      	ldr	r0, [r7, #28]
 80032ba:	f001 f909 	bl	80044d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80032be:	69fb      	ldr	r3, [r7, #28]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d103      	bne.n	80032e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80032e0:	f06f 0303 	mvn.w	r3, #3
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	e039      	b.n	800335c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032e8:	f3ef 8305 	mrs	r3, IPSR
 80032ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80032ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d022      	beq.n	800333a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80032fa:	f06f 0303 	mvn.w	r3, #3
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e02c      	b.n	800335c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	461a      	mov	r2, r3
 800330c:	2100      	movs	r1, #0
 800330e:	6938      	ldr	r0, [r7, #16]
 8003310:	f000 ff12 	bl	8004138 <xQueueReceiveFromISR>
 8003314:	4603      	mov	r3, r0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d003      	beq.n	8003322 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800331a:	f06f 0302 	mvn.w	r3, #2
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e01c      	b.n	800335c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d019      	beq.n	800335c <osSemaphoreAcquire+0x94>
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <osSemaphoreAcquire+0xa0>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	e010      	b.n	800335c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	6938      	ldr	r0, [r7, #16]
 800333e:	f000 fdef 	bl	8003f20 <xQueueSemaphoreTake>
 8003342:	4603      	mov	r3, r0
 8003344:	2b01      	cmp	r3, #1
 8003346:	d009      	beq.n	800335c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800334e:	f06f 0301 	mvn.w	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e002      	b.n	800335c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003356:	f06f 0302 	mvn.w	r3, #2
 800335a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800335c:	697b      	ldr	r3, [r7, #20]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003382:	f06f 0303 	mvn.w	r3, #3
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e02c      	b.n	80033e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800338a:	f3ef 8305 	mrs	r3, IPSR
 800338e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003390:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01a      	beq.n	80033cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800339a:	f107 0308 	add.w	r3, r7, #8
 800339e:	4619      	mov	r1, r3
 80033a0:	6938      	ldr	r0, [r7, #16]
 80033a2:	f000 fc50 	bl	8003c46 <xQueueGiveFromISR>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d003      	beq.n	80033b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80033ac:	f06f 0302 	mvn.w	r3, #2
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e017      	b.n	80033e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d014      	beq.n	80033e4 <osSemaphoreRelease+0x78>
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <osSemaphoreRelease+0x84>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	e00b      	b.n	80033e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80033cc:	2300      	movs	r3, #0
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	6938      	ldr	r0, [r7, #16]
 80033d4:	f000 fa9e 	bl	8003914 <xQueueGenericSend>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d002      	beq.n	80033e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80033de:	f06f 0302 	mvn.w	r3, #2
 80033e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80033e4:	697b      	ldr	r3, [r7, #20]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <vApplicationGetIdleTaskMemory+0x2c>)
 8003404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <vApplicationGetIdleTaskMemory+0x30>)
 800340a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000130 	.word	0x20000130
 8003424:	200001ec 	.word	0x200001ec

08003428 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a07      	ldr	r2, [pc, #28]	; (8003454 <vApplicationGetTimerTaskMemory+0x2c>)
 8003438:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4a06      	ldr	r2, [pc, #24]	; (8003458 <vApplicationGetTimerTaskMemory+0x30>)
 800343e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003446:	601a      	str	r2, [r3, #0]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	200003ec 	.word	0x200003ec
 8003458:	200004a8 	.word	0x200004a8

0800345c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f103 0208 	add.w	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f103 0208 	add.w	r2, r3, #8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f103 0208 	add.w	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	601a      	str	r2, [r3, #0]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d103      	bne.n	800351e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	e00c      	b.n	8003538 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3308      	adds	r3, #8
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e002      	b.n	800352c <vListInsert+0x2e>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d2f6      	bcs.n	8003526 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6892      	ldr	r2, [r2, #8]
 8003586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6852      	ldr	r2, [r2, #4]
 8003590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d103      	bne.n	80035a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	1e5a      	subs	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035ee:	f002 fc99 	bl	8005f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	441a      	add	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	3b01      	subs	r3, #1
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	22ff      	movs	r2, #255	; 0xff
 8003632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	22ff      	movs	r2, #255	; 0xff
 800363a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d114      	bne.n	800366e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01a      	beq.n	8003682 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3310      	adds	r3, #16
 8003650:	4618      	mov	r0, r3
 8003652:	f001 fc4b 	bl	8004eec <xTaskRemoveFromEventList>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <xQueueGenericReset+0xcc>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	e009      	b.n	8003682 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3310      	adds	r3, #16
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fef2 	bl	800345c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3324      	adds	r3, #36	; 0x24
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff feed 	bl	800345c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003682:	f002 fc7f 	bl	8005f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	; 0x38
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <xQueueGenericCreateStatic+0x52>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <xQueueGenericCreateStatic+0x56>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <xQueueGenericCreateStatic+0x58>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	623b      	str	r3, [r7, #32]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <xQueueGenericCreateStatic+0x7e>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <xQueueGenericCreateStatic+0x82>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <xQueueGenericCreateStatic+0x84>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	61fb      	str	r3, [r7, #28]
}
 800372e:	bf00      	nop
 8003730:	e7fe      	b.n	8003730 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003732:	2350      	movs	r3, #80	; 0x50
 8003734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d00a      	beq.n	8003752 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	61bb      	str	r3, [r7, #24]
}
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003752:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003766:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f83f 	bl	80037f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800377c:	4618      	mov	r0, r3
 800377e:	3730      	adds	r7, #48	; 0x30
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	613b      	str	r3, [r7, #16]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3350      	adds	r3, #80	; 0x50
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fcd3 	bl	8006168 <pvPortMalloc>
 80037c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3350      	adds	r3, #80	; 0x50
 80037d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037dc:	79fa      	ldrb	r2, [r7, #7]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f805 	bl	80037f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ee:	69bb      	ldr	r3, [r7, #24]
	}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d103      	bne.n	8003814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e002      	b.n	800381a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003826:	2101      	movs	r1, #1
 8003828:	69b8      	ldr	r0, [r7, #24]
 800382a:	f7ff fecb 	bl	80035c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800383e:	b580      	push	{r7, lr}
 8003840:	b08a      	sub	sp, #40	; 0x28
 8003842:	af02      	add	r7, sp, #8
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	61bb      	str	r3, [r7, #24]
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	429a      	cmp	r2, r3
 800386c:	d90a      	bls.n	8003884 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	617b      	str	r3, [r7, #20]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003884:	2302      	movs	r3, #2
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	2100      	movs	r1, #0
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff ff00 	bl	8003694 <xQueueGenericCreateStatic>
 8003894:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80038a2:	69fb      	ldr	r3, [r7, #28]
	}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	613b      	str	r3, [r7, #16]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d90a      	bls.n	80038f0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60fb      	str	r3, [r7, #12]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038f0:	2202      	movs	r2, #2
 80038f2:	2100      	movs	r1, #0
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff45 	bl	8003784 <xQueueGenericCreate>
 80038fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003908:	697b      	ldr	r3, [r7, #20]
	}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08e      	sub	sp, #56	; 0x38
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <xQueueGenericSend+0x32>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d103      	bne.n	8003954 <xQueueGenericSend+0x40>
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <xQueueGenericSend+0x44>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <xQueueGenericSend+0x46>
 8003958:	2300      	movs	r3, #0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <xQueueGenericSend+0x60>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d103      	bne.n	8003982 <xQueueGenericSend+0x6e>
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <xQueueGenericSend+0x72>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <xQueueGenericSend+0x74>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	623b      	str	r3, [r7, #32]
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039a2:	f001 fc65 	bl	8005270 <xTaskGetSchedulerState>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <xQueueGenericSend+0x9e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <xQueueGenericSend+0xa2>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <xQueueGenericSend+0xa4>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	61fb      	str	r3, [r7, #28]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039d2:	f002 faa7 	bl	8005f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <xQueueGenericSend+0xd4>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d129      	bne.n	8003a3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ee:	f000 fc5e 	bl	80042ae <prvCopyDataToQueue>
 80039f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 fa73 	bl	8004eec <xTaskRemoveFromEventList>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <xQueueGenericSend+0x1f8>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	e00a      	b.n	8003a34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a24:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <xQueueGenericSend+0x1f8>)
 8003a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a34:	f002 faa6 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e063      	b.n	8003b04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a42:	f002 fa9f 	bl	8005f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e05c      	b.n	8003b04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 faad 	bl	8004fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a5e:	f002 fa91 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a62:	f001 f819 	bl	8004a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a66:	f002 fa5d 	bl	8005f24 <vPortEnterCritical>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a70:	b25b      	sxtb	r3, r3
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d103      	bne.n	8003a80 <xQueueGenericSend+0x16c>
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a86:	b25b      	sxtb	r3, r3
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d103      	bne.n	8003a96 <xQueueGenericSend+0x182>
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a96:	f002 fa75 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a9a:	1d3a      	adds	r2, r7, #4
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fa9c 	bl	8004fe0 <xTaskCheckForTimeOut>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d124      	bne.n	8003af8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab0:	f000 fcf5 	bl	800449e <prvIsQueueFull>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	3310      	adds	r3, #16
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 f9c2 	bl	8004e4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aca:	f000 fc80 	bl	80043ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ace:	f000 fff1 	bl	8004ab4 <xTaskResumeAll>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f47f af7c 	bne.w	80039d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <xQueueGenericSend+0x1f8>)
 8003adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	e772      	b.n	80039d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aee:	f000 fc6e 	bl	80043ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003af2:	f000 ffdf 	bl	8004ab4 <xTaskResumeAll>
 8003af6:	e76c      	b.n	80039d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afa:	f000 fc68 	bl	80043ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003afe:	f000 ffd9 	bl	8004ab4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3738      	adds	r7, #56	; 0x38
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	; 0x40
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <xQueueGenericSendFromISR+0x3c>
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <xQueueGenericSendFromISR+0x40>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <xQueueGenericSendFromISR+0x42>
 8003b50:	2300      	movs	r3, #0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSendFromISR+0x6a>
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <xQueueGenericSendFromISR+0x6e>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <xQueueGenericSendFromISR+0x70>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	623b      	str	r3, [r7, #32]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b9a:	f002 faa5 	bl	80060e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <xQueueGenericSendFromISR+0xbc>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d12f      	bne.n	8003c2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003be2:	f000 fb64 	bl	80042ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003be6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d112      	bne.n	8003c16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d016      	beq.n	8003c26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 f975 	bl	8004eec <xTaskRemoveFromEventList>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00e      	beq.n	8003c26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e007      	b.n	8003c26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	b25a      	sxtb	r2, r3
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c26:	2301      	movs	r3, #1
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c2a:	e001      	b.n	8003c30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3740      	adds	r7, #64	; 0x40
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b08e      	sub	sp, #56	; 0x38
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	623b      	str	r3, [r7, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <xQueueGiveFromISR+0x48>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	61fb      	str	r3, [r7, #28]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <xQueueGiveFromISR+0x58>
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <xQueueGiveFromISR+0x5c>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xQueueGiveFromISR+0x5e>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xQueueGiveFromISR+0x78>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	61bb      	str	r3, [r7, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cbe:	f002 fa13 	bl	80060e8 <vPortValidateInterruptPriority>
	__asm volatile
 8003cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	617a      	str	r2, [r7, #20]
 8003cd8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003cda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d22b      	bcs.n	8003d46 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d112      	bne.n	8003d30 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	3324      	adds	r3, #36	; 0x24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 f8e8 	bl	8004eec <xTaskRemoveFromEventList>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00e      	beq.n	8003d40 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e007      	b.n	8003d40 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d34:	3301      	adds	r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	b25a      	sxtb	r2, r3
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d40:	2301      	movs	r3, #1
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
 8003d44:	e001      	b.n	8003d4a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f383 8811 	msr	BASEPRI, r3
}
 8003d54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3738      	adds	r7, #56	; 0x38
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <xQueueReceive+0x30>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	623b      	str	r3, [r7, #32]
}
 8003d8c:	bf00      	nop
 8003d8e:	e7fe      	b.n	8003d8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <xQueueReceive+0x3e>
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <xQueueReceive+0x42>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <xQueueReceive+0x44>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueReceive+0x5e>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	61fb      	str	r3, [r7, #28]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dbe:	f001 fa57 	bl	8005270 <xTaskGetSchedulerState>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <xQueueReceive+0x6e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <xQueueReceive+0x72>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <xQueueReceive+0x74>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <xQueueReceive+0x8e>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61bb      	str	r3, [r7, #24]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dee:	f002 f899 	bl	8005f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01f      	beq.n	8003e3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e02:	f000 fabe 	bl	8004382 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00f      	beq.n	8003e36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	3310      	adds	r3, #16
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f866 	bl	8004eec <xTaskRemoveFromEventList>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e26:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <xQueueReceive+0x1bc>)
 8003e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e36:	f002 f8a5 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e069      	b.n	8003f12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e44:	f002 f89e 	bl	8005f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e062      	b.n	8003f12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e52:	f107 0310 	add.w	r3, r7, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 f8ac 	bl	8004fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e60:	f002 f890 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e64:	f000 fe18 	bl	8004a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e68:	f002 f85c 	bl	8005f24 <vPortEnterCritical>
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d103      	bne.n	8003e82 <xQueueReceive+0x122>
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d103      	bne.n	8003e98 <xQueueReceive+0x138>
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e98:	f002 f874 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e9c:	1d3a      	adds	r2, r7, #4
 8003e9e:	f107 0310 	add.w	r3, r7, #16
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 f89b 	bl	8004fe0 <xTaskCheckForTimeOut>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d123      	bne.n	8003ef8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb2:	f000 fade 	bl	8004472 <prvIsQueueEmpty>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	3324      	adds	r3, #36	; 0x24
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 ffc1 	bl	8004e4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ecc:	f000 fa7f 	bl	80043ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ed0:	f000 fdf0 	bl	8004ab4 <xTaskResumeAll>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d189      	bne.n	8003dee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <xQueueReceive+0x1bc>)
 8003edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	e780      	b.n	8003dee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eee:	f000 fa6e 	bl	80043ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef2:	f000 fddf 	bl	8004ab4 <xTaskResumeAll>
 8003ef6:	e77a      	b.n	8003dee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efa:	f000 fa68 	bl	80043ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003efe:	f000 fdd9 	bl	8004ab4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f04:	f000 fab5 	bl	8004472 <prvIsQueueEmpty>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f43f af6f 	beq.w	8003dee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3730      	adds	r7, #48	; 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08e      	sub	sp, #56	; 0x38
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	623b      	str	r3, [r7, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	61fb      	str	r3, [r7, #28]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f70:	f001 f97e 	bl	8005270 <xTaskGetSchedulerState>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <xQueueSemaphoreTake+0x60>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <xQueueSemaphoreTake+0x64>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <xQueueSemaphoreTake+0x66>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	61bb      	str	r3, [r7, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fa0:	f001 ffc0 	bl	8005f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d024      	beq.n	8003ffa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003fc0:	f001 facc 	bl	800555c <pvTaskIncrementMutexHeldCount>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00f      	beq.n	8003ff2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	3310      	adds	r3, #16
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 ff88 	bl	8004eec <xTaskRemoveFromEventList>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fe2:	4b54      	ldr	r3, [pc, #336]	; (8004134 <xQueueSemaphoreTake+0x214>)
 8003fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ff2:	f001 ffc7 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e097      	b.n	800412a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d111      	bne.n	8004024 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	617b      	str	r3, [r7, #20]
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800401c:	f001 ffb2 	bl	8005f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004020:	2300      	movs	r3, #0
 8004022:	e082      	b.n	800412a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800402a:	f107 030c 	add.w	r3, r7, #12
 800402e:	4618      	mov	r0, r3
 8004030:	f000 ffc0 	bl	8004fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004038:	f001 ffa4 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800403c:	f000 fd2c 	bl	8004a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004040:	f001 ff70 	bl	8005f24 <vPortEnterCritical>
 8004044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800404a:	b25b      	sxtb	r3, r3
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d103      	bne.n	800405a <xQueueSemaphoreTake+0x13a>
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004060:	b25b      	sxtb	r3, r3
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d103      	bne.n	8004070 <xQueueSemaphoreTake+0x150>
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004070:	f001 ff88 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004074:	463a      	mov	r2, r7
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f000 ffaf 	bl	8004fe0 <xTaskCheckForTimeOut>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d132      	bne.n	80040ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800408a:	f000 f9f2 	bl	8004472 <prvIsQueueEmpty>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d026      	beq.n	80040e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800409c:	f001 ff42 	bl	8005f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 f901 	bl	80052ac <xTaskPriorityInherit>
 80040aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80040ac:	f001 ff6a 	bl	8005f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	3324      	adds	r3, #36	; 0x24
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fec7 	bl	8004e4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040c0:	f000 f985 	bl	80043ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040c4:	f000 fcf6 	bl	8004ab4 <xTaskResumeAll>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f47f af68 	bne.w	8003fa0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80040d0:	4b18      	ldr	r3, [pc, #96]	; (8004134 <xQueueSemaphoreTake+0x214>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	e75e      	b.n	8003fa0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80040e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040e4:	f000 f973 	bl	80043ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040e8:	f000 fce4 	bl	8004ab4 <xTaskResumeAll>
 80040ec:	e758      	b.n	8003fa0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80040ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040f0:	f000 f96d 	bl	80043ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040f4:	f000 fcde 	bl	8004ab4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040fa:	f000 f9ba 	bl	8004472 <prvIsQueueEmpty>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f43f af4d 	beq.w	8003fa0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800410c:	f001 ff0a 	bl	8005f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004112:	f000 f8b4 	bl	800427e <prvGetDisinheritPriorityAfterTimeout>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800411e:	4618      	mov	r0, r3
 8004120:	f001 f99a 	bl	8005458 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004124:	f001 ff2e 	bl	8005f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004128:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800412a:	4618      	mov	r0, r3
 800412c:	3738      	adds	r7, #56	; 0x38
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	623b      	str	r3, [r7, #32]
}
 8004160:	bf00      	nop
 8004162:	e7fe      	b.n	8004162 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <xQueueReceiveFromISR+0x3a>
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <xQueueReceiveFromISR+0x3e>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <xQueueReceiveFromISR+0x40>
 8004176:	2300      	movs	r3, #0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	61fb      	str	r3, [r7, #28]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004192:	f001 ffa9 	bl	80060e8 <vPortValidateInterruptPriority>
	__asm volatile
 8004196:	f3ef 8211 	mrs	r2, BASEPRI
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	61ba      	str	r2, [r7, #24]
 80041ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80041ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02f      	beq.n	800421e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041cc:	f000 f8d9 	bl	8004382 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	1e5a      	subs	r2, r3, #1
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80041d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d112      	bne.n	8004208 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	3310      	adds	r3, #16
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fe7c 	bl	8004eec <xTaskRemoveFromEventList>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00e      	beq.n	8004218 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e007      	b.n	8004218 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800420c:	3301      	adds	r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	b25a      	sxtb	r2, r3
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004218:	2301      	movs	r3, #1
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
 800421c:	e001      	b.n	8004222 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f383 8811 	msr	BASEPRI, r3
}
 800422c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004230:	4618      	mov	r0, r3
 8004232:	3738      	adds	r7, #56	; 0x38
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <vQueueDelete+0x28>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60bb      	str	r3, [r7, #8]
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f95f 	bl	8004524 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f002 f845 	bl	8006300 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e001      	b.n	80042a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80042a0:	68fb      	ldr	r3, [r7, #12]
	}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d14d      	bne.n	8004370 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 f84f 	bl	800537c <xTaskPriorityDisinherit>
 80042de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
 80042e6:	e043      	b.n	8004370 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d119      	bne.n	8004322 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6858      	ldr	r0, [r3, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	461a      	mov	r2, r3
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	f002 f945 	bl	8006588 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	441a      	add	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d32b      	bcc.n	8004370 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	e026      	b.n	8004370 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68d8      	ldr	r0, [r3, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	461a      	mov	r2, r3
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	f002 f92b 	bl	8006588 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	425b      	negs	r3, r3
 800433c:	441a      	add	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d207      	bcs.n	800435e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	425b      	negs	r3, r3
 8004358:	441a      	add	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d105      	bne.n	8004370 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3b01      	subs	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004378:	697b      	ldr	r3, [r7, #20]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d018      	beq.n	80043c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d303      	bcc.n	80043b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68d9      	ldr	r1, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	461a      	mov	r2, r3
 80043c0:	6838      	ldr	r0, [r7, #0]
 80043c2:	f002 f8e1 	bl	8006588 <memcpy>
	}
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043d6:	f001 fda5 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043e2:	e011      	b.n	8004408 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d012      	beq.n	8004412 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd7b 	bl	8004eec <xTaskRemoveFromEventList>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043fc:	f000 fe52 	bl	80050a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	3b01      	subs	r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440c:	2b00      	cmp	r3, #0
 800440e:	dce9      	bgt.n	80043e4 <prvUnlockQueue+0x16>
 8004410:	e000      	b.n	8004414 <prvUnlockQueue+0x46>
					break;
 8004412:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	22ff      	movs	r2, #255	; 0xff
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800441c:	f001 fdb2 	bl	8005f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004420:	f001 fd80 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800442a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800442c:	e011      	b.n	8004452 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3310      	adds	r3, #16
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd56 	bl	8004eec <xTaskRemoveFromEventList>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004446:	f000 fe2d 	bl	80050a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800444a:	7bbb      	ldrb	r3, [r7, #14]
 800444c:	3b01      	subs	r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004456:	2b00      	cmp	r3, #0
 8004458:	dce9      	bgt.n	800442e <prvUnlockQueue+0x60>
 800445a:	e000      	b.n	800445e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800445c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004466:	f001 fd8d 	bl	8005f84 <vPortExitCritical>
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800447a:	f001 fd53 	bl	8005f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004486:	2301      	movs	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e001      	b.n	8004490 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004490:	f001 fd78 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 8004494:	68fb      	ldr	r3, [r7, #12]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044a6:	f001 fd3d 	bl	8005f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d102      	bne.n	80044bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044b6:	2301      	movs	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e001      	b.n	80044c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044c0:	f001 fd60 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 80044c4:	68fb      	ldr	r3, [r7, #12]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e014      	b.n	800450a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044e0:	4a0f      	ldr	r2, [pc, #60]	; (8004520 <vQueueAddToRegistry+0x50>)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044ec:	490c      	ldr	r1, [pc, #48]	; (8004520 <vQueueAddToRegistry+0x50>)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <vQueueAddToRegistry+0x50>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004502:	e006      	b.n	8004512 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b07      	cmp	r3, #7
 800450e:	d9e7      	bls.n	80044e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	200008a8 	.word	0x200008a8

08004524 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e016      	b.n	8004560 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <vQueueUnregisterQueue+0x50>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	d10b      	bne.n	800455a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004542:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <vQueueUnregisterQueue+0x50>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2100      	movs	r1, #0
 8004548:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800454c:	4a09      	ldr	r2, [pc, #36]	; (8004574 <vQueueUnregisterQueue+0x50>)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	2200      	movs	r2, #0
 8004556:	605a      	str	r2, [r3, #4]
				break;
 8004558:	e006      	b.n	8004568 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b07      	cmp	r3, #7
 8004564:	d9e5      	bls.n	8004532 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	200008a8 	.word	0x200008a8

08004578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004588:	f001 fccc 	bl	8005f24 <vPortEnterCritical>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004592:	b25b      	sxtb	r3, r3
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d103      	bne.n	80045a2 <vQueueWaitForMessageRestricted+0x2a>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d103      	bne.n	80045b8 <vQueueWaitForMessageRestricted+0x40>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b8:	f001 fce4 	bl	8005f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3324      	adds	r3, #36	; 0x24
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fc61 	bl	8004e94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7ff fefb 	bl	80043ce <prvUnlockQueue>
	}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08e      	sub	sp, #56	; 0x38
 80045e4:	af04      	add	r7, sp, #16
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <xTaskCreateStatic+0x2a>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	623b      	str	r3, [r7, #32]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xTaskCreateStatic+0x46>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61fb      	str	r3, [r7, #28]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004626:	23bc      	movs	r3, #188	; 0xbc
 8004628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2bbc      	cmp	r3, #188	; 0xbc
 800462e:	d00a      	beq.n	8004646 <xTaskCreateStatic+0x66>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	61bb      	str	r3, [r7, #24]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004646:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01e      	beq.n	800468c <xTaskCreateStatic+0xac>
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01b      	beq.n	800468c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	2202      	movs	r2, #2
 8004662:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004666:	2300      	movs	r3, #0
 8004668:	9303      	str	r3, [sp, #12]
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	f107 0314 	add.w	r3, r7, #20
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f850 	bl	8004724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004686:	f000 f8f3 	bl	8004870 <prvAddNewTaskToReadyList>
 800468a:	e001      	b.n	8004690 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004690:	697b      	ldr	r3, [r7, #20]
	}
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	; 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08c      	sub	sp, #48	; 0x30
 800469e:	af04      	add	r7, sp, #16
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 fd5a 	bl	8006168 <pvPortMalloc>
 80046b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046bc:	20bc      	movs	r0, #188	; 0xbc
 80046be:	f001 fd53 	bl	8006168 <pvPortMalloc>
 80046c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
 80046d0:	e005      	b.n	80046de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046d2:	6978      	ldr	r0, [r7, #20]
 80046d4:	f001 fe14 	bl	8006300 <vPortFree>
 80046d8:	e001      	b.n	80046de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d017      	beq.n	8004714 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046ec:	88fa      	ldrh	r2, [r7, #6]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9303      	str	r3, [sp, #12]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	9302      	str	r3, [sp, #8]
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f80e 	bl	8004724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004708:	69f8      	ldr	r0, [r7, #28]
 800470a:	f000 f8b1 	bl	8004870 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800470e:	2301      	movs	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e002      	b.n	800471a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004714:	f04f 33ff 	mov.w	r3, #4294967295
 8004718:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800471a:	69bb      	ldr	r3, [r7, #24]
	}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	461a      	mov	r2, r3
 800473c:	21a5      	movs	r1, #165	; 0xa5
 800473e:	f001 ff31 	bl	80065a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800474c:	3b01      	subs	r3, #1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	617b      	str	r3, [r7, #20]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01f      	beq.n	80047c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e012      	b.n	80047ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	7819      	ldrb	r1, [r3, #0]
 8004790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	3334      	adds	r3, #52	; 0x34
 8004798:	460a      	mov	r2, r1
 800479a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d006      	beq.n	80047b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	3301      	adds	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	2b0f      	cmp	r3, #15
 80047b2:	d9e9      	bls.n	8004788 <prvInitialiseNewTask+0x64>
 80047b4:	e000      	b.n	80047b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80047b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c0:	e003      	b.n	80047ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	2b37      	cmp	r3, #55	; 0x37
 80047ce:	d901      	bls.n	80047d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047d0:	2337      	movs	r3, #55	; 0x37
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	2200      	movs	r2, #0
 80047e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	3304      	adds	r3, #4
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe fe56 	bl	800349c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	3318      	adds	r3, #24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe fe51 	bl	800349c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	2200      	movs	r2, #0
 800481c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	3354      	adds	r3, #84	; 0x54
 8004824:	2260      	movs	r2, #96	; 0x60
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f001 febb 	bl	80065a4 <memset>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <prvInitialiseNewTask+0x140>)
 8004832:	659a      	str	r2, [r3, #88]	; 0x58
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <prvInitialiseNewTask+0x144>)
 8004838:	65da      	str	r2, [r3, #92]	; 0x5c
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	4a0b      	ldr	r2, [pc, #44]	; (800486c <prvInitialiseNewTask+0x148>)
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	69b8      	ldr	r0, [r7, #24]
 8004846:	f001 fa3f 	bl	8005cc8 <pxPortInitialiseStack>
 800484a:	4602      	mov	r2, r0
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800485c:	bf00      	nop
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	08006818 	.word	0x08006818
 8004868:	08006838 	.word	0x08006838
 800486c:	080067f8 	.word	0x080067f8

08004870 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004878:	f001 fb54 	bl	8005f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800487c:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <prvAddNewTaskToReadyList+0xc4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a2c      	ldr	r2, [pc, #176]	; (8004934 <prvAddNewTaskToReadyList+0xc4>)
 8004884:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004886:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <prvAddNewTaskToReadyList+0xc8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800488e:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <prvAddNewTaskToReadyList+0xc8>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <prvAddNewTaskToReadyList+0xc4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d110      	bne.n	80048be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800489c:	f000 fc26 	bl	80050ec <prvInitialiseTaskLists>
 80048a0:	e00d      	b.n	80048be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <prvAddNewTaskToReadyList+0xcc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <prvAddNewTaskToReadyList+0xc8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d802      	bhi.n	80048be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048b8:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <prvAddNewTaskToReadyList+0xc8>)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <prvAddNewTaskToReadyList+0xd0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <prvAddNewTaskToReadyList+0xd0>)
 80048c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <prvAddNewTaskToReadyList+0xd0>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <prvAddNewTaskToReadyList+0xd4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d903      	bls.n	80048e4 <prvAddNewTaskToReadyList+0x74>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <prvAddNewTaskToReadyList+0xd4>)
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4a15      	ldr	r2, [pc, #84]	; (8004948 <prvAddNewTaskToReadyList+0xd8>)
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7fe fddb 	bl	80034b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004900:	f001 fb40 	bl	8005f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004904:	4b0d      	ldr	r3, [pc, #52]	; (800493c <prvAddNewTaskToReadyList+0xcc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <prvAddNewTaskToReadyList+0xc8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	429a      	cmp	r2, r3
 8004918:	d207      	bcs.n	800492a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <prvAddNewTaskToReadyList+0xdc>)
 800491c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000dbc 	.word	0x20000dbc
 8004938:	200008e8 	.word	0x200008e8
 800493c:	20000dc8 	.word	0x20000dc8
 8004940:	20000dd8 	.word	0x20000dd8
 8004944:	20000dc4 	.word	0x20000dc4
 8004948:	200008ec 	.word	0x200008ec
 800494c:	e000ed04 	.word	0xe000ed04

08004950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d017      	beq.n	8004992 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <vTaskDelay+0x60>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <vTaskDelay+0x30>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	60bb      	str	r3, [r7, #8]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004980:	f000 f88a 	bl	8004a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004984:	2100      	movs	r1, #0
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fdfc 	bl	8005584 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800498c:	f000 f892 	bl	8004ab4 <xTaskResumeAll>
 8004990:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <vTaskDelay+0x64>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000de4 	.word	0x20000de4
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049c6:	463a      	mov	r2, r7
 80049c8:	1d39      	adds	r1, r7, #4
 80049ca:	f107 0308 	add.w	r3, r7, #8
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fd10 	bl	80033f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	9202      	str	r2, [sp, #8]
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	2300      	movs	r3, #0
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2300      	movs	r3, #0
 80049e4:	460a      	mov	r2, r1
 80049e6:	4924      	ldr	r1, [pc, #144]	; (8004a78 <vTaskStartScheduler+0xc0>)
 80049e8:	4824      	ldr	r0, [pc, #144]	; (8004a7c <vTaskStartScheduler+0xc4>)
 80049ea:	f7ff fdf9 	bl	80045e0 <xTaskCreateStatic>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <vTaskStartScheduler+0xc8>)
 80049f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049f4:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <vTaskStartScheduler+0xc8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049fc:	2301      	movs	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e001      	b.n	8004a06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d102      	bne.n	8004a12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a0c:	f000 fe0e 	bl	800562c <xTimerCreateTimerTask>
 8004a10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d11b      	bne.n	8004a50 <vTaskStartScheduler+0x98>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	613b      	str	r3, [r7, #16]
}
 8004a2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <vTaskStartScheduler+0xcc>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3354      	adds	r3, #84	; 0x54
 8004a32:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <vTaskStartScheduler+0xd0>)
 8004a34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <vTaskStartScheduler+0xd4>)
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a3e:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <vTaskStartScheduler+0xd8>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a44:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <vTaskStartScheduler+0xdc>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a4a:	f001 f9c9 	bl	8005de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a4e:	e00e      	b.n	8004a6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d10a      	bne.n	8004a6e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <vTaskStartScheduler+0xb4>
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	08006770 	.word	0x08006770
 8004a7c:	080050bd 	.word	0x080050bd
 8004a80:	20000de0 	.word	0x20000de0
 8004a84:	200008e8 	.word	0x200008e8
 8004a88:	20000010 	.word	0x20000010
 8004a8c:	20000ddc 	.word	0x20000ddc
 8004a90:	20000dc8 	.word	0x20000dc8
 8004a94:	20000dc0 	.word	0x20000dc0

08004a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <vTaskSuspendAll+0x18>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	4a03      	ldr	r2, [pc, #12]	; (8004ab0 <vTaskSuspendAll+0x18>)
 8004aa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004aa6:	bf00      	nop
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000de4 	.word	0x20000de4

08004ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ac2:	4b42      	ldr	r3, [pc, #264]	; (8004bcc <xTaskResumeAll+0x118>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	603b      	str	r3, [r7, #0]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ae0:	f001 fa20 	bl	8005f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ae4:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <xTaskResumeAll+0x118>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	4a38      	ldr	r2, [pc, #224]	; (8004bcc <xTaskResumeAll+0x118>)
 8004aec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aee:	4b37      	ldr	r3, [pc, #220]	; (8004bcc <xTaskResumeAll+0x118>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d162      	bne.n	8004bbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <xTaskResumeAll+0x11c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d05e      	beq.n	8004bbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004afe:	e02f      	b.n	8004b60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b00:	4b34      	ldr	r3, [pc, #208]	; (8004bd4 <xTaskResumeAll+0x120>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3318      	adds	r3, #24
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fd2f 	bl	8003570 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fd2a 	bl	8003570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	4b2d      	ldr	r3, [pc, #180]	; (8004bd8 <xTaskResumeAll+0x124>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d903      	bls.n	8004b30 <xTaskResumeAll+0x7c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <xTaskResumeAll+0x124>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a27      	ldr	r2, [pc, #156]	; (8004bdc <xTaskResumeAll+0x128>)
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7fe fcb5 	bl	80034b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <xTaskResumeAll+0x12c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b5a:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <xTaskResumeAll+0x130>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b60:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <xTaskResumeAll+0x120>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1cb      	bne.n	8004b00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b6e:	f000 fb5f 	bl	8005230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <xTaskResumeAll+0x134>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d010      	beq.n	8004ba0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b7e:	f000 f847 	bl	8004c10 <xTaskIncrementTick>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <xTaskResumeAll+0x130>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f1      	bne.n	8004b7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <xTaskResumeAll+0x134>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <xTaskResumeAll+0x130>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <xTaskResumeAll+0x138>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bbc:	f001 f9e2 	bl	8005f84 <vPortExitCritical>

	return xAlreadyYielded;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000de4 	.word	0x20000de4
 8004bd0:	20000dbc 	.word	0x20000dbc
 8004bd4:	20000d7c 	.word	0x20000d7c
 8004bd8:	20000dc4 	.word	0x20000dc4
 8004bdc:	200008ec 	.word	0x200008ec
 8004be0:	200008e8 	.word	0x200008e8
 8004be4:	20000dd0 	.word	0x20000dd0
 8004be8:	20000dcc 	.word	0x20000dcc
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <xTaskGetTickCount+0x1c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004bfc:	687b      	ldr	r3, [r7, #4]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000dc0 	.word	0x20000dc0

08004c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c1a:	4b4f      	ldr	r3, [pc, #316]	; (8004d58 <xTaskIncrementTick+0x148>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 808f 	bne.w	8004d42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <xTaskIncrementTick+0x14c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	; (8004d5c <xTaskIncrementTick+0x14c>)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d120      	bne.n	8004c7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c38:	4b49      	ldr	r3, [pc, #292]	; (8004d60 <xTaskIncrementTick+0x150>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	603b      	str	r3, [r7, #0]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <xTaskIncrementTick+0x46>
 8004c58:	4b41      	ldr	r3, [pc, #260]	; (8004d60 <xTaskIncrementTick+0x150>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	4b41      	ldr	r3, [pc, #260]	; (8004d64 <xTaskIncrementTick+0x154>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3f      	ldr	r2, [pc, #252]	; (8004d60 <xTaskIncrementTick+0x150>)
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4a3f      	ldr	r2, [pc, #252]	; (8004d64 <xTaskIncrementTick+0x154>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <xTaskIncrementTick+0x158>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	4a3d      	ldr	r2, [pc, #244]	; (8004d68 <xTaskIncrementTick+0x158>)
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	f000 fadb 	bl	8005230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c7a:	4b3c      	ldr	r3, [pc, #240]	; (8004d6c <xTaskIncrementTick+0x15c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d349      	bcc.n	8004d18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c84:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <xTaskIncrementTick+0x150>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d104      	bne.n	8004c98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <xTaskIncrementTick+0x15c>)
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	601a      	str	r2, [r3, #0]
					break;
 8004c96:	e03f      	b.n	8004d18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c98:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <xTaskIncrementTick+0x150>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d203      	bcs.n	8004cb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cb0:	4a2e      	ldr	r2, [pc, #184]	; (8004d6c <xTaskIncrementTick+0x15c>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cb6:	e02f      	b.n	8004d18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fc57 	bl	8003570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	3318      	adds	r3, #24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fc4e 	bl	8003570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <xTaskIncrementTick+0x160>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d903      	bls.n	8004ce8 <xTaskIncrementTick+0xd8>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <xTaskIncrementTick+0x160>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <xTaskIncrementTick+0x164>)
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f7fe fbd9 	bl	80034b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <xTaskIncrementTick+0x168>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d3b8      	bcc.n	8004c84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d12:	2301      	movs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d16:	e7b5      	b.n	8004c84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <xTaskIncrementTick+0x168>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	4915      	ldr	r1, [pc, #84]	; (8004d74 <xTaskIncrementTick+0x164>)
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d901      	bls.n	8004d34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <xTaskIncrementTick+0x16c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e004      	b.n	8004d4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d42:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <xTaskIncrementTick+0x170>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3301      	adds	r3, #1
 8004d48:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <xTaskIncrementTick+0x170>)
 8004d4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d4c:	697b      	ldr	r3, [r7, #20]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000de4 	.word	0x20000de4
 8004d5c:	20000dc0 	.word	0x20000dc0
 8004d60:	20000d74 	.word	0x20000d74
 8004d64:	20000d78 	.word	0x20000d78
 8004d68:	20000dd4 	.word	0x20000dd4
 8004d6c:	20000ddc 	.word	0x20000ddc
 8004d70:	20000dc4 	.word	0x20000dc4
 8004d74:	200008ec 	.word	0x200008ec
 8004d78:	200008e8 	.word	0x200008e8
 8004d7c:	20000dd0 	.word	0x20000dd0
 8004d80:	20000dcc 	.word	0x20000dcc

08004d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d8a:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <vTaskSwitchContext+0xb0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d92:	4b29      	ldr	r3, [pc, #164]	; (8004e38 <vTaskSwitchContext+0xb4>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d98:	e046      	b.n	8004e28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004d9a:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <vTaskSwitchContext+0xb4>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da0:	4b26      	ldr	r3, [pc, #152]	; (8004e3c <vTaskSwitchContext+0xb8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e010      	b.n	8004dca <vTaskSwitchContext+0x46>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <vTaskSwitchContext+0x3e>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	491d      	ldr	r1, [pc, #116]	; (8004e40 <vTaskSwitchContext+0xbc>)
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0e4      	beq.n	8004da8 <vTaskSwitchContext+0x24>
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <vTaskSwitchContext+0xbc>)
 8004dea:	4413      	add	r3, r2
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d104      	bne.n	8004e0e <vTaskSwitchContext+0x8a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <vTaskSwitchContext+0xc0>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <vTaskSwitchContext+0xb8>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e1e:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <vTaskSwitchContext+0xc0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3354      	adds	r3, #84	; 0x54
 8004e24:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <vTaskSwitchContext+0xc4>)
 8004e26:	6013      	str	r3, [r2, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	20000de4 	.word	0x20000de4
 8004e38:	20000dd0 	.word	0x20000dd0
 8004e3c:	20000dc4 	.word	0x20000dc4
 8004e40:	200008ec 	.word	0x200008ec
 8004e44:	200008e8 	.word	0x200008e8
 8004e48:	20000010 	.word	0x20000010

08004e4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	60fb      	str	r3, [r7, #12]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e72:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <vTaskPlaceOnEventList+0x44>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3318      	adds	r3, #24
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fe fb3f 	bl	80034fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e80:	2101      	movs	r1, #1
 8004e82:	6838      	ldr	r0, [r7, #0]
 8004e84:	f000 fb7e 	bl	8005584 <prvAddCurrentTaskToDelayedList>
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200008e8 	.word	0x200008e8

08004e94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	617b      	str	r3, [r7, #20]
}
 8004eb8:	bf00      	nop
 8004eba:	e7fe      	b.n	8004eba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7fe faf6 	bl	80034b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	68b8      	ldr	r0, [r7, #8]
 8004eda:	f000 fb53 	bl	8005584 <prvAddCurrentTaskToDelayedList>
	}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200008e8 	.word	0x200008e8

08004eec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60fb      	str	r3, [r7, #12]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	3318      	adds	r3, #24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe fb27 	bl	8003570 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <xTaskRemoveFromEventList+0xb0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11d      	bne.n	8004f66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fb1e 	bl	8003570 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <xTaskRemoveFromEventList+0xb4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d903      	bls.n	8004f48 <xTaskRemoveFromEventList+0x5c>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <xTaskRemoveFromEventList+0xb4>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <xTaskRemoveFromEventList+0xb8>)
 8004f56:	441a      	add	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fe faa9 	bl	80034b6 <vListInsertEnd>
 8004f64:	e005      	b.n	8004f72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3318      	adds	r3, #24
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	480e      	ldr	r0, [pc, #56]	; (8004fa8 <xTaskRemoveFromEventList+0xbc>)
 8004f6e:	f7fe faa2 	bl	80034b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <xTaskRemoveFromEventList+0xc0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d905      	bls.n	8004f8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <xTaskRemoveFromEventList+0xc4>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e001      	b.n	8004f90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f90:	697b      	ldr	r3, [r7, #20]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000de4 	.word	0x20000de4
 8004fa0:	20000dc4 	.word	0x20000dc4
 8004fa4:	200008ec 	.word	0x200008ec
 8004fa8:	20000d7c 	.word	0x20000d7c
 8004fac:	200008e8 	.word	0x200008e8
 8004fb0:	20000dd0 	.word	0x20000dd0

08004fb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <vTaskInternalSetTimeOutState+0x24>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <vTaskInternalSetTimeOutState+0x28>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20000dd4 	.word	0x20000dd4
 8004fdc:	20000dc0 	.word	0x20000dc0

08004fe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60fb      	str	r3, [r7, #12]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005022:	f000 ff7f 	bl	8005f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005026:	4b1d      	ldr	r3, [pc, #116]	; (800509c <xTaskCheckForTimeOut+0xbc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d102      	bne.n	8005046 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e023      	b.n	800508e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <xTaskCheckForTimeOut+0xc0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d007      	beq.n	8005062 <xTaskCheckForTimeOut+0x82>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800505c:	2301      	movs	r3, #1
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e015      	b.n	800508e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	429a      	cmp	r2, r3
 800506a:	d20b      	bcs.n	8005084 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff ff9b 	bl	8004fb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	e004      	b.n	800508e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800508a:	2301      	movs	r3, #1
 800508c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800508e:	f000 ff79 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 8005092:	69fb      	ldr	r3, [r7, #28]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000dc0 	.word	0x20000dc0
 80050a0:	20000dd4 	.word	0x20000dd4

080050a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <vTaskMissedYield+0x14>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	20000dd0 	.word	0x20000dd0

080050bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050c4:	f000 f852 	bl	800516c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <prvIdleTask+0x28>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d9f9      	bls.n	80050c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <prvIdleTask+0x2c>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050e0:	e7f0      	b.n	80050c4 <prvIdleTask+0x8>
 80050e2:	bf00      	nop
 80050e4:	200008ec 	.word	0x200008ec
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050f2:	2300      	movs	r3, #0
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	e00c      	b.n	8005112 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <prvInitialiseTaskLists+0x60>)
 8005104:	4413      	add	r3, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe f9a8 	bl	800345c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3301      	adds	r3, #1
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b37      	cmp	r3, #55	; 0x37
 8005116:	d9ef      	bls.n	80050f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005118:	480d      	ldr	r0, [pc, #52]	; (8005150 <prvInitialiseTaskLists+0x64>)
 800511a:	f7fe f99f 	bl	800345c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800511e:	480d      	ldr	r0, [pc, #52]	; (8005154 <prvInitialiseTaskLists+0x68>)
 8005120:	f7fe f99c 	bl	800345c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005124:	480c      	ldr	r0, [pc, #48]	; (8005158 <prvInitialiseTaskLists+0x6c>)
 8005126:	f7fe f999 	bl	800345c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800512a:	480c      	ldr	r0, [pc, #48]	; (800515c <prvInitialiseTaskLists+0x70>)
 800512c:	f7fe f996 	bl	800345c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005130:	480b      	ldr	r0, [pc, #44]	; (8005160 <prvInitialiseTaskLists+0x74>)
 8005132:	f7fe f993 	bl	800345c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <prvInitialiseTaskLists+0x78>)
 8005138:	4a05      	ldr	r2, [pc, #20]	; (8005150 <prvInitialiseTaskLists+0x64>)
 800513a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800513c:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <prvInitialiseTaskLists+0x7c>)
 800513e:	4a05      	ldr	r2, [pc, #20]	; (8005154 <prvInitialiseTaskLists+0x68>)
 8005140:	601a      	str	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200008ec 	.word	0x200008ec
 8005150:	20000d4c 	.word	0x20000d4c
 8005154:	20000d60 	.word	0x20000d60
 8005158:	20000d7c 	.word	0x20000d7c
 800515c:	20000d90 	.word	0x20000d90
 8005160:	20000da8 	.word	0x20000da8
 8005164:	20000d74 	.word	0x20000d74
 8005168:	20000d78 	.word	0x20000d78

0800516c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005172:	e019      	b.n	80051a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005174:	f000 fed6 	bl	8005f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005178:	4b10      	ldr	r3, [pc, #64]	; (80051bc <prvCheckTasksWaitingTermination+0x50>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe f9f3 	bl	8003570 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800518a:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <prvCheckTasksWaitingTermination+0x54>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3b01      	subs	r3, #1
 8005190:	4a0b      	ldr	r2, [pc, #44]	; (80051c0 <prvCheckTasksWaitingTermination+0x54>)
 8005192:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <prvCheckTasksWaitingTermination+0x58>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3b01      	subs	r3, #1
 800519a:	4a0a      	ldr	r2, [pc, #40]	; (80051c4 <prvCheckTasksWaitingTermination+0x58>)
 800519c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800519e:	f000 fef1 	bl	8005f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f810 	bl	80051c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <prvCheckTasksWaitingTermination+0x58>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e1      	bne.n	8005174 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000d90 	.word	0x20000d90
 80051c0:	20000dbc 	.word	0x20000dbc
 80051c4:	20000da4 	.word	0x20000da4

080051c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3354      	adds	r3, #84	; 0x54
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f9fb 	bl	80065d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 f889 	bl	8006300 <vPortFree>
				vPortFree( pxTCB );
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 f886 	bl	8006300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051f4:	e018      	b.n	8005228 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d103      	bne.n	8005208 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 f87d 	bl	8006300 <vPortFree>
	}
 8005206:	e00f      	b.n	8005228 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800520e:	2b02      	cmp	r3, #2
 8005210:	d00a      	beq.n	8005228 <prvDeleteTCB+0x60>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60fb      	str	r3, [r7, #12]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <prvDeleteTCB+0x5e>
	}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvResetNextTaskUnblockTime+0x38>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <prvResetNextTaskUnblockTime+0x3c>)
 8005242:	f04f 32ff 	mov.w	r2, #4294967295
 8005246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005248:	e008      	b.n	800525c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524a:	4b07      	ldr	r3, [pc, #28]	; (8005268 <prvResetNextTaskUnblockTime+0x38>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <prvResetNextTaskUnblockTime+0x3c>)
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	20000d74 	.word	0x20000d74
 800526c:	20000ddc 	.word	0x20000ddc

08005270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <xTaskGetSchedulerState+0x34>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800527e:	2301      	movs	r3, #1
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	e008      	b.n	8005296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <xTaskGetSchedulerState+0x38>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800528c:	2302      	movs	r3, #2
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	e001      	b.n	8005296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005296:	687b      	ldr	r3, [r7, #4]
	}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	20000dc8 	.word	0x20000dc8
 80052a8:	20000de4 	.word	0x20000de4

080052ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d051      	beq.n	8005366 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <xTaskPriorityInherit+0xc4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d241      	bcs.n	8005354 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	db06      	blt.n	80052e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d8:	4b25      	ldr	r3, [pc, #148]	; (8005370 <xTaskPriorityInherit+0xc4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6959      	ldr	r1, [r3, #20]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4a1f      	ldr	r2, [pc, #124]	; (8005374 <xTaskPriorityInherit+0xc8>)
 80052f8:	4413      	add	r3, r2
 80052fa:	4299      	cmp	r1, r3
 80052fc:	d122      	bne.n	8005344 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3304      	adds	r3, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe f934 	bl	8003570 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <xTaskPriorityInherit+0xc4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <xTaskPriorityInherit+0xcc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d903      	bls.n	8005326 <xTaskPriorityInherit+0x7a>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <xTaskPriorityInherit+0xcc>)
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4a10      	ldr	r2, [pc, #64]	; (8005374 <xTaskPriorityInherit+0xc8>)
 8005334:	441a      	add	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7fe f8ba 	bl	80034b6 <vListInsertEnd>
 8005342:	e004      	b.n	800534e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <xTaskPriorityInherit+0xc4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800534e:	2301      	movs	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e008      	b.n	8005366 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <xTaskPriorityInherit+0xc4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	429a      	cmp	r2, r3
 8005360:	d201      	bcs.n	8005366 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005362:	2301      	movs	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005366:	68fb      	ldr	r3, [r7, #12]
	}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	200008e8 	.word	0x200008e8
 8005374:	200008ec 	.word	0x200008ec
 8005378:	20000dc4 	.word	0x20000dc4

0800537c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d056      	beq.n	8005440 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005392:	4b2e      	ldr	r3, [pc, #184]	; (800544c <xTaskPriorityDisinherit+0xd0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	429a      	cmp	r2, r3
 800539a:	d00a      	beq.n	80053b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	60fb      	str	r3, [r7, #12]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60bb      	str	r3, [r7, #8]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	1e5a      	subs	r2, r3, #1
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d02c      	beq.n	8005440 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d128      	bne.n	8005440 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe f8bc 	bl	8003570 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <xTaskPriorityDisinherit+0xd4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <xTaskPriorityDisinherit+0xa4>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <xTaskPriorityDisinherit+0xd4>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <xTaskPriorityDisinherit+0xd8>)
 800542e:	441a      	add	r2, r3
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe f83d 	bl	80034b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005440:	697b      	ldr	r3, [r7, #20]
	}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200008e8 	.word	0x200008e8
 8005450:	20000dc4 	.word	0x20000dc4
 8005454:	200008ec 	.word	0x200008ec

08005458 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005466:	2301      	movs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d06a      	beq.n	8005546 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d902      	bls.n	800549e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	e002      	b.n	80054a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d04b      	beq.n	8005546 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d146      	bne.n	8005546 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d10a      	bne.n	80054d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	60bb      	str	r3, [r7, #8]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	db04      	blt.n	80054f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	6959      	ldr	r1, [r3, #20]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4a13      	ldr	r2, [pc, #76]	; (8005554 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005506:	4413      	add	r3, r2
 8005508:	4299      	cmp	r1, r3
 800550a:	d11c      	bne.n	8005546 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3304      	adds	r3, #4
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe f82d 	bl	8003570 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d903      	bls.n	800552a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005538:	441a      	add	r2, r3
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	3304      	adds	r3, #4
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f7fd ffb8 	bl	80034b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005546:	bf00      	nop
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200008e8 	.word	0x200008e8
 8005554:	200008ec 	.word	0x200008ec
 8005558:	20000dc4 	.word	0x20000dc4

0800555c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <pvTaskIncrementMutexHeldCount+0x24>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <pvTaskIncrementMutexHeldCount+0x24>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800556e:	3201      	adds	r2, #1
 8005570:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005572:	4b03      	ldr	r3, [pc, #12]	; (8005580 <pvTaskIncrementMutexHeldCount+0x24>)
 8005574:	681b      	ldr	r3, [r3, #0]
	}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	200008e8 	.word	0x200008e8

08005584 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <prvAddCurrentTaskToDelayedList+0x90>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005594:	4b20      	ldr	r3, [pc, #128]	; (8005618 <prvAddCurrentTaskToDelayedList+0x94>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3304      	adds	r3, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd ffe8 	bl	8003570 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d10a      	bne.n	80055be <prvAddCurrentTaskToDelayedList+0x3a>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ae:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <prvAddCurrentTaskToDelayedList+0x94>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4819      	ldr	r0, [pc, #100]	; (800561c <prvAddCurrentTaskToDelayedList+0x98>)
 80055b8:	f7fd ff7d 	bl	80034b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055bc:	e026      	b.n	800560c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <prvAddCurrentTaskToDelayedList+0x94>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d209      	bcs.n	80055ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <prvAddCurrentTaskToDelayedList+0x94>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f7fd ff8b 	bl	80034fe <vListInsert>
}
 80055e8:	e010      	b.n	800560c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ea:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <prvAddCurrentTaskToDelayedList+0x94>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f7fd ff81 	bl	80034fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	d202      	bcs.n	800560c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6013      	str	r3, [r2, #0]
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20000dc0 	.word	0x20000dc0
 8005618:	200008e8 	.word	0x200008e8
 800561c:	20000da8 	.word	0x20000da8
 8005620:	20000d78 	.word	0x20000d78
 8005624:	20000d74 	.word	0x20000d74
 8005628:	20000ddc 	.word	0x20000ddc

0800562c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005636:	f000 fb07 	bl	8005c48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800563a:	4b1c      	ldr	r3, [pc, #112]	; (80056ac <xTimerCreateTimerTask+0x80>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d021      	beq.n	8005686 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800564a:	1d3a      	adds	r2, r7, #4
 800564c:	f107 0108 	add.w	r1, r7, #8
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	4618      	mov	r0, r3
 8005656:	f7fd fee7 	bl	8003428 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	9202      	str	r2, [sp, #8]
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	2302      	movs	r3, #2
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	2300      	movs	r3, #0
 800566a:	460a      	mov	r2, r1
 800566c:	4910      	ldr	r1, [pc, #64]	; (80056b0 <xTimerCreateTimerTask+0x84>)
 800566e:	4811      	ldr	r0, [pc, #68]	; (80056b4 <xTimerCreateTimerTask+0x88>)
 8005670:	f7fe ffb6 	bl	80045e0 <xTaskCreateStatic>
 8005674:	4603      	mov	r3, r0
 8005676:	4a10      	ldr	r2, [pc, #64]	; (80056b8 <xTimerCreateTimerTask+0x8c>)
 8005678:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <xTimerCreateTimerTask+0x8c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005682:	2301      	movs	r3, #1
 8005684:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	613b      	str	r3, [r7, #16]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056a2:	697b      	ldr	r3, [r7, #20]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000e18 	.word	0x20000e18
 80056b0:	08006778 	.word	0x08006778
 80056b4:	080057f1 	.word	0x080057f1
 80056b8:	20000e1c 	.word	0x20000e1c

080056bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	623b      	str	r3, [r7, #32]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056ea:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <xTimerGenericCommand+0x98>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02a      	beq.n	8005748 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b05      	cmp	r3, #5
 8005702:	dc18      	bgt.n	8005736 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005704:	f7ff fdb4 	bl	8005270 <xTaskGetSchedulerState>
 8005708:	4603      	mov	r3, r0
 800570a:	2b02      	cmp	r3, #2
 800570c:	d109      	bne.n	8005722 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <xTimerGenericCommand+0x98>)
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	f107 0110 	add.w	r1, r7, #16
 8005716:	2300      	movs	r3, #0
 8005718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571a:	f7fe f8fb 	bl	8003914 <xQueueGenericSend>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24
 8005720:	e012      	b.n	8005748 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005722:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <xTimerGenericCommand+0x98>)
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	f107 0110 	add.w	r1, r7, #16
 800572a:	2300      	movs	r3, #0
 800572c:	2200      	movs	r2, #0
 800572e:	f7fe f8f1 	bl	8003914 <xQueueGenericSend>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24
 8005734:	e008      	b.n	8005748 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <xTimerGenericCommand+0x98>)
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	f107 0110 	add.w	r1, r7, #16
 800573e:	2300      	movs	r3, #0
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	f7fe f9e5 	bl	8003b10 <xQueueGenericSendFromISR>
 8005746:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800574a:	4618      	mov	r0, r3
 800574c:	3728      	adds	r7, #40	; 0x28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000e18 	.word	0x20000e18

08005758 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005762:	4b22      	ldr	r3, [pc, #136]	; (80057ec <prvProcessExpiredTimer+0x94>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3304      	adds	r3, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f7fd fefd 	bl	8003570 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d022      	beq.n	80057ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	18d1      	adds	r1, r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	6978      	ldr	r0, [r7, #20]
 8005792:	f000 f8d1 	bl	8005938 <prvInsertTimerInActiveList>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01f      	beq.n	80057dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800579c:	2300      	movs	r3, #0
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2300      	movs	r3, #0
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	2100      	movs	r1, #0
 80057a6:	6978      	ldr	r0, [r7, #20]
 80057a8:	f7ff ff88 	bl	80056bc <xTimerGenericCommand>
 80057ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d113      	bne.n	80057dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60fb      	str	r3, [r7, #12]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	6978      	ldr	r0, [r7, #20]
 80057e2:	4798      	blx	r3
}
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000e10 	.word	0x20000e10

080057f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057f8:	f107 0308 	add.w	r3, r7, #8
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f857 	bl	80058b0 <prvGetNextExpireTime>
 8005802:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f803 	bl	8005814 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800580e:	f000 f8d5 	bl	80059bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005812:	e7f1      	b.n	80057f8 <prvTimerTask+0x8>

08005814 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800581e:	f7ff f93b 	bl	8004a98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f866 	bl	80058f8 <prvSampleTimeNow>
 800582c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d130      	bne.n	8005896 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <prvProcessTimerOrBlockTask+0x3c>
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	429a      	cmp	r2, r3
 8005840:	d806      	bhi.n	8005850 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005842:	f7ff f937 	bl	8004ab4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff85 	bl	8005758 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800584e:	e024      	b.n	800589a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005856:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <prvProcessTimerOrBlockTask+0x90>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <prvProcessTimerOrBlockTask+0x50>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <prvProcessTimerOrBlockTask+0x52>
 8005864:	2300      	movs	r3, #0
 8005866:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <prvProcessTimerOrBlockTask+0x94>)
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	4619      	mov	r1, r3
 8005876:	f7fe fe7f 	bl	8004578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800587a:	f7ff f91b 	bl	8004ab4 <xTaskResumeAll>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <prvProcessTimerOrBlockTask+0x98>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
}
 8005894:	e001      	b.n	800589a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005896:	f7ff f90d 	bl	8004ab4 <xTaskResumeAll>
}
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000e14 	.word	0x20000e14
 80058a8:	20000e18 	.word	0x20000e18
 80058ac:	e000ed04 	.word	0xe000ed04

080058b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058b8:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <prvGetNextExpireTime+0x44>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <prvGetNextExpireTime+0x16>
 80058c2:	2201      	movs	r2, #1
 80058c4:	e000      	b.n	80058c8 <prvGetNextExpireTime+0x18>
 80058c6:	2200      	movs	r2, #0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <prvGetNextExpireTime+0x44>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e001      	b.n	80058e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058e4:	68fb      	ldr	r3, [r7, #12]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20000e10 	.word	0x20000e10

080058f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005900:	f7ff f976 	bl	8004bf0 <xTaskGetTickCount>
 8005904:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <prvSampleTimeNow+0x3c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	429a      	cmp	r2, r3
 800590e:	d205      	bcs.n	800591c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005910:	f000 f936 	bl	8005b80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e002      	b.n	8005922 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005922:	4a04      	ldr	r2, [pc, #16]	; (8005934 <prvSampleTimeNow+0x3c>)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005928:	68fb      	ldr	r3, [r7, #12]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000e20 	.word	0x20000e20

08005938 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	429a      	cmp	r2, r3
 800595c:	d812      	bhi.n	8005984 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	429a      	cmp	r2, r3
 800596a:	d302      	bcc.n	8005972 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e01b      	b.n	80059aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <prvInsertTimerInActiveList+0x7c>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3304      	adds	r3, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f7fd fdbe 	bl	80034fe <vListInsert>
 8005982:	e012      	b.n	80059aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d206      	bcs.n	800599a <prvInsertTimerInActiveList+0x62>
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d302      	bcc.n	800599a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	e007      	b.n	80059aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <prvInsertTimerInActiveList+0x80>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7fd fdaa 	bl	80034fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059aa:	697b      	ldr	r3, [r7, #20]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000e14 	.word	0x20000e14
 80059b8:	20000e10 	.word	0x20000e10

080059bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	; 0x38
 80059c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059c2:	e0ca      	b.n	8005b5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da18      	bge.n	80059fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	3304      	adds	r3, #4
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	61fb      	str	r3, [r7, #28]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f2:	6850      	ldr	r0, [r2, #4]
 80059f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f6:	6892      	ldr	r2, [r2, #8]
 80059f8:	4611      	mov	r1, r2
 80059fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f2c0 80aa 	blt.w	8005b58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d004      	beq.n	8005a1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	3304      	adds	r3, #4
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fd fdab 	bl	8003570 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff ff6b 	bl	80058f8 <prvSampleTimeNow>
 8005a22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b09      	cmp	r3, #9
 8005a28:	f200 8097 	bhi.w	8005b5a <prvProcessReceivedCommands+0x19e>
 8005a2c:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <prvProcessReceivedCommands+0x78>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a5d 	.word	0x08005a5d
 8005a40:	08005ad1 	.word	0x08005ad1
 8005a44:	08005ae5 	.word	0x08005ae5
 8005a48:	08005b2f 	.word	0x08005b2f
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a5d 	.word	0x08005a5d
 8005a54:	08005ad1 	.word	0x08005ad1
 8005a58:	08005ae5 	.word	0x08005ae5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	18d1      	adds	r1, r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7c:	f7ff ff5c 	bl	8005938 <prvInsertTimerInActiveList>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d069      	beq.n	8005b5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05e      	beq.n	8005b5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	441a      	add	r2, r3
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2100      	movs	r1, #0
 8005aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aae:	f7ff fe05 	bl	80056bc <xTimerGenericCommand>
 8005ab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d14f      	bne.n	8005b5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	61bb      	str	r3, [r7, #24]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ae2:	e03a      	b.n	8005b5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	617b      	str	r3, [r7, #20]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	18d1      	adds	r1, r2, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b28:	f7ff ff06 	bl	8005938 <prvInsertTimerInActiveList>
					break;
 8005b2c:	e015      	b.n	8005b5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3e:	f000 fbdf 	bl	8006300 <vPortFree>
 8005b42:	e00a      	b.n	8005b5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b56:	e000      	b.n	8005b5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005b58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b5a:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <prvProcessReceivedCommands+0x1c0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1d39      	adds	r1, r7, #4
 8005b60:	2200      	movs	r2, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe f8fc 	bl	8003d60 <xQueueReceive>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f47f af2a 	bne.w	80059c4 <prvProcessReceivedCommands+0x8>
	}
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3730      	adds	r7, #48	; 0x30
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000e18 	.word	0x20000e18

08005b80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b86:	e048      	b.n	8005c1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b88:	4b2d      	ldr	r3, [pc, #180]	; (8005c40 <prvSwitchTimerLists+0xc0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b92:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <prvSwitchTimerLists+0xc0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fd fce5 	bl	8003570 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02e      	beq.n	8005c1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d90e      	bls.n	8005bec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bda:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <prvSwitchTimerLists+0xc0>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f7fd fc8a 	bl	80034fe <vListInsert>
 8005bea:	e016      	b.n	8005c1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bec:	2300      	movs	r3, #0
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7ff fd60 	bl	80056bc <xTimerGenericCommand>
 8005bfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	603b      	str	r3, [r7, #0]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <prvSwitchTimerLists+0xc0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1b1      	bne.n	8005b88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <prvSwitchTimerLists+0xc0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <prvSwitchTimerLists+0xc4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <prvSwitchTimerLists+0xc0>)
 8005c30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c32:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <prvSwitchTimerLists+0xc4>)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	6013      	str	r3, [r2, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000e10 	.word	0x20000e10
 8005c44:	20000e14 	.word	0x20000e14

08005c48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c4e:	f000 f969 	bl	8005f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <prvCheckForValidListAndQueue+0x60>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d120      	bne.n	8005c9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c5a:	4814      	ldr	r0, [pc, #80]	; (8005cac <prvCheckForValidListAndQueue+0x64>)
 8005c5c:	f7fd fbfe 	bl	800345c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c60:	4813      	ldr	r0, [pc, #76]	; (8005cb0 <prvCheckForValidListAndQueue+0x68>)
 8005c62:	f7fd fbfb 	bl	800345c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c66:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <prvCheckForValidListAndQueue+0x6c>)
 8005c68:	4a10      	ldr	r2, [pc, #64]	; (8005cac <prvCheckForValidListAndQueue+0x64>)
 8005c6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c6c:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <prvCheckForValidListAndQueue+0x70>)
 8005c6e:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <prvCheckForValidListAndQueue+0x68>)
 8005c70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c72:	2300      	movs	r3, #0
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <prvCheckForValidListAndQueue+0x74>)
 8005c78:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <prvCheckForValidListAndQueue+0x78>)
 8005c7a:	2110      	movs	r1, #16
 8005c7c:	200a      	movs	r0, #10
 8005c7e:	f7fd fd09 	bl	8003694 <xQueueGenericCreateStatic>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4a08      	ldr	r2, [pc, #32]	; (8005ca8 <prvCheckForValidListAndQueue+0x60>)
 8005c86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <prvCheckForValidListAndQueue+0x60>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <prvCheckForValidListAndQueue+0x60>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	490b      	ldr	r1, [pc, #44]	; (8005cc4 <prvCheckForValidListAndQueue+0x7c>)
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fc1a 	bl	80044d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c9c:	f000 f972 	bl	8005f84 <vPortExitCritical>
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000e18 	.word	0x20000e18
 8005cac:	20000de8 	.word	0x20000de8
 8005cb0:	20000dfc 	.word	0x20000dfc
 8005cb4:	20000e10 	.word	0x20000e10
 8005cb8:	20000e14 	.word	0x20000e14
 8005cbc:	20000ec4 	.word	0x20000ec4
 8005cc0:	20000e24 	.word	0x20000e24
 8005cc4:	08006780 	.word	0x08006780

08005cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3b04      	subs	r3, #4
 8005cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3b04      	subs	r3, #4
 8005ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cf8:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <pxPortInitialiseStack+0x64>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b14      	subs	r3, #20
 8005d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3b04      	subs	r3, #4
 8005d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f06f 0202 	mvn.w	r2, #2
 8005d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3b20      	subs	r3, #32
 8005d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	08005d31 	.word	0x08005d31

08005d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <prvTaskExitError+0x54>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d00a      	beq.n	8005d5a <prvTaskExitError+0x2a>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	60fb      	str	r3, [r7, #12]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <prvTaskExitError+0x28>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60bb      	str	r3, [r7, #8]
}
 8005d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d6e:	bf00      	nop
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0fc      	beq.n	8005d70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	2000000c 	.word	0x2000000c
	...

08005d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <pxCurrentTCBConst2>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f380 8809 	msr	PSP, r0
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	4770      	bx	lr
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst2>:
 8005db0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005db8:	4808      	ldr	r0, [pc, #32]	; (8005ddc <prvPortStartFirstTask+0x24>)
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f380 8808 	msr	MSP, r0
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8814 	msr	CONTROL, r0
 8005dca:	b662      	cpsie	i
 8005dcc:	b661      	cpsie	f
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	df00      	svc	0
 8005dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dda:	bf00      	nop
 8005ddc:	e000ed08 	.word	0xe000ed08

08005de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005de6:	4b46      	ldr	r3, [pc, #280]	; (8005f00 <xPortStartScheduler+0x120>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a46      	ldr	r2, [pc, #280]	; (8005f04 <xPortStartScheduler+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10a      	bne.n	8005e06 <xPortStartScheduler+0x26>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	613b      	str	r3, [r7, #16]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e06:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <xPortStartScheduler+0x120>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3f      	ldr	r2, [pc, #252]	; (8005f08 <xPortStartScheduler+0x128>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10a      	bne.n	8005e26 <xPortStartScheduler+0x46>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <xPortStartScheduler+0x12c>)
 8005e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <xPortStartScheduler+0x130>)
 8005e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e4e:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e54:	e009      	b.n	8005e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d0ef      	beq.n	8005e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1c3 0307 	rsb	r3, r3, #7
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00a      	beq.n	8005e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <xPortStartScheduler+0x134>)
 8005eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <xPortStartScheduler+0x138>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ece:	f000 f8dd 	bl	800608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <xPortStartScheduler+0x13c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ed8:	f000 f8fc 	bl	80060d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0f      	ldr	r2, [pc, #60]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ee8:	f7ff ff66 	bl	8005db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eec:	f7fe ff4a 	bl	8004d84 <vTaskSwitchContext>
	prvTaskExitError();
 8005ef0:	f7ff ff1e 	bl	8005d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	e000ed00 	.word	0xe000ed00
 8005f04:	410fc271 	.word	0x410fc271
 8005f08:	410fc270 	.word	0x410fc270
 8005f0c:	e000e400 	.word	0xe000e400
 8005f10:	20000f14 	.word	0x20000f14
 8005f14:	20000f18 	.word	0x20000f18
 8005f18:	e000ed20 	.word	0xe000ed20
 8005f1c:	2000000c 	.word	0x2000000c
 8005f20:	e000ef34 	.word	0xe000ef34

08005f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	607b      	str	r3, [r7, #4]
}
 8005f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	4a0d      	ldr	r2, [pc, #52]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d10f      	bne.n	8005f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <vPortEnterCritical+0x5c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	603b      	str	r3, [r7, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <vPortEnterCritical+0x4a>
	}
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	2000000c 	.word	0x2000000c
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <vPortExitCritical+0x50>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <vPortExitCritical+0x24>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	607b      	str	r3, [r7, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <vPortExitCritical+0x50>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <vPortExitCritical+0x42>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f383 8811 	msr	BASEPRI, r3
}
 8005fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	2000000c 	.word	0x2000000c
	...

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f7fe feb8 	bl	8004d84 <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006062:	f7fe fdd5 	bl	8004c10 <xTaskIncrementTick>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <xPortSysTickHandler+0x40>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <vPortSetupTimerInterrupt+0x38>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <vPortSetupTimerInterrupt+0x3c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <vPortSetupTimerInterrupt+0x40>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <vPortSetupTimerInterrupt+0x44>)
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e010 	.word	0xe000e010
 80060c4:	e000e018 	.word	0xe000e018
 80060c8:	20000000 	.word	0x20000000
 80060cc:	10624dd3 	.word	0x10624dd3
 80060d0:	e000e014 	.word	0xe000e014

080060d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060e4 <vPortEnableVFP+0x10>
 80060d8:	6801      	ldr	r1, [r0, #0]
 80060da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060de:	6001      	str	r1, [r0, #0]
 80060e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e000ed88 	.word	0xe000ed88

080060e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d914      	bls.n	8006124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <vPortValidateInterruptPriority+0x70>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006104:	4b15      	ldr	r3, [pc, #84]	; (800615c <vPortValidateInterruptPriority+0x74>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	429a      	cmp	r2, r3
 800610c:	d20a      	bcs.n	8006124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <vPortValidateInterruptPriority+0x78>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800612c:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <vPortValidateInterruptPriority+0x7c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d90a      	bls.n	800614a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	603b      	str	r3, [r7, #0]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <vPortValidateInterruptPriority+0x60>
	}
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000e3f0 	.word	0xe000e3f0
 800615c:	20000f14 	.word	0x20000f14
 8006160:	e000ed0c 	.word	0xe000ed0c
 8006164:	20000f18 	.word	0x20000f18

08006168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006174:	f7fe fc90 	bl	8004a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006178:	4b5b      	ldr	r3, [pc, #364]	; (80062e8 <pvPortMalloc+0x180>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006180:	f000 f920 	bl	80063c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <pvPortMalloc+0x184>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8093 	bne.w	80062b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01d      	beq.n	80061d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006198:	2208      	movs	r2, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <pvPortMalloc+0x6c>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	617b      	str	r3, [r7, #20]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06e      	beq.n	80062b8 <pvPortMalloc+0x150>
 80061da:	4b45      	ldr	r3, [pc, #276]	; (80062f0 <pvPortMalloc+0x188>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d869      	bhi.n	80062b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061e4:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <pvPortMalloc+0x18c>)
 80061e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061e8:	4b42      	ldr	r3, [pc, #264]	; (80062f4 <pvPortMalloc+0x18c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ee:	e004      	b.n	80061fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <pvPortMalloc+0xa4>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f1      	bne.n	80061f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <pvPortMalloc+0x180>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	429a      	cmp	r2, r3
 8006214:	d050      	beq.n	80062b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2208      	movs	r2, #8
 800621c:	4413      	add	r3, r2
 800621e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	2308      	movs	r3, #8
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	d91f      	bls.n	8006278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <pvPortMalloc+0xf8>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	613b      	str	r3, [r7, #16]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006272:	69b8      	ldr	r0, [r7, #24]
 8006274:	f000 f908 	bl	8006488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <pvPortMalloc+0x188>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <pvPortMalloc+0x188>)
 8006284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <pvPortMalloc+0x188>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <pvPortMalloc+0x190>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d203      	bcs.n	800629a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006292:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <pvPortMalloc+0x188>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <pvPortMalloc+0x190>)
 8006298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <pvPortMalloc+0x184>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <pvPortMalloc+0x194>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a11      	ldr	r2, [pc, #68]	; (80062fc <pvPortMalloc+0x194>)
 80062b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062b8:	f7fe fbfc 	bl	8004ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <pvPortMalloc+0x174>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <pvPortMalloc+0x172>
	return pvReturn;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3728      	adds	r7, #40	; 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20004b24 	.word	0x20004b24
 80062ec:	20004b38 	.word	0x20004b38
 80062f0:	20004b28 	.word	0x20004b28
 80062f4:	20004b1c 	.word	0x20004b1c
 80062f8:	20004b2c 	.word	0x20004b2c
 80062fc:	20004b30 	.word	0x20004b30

08006300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04d      	beq.n	80063ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006312:	2308      	movs	r3, #8
 8006314:	425b      	negs	r3, r3
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <vPortFree+0xb8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <vPortFree+0x44>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <vPortFree+0x62>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60bb      	str	r3, [r7, #8]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <vPortFree+0xb8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11a      	bne.n	80063ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <vPortFree+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006388:	f7fe fb86 	bl	8004a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vPortFree+0xbc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4413      	add	r3, r2
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <vPortFree+0xbc>)
 8006398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f874 	bl	8006488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <vPortFree+0xc0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a06      	ldr	r2, [pc, #24]	; (80063c0 <vPortFree+0xc0>)
 80063a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063aa:	f7fe fb83 	bl	8004ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20004b38 	.word	0x20004b38
 80063bc:	20004b28 	.word	0x20004b28
 80063c0:	20004b34 	.word	0x20004b34

080063c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <prvHeapInit+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <prvHeapInit+0xac>)
 80063f4:	4413      	add	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063fc:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <prvHeapInit+0xb0>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <prvHeapInit+0xb0>)
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006410:	2208      	movs	r2, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <prvHeapInit+0xb4>)
 8006424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <prvHeapInit+0xb4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <prvHeapInit+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <prvHeapInit+0xb4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a0a      	ldr	r2, [pc, #40]	; (800647c <prvHeapInit+0xb8>)
 8006452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a09      	ldr	r2, [pc, #36]	; (8006480 <prvHeapInit+0xbc>)
 800645a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <prvHeapInit+0xc0>)
 800645e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000f1c 	.word	0x20000f1c
 8006474:	20004b1c 	.word	0x20004b1c
 8006478:	20004b24 	.word	0x20004b24
 800647c:	20004b2c 	.word	0x20004b2c
 8006480:	20004b28 	.word	0x20004b28
 8006484:	20004b38 	.word	0x20004b38

08006488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <prvInsertBlockIntoFreeList+0xac>)
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <prvInsertBlockIntoFreeList+0x14>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d8f7      	bhi.n	8006496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d108      	bne.n	80064ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d118      	bne.n	8006510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b15      	ldr	r3, [pc, #84]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d00d      	beq.n	8006506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	e008      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e003      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d002      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20004b1c 	.word	0x20004b1c
 8006538:	20004b24 	.word	0x20004b24

0800653c <__libc_init_array>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	4d0d      	ldr	r5, [pc, #52]	; (8006574 <__libc_init_array+0x38>)
 8006540:	4c0d      	ldr	r4, [pc, #52]	; (8006578 <__libc_init_array+0x3c>)
 8006542:	1b64      	subs	r4, r4, r5
 8006544:	10a4      	asrs	r4, r4, #2
 8006546:	2600      	movs	r6, #0
 8006548:	42a6      	cmp	r6, r4
 800654a:	d109      	bne.n	8006560 <__libc_init_array+0x24>
 800654c:	4d0b      	ldr	r5, [pc, #44]	; (800657c <__libc_init_array+0x40>)
 800654e:	4c0c      	ldr	r4, [pc, #48]	; (8006580 <__libc_init_array+0x44>)
 8006550:	f000 f8f2 	bl	8006738 <_init>
 8006554:	1b64      	subs	r4, r4, r5
 8006556:	10a4      	asrs	r4, r4, #2
 8006558:	2600      	movs	r6, #0
 800655a:	42a6      	cmp	r6, r4
 800655c:	d105      	bne.n	800656a <__libc_init_array+0x2e>
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	f855 3b04 	ldr.w	r3, [r5], #4
 8006564:	4798      	blx	r3
 8006566:	3601      	adds	r6, #1
 8006568:	e7ee      	b.n	8006548 <__libc_init_array+0xc>
 800656a:	f855 3b04 	ldr.w	r3, [r5], #4
 800656e:	4798      	blx	r3
 8006570:	3601      	adds	r6, #1
 8006572:	e7f2      	b.n	800655a <__libc_init_array+0x1e>
 8006574:	08006860 	.word	0x08006860
 8006578:	08006860 	.word	0x08006860
 800657c:	08006860 	.word	0x08006860
 8006580:	08006864 	.word	0x08006864

08006584 <__retarget_lock_acquire_recursive>:
 8006584:	4770      	bx	lr

08006586 <__retarget_lock_release_recursive>:
 8006586:	4770      	bx	lr

08006588 <memcpy>:
 8006588:	440a      	add	r2, r1
 800658a:	4291      	cmp	r1, r2
 800658c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006590:	d100      	bne.n	8006594 <memcpy+0xc>
 8006592:	4770      	bx	lr
 8006594:	b510      	push	{r4, lr}
 8006596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800659a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800659e:	4291      	cmp	r1, r2
 80065a0:	d1f9      	bne.n	8006596 <memcpy+0xe>
 80065a2:	bd10      	pop	{r4, pc}

080065a4 <memset>:
 80065a4:	4402      	add	r2, r0
 80065a6:	4603      	mov	r3, r0
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d100      	bne.n	80065ae <memset+0xa>
 80065ac:	4770      	bx	lr
 80065ae:	f803 1b01 	strb.w	r1, [r3], #1
 80065b2:	e7f9      	b.n	80065a8 <memset+0x4>

080065b4 <cleanup_glue>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	460c      	mov	r4, r1
 80065b8:	6809      	ldr	r1, [r1, #0]
 80065ba:	4605      	mov	r5, r0
 80065bc:	b109      	cbz	r1, 80065c2 <cleanup_glue+0xe>
 80065be:	f7ff fff9 	bl	80065b4 <cleanup_glue>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4628      	mov	r0, r5
 80065c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ca:	f000 b869 	b.w	80066a0 <_free_r>
	...

080065d0 <_reclaim_reent>:
 80065d0:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <_reclaim_reent+0xb4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4283      	cmp	r3, r0
 80065d6:	b570      	push	{r4, r5, r6, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	d051      	beq.n	8006680 <_reclaim_reent+0xb0>
 80065dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80065de:	b143      	cbz	r3, 80065f2 <_reclaim_reent+0x22>
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d14a      	bne.n	800667c <_reclaim_reent+0xac>
 80065e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e8:	6819      	ldr	r1, [r3, #0]
 80065ea:	b111      	cbz	r1, 80065f2 <_reclaim_reent+0x22>
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 f857 	bl	80066a0 <_free_r>
 80065f2:	6961      	ldr	r1, [r4, #20]
 80065f4:	b111      	cbz	r1, 80065fc <_reclaim_reent+0x2c>
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f852 	bl	80066a0 <_free_r>
 80065fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065fe:	b111      	cbz	r1, 8006606 <_reclaim_reent+0x36>
 8006600:	4620      	mov	r0, r4
 8006602:	f000 f84d 	bl	80066a0 <_free_r>
 8006606:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006608:	b111      	cbz	r1, 8006610 <_reclaim_reent+0x40>
 800660a:	4620      	mov	r0, r4
 800660c:	f000 f848 	bl	80066a0 <_free_r>
 8006610:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006612:	b111      	cbz	r1, 800661a <_reclaim_reent+0x4a>
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f843 	bl	80066a0 <_free_r>
 800661a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800661c:	b111      	cbz	r1, 8006624 <_reclaim_reent+0x54>
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f83e 	bl	80066a0 <_free_r>
 8006624:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006626:	b111      	cbz	r1, 800662e <_reclaim_reent+0x5e>
 8006628:	4620      	mov	r0, r4
 800662a:	f000 f839 	bl	80066a0 <_free_r>
 800662e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006630:	b111      	cbz	r1, 8006638 <_reclaim_reent+0x68>
 8006632:	4620      	mov	r0, r4
 8006634:	f000 f834 	bl	80066a0 <_free_r>
 8006638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800663a:	b111      	cbz	r1, 8006642 <_reclaim_reent+0x72>
 800663c:	4620      	mov	r0, r4
 800663e:	f000 f82f 	bl	80066a0 <_free_r>
 8006642:	69a3      	ldr	r3, [r4, #24]
 8006644:	b1e3      	cbz	r3, 8006680 <_reclaim_reent+0xb0>
 8006646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006648:	4620      	mov	r0, r4
 800664a:	4798      	blx	r3
 800664c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800664e:	b1b9      	cbz	r1, 8006680 <_reclaim_reent+0xb0>
 8006650:	4620      	mov	r0, r4
 8006652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006656:	f7ff bfad 	b.w	80065b4 <cleanup_glue>
 800665a:	5949      	ldr	r1, [r1, r5]
 800665c:	b941      	cbnz	r1, 8006670 <_reclaim_reent+0xa0>
 800665e:	3504      	adds	r5, #4
 8006660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006662:	2d80      	cmp	r5, #128	; 0x80
 8006664:	68d9      	ldr	r1, [r3, #12]
 8006666:	d1f8      	bne.n	800665a <_reclaim_reent+0x8a>
 8006668:	4620      	mov	r0, r4
 800666a:	f000 f819 	bl	80066a0 <_free_r>
 800666e:	e7ba      	b.n	80065e6 <_reclaim_reent+0x16>
 8006670:	680e      	ldr	r6, [r1, #0]
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f814 	bl	80066a0 <_free_r>
 8006678:	4631      	mov	r1, r6
 800667a:	e7ef      	b.n	800665c <_reclaim_reent+0x8c>
 800667c:	2500      	movs	r5, #0
 800667e:	e7ef      	b.n	8006660 <_reclaim_reent+0x90>
 8006680:	bd70      	pop	{r4, r5, r6, pc}
 8006682:	bf00      	nop
 8006684:	20000010 	.word	0x20000010

08006688 <__malloc_lock>:
 8006688:	4801      	ldr	r0, [pc, #4]	; (8006690 <__malloc_lock+0x8>)
 800668a:	f7ff bf7b 	b.w	8006584 <__retarget_lock_acquire_recursive>
 800668e:	bf00      	nop
 8006690:	20004b3c 	.word	0x20004b3c

08006694 <__malloc_unlock>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__malloc_unlock+0x8>)
 8006696:	f7ff bf76 	b.w	8006586 <__retarget_lock_release_recursive>
 800669a:	bf00      	nop
 800669c:	20004b3c 	.word	0x20004b3c

080066a0 <_free_r>:
 80066a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066a2:	2900      	cmp	r1, #0
 80066a4:	d044      	beq.n	8006730 <_free_r+0x90>
 80066a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066aa:	9001      	str	r0, [sp, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f1a1 0404 	sub.w	r4, r1, #4
 80066b2:	bfb8      	it	lt
 80066b4:	18e4      	addlt	r4, r4, r3
 80066b6:	f7ff ffe7 	bl	8006688 <__malloc_lock>
 80066ba:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <_free_r+0x94>)
 80066bc:	9801      	ldr	r0, [sp, #4]
 80066be:	6813      	ldr	r3, [r2, #0]
 80066c0:	b933      	cbnz	r3, 80066d0 <_free_r+0x30>
 80066c2:	6063      	str	r3, [r4, #4]
 80066c4:	6014      	str	r4, [r2, #0]
 80066c6:	b003      	add	sp, #12
 80066c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066cc:	f7ff bfe2 	b.w	8006694 <__malloc_unlock>
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d908      	bls.n	80066e6 <_free_r+0x46>
 80066d4:	6825      	ldr	r5, [r4, #0]
 80066d6:	1961      	adds	r1, r4, r5
 80066d8:	428b      	cmp	r3, r1
 80066da:	bf01      	itttt	eq
 80066dc:	6819      	ldreq	r1, [r3, #0]
 80066de:	685b      	ldreq	r3, [r3, #4]
 80066e0:	1949      	addeq	r1, r1, r5
 80066e2:	6021      	streq	r1, [r4, #0]
 80066e4:	e7ed      	b.n	80066c2 <_free_r+0x22>
 80066e6:	461a      	mov	r2, r3
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	b10b      	cbz	r3, 80066f0 <_free_r+0x50>
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d9fa      	bls.n	80066e6 <_free_r+0x46>
 80066f0:	6811      	ldr	r1, [r2, #0]
 80066f2:	1855      	adds	r5, r2, r1
 80066f4:	42a5      	cmp	r5, r4
 80066f6:	d10b      	bne.n	8006710 <_free_r+0x70>
 80066f8:	6824      	ldr	r4, [r4, #0]
 80066fa:	4421      	add	r1, r4
 80066fc:	1854      	adds	r4, r2, r1
 80066fe:	42a3      	cmp	r3, r4
 8006700:	6011      	str	r1, [r2, #0]
 8006702:	d1e0      	bne.n	80066c6 <_free_r+0x26>
 8006704:	681c      	ldr	r4, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	6053      	str	r3, [r2, #4]
 800670a:	4421      	add	r1, r4
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	e7da      	b.n	80066c6 <_free_r+0x26>
 8006710:	d902      	bls.n	8006718 <_free_r+0x78>
 8006712:	230c      	movs	r3, #12
 8006714:	6003      	str	r3, [r0, #0]
 8006716:	e7d6      	b.n	80066c6 <_free_r+0x26>
 8006718:	6825      	ldr	r5, [r4, #0]
 800671a:	1961      	adds	r1, r4, r5
 800671c:	428b      	cmp	r3, r1
 800671e:	bf04      	itt	eq
 8006720:	6819      	ldreq	r1, [r3, #0]
 8006722:	685b      	ldreq	r3, [r3, #4]
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	bf04      	itt	eq
 8006728:	1949      	addeq	r1, r1, r5
 800672a:	6021      	streq	r1, [r4, #0]
 800672c:	6054      	str	r4, [r2, #4]
 800672e:	e7ca      	b.n	80066c6 <_free_r+0x26>
 8006730:	b003      	add	sp, #12
 8006732:	bd30      	pop	{r4, r5, pc}
 8006734:	20004b40 	.word	0x20004b40

08006738 <_init>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr

08006744 <_fini>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr
