
014_FREERTOS_CMSIS_EVENT_FLAGS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006594  08006594  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800659c  0800659c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080065a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b48  20004b48  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6ad  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e0  00000000  00000000  0003a751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034c8  00000000  00000000  000405d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b14  00000000  00000000  00043a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4e54  00000000  00000000  0005a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f400  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b2c  00000000  00000000  0012f450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006468 	.word	0x08006468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006468 	.word	0x08006468

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fb22 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f83c 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8cc 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f8a0 	bl	8000678 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  EventGroup1 = osEventFlagsNew(NULL);
 8000538:	2000      	movs	r0, #0
 800053a:	f002 fe64 	bl	8003206 <osEventFlagsNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <main+0x5c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000544:	f002 fd68 	bl	8003018 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <main+0x60>)
 800054a:	2100      	movs	r1, #0
 800054c:	480e      	ldr	r0, [pc, #56]	; (8000588 <main+0x64>)
 800054e:	f002 fdad 	bl	80030ac <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <main+0x68>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <main+0x6c>)
 800055a:	2100      	movs	r1, #0
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <main+0x70>)
 800055e:	f002 fda5 	bl	80030ac <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <main+0x74>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <main+0x78>)
 800056a:	2100      	movs	r1, #0
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <main+0x7c>)
 800056e:	f002 fd9d 	bl	80030ac <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <main+0x80>)
 8000576:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000578:	f002 fd72 	bl	8003060 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	e7fe      	b.n	800057c <main+0x58>
 800057e:	bf00      	nop
 8000580:	200000e0 	.word	0x200000e0
 8000584:	080064b0 	.word	0x080064b0
 8000588:	08000805 	.word	0x08000805
 800058c:	200000d4 	.word	0x200000d4
 8000590:	080064d4 	.word	0x080064d4
 8000594:	08000829 	.word	0x08000829
 8000598:	200000d8 	.word	0x200000d8
 800059c:	080064f8 	.word	0x080064f8
 80005a0:	08000851 	.word	0x08000851
 80005a4:	200000dc 	.word	0x200000dc

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fe8c 	bl	80062d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a26      	ldr	r2, [pc, #152]	; (8000670 <SystemClock_Config+0xc8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <SystemClock_Config+0xcc>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fe23 	bl	8001278 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f92e 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000644:	23b0      	movs	r3, #176	; 0xb0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f886 	bl	8001768 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000662:	f000 f919 	bl	8000898 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fd5a 	bl	8002168 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f8ed 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000090 	.word	0x20000090
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a31      	ldr	r2, [pc, #196]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a23      	ldr	r2, [pc, #140]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_GPIO_Init+0xe4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_GPIO_Init+0xe4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000758:	4816      	ldr	r0, [pc, #88]	; (80007b4 <MX_GPIO_Init+0xe8>)
 800075a:	f000 fd5b 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800075e:	2301      	movs	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_GPIO_Init+0xec>)
 8000774:	f000 fbb2 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000778:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <MX_GPIO_Init+0xe8>)
 8000792:	f000 fba3 	bl	8000edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2105      	movs	r1, #5
 800079a:	2006      	movs	r0, #6
 800079c:	f000 fae2 	bl	8000d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a0:	2006      	movs	r0, #6
 80007a2:	f000 fafb 	bl	8000d9c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a6:	bf00      	nop
 80007a8:	3728      	adds	r7, #40	; 0x28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020c00 	.word	0x40020c00
 80007b8:	40020000 	.word	0x40020000

080007bc <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe83 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80007ce:	200a      	movs	r0, #10
 80007d0:	f7ff fe80 	bl	80004d4 <ITM_SendChar>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
	osEventFlagsSet(EventGroup1, 0x50);
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_GPIO_EXTI_Callback+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2150      	movs	r1, #80	; 0x50
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fd49 	bl	8003284 <osEventFlagsSet>
	Task_action('!');
 80007f2:	2021      	movs	r0, #33	; 0x21
 80007f4:	f7ff ffe2 	bl	80007bc <Task_action>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000e0 	.word	0x200000e0

08000804 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <StartTask1+0x20>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	2201      	movs	r2, #1
 8000816:	2151      	movs	r1, #81	; 0x51
 8000818:	f002 fd78 	bl	800330c <osEventFlagsWait>
  	Task_action('1');
 800081c:	2031      	movs	r0, #49	; 0x31
 800081e:	f7ff ffcd 	bl	80007bc <Task_action>
  	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 8000822:	e7f3      	b.n	800080c <StartTask1+0x8>
 8000824:	200000e0 	.word	0x200000e0

08000828 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsSet(EventGroup1, 1);
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <StartTask2+0x24>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fd24 	bl	8003284 <osEventFlagsSet>
	  Task_action('2');
 800083c:	2032      	movs	r0, #50	; 0x32
 800083e:	f7ff ffbd 	bl	80007bc <Task_action>
	  osDelay(3000);
 8000842:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000846:	f002 fcc3 	bl	80031d0 <osDelay>
	  osEventFlagsSet(EventGroup1, 1);
 800084a:	e7f1      	b.n	8000830 <StartTask2+0x8>
 800084c:	200000e0 	.word	0x200000e0

08000850 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
  	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <StartTask3+0x20>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	2201      	movs	r2, #1
 8000862:	2151      	movs	r1, #81	; 0x51
 8000864:	f002 fd52 	bl	800330c <osEventFlagsWait>
  	Task_action('3');
 8000868:	2033      	movs	r0, #51	; 0x33
 800086a:	f7ff ffa7 	bl	80007bc <Task_action>
  	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 800086e:	e7f3      	b.n	8000858 <StartTask3+0x8>
 8000870:	200000e0 	.word	0x200000e0

08000874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000886:	f000 f995 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40002000 	.word	0x40002000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_MspInit+0x54>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <HAL_MspInit+0x54>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_MspInit+0x54>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_MspInit+0x54>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	210f      	movs	r1, #15
 80008e6:	f06f 0001 	mvn.w	r0, #1
 80008ea:	f000 fa3b 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <HAL_UART_MspInit+0x94>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d133      	bne.n	8000986 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_UART_MspInit+0x98>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000966:	2307      	movs	r3, #7
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_UART_MspInit+0x9c>)
 8000972:	f000 fab3 	bl	8000edc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2105      	movs	r1, #5
 800097a:	2026      	movs	r0, #38	; 0x26
 800097c:	f000 f9f2 	bl	8000d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000980:	2026      	movs	r0, #38	; 0x26
 8000982:	f000 fa0b 	bl	8000d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <HAL_InitTick+0xe4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <HAL_InitTick+0xe4>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_InitTick+0xe4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 0210 	add.w	r2, r7, #16
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f8e8 	bl	8001ba8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e2:	f001 f8b9 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 80009e6:	6378      	str	r0, [r7, #52]	; 0x34
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ea:	f001 f8b5 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 80009ee:	4603      	mov	r3, r0
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <HAL_InitTick+0xe8>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9b      	lsrs	r3, r3, #18
 80009fe:	3b01      	subs	r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_InitTick+0xec>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_InitTick+0xec>)
 8000a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_InitTick+0xec>)
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_InitTick+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_InitTick+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_InitTick+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a28:	4817      	ldr	r0, [pc, #92]	; (8000a88 <HAL_InitTick+0xec>)
 8000a2a:	f001 f8ef 	bl	8001c0c <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11b      	bne.n	8000a74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <HAL_InitTick+0xec>)
 8000a3e:	f001 f93f 	bl	8001cc0 <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a50:	202d      	movs	r0, #45	; 0x2d
 8000a52:	f000 f9a3 	bl	8000d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d808      	bhi.n	8000a6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	202d      	movs	r0, #45	; 0x2d
 8000a62:	f000 f97f 	bl	8000d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0xf4>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e002      	b.n	8000a74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3738      	adds	r7, #56	; 0x38
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	200000e4 	.word	0x200000e4
 8000a8c:	40002000 	.word	0x40002000
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f000 fbbf 	bl	8001248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART2_IRQHandler+0x10>)
 8000ad6:	f001 fb95 	bl	8002204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000090 	.word	0x20000090

08000ae4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000aea:	f001 f959 	bl	8001da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000e4 	.word	0x200000e4

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ffd7 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f005 fb8f 	bl	800626c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fce9 	bl	8000524 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b60:	080065a4 	.word	0x080065a4
  ldr r2, =_sbss
 8000b64:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b68:	20004b48 	.word	0x20004b48

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f8d8 	bl	8000d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f7ff fefc 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe7e 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	2000012c 	.word	0x2000012c

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000012c 	.word	0x2000012c

08000bf4 <__NVIC_SetPriorityGrouping>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff4c 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	6978      	ldr	r0, [r7, #20]
 8000d82:	f7ff ffb1 	bl	8000ce8 <NVIC_EncodePriority>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff80 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff54 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dc6:	f7ff ff09 	bl	8000bdc <HAL_GetTick>
 8000dca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e052      	b.n	8000e90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0216 	bic.w	r2, r2, #22
 8000df8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d103      	bne.n	8000e1a <HAL_DMA_Abort+0x62>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0208 	bic.w	r2, r2, #8
 8000e28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0201 	bic.w	r2, r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e3a:	e013      	b.n	8000e64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e3c:	f7ff fece 	bl	8000bdc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d90c      	bls.n	8000e64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e015      	b.n	8000e90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e4      	bne.n	8000e3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e76:	223f      	movs	r2, #63	; 0x3f
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d004      	beq.n	8000eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00c      	b.n	8000ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2205      	movs	r2, #5
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0201 	bic.w	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e16b      	b.n	80011d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f040 815a 	bne.w	80011ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d005      	beq.n	8000f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d130      	bne.n	8000f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d017      	beq.n	8000fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d123      	bne.n	8001020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	69b9      	ldr	r1, [r7, #24]
 800101c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0203 	and.w	r2, r3, #3
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80b4 	beq.w	80011ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <HAL_GPIO_Init+0x30c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a5f      	ldr	r2, [pc, #380]	; (80011e8 <HAL_GPIO_Init+0x30c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <HAL_GPIO_Init+0x30c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107e:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <HAL_GPIO_Init+0x310>)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_GPIO_Init+0x314>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d02b      	beq.n	8001102 <HAL_GPIO_Init+0x226>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a51      	ldr	r2, [pc, #324]	; (80011f4 <HAL_GPIO_Init+0x318>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d025      	beq.n	80010fe <HAL_GPIO_Init+0x222>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a50      	ldr	r2, [pc, #320]	; (80011f8 <HAL_GPIO_Init+0x31c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d01f      	beq.n	80010fa <HAL_GPIO_Init+0x21e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <HAL_GPIO_Init+0x320>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x21a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4e      	ldr	r2, [pc, #312]	; (8001200 <HAL_GPIO_Init+0x324>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x216>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4d      	ldr	r2, [pc, #308]	; (8001204 <HAL_GPIO_Init+0x328>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x212>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <HAL_GPIO_Init+0x32c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x20e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4b      	ldr	r2, [pc, #300]	; (800120c <HAL_GPIO_Init+0x330>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x20a>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00e      	b.n	8001104 <HAL_GPIO_Init+0x228>
 80010e6:	2308      	movs	r3, #8
 80010e8:	e00c      	b.n	8001104 <HAL_GPIO_Init+0x228>
 80010ea:	2306      	movs	r3, #6
 80010ec:	e00a      	b.n	8001104 <HAL_GPIO_Init+0x228>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e008      	b.n	8001104 <HAL_GPIO_Init+0x228>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x228>
 80010f6:	2303      	movs	r3, #3
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x228>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x228>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x228>
 8001102:	2300      	movs	r3, #0
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	f002 0203 	and.w	r2, r2, #3
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4093      	lsls	r3, r2
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001114:	4935      	ldr	r1, [pc, #212]	; (80011ec <HAL_GPIO_Init+0x310>)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3302      	adds	r3, #2
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_GPIO_Init+0x334>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a32      	ldr	r2, [pc, #200]	; (8001210 <HAL_GPIO_Init+0x334>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_GPIO_Init+0x334>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <HAL_GPIO_Init+0x334>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_GPIO_Init+0x334>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119a:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <HAL_GPIO_Init+0x334>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_GPIO_Init+0x334>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <HAL_GPIO_Init+0x334>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3301      	adds	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	f67f ae90 	bls.w	8000ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40021000 	.word	0x40021000
 8001204:	40021400 	.word	0x40021400
 8001208:	40021800 	.word	0x40021800
 800120c:	40021c00 	.word	0x40021c00
 8001210:	40013c00 	.word	0x40013c00

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001230:	e003      	b.n	800123a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fab8 	bl	80007dc <HAL_GPIO_EXTI_Callback>
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e267      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d075      	beq.n	8001382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001296:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d00c      	beq.n	80012bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4b85      	ldr	r3, [pc, #532]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d112      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	4b82      	ldr	r3, [pc, #520]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ba:	d10b      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	4b7e      	ldr	r3, [pc, #504]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05b      	beq.n	8001380 <HAL_RCC_OscConfig+0x108>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d157      	bne.n	8001380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e242      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d106      	bne.n	80012ec <HAL_RCC_OscConfig+0x74>
 80012de:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a75      	ldr	r2, [pc, #468]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0xb0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x98>
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6c      	ldr	r2, [pc, #432]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0xb0>
 8001310:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a68      	ldr	r2, [pc, #416]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a65      	ldr	r2, [pc, #404]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fc54 	bl	8000bdc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fc50 	bl	8000bdc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e207      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0xc0>
 8001356:	e014      	b.n	8001382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fc40 	bl	8000bdc <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fc3c 	bl	8000bdc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e1f3      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0xe8>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d063      	beq.n	8001456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d11c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d116      	bne.n	80013e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x152>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e1c7      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4937      	ldr	r1, [pc, #220]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	e03a      	b.n	8001456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <HAL_RCC_OscConfig+0x244>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fbf5 	bl	8000bdc <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fbf1 	bl	8000bdc <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1a8      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4925      	ldr	r1, [pc, #148]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]
 8001428:	e015      	b.n	8001456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x244>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fbd4 	bl	8000bdc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001438:	f7ff fbd0 	bl	8000bdc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e187      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d036      	beq.n	80014d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d016      	beq.n	8001498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff fbb4 	bl	8000bdc <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fbb0 	bl	8000bdc <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e167      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800148c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x200>
 8001496:	e01b      	b.n	80014d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb9d 	bl	8000bdc <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a4:	e00e      	b.n	80014c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a6:	f7ff fb99 	bl	8000bdc <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d907      	bls.n	80014c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e150      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
 80014b8:	40023800 	.word	0x40023800
 80014bc:	42470000 	.word	0x42470000
 80014c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1ea      	bne.n	80014a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 8097 	beq.w	800160c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e2:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10f      	bne.n	800150e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b7d      	ldr	r3, [pc, #500]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a7c      	ldr	r2, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b7a      	ldr	r3, [pc, #488]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b77      	ldr	r3, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b74      	ldr	r3, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a73      	ldr	r2, [pc, #460]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fb59 	bl	8000bdc <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fb55 	bl	8000bdc <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e10c      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x2ea>
 8001554:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	e01c      	b.n	800159c <HAL_RCC_OscConfig+0x324>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x30c>
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a5e      	ldr	r2, [pc, #376]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
 8001576:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a5b      	ldr	r2, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0x324>
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a54      	ldr	r2, [pc, #336]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 0304 	bic.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d015      	beq.n	80015d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fb1a 	bl	8000bdc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fb16 	bl	8000bdc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0cb      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ee      	beq.n	80015ac <HAL_RCC_OscConfig+0x334>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fb04 	bl	8000bdc <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb00 	bl	8000bdc <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0b5      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ee:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ee      	bne.n	80015d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a1 	beq.w	8001758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d05c      	beq.n	80016dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d141      	bne.n	80016ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_RCC_OscConfig+0x478>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fad4 	bl	8000bdc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fad0 	bl	8000bdc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e087      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69da      	ldr	r2, [r3, #28]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	019b      	lsls	r3, r3, #6
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	3b01      	subs	r3, #1
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	491b      	ldr	r1, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x478>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff faa9 	bl	8000bdc <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff faa5 	bl	8000bdc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e05c      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x416>
 80016ac:	e054      	b.n	8001758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_RCC_OscConfig+0x478>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa92 	bl	8000bdc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fa8e 	bl	8000bdc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e045      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x444>
 80016da:	e03d      	b.n	8001758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e038      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000
 80016f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x4ec>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d028      	beq.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d121      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d11a      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001724:	4013      	ands	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800172a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800172c:	4293      	cmp	r3, r2
 800172e:	d111      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	3b01      	subs	r3, #1
 800173e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff f9c0 	bl	8000bdc <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff f9bc 	bl	8000bdc <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f844 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	0800651c 	.word	0x0800651c
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001938:	b094      	sub	sp, #80	; 0x50
 800193a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
 8001940:	2300      	movs	r3, #0
 8001942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001944:	2300      	movs	r3, #0
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194c:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d00d      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x40>
 8001958:	2b08      	cmp	r3, #8
 800195a:	f200 80e1 	bhi.w	8001b20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x34>
 8001962:	2b04      	cmp	r3, #4
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x3a>
 8001966:	e0db      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x204>)
 800196a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800196c:	e0db      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196e:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x208>)
 8001970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001972:	e0d8      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800197c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197e:	4b6d      	ldr	r3, [pc, #436]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d063      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	2200      	movs	r2, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
 8001994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
 80019a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019a6:	4622      	mov	r2, r4
 80019a8:	462b      	mov	r3, r5
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	0159      	lsls	r1, r3, #5
 80019b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b8:	0150      	lsls	r0, r2, #5
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4621      	mov	r1, r4
 80019c0:	1a51      	subs	r1, r2, r1
 80019c2:	6139      	str	r1, [r7, #16]
 80019c4:	4629      	mov	r1, r5
 80019c6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d8:	4659      	mov	r1, fp
 80019da:	018b      	lsls	r3, r1, #6
 80019dc:	4651      	mov	r1, sl
 80019de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019e2:	4651      	mov	r1, sl
 80019e4:	018a      	lsls	r2, r1, #6
 80019e6:	4651      	mov	r1, sl
 80019e8:	ebb2 0801 	subs.w	r8, r2, r1
 80019ec:	4659      	mov	r1, fp
 80019ee:	eb63 0901 	sbc.w	r9, r3, r1
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a06:	4690      	mov	r8, r2
 8001a08:	4699      	mov	r9, r3
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	eb18 0303 	adds.w	r3, r8, r3
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	462b      	mov	r3, r5
 8001a14:	eb49 0303 	adc.w	r3, r9, r3
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a26:	4629      	mov	r1, r5
 8001a28:	024b      	lsls	r3, r1, #9
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a30:	4621      	mov	r1, r4
 8001a32:	024a      	lsls	r2, r1, #9
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a44:	f7fe fbc4 	bl	80001d0 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a50:	e058      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
 8001a68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a6c:	4642      	mov	r2, r8
 8001a6e:	464b      	mov	r3, r9
 8001a70:	f04f 0000 	mov.w	r0, #0
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	0159      	lsls	r1, r3, #5
 8001a7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7e:	0150      	lsls	r0, r2, #5
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4641      	mov	r1, r8
 8001a86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a8a:	4649      	mov	r1, r9
 8001a8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa4:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa8:	eb63 050b 	sbc.w	r5, r3, fp
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	00eb      	lsls	r3, r5, #3
 8001ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aba:	00e2      	lsls	r2, r4, #3
 8001abc:	4614      	mov	r4, r2
 8001abe:	461d      	mov	r5, r3
 8001ac0:	4643      	mov	r3, r8
 8001ac2:	18e3      	adds	r3, r4, r3
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	eb45 0303 	adc.w	r3, r5, r3
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ada:	4629      	mov	r1, r5
 8001adc:	028b      	lsls	r3, r1, #10
 8001ade:	4621      	mov	r1, r4
 8001ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	028a      	lsls	r2, r1, #10
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aee:	2200      	movs	r2, #0
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	61fa      	str	r2, [r7, #28]
 8001af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af8:	f7fe fb6a 	bl	80001d0 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3750      	adds	r7, #80	; 0x50
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	007a1200 	.word	0x007a1200

08001b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b5c:	f7ff fff0 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	0800652c 	.word	0x0800652c

08001b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b84:	f7ff ffdc 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0b5b      	lsrs	r3, r3, #13
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4903      	ldr	r1, [pc, #12]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	0800652c 	.word	0x0800652c

08001ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_RCC_GetClockConfig+0x60>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0207 	and.w	r2, r3, #7
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e041      	b.n	8001ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f839 	bl	8001caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 f9d8 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e04e      	b.n	8001d76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d02:	d01d      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d010      	beq.n	8001d74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	e007      	b.n	8001d74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40000800 	.word	0x40000800
 8001d90:	40000c00 	.word	0x40000c00
 8001d94:	40010400 	.word	0x40010400
 8001d98:	40014000 	.word	0x40014000
 8001d9c:	40001800 	.word	0x40001800

08001da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0202 	mvn.w	r2, #2
 8001dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8ee 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8e0 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8f1 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0204 	mvn.w	r2, #4
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8c4 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8b6 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8c7 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0208 	mvn.w	r2, #8
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f89a 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f88c 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f89d 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0210 	mvn.w	r2, #16
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f870 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f862 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f873 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0201 	mvn.w	r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fca8 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	2b80      	cmp	r3, #128	; 0x80
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f902 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f838 	bl	8001fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8cc 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a40      	ldr	r2, [pc, #256]	; (8002114 <TIM_Base_SetConfig+0x114>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3d      	ldr	r2, [pc, #244]	; (8002118 <TIM_Base_SetConfig+0x118>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3c      	ldr	r2, [pc, #240]	; (800211c <TIM_Base_SetConfig+0x11c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <TIM_Base_SetConfig+0x120>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <TIM_Base_SetConfig+0x124>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2f      	ldr	r2, [pc, #188]	; (8002114 <TIM_Base_SetConfig+0x114>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d027      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <TIM_Base_SetConfig+0x118>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d023      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2b      	ldr	r2, [pc, #172]	; (800211c <TIM_Base_SetConfig+0x11c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <TIM_Base_SetConfig+0x120>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <TIM_Base_SetConfig+0x124>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a28      	ldr	r2, [pc, #160]	; (8002128 <TIM_Base_SetConfig+0x128>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <TIM_Base_SetConfig+0x12c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <TIM_Base_SetConfig+0x130>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a25      	ldr	r2, [pc, #148]	; (8002134 <TIM_Base_SetConfig+0x134>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a24      	ldr	r2, [pc, #144]	; (8002138 <TIM_Base_SetConfig+0x138>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a23      	ldr	r2, [pc, #140]	; (800213c <TIM_Base_SetConfig+0x13c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <TIM_Base_SetConfig+0x114>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0xf8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <TIM_Base_SetConfig+0x124>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	40001800 	.word	0x40001800
 8002138:	40001c00 	.word	0x40001c00
 800213c:	40002000 	.word	0x40002000

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e03f      	b.n	80021fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fbb4 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fc7b 	bl	8002aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0ba      	sub	sp, #232	; 0xe8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_UART_IRQHandler+0x66>
 8002256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fb65 	bl	8002932 <UART_Receive_IT>
      return;
 8002268:	e256      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800226a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80de 	beq.w	8002430 <HAL_UART_IRQHandler+0x22c>
 8002274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002284:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80d1 	beq.w	8002430 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800228e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_UART_IRQHandler+0xae>
 800229a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_UART_IRQHandler+0xd2>
 80022be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_UART_IRQHandler+0xf6>
 80022e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <HAL_UART_IRQHandler+0x126>
 8002306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f043 0208 	orr.w	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 81ed 	beq.w	800270e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_UART_IRQHandler+0x14e>
 8002340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 faf0 	bl	8002932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_UART_IRQHandler+0x17a>
 8002376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04f      	beq.n	800241e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f9f8 	bl	8002774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d141      	bne.n	8002416 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023a0:	e853 3f00 	ldrex	r3, [r3]
 80023a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3314      	adds	r3, #20
 80023ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1d9      	bne.n	8002392 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d013      	beq.n	800240e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4a7d      	ldr	r2, [pc, #500]	; (80025e0 <HAL_UART_IRQHandler+0x3dc>)
 80023ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fd50 	bl	8000e98 <HAL_DMA_Abort_IT>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002408:	4610      	mov	r0, r2
 800240a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	e00e      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f99a 	bl	8002748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	e00a      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f996 	bl	8002748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	e006      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f992 	bl	8002748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800242a:	e170      	b.n	800270e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	bf00      	nop
    return;
 800242e:	e16e      	b.n	800270e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	2b01      	cmp	r3, #1
 8002436:	f040 814a 	bne.w	80026ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8143 	beq.w	80026ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 813c 	beq.w	80026ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	f040 80b4 	bne.w	80025e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8140 	beq.w	8002712 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800249a:	429a      	cmp	r2, r3
 800249c:	f080 8139 	bcs.w	8002712 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b2:	f000 8088 	beq.w	80025c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1d9      	bne.n	80024b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3314      	adds	r3, #20
 8002508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	e853 3f00 	ldrex	r3, [r3]
 8002510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3314      	adds	r3, #20
 8002522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800252a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800252e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e1      	bne.n	8002502 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3314      	adds	r3, #20
 8002544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3314      	adds	r3, #20
 800255e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e3      	bne.n	800253e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258e:	e853 3f00 	ldrex	r3, [r3]
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	f023 0310 	bic.w	r3, r3, #16
 800259a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80025aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025b0:	e841 2300 	strex	r3, r2, [r1]
 80025b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e3      	bne.n	8002584 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fbf9 	bl	8000db8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8c0 	bl	800275c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025dc:	e099      	b.n	8002712 <HAL_UART_IRQHandler+0x50e>
 80025de:	bf00      	nop
 80025e0:	0800283b 	.word	0x0800283b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 808b 	beq.w	8002716 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8086 	beq.w	8002716 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	e853 3f00 	ldrex	r3, [r3]
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800262e:	647a      	str	r2, [r7, #68]	; 0x44
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002636:	e841 2300 	strex	r3, r2, [r1]
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e3      	bne.n	800260a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3314      	adds	r3, #20
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	e853 3f00 	ldrex	r3, [r3]
 8002650:	623b      	str	r3, [r7, #32]
   return(result);
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3314      	adds	r3, #20
 8002662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002666:	633a      	str	r2, [r7, #48]	; 0x30
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800266c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e3      	bne.n	8002642 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	60fb      	str	r3, [r7, #12]
   return(result);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0310 	bic.w	r3, r3, #16
 800269e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026ac:	61fa      	str	r2, [r7, #28]
 80026ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	69b9      	ldr	r1, [r7, #24]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	617b      	str	r3, [r7, #20]
   return(result);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e3      	bne.n	8002688 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f848 	bl	800275c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026cc:	e023      	b.n	8002716 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_UART_IRQHandler+0x4ea>
 80026da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8bb 	bl	8002862 <UART_Transmit_IT>
    return;
 80026ec:	e014      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00e      	beq.n	8002718 <HAL_UART_IRQHandler+0x514>
 80026fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8fb 	bl	8002902 <UART_EndTransmit_IT>
    return;
 800270c:	e004      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
    return;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
      return;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
      return;
 8002716:	bf00      	nop
  }
}
 8002718:	37e8      	adds	r7, #232	; 0xe8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop

08002720 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b095      	sub	sp, #84	; 0x54
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800279c:	643a      	str	r2, [r7, #64]	; 0x40
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e5      	bne.n	800277c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3314      	adds	r3, #20
 80027b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	61fb      	str	r3, [r7, #28]
   return(result);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d8:	e841 2300 	strex	r3, r2, [r1]
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d119      	bne.n	8002820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 0310 	bic.w	r3, r3, #16
 8002802:	647b      	str	r3, [r7, #68]	; 0x44
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800280c:	61ba      	str	r2, [r7, #24]
 800280e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	e841 2300 	strex	r3, r2, [r1]
 8002818:	613b      	str	r3, [r7, #16]
   return(result);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e5      	bne.n	80027ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800282e:	bf00      	nop
 8002830:	3754      	adds	r7, #84	; 0x54
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff ff77 	bl	8002748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b21      	cmp	r3, #33	; 0x21
 8002874:	d13e      	bne.n	80028f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	d114      	bne.n	80028aa <UART_Transmit_IT+0x48>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d110      	bne.n	80028aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800289c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]
 80028a8:	e008      	b.n	80028bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	1c59      	adds	r1, r3, #1
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6211      	str	r1, [r2, #32]
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4619      	mov	r1, r3
 80028ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10f      	bne.n	80028f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fefc 	bl	8002720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b08c      	sub	sp, #48	; 0x30
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b22      	cmp	r3, #34	; 0x22
 8002944:	f040 80ab 	bne.w	8002a9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002950:	d117      	bne.n	8002982 <UART_Receive_IT+0x50>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002970:	b29a      	uxth	r2, r3
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
 8002980:	e026      	b.n	80029d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002994:	d007      	beq.n	80029a6 <UART_Receive_IT+0x74>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <UART_Receive_IT+0x82>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e008      	b.n	80029c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4619      	mov	r1, r3
 80029de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d15a      	bne.n	8002a9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0220 	bic.w	r2, r2, #32
 80029f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d135      	bne.n	8002a90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f023 0310 	bic.w	r3, r3, #16
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	623a      	str	r2, [r7, #32]
 8002a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d10a      	bne.n	8002a82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fe67 	bl	800275c <HAL_UARTEx_RxEventCallback>
 8002a8e:	e002      	b.n	8002a96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fe4f 	bl	8002734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e002      	b.n	8002aa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3730      	adds	r7, #48	; 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aac:	b0c0      	sub	sp, #256	; 0x100
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	68d9      	ldr	r1, [r3, #12]
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	ea40 0301 	orr.w	r3, r0, r1
 8002ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b00:	f021 010c 	bic.w	r1, r1, #12
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b22:	6999      	ldr	r1, [r3, #24]
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	ea40 0301 	orr.w	r3, r0, r1
 8002b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b8f      	ldr	r3, [pc, #572]	; (8002d74 <UART_SetConfig+0x2cc>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d005      	beq.n	8002b48 <UART_SetConfig+0xa0>
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b8d      	ldr	r3, [pc, #564]	; (8002d78 <UART_SetConfig+0x2d0>)
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d104      	bne.n	8002b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b48:	f7ff f81a 	bl	8001b80 <HAL_RCC_GetPCLK2Freq>
 8002b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b50:	e003      	b.n	8002b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b52:	f7ff f801 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002b56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b64:	f040 810c 	bne.w	8002d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	462b      	mov	r3, r5
 8002b7e:	1891      	adds	r1, r2, r2
 8002b80:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b82:	415b      	adcs	r3, r3
 8002b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	eb12 0801 	adds.w	r8, r2, r1
 8002b90:	4629      	mov	r1, r5
 8002b92:	eb43 0901 	adc.w	r9, r3, r1
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002baa:	4690      	mov	r8, r2
 8002bac:	4699      	mov	r9, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	eb18 0303 	adds.w	r3, r8, r3
 8002bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bb8:	462b      	mov	r3, r5
 8002bba:	eb49 0303 	adc.w	r3, r9, r3
 8002bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	18db      	adds	r3, r3, r3
 8002bda:	653b      	str	r3, [r7, #80]	; 0x50
 8002bdc:	4613      	mov	r3, r2
 8002bde:	eb42 0303 	adc.w	r3, r2, r3
 8002be2:	657b      	str	r3, [r7, #84]	; 0x54
 8002be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bec:	f7fd faf0 	bl	80001d0 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <UART_SetConfig+0x2d4>)
 8002bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	011c      	lsls	r4, r3, #4
 8002bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	1891      	adds	r1, r2, r2
 8002c16:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c18:	415b      	adcs	r3, r3
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c20:	4641      	mov	r1, r8
 8002c22:	eb12 0a01 	adds.w	sl, r2, r1
 8002c26:	4649      	mov	r1, r9
 8002c28:	eb43 0b01 	adc.w	fp, r3, r1
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c40:	4692      	mov	sl, r2
 8002c42:	469b      	mov	fp, r3
 8002c44:	4643      	mov	r3, r8
 8002c46:	eb1a 0303 	adds.w	r3, sl, r3
 8002c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	eb4b 0303 	adc.w	r3, fp, r3
 8002c54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	18db      	adds	r3, r3, r3
 8002c70:	643b      	str	r3, [r7, #64]	; 0x40
 8002c72:	4613      	mov	r3, r2
 8002c74:	eb42 0303 	adc.w	r3, r2, r3
 8002c78:	647b      	str	r3, [r7, #68]	; 0x44
 8002c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c82:	f7fd faa5 	bl	80001d0 <__aeabi_uldivmod>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <UART_SetConfig+0x2d4>)
 8002c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2264      	movs	r2, #100	; 0x64
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	1acb      	subs	r3, r1, r3
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ca2:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <UART_SetConfig+0x2d4>)
 8002ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cb0:	441c      	add	r4, r3
 8002cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	1891      	adds	r1, r2, r2
 8002cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ccc:	415b      	adcs	r3, r3
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	1851      	adds	r1, r2, r1
 8002cd8:	6339      	str	r1, [r7, #48]	; 0x30
 8002cda:	4649      	mov	r1, r9
 8002cdc:	414b      	adcs	r3, r1
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cec:	4659      	mov	r1, fp
 8002cee:	00cb      	lsls	r3, r1, #3
 8002cf0:	4651      	mov	r1, sl
 8002cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	00ca      	lsls	r2, r1, #3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4642      	mov	r2, r8
 8002d02:	189b      	adds	r3, r3, r2
 8002d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d08:	464b      	mov	r3, r9
 8002d0a:	460a      	mov	r2, r1
 8002d0c:	eb42 0303 	adc.w	r3, r2, r3
 8002d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d28:	460b      	mov	r3, r1
 8002d2a:	18db      	adds	r3, r3, r3
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2e:	4613      	mov	r3, r2
 8002d30:	eb42 0303 	adc.w	r3, r2, r3
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d3e:	f7fd fa47 	bl	80001d0 <__aeabi_uldivmod>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <UART_SetConfig+0x2d4>)
 8002d48:	fba3 1302 	umull	r1, r3, r3, r2
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	2164      	movs	r1, #100	; 0x64
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	3332      	adds	r3, #50	; 0x32
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <UART_SetConfig+0x2d4>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	f003 0207 	and.w	r2, r3, #7
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4422      	add	r2, r4
 8002d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d70:	e105      	b.n	8002f7e <UART_SetConfig+0x4d6>
 8002d72:	bf00      	nop
 8002d74:	40011000 	.word	0x40011000
 8002d78:	40011400 	.word	0x40011400
 8002d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d92:	4642      	mov	r2, r8
 8002d94:	464b      	mov	r3, r9
 8002d96:	1891      	adds	r1, r2, r2
 8002d98:	6239      	str	r1, [r7, #32]
 8002d9a:	415b      	adcs	r3, r3
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002da2:	4641      	mov	r1, r8
 8002da4:	1854      	adds	r4, r2, r1
 8002da6:	4649      	mov	r1, r9
 8002da8:	eb43 0501 	adc.w	r5, r3, r1
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	00eb      	lsls	r3, r5, #3
 8002db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dba:	00e2      	lsls	r2, r4, #3
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	461d      	mov	r5, r3
 8002dc0:	4643      	mov	r3, r8
 8002dc2:	18e3      	adds	r3, r4, r3
 8002dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dc8:	464b      	mov	r3, r9
 8002dca:	eb45 0303 	adc.w	r3, r5, r3
 8002dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dee:	4629      	mov	r1, r5
 8002df0:	008b      	lsls	r3, r1, #2
 8002df2:	4621      	mov	r1, r4
 8002df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df8:	4621      	mov	r1, r4
 8002dfa:	008a      	lsls	r2, r1, #2
 8002dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e00:	f7fd f9e6 	bl	80001d0 <__aeabi_uldivmod>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4b60      	ldr	r3, [pc, #384]	; (8002f8c <UART_SetConfig+0x4e4>)
 8002e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	011c      	lsls	r4, r3, #4
 8002e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e24:	4642      	mov	r2, r8
 8002e26:	464b      	mov	r3, r9
 8002e28:	1891      	adds	r1, r2, r2
 8002e2a:	61b9      	str	r1, [r7, #24]
 8002e2c:	415b      	adcs	r3, r3
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e34:	4641      	mov	r1, r8
 8002e36:	1851      	adds	r1, r2, r1
 8002e38:	6139      	str	r1, [r7, #16]
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	414b      	adcs	r3, r1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e4c:	4659      	mov	r1, fp
 8002e4e:	00cb      	lsls	r3, r1, #3
 8002e50:	4651      	mov	r1, sl
 8002e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e56:	4651      	mov	r1, sl
 8002e58:	00ca      	lsls	r2, r1, #3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4642      	mov	r2, r8
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e68:	464b      	mov	r3, r9
 8002e6a:	460a      	mov	r2, r1
 8002e6c:	eb42 0303 	adc.w	r3, r2, r3
 8002e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	008b      	lsls	r3, r1, #2
 8002e90:	4641      	mov	r1, r8
 8002e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e96:	4641      	mov	r1, r8
 8002e98:	008a      	lsls	r2, r1, #2
 8002e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e9e:	f7fd f997 	bl	80001d0 <__aeabi_uldivmod>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <UART_SetConfig+0x4e4>)
 8002ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	2164      	movs	r1, #100	; 0x64
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	3332      	adds	r3, #50	; 0x32
 8002eba:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <UART_SetConfig+0x4e4>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec6:	441c      	add	r4, r3
 8002ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ecc:	2200      	movs	r2, #0
 8002ece:	673b      	str	r3, [r7, #112]	; 0x70
 8002ed0:	677a      	str	r2, [r7, #116]	; 0x74
 8002ed2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ed6:	4642      	mov	r2, r8
 8002ed8:	464b      	mov	r3, r9
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	1851      	adds	r1, r2, r1
 8002eea:	6039      	str	r1, [r7, #0]
 8002eec:	4649      	mov	r1, r9
 8002eee:	414b      	adcs	r3, r1
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002efe:	4659      	mov	r1, fp
 8002f00:	00cb      	lsls	r3, r1, #3
 8002f02:	4651      	mov	r1, sl
 8002f04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f08:	4651      	mov	r1, sl
 8002f0a:	00ca      	lsls	r2, r1, #3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4603      	mov	r3, r0
 8002f12:	4642      	mov	r2, r8
 8002f14:	189b      	adds	r3, r3, r2
 8002f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f18:	464b      	mov	r3, r9
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	eb42 0303 	adc.w	r3, r2, r3
 8002f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f2c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	008b      	lsls	r3, r1, #2
 8002f3e:	4641      	mov	r1, r8
 8002f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f44:	4641      	mov	r1, r8
 8002f46:	008a      	lsls	r2, r1, #2
 8002f48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f4c:	f7fd f940 	bl	80001d0 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <UART_SetConfig+0x4e4>)
 8002f56:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2164      	movs	r1, #100	; 0x64
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	3332      	adds	r3, #50	; 0x32
 8002f68:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <UART_SetConfig+0x4e4>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4422      	add	r2, r4
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	bf00      	nop
 8002f80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f84:	46bd      	mov	sp, r7
 8002f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f8a:	bf00      	nop
 8002f8c:	51eb851f 	.word	0x51eb851f

08002f90 <__NVIC_SetPriority>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <SysTick_Handler+0x1c>)
 8002fea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002fec:	f002 f89c 	bl	8005128 <xTaskGetSchedulerState>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ff6:	f002 febf 	bl	8005d78 <xPortSysTickHandler>
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010

08003004 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003008:	2100      	movs	r1, #0
 800300a:	f06f 0004 	mvn.w	r0, #4
 800300e:	f7ff ffbf 	bl	8002f90 <__NVIC_SetPriority>
#endif
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800301e:	f3ef 8305 	mrs	r3, IPSR
 8003022:	603b      	str	r3, [r7, #0]
  return(result);
 8003024:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800302a:	f06f 0305 	mvn.w	r3, #5
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	e00c      	b.n	800304c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <osKernelInitialize+0x44>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <osKernelInitialize+0x44>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	e002      	b.n	800304c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000130 	.word	0x20000130

08003060 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003066:	f3ef 8305 	mrs	r3, IPSR
 800306a:	603b      	str	r3, [r7, #0]
  return(result);
 800306c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003072:	f06f 0305 	mvn.w	r3, #5
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	e010      	b.n	800309c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <osKernelStart+0x48>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d109      	bne.n	8003096 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003082:	f7ff ffbf 	bl	8003004 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <osKernelStart+0x48>)
 8003088:	2202      	movs	r2, #2
 800308a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800308c:	f001 fb52 	bl	8004734 <vTaskStartScheduler>
      stat = osOK;
 8003090:	2300      	movs	r3, #0
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	e002      	b.n	800309c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800309c:	687b      	ldr	r3, [r7, #4]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000130 	.word	0x20000130

080030ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	; 0x38
 80030b0:	af04      	add	r7, sp, #16
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030bc:	f3ef 8305 	mrs	r3, IPSR
 80030c0:	617b      	str	r3, [r7, #20]
  return(result);
 80030c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d17e      	bne.n	80031c6 <osThreadNew+0x11a>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d07b      	beq.n	80031c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030d2:	2318      	movs	r3, #24
 80030d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80030da:	f04f 33ff 	mov.w	r3, #4294967295
 80030de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d045      	beq.n	8003172 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <osThreadNew+0x48>
        name = attr->name;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <osThreadNew+0x6e>
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b38      	cmp	r3, #56	; 0x38
 800310c:	d805      	bhi.n	800311a <osThreadNew+0x6e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <osThreadNew+0x72>
        return (NULL);
 800311a:	2300      	movs	r3, #0
 800311c:	e054      	b.n	80031c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00e      	beq.n	8003154 <osThreadNew+0xa8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2bbb      	cmp	r3, #187	; 0xbb
 800313c:	d90a      	bls.n	8003154 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <osThreadNew+0xa8>
        mem = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e010      	b.n	8003176 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <osThreadNew+0xca>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <osThreadNew+0xca>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <osThreadNew+0xca>
          mem = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e001      	b.n	8003176 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d110      	bne.n	800319e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003184:	9202      	str	r2, [sp, #8]
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f001 f8e2 	bl	800435c <xTaskCreateStatic>
 8003198:	4603      	mov	r3, r0
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e013      	b.n	80031c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d110      	bne.n	80031c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f001 f92d 	bl	8004416 <xTaskCreate>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d001      	beq.n	80031c6 <osThreadNew+0x11a>
            hTask = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031c6:	693b      	ldr	r3, [r7, #16]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031d8:	f3ef 8305 	mrs	r3, IPSR
 80031dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80031de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <osDelay+0x1c>
    stat = osErrorISR;
 80031e4:	f06f 0305 	mvn.w	r3, #5
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e007      	b.n	80031fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f001 fa68 	bl	80046cc <vTaskDelay>
    }
  }

  return (stat);
 80031fc:	68fb      	ldr	r3, [r7, #12]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003212:	f3ef 8305 	mrs	r3, IPSR
 8003216:	60fb      	str	r3, [r7, #12]
  return(result);
 8003218:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800321a:	2b00      	cmp	r3, #0
 800321c:	d12d      	bne.n	800327a <osEventFlagsNew+0x74>
    mem = -1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <osEventFlagsNew+0x3a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b1f      	cmp	r3, #31
 8003238:	d902      	bls.n	8003240 <osEventFlagsNew+0x3a>
        mem = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	e00c      	b.n	800325a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d108      	bne.n	800325a <osEventFlagsNew+0x54>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <osEventFlagsNew+0x54>
          mem = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	e001      	b.n	800325a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f8eb 	bl	8003440 <xEventGroupCreateStatic>
 800326a:	6178      	str	r0, [r7, #20]
 800326c:	e005      	b.n	800327a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003274:	f000 f91b 	bl	80034ae <xEventGroupCreate>
 8003278:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800327a:	697b      	ldr	r3, [r7, #20]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <osEventFlagsSet+0x1e>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80032a2:	f06f 0303 	mvn.w	r3, #3
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e028      	b.n	80032fc <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032aa:	f3ef 8305 	mrs	r3, IPSR
 80032ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01d      	beq.n	80032f2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	461a      	mov	r2, r3
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	6938      	ldr	r0, [r7, #16]
 80032c4:	f000 fa96 	bl	80037f4 <xEventGroupSetBitsFromISR>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80032ce:	f06f 0302 	mvn.w	r3, #2
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e012      	b.n	80032fc <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <osEventFlagsSet+0x78>
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <osEventFlagsSet+0x84>)
 80032e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	e004      	b.n	80032fc <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80032f2:	6839      	ldr	r1, [r7, #0]
 80032f4:	6938      	ldr	r0, [r7, #16]
 80032f6:	f000 f9c3 	bl	8003680 <xEventGroupSetBits>
 80032fa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80032fc:	697b      	ldr	r3, [r7, #20]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	; 0x30
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <osEventFlagsWait+0x22>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800332e:	f06f 0303 	mvn.w	r3, #3
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	e04b      	b.n	80033ce <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003336:	f3ef 8305 	mrs	r3, IPSR
 800333a:	617b      	str	r3, [r7, #20]
  return(result);
 800333c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8003342:	f06f 0305 	mvn.w	r3, #5
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	e041      	b.n	80033ce <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	e001      	b.n	800335e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	e001      	b.n	8003372 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800336e:	2301      	movs	r3, #1
 8003370:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	69b8      	ldr	r0, [r7, #24]
 800337e:	f000 f8b1 	bl	80034e4 <xEventGroupWaitBits>
 8003382:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d019      	beq.n	80033ce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80033a0:	f06f 0301 	mvn.w	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e012      	b.n	80033ce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80033a8:	f06f 0302 	mvn.w	r3, #2
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e00e      	b.n	80033ce <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80033c0:	f06f 0301 	mvn.w	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e002      	b.n	80033ce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80033c8:	f06f 0302 	mvn.w	r3, #2
 80033cc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80033ce:	69fb      	ldr	r3, [r7, #28]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a07      	ldr	r2, [pc, #28]	; (8003404 <vApplicationGetIdleTaskMemory+0x2c>)
 80033e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4a06      	ldr	r2, [pc, #24]	; (8003408 <vApplicationGetIdleTaskMemory+0x30>)
 80033ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000134 	.word	0x20000134
 8003408:	200001f0 	.word	0x200001f0

0800340c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <vApplicationGetTimerTaskMemory+0x2c>)
 800341c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a06      	ldr	r2, [pc, #24]	; (800343c <vApplicationGetTimerTaskMemory+0x30>)
 8003422:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	200003f0 	.word	0x200003f0
 800343c:	200004ac 	.word	0x200004ac

08003440 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003464:	2320      	movs	r3, #32
 8003466:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b20      	cmp	r3, #32
 800346c:	d00a      	beq.n	8003484 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	60fb      	str	r3, [r7, #12]
}
 8003480:	bf00      	nop
 8003482:	e7fe      	b.n	8003482 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3304      	adds	r3, #4
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f9bf 	bl	800381c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2201      	movs	r2, #1
 80034a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80034a4:	697b      	ldr	r3, [r7, #20]
	}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80034b4:	2020      	movs	r0, #32
 80034b6:	f002 fcef 	bl	8005e98 <pvPortMalloc>
 80034ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f9a5 	bl	800381c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80034d8:	687b      	ldr	r3, [r7, #4]
	}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b090      	sub	sp, #64	; 0x40
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xEventGroupWaitBits+0x36>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	623b      	str	r3, [r7, #32]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <xEventGroupWaitBits+0x56>
	__asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	61fb      	str	r3, [r7, #28]
}
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xEventGroupWaitBits+0x72>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	61bb      	str	r3, [r7, #24]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003556:	f001 fde7 	bl	8005128 <xTaskGetSchedulerState>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <xEventGroupWaitBits+0x82>
 8003560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <xEventGroupWaitBits+0x86>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <xEventGroupWaitBits+0x88>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	617b      	str	r3, [r7, #20]
}
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003586:	f001 f945 	bl	8004814 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003596:	f000 f90b 	bl	80037b0 <prvTestWaitCondition>
 800359a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d028      	beq.n	8003602 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	401a      	ands	r2, r3
 80035ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e020      	b.n	8003602 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80035c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80035ca:	2301      	movs	r3, #1
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
 80035ce:	e018      	b.n	8003602 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035dc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ea:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	1d18      	adds	r0, r3, #4
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	4313      	orrs	r3, r2
 80035f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f8:	4619      	mov	r1, r3
 80035fa:	f001 fb09 	bl	8004c10 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003602:	f001 f915 	bl	8004830 <xTaskResumeAll>
 8003606:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d031      	beq.n	8003672 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <xEventGroupWaitBits+0x198>)
 8003616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003624:	f001 fe0c 	bl	8005240 <uxTaskResetEventItemValue>
 8003628:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11a      	bne.n	800366a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003634:	f002 fb0e 	bl	8005c54 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003644:	f000 f8b4 	bl	80037b0 <prvTestWaitCondition>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	43db      	mvns	r3, r3
 800365c:	401a      	ands	r2, r3
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003660:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003662:	2301      	movs	r3, #1
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003666:	f002 fb25 	bl	8005cb4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003674:	4618      	mov	r0, r3
 8003676:	3740      	adds	r7, #64	; 0x40
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800368a:	2300      	movs	r3, #0
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xEventGroupSetBits+0x32>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	613b      	str	r3, [r7, #16]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <xEventGroupSetBits+0x52>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	60fb      	str	r3, [r7, #12]
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	3304      	adds	r3, #4
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	3308      	adds	r3, #8
 80036dc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80036de:	f001 f899 	bl	8004814 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80036f4:	e03c      	b.n	8003770 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80036f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800370c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003714:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d108      	bne.n	8003732 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003730:	e008      	b.n	8003744 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	429a      	cmp	r2, r3
 800373e:	d101      	bne.n	8003744 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003764:	4619      	mov	r1, r3
 8003766:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003768:	f001 fb1e 	bl	8004da8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	429a      	cmp	r2, r3
 8003776:	d1be      	bne.n	80036f6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	43db      	mvns	r3, r3
 8003780:	401a      	ands	r2, r3
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003786:	f001 f853 	bl	8004830 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	681b      	ldr	r3, [r3, #0]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3738      	adds	r7, #56	; 0x38
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ff6c 	bl	8003680 <xEventGroupSetBits>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e007      	b.n	80037e6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d101      	bne.n	80037e6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80037e2:	2301      	movs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80037e6:	697b      	ldr	r3, [r7, #20]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	4804      	ldr	r0, [pc, #16]	; (8003818 <xEventGroupSetBitsFromISR+0x24>)
 8003808:	f002 f8d4 	bl	80059b4 <xTimerPendFunctionCallFromISR>
 800380c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800380e:	697b      	ldr	r3, [r7, #20]
	}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	08003797 	.word	0x08003797

0800381c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f103 0208 	add.w	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f103 0208 	add.w	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f103 0208 	add.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d103      	bne.n	80038de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e00c      	b.n	80038f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3308      	adds	r3, #8
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e002      	b.n	80038ec <vListInsert+0x2e>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d2f6      	bcs.n	80038e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6852      	ldr	r2, [r2, #4]
 8003950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d103      	bne.n	8003964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericReset+0x2a>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60bb      	str	r3, [r7, #8]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039ae:	f002 f951 	bl	8005c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	3b01      	subs	r3, #1
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	441a      	add	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	22ff      	movs	r2, #255	; 0xff
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d114      	bne.n	8003a2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01a      	beq.n	8003a42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3310      	adds	r3, #16
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f965 	bl	8004ce0 <xTaskRemoveFromEventList>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <xQueueGenericReset+0xcc>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	e009      	b.n	8003a42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3310      	adds	r3, #16
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fef2 	bl	800381c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3324      	adds	r3, #36	; 0x24
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff feed 	bl	800381c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a42:	f002 f937 	bl	8005cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	e000ed04 	.word	0xe000ed04

08003a54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08e      	sub	sp, #56	; 0x38
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <xQueueGenericCreateStatic+0x52>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <xQueueGenericCreateStatic+0x56>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <xQueueGenericCreateStatic+0x58>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	623b      	str	r3, [r7, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <xQueueGenericCreateStatic+0x7e>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <xQueueGenericCreateStatic+0x82>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <xQueueGenericCreateStatic+0x84>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	61fb      	str	r3, [r7, #28]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003af2:	2350      	movs	r3, #80	; 0x50
 8003af4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b50      	cmp	r3, #80	; 0x50
 8003afa:	d00a      	beq.n	8003b12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	61bb      	str	r3, [r7, #24]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f805 	bl	8003b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3730      	adds	r7, #48	; 0x30
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e002      	b.n	8003b66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b72:	2101      	movs	r1, #1
 8003b74:	69b8      	ldr	r0, [r7, #24]
 8003b76:	f7ff ff05 	bl	8003984 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08e      	sub	sp, #56	; 0x38
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <xQueueGenericSend+0x32>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <xQueueGenericSend+0x40>
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <xQueueGenericSend+0x44>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <xQueueGenericSend+0x46>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <xQueueGenericSend+0x60>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d103      	bne.n	8003bfa <xQueueGenericSend+0x6e>
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <xQueueGenericSend+0x72>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <xQueueGenericSend+0x74>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xQueueGenericSend+0x8e>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	623b      	str	r3, [r7, #32]
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c1a:	f001 fa85 	bl	8005128 <xTaskGetSchedulerState>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <xQueueGenericSend+0x9e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <xQueueGenericSend+0xa2>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <xQueueGenericSend+0xa4>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xQueueGenericSend+0xbe>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	61fb      	str	r3, [r7, #28]
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c4a:	f002 f803 	bl	8005c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <xQueueGenericSend+0xd4>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d129      	bne.n	8003cb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f000 fa0b 	bl	8004080 <prvCopyDataToQueue>
 8003c6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d010      	beq.n	8003c96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	3324      	adds	r3, #36	; 0x24
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f831 	bl	8004ce0 <xTaskRemoveFromEventList>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d013      	beq.n	8003cac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c84:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <xQueueGenericSend+0x1f8>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	e00a      	b.n	8003cac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c9c:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <xQueueGenericSend+0x1f8>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cac:	f002 f802 	bl	8005cb4 <vPortExitCritical>
				return pdPASS;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e063      	b.n	8003d7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cba:	f001 fffb 	bl	8005cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e05c      	b.n	8003d7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f8cd 	bl	8004e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cd6:	f001 ffed 	bl	8005cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cda:	f000 fd9b 	bl	8004814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cde:	f001 ffb9 	bl	8005c54 <vPortEnterCritical>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ce8:	b25b      	sxtb	r3, r3
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d103      	bne.n	8003cf8 <xQueueGenericSend+0x16c>
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d103      	bne.n	8003d0e <xQueueGenericSend+0x182>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d0e:	f001 ffd1 	bl	8005cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d12:	1d3a      	adds	r2, r7, #4
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 f8bc 	bl	8004e98 <xTaskCheckForTimeOut>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d124      	bne.n	8003d70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d28:	f000 faa2 	bl	8004270 <prvIsQueueFull>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d018      	beq.n	8003d64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	3310      	adds	r3, #16
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 ff44 	bl	8004bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d42:	f000 fa2d 	bl	80041a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d46:	f000 fd73 	bl	8004830 <xTaskResumeAll>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f47f af7c 	bne.w	8003c4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <xQueueGenericSend+0x1f8>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	e772      	b.n	8003c4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d66:	f000 fa1b 	bl	80041a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d6a:	f000 fd61 	bl	8004830 <xTaskResumeAll>
 8003d6e:	e76c      	b.n	8003c4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d72:	f000 fa15 	bl	80041a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d76:	f000 fd5b 	bl	8004830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3738      	adds	r7, #56	; 0x38
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b090      	sub	sp, #64	; 0x40
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <xQueueGenericSendFromISR+0x3c>
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <xQueueGenericSendFromISR+0x40>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <xQueueGenericSendFromISR+0x42>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d103      	bne.n	8003df2 <xQueueGenericSendFromISR+0x6a>
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <xQueueGenericSendFromISR+0x6e>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <xQueueGenericSendFromISR+0x70>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	623b      	str	r3, [r7, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e12:	f002 f801 	bl	8005e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e16:	f3ef 8211 	mrs	r2, BASEPRI
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	61fa      	str	r2, [r7, #28]
 8003e2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <xQueueGenericSendFromISR+0xbc>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d12f      	bne.n	8003ea4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e5a:	f000 f911 	bl	8004080 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d112      	bne.n	8003e8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d016      	beq.n	8003e9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	3324      	adds	r3, #36	; 0x24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 ff33 	bl	8004ce0 <xTaskRemoveFromEventList>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e007      	b.n	8003e9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e92:	3301      	adds	r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	b25a      	sxtb	r2, r3
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003ea2:	e001      	b.n	8003ea8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003eb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3740      	adds	r7, #64	; 0x40
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	; 0x30
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <xQueueReceive+0x30>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	623b      	str	r3, [r7, #32]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <xQueueReceive+0x3e>
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <xQueueReceive+0x42>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <xQueueReceive+0x44>
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xQueueReceive+0x5e>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	61fb      	str	r3, [r7, #28]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f1e:	f001 f903 	bl	8005128 <xTaskGetSchedulerState>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <xQueueReceive+0x6e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueReceive+0x72>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueReceive+0x74>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueReceive+0x8e>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61bb      	str	r3, [r7, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f4e:	f001 fe81 	bl	8005c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01f      	beq.n	8003f9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f62:	f000 f8f7 	bl	8004154 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1e5a      	subs	r2, r3, #1
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00f      	beq.n	8003f96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	3310      	adds	r3, #16
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 feb0 	bl	8004ce0 <xTaskRemoveFromEventList>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f86:	4b3d      	ldr	r3, [pc, #244]	; (800407c <xQueueReceive+0x1bc>)
 8003f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f96:	f001 fe8d 	bl	8005cb4 <vPortExitCritical>
				return pdPASS;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e069      	b.n	8004072 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d103      	bne.n	8003fac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fa4:	f001 fe86 	bl	8005cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e062      	b.n	8004072 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb2:	f107 0310 	add.w	r3, r7, #16
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ff58 	bl	8004e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fc0:	f001 fe78 	bl	8005cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc4:	f000 fc26 	bl	8004814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fc8:	f001 fe44 	bl	8005c54 <vPortEnterCritical>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d103      	bne.n	8003fe2 <xQueueReceive+0x122>
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d103      	bne.n	8003ff8 <xQueueReceive+0x138>
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff8:	f001 fe5c 	bl	8005cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ffc:	1d3a      	adds	r2, r7, #4
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 ff47 	bl	8004e98 <xTaskCheckForTimeOut>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d123      	bne.n	8004058 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004012:	f000 f917 	bl	8004244 <prvIsQueueEmpty>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d017      	beq.n	800404c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	3324      	adds	r3, #36	; 0x24
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fdcf 	bl	8004bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800402a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402c:	f000 f8b8 	bl	80041a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004030:	f000 fbfe 	bl	8004830 <xTaskResumeAll>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d189      	bne.n	8003f4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <xQueueReceive+0x1bc>)
 800403c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	e780      	b.n	8003f4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800404c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404e:	f000 f8a7 	bl	80041a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004052:	f000 fbed 	bl	8004830 <xTaskResumeAll>
 8004056:	e77a      	b.n	8003f4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800405a:	f000 f8a1 	bl	80041a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800405e:	f000 fbe7 	bl	8004830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004064:	f000 f8ee 	bl	8004244 <prvIsQueueEmpty>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	f43f af6f 	beq.w	8003f4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004070:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004072:	4618      	mov	r0, r3
 8004074:	3730      	adds	r7, #48	; 0x30
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10d      	bne.n	80040ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d14d      	bne.n	8004142 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 f85a 	bl	8005164 <xTaskPriorityDisinherit>
 80040b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e043      	b.n	8004142 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d119      	bne.n	80040f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6858      	ldr	r0, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	461a      	mov	r2, r3
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	f002 f8f4 	bl	80062b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	441a      	add	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d32b      	bcc.n	8004142 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	e026      	b.n	8004142 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68d8      	ldr	r0, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	461a      	mov	r2, r3
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	f002 f8da 	bl	80062b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	425b      	negs	r3, r3
 800410e:	441a      	add	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d207      	bcs.n	8004130 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	425b      	negs	r3, r3
 800412a:	441a      	add	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d105      	bne.n	8004142 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3b01      	subs	r3, #1
 8004140:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800414a:	697b      	ldr	r3, [r7, #20]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d018      	beq.n	8004198 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	441a      	add	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	d303      	bcc.n	8004188 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68d9      	ldr	r1, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	461a      	mov	r2, r3
 8004192:	6838      	ldr	r0, [r7, #0]
 8004194:	f002 f890 	bl	80062b8 <memcpy>
	}
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041a8:	f001 fd54 	bl	8005c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041b4:	e011      	b.n	80041da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3324      	adds	r3, #36	; 0x24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fd8c 	bl	8004ce0 <xTaskRemoveFromEventList>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041ce:	f000 fec5 	bl	8004f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	dce9      	bgt.n	80041b6 <prvUnlockQueue+0x16>
 80041e2:	e000      	b.n	80041e6 <prvUnlockQueue+0x46>
					break;
 80041e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	22ff      	movs	r2, #255	; 0xff
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041ee:	f001 fd61 	bl	8005cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041f2:	f001 fd2f 	bl	8005c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041fe:	e011      	b.n	8004224 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d012      	beq.n	800422e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3310      	adds	r3, #16
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fd67 	bl	8004ce0 <xTaskRemoveFromEventList>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004218:	f000 fea0 	bl	8004f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	3b01      	subs	r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004228:	2b00      	cmp	r3, #0
 800422a:	dce9      	bgt.n	8004200 <prvUnlockQueue+0x60>
 800422c:	e000      	b.n	8004230 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800422e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004238:	f001 fd3c 	bl	8005cb4 <vPortExitCritical>
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800424c:	f001 fd02 	bl	8005c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004258:	2301      	movs	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e001      	b.n	8004262 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004262:	f001 fd27 	bl	8005cb4 <vPortExitCritical>

	return xReturn;
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004278:	f001 fcec 	bl	8005c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	429a      	cmp	r2, r3
 8004286:	d102      	bne.n	800428e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e001      	b.n	8004292 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004292:	f001 fd0f 	bl	8005cb4 <vPortExitCritical>

	return xReturn;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e014      	b.n	80042da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042b0:	4a0f      	ldr	r2, [pc, #60]	; (80042f0 <vQueueAddToRegistry+0x50>)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10b      	bne.n	80042d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042bc:	490c      	ldr	r1, [pc, #48]	; (80042f0 <vQueueAddToRegistry+0x50>)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <vQueueAddToRegistry+0x50>)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042d2:	e006      	b.n	80042e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3301      	adds	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b07      	cmp	r3, #7
 80042de:	d9e7      	bls.n	80042b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200008ac 	.word	0x200008ac

080042f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004304:	f001 fca6 	bl	8005c54 <vPortEnterCritical>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430e:	b25b      	sxtb	r3, r3
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d103      	bne.n	800431e <vQueueWaitForMessageRestricted+0x2a>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d103      	bne.n	8004334 <vQueueWaitForMessageRestricted+0x40>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004334:	f001 fcbe 	bl	8005cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fc9d 	bl	8004c88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f7ff ff26 	bl	80041a0 <prvUnlockQueue>
	}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af04      	add	r7, sp, #16
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	623b      	str	r3, [r7, #32]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	61fb      	str	r3, [r7, #28]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043a2:	23bc      	movs	r3, #188	; 0xbc
 80043a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2bbc      	cmp	r3, #188	; 0xbc
 80043aa:	d00a      	beq.n	80043c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	61bb      	str	r3, [r7, #24]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01e      	beq.n	8004408 <xTaskCreateStatic+0xac>
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043e2:	2300      	movs	r3, #0
 80043e4:	9303      	str	r3, [sp, #12]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9302      	str	r3, [sp, #8]
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f850 	bl	80044a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004402:	f000 f8f3 	bl	80045ec <prvAddNewTaskToReadyList>
 8004406:	e001      	b.n	800440c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800440c:	697b      	ldr	r3, [r7, #20]
	}
 800440e:	4618      	mov	r0, r3
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004416:	b580      	push	{r7, lr}
 8004418:	b08c      	sub	sp, #48	; 0x30
 800441a:	af04      	add	r7, sp, #16
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f001 fd34 	bl	8005e98 <pvPortMalloc>
 8004430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004438:	20bc      	movs	r0, #188	; 0xbc
 800443a:	f001 fd2d 	bl	8005e98 <pvPortMalloc>
 800443e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
 800444c:	e005      	b.n	800445a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f001 fdee 	bl	8006030 <vPortFree>
 8004454:	e001      	b.n	800445a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	2300      	movs	r3, #0
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	9302      	str	r3, [sp, #8]
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f80e 	bl	80044a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004484:	69f8      	ldr	r0, [r7, #28]
 8004486:	f000 f8b1 	bl	80045ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e002      	b.n	8004496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004496:	69bb      	ldr	r3, [r7, #24]
	}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	461a      	mov	r2, r3
 80044b8:	21a5      	movs	r1, #165	; 0xa5
 80044ba:	f001 ff0b 	bl	80062d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	3b01      	subs	r3, #1
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	617b      	str	r3, [r7, #20]
}
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01f      	beq.n	800453e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	e012      	b.n	800452a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	7819      	ldrb	r1, [r3, #0]
 800450c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	3334      	adds	r3, #52	; 0x34
 8004514:	460a      	mov	r2, r1
 8004516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3301      	adds	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b0f      	cmp	r3, #15
 800452e:	d9e9      	bls.n	8004504 <prvInitialiseNewTask+0x64>
 8004530:	e000      	b.n	8004534 <prvInitialiseNewTask+0x94>
			{
				break;
 8004532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800453c:	e003      	b.n	8004546 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2b37      	cmp	r3, #55	; 0x37
 800454a:	d901      	bls.n	8004550 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800454c:	2337      	movs	r3, #55	; 0x37
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004554:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	2200      	movs	r2, #0
 8004560:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f978 	bl	800385c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	3318      	adds	r3, #24
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff f973 	bl	800385c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	2200      	movs	r2, #0
 8004590:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	2200      	movs	r2, #0
 8004598:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	3354      	adds	r3, #84	; 0x54
 80045a0:	2260      	movs	r2, #96	; 0x60
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f001 fe95 	bl	80062d4 <memset>
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <prvInitialiseNewTask+0x140>)
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <prvInitialiseNewTask+0x144>)
 80045b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <prvInitialiseNewTask+0x148>)
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	69b8      	ldr	r0, [r7, #24]
 80045c2:	f001 fa17 	bl	80059f4 <pxPortInitialiseStack>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	08006554 	.word	0x08006554
 80045e4:	08006574 	.word	0x08006574
 80045e8:	08006534 	.word	0x08006534

080045ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045f4:	f001 fb2e 	bl	8005c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045f8:	4b2d      	ldr	r3, [pc, #180]	; (80046b0 <prvAddNewTaskToReadyList+0xc4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3301      	adds	r3, #1
 80045fe:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <prvAddNewTaskToReadyList+0xc4>)
 8004600:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004602:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <prvAddNewTaskToReadyList+0xc8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800460a:	4a2a      	ldr	r2, [pc, #168]	; (80046b4 <prvAddNewTaskToReadyList+0xc8>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004610:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <prvAddNewTaskToReadyList+0xc4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d110      	bne.n	800463a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004618:	f000 fcc4 	bl	8004fa4 <prvInitialiseTaskLists>
 800461c:	e00d      	b.n	800463a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800461e:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <prvAddNewTaskToReadyList+0xcc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <prvAddNewTaskToReadyList+0xc8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d802      	bhi.n	800463a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <prvAddNewTaskToReadyList+0xc8>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <prvAddNewTaskToReadyList+0xd0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <prvAddNewTaskToReadyList+0xd0>)
 8004642:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <prvAddNewTaskToReadyList+0xd0>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <prvAddNewTaskToReadyList+0xd4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d903      	bls.n	8004660 <prvAddNewTaskToReadyList+0x74>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <prvAddNewTaskToReadyList+0xd4>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <prvAddNewTaskToReadyList+0xd8>)
 800466e:	441a      	add	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7ff f8fd 	bl	8003876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800467c:	f001 fb1a 	bl	8005cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <prvAddNewTaskToReadyList+0xcc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00e      	beq.n	80046a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <prvAddNewTaskToReadyList+0xc8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	429a      	cmp	r2, r3
 8004694:	d207      	bcs.n	80046a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <prvAddNewTaskToReadyList+0xdc>)
 8004698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000dc0 	.word	0x20000dc0
 80046b4:	200008ec 	.word	0x200008ec
 80046b8:	20000dcc 	.word	0x20000dcc
 80046bc:	20000ddc 	.word	0x20000ddc
 80046c0:	20000dc8 	.word	0x20000dc8
 80046c4:	200008f0 	.word	0x200008f0
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <vTaskDelay+0x60>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <vTaskDelay+0x30>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046fc:	f000 f88a 	bl	8004814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004700:	2100      	movs	r1, #0
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fdb4 	bl	8005270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004708:	f000 f892 	bl	8004830 <xTaskResumeAll>
 800470c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <vTaskDelay+0x64>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000de8 	.word	0x20000de8
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004742:	463a      	mov	r2, r7
 8004744:	1d39      	adds	r1, r7, #4
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fe44 	bl	80033d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	460a      	mov	r2, r1
 8004762:	4924      	ldr	r1, [pc, #144]	; (80047f4 <vTaskStartScheduler+0xc0>)
 8004764:	4824      	ldr	r0, [pc, #144]	; (80047f8 <vTaskStartScheduler+0xc4>)
 8004766:	f7ff fdf9 	bl	800435c <xTaskCreateStatic>
 800476a:	4603      	mov	r3, r0
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <vTaskStartScheduler+0xc8>)
 800476e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004770:	4b22      	ldr	r3, [pc, #136]	; (80047fc <vTaskStartScheduler+0xc8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e001      	b.n	8004782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d102      	bne.n	800478e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004788:	f000 fdc6 	bl	8005318 <xTimerCreateTimerTask>
 800478c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d11b      	bne.n	80047cc <vTaskStartScheduler+0x98>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	613b      	str	r3, [r7, #16]
}
 80047a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <vTaskStartScheduler+0xcc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3354      	adds	r3, #84	; 0x54
 80047ae:	4a15      	ldr	r2, [pc, #84]	; (8004804 <vTaskStartScheduler+0xd0>)
 80047b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <vTaskStartScheduler+0xd4>)
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <vTaskStartScheduler+0xd8>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047c0:	4b13      	ldr	r3, [pc, #76]	; (8004810 <vTaskStartScheduler+0xdc>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047c6:	f001 f9a3 	bl	8005b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047ca:	e00e      	b.n	80047ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d10a      	bne.n	80047ea <vTaskStartScheduler+0xb6>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <vTaskStartScheduler+0xb4>
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	08006498 	.word	0x08006498
 80047f8:	08004f75 	.word	0x08004f75
 80047fc:	20000de4 	.word	0x20000de4
 8004800:	200008ec 	.word	0x200008ec
 8004804:	20000010 	.word	0x20000010
 8004808:	20000de0 	.word	0x20000de0
 800480c:	20000dcc 	.word	0x20000dcc
 8004810:	20000dc4 	.word	0x20000dc4

08004814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <vTaskSuspendAll+0x18>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	4a03      	ldr	r2, [pc, #12]	; (800482c <vTaskSuspendAll+0x18>)
 8004820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000de8 	.word	0x20000de8

08004830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800483e:	4b42      	ldr	r3, [pc, #264]	; (8004948 <xTaskResumeAll+0x118>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <xTaskResumeAll+0x2c>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	603b      	str	r3, [r7, #0]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800485c:	f001 f9fa 	bl	8005c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <xTaskResumeAll+0x118>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3b01      	subs	r3, #1
 8004866:	4a38      	ldr	r2, [pc, #224]	; (8004948 <xTaskResumeAll+0x118>)
 8004868:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <xTaskResumeAll+0x118>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d162      	bne.n	8004938 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004872:	4b36      	ldr	r3, [pc, #216]	; (800494c <xTaskResumeAll+0x11c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d05e      	beq.n	8004938 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800487a:	e02f      	b.n	80048dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487c:	4b34      	ldr	r3, [pc, #208]	; (8004950 <xTaskResumeAll+0x120>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3318      	adds	r3, #24
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff f851 	bl	8003930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3304      	adds	r3, #4
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff f84c 	bl	8003930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <xTaskResumeAll+0x124>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <xTaskResumeAll+0x7c>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <xTaskResumeAll+0x124>)
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <xTaskResumeAll+0x128>)
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f7fe ffd7 	bl	8003876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b23      	ldr	r3, [pc, #140]	; (800495c <xTaskResumeAll+0x12c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048d6:	4b22      	ldr	r3, [pc, #136]	; (8004960 <xTaskResumeAll+0x130>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <xTaskResumeAll+0x120>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1cb      	bne.n	800487c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048ea:	f000 fbfd 	bl	80050e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <xTaskResumeAll+0x134>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048fa:	f000 f847 	bl	800498c <xTaskIncrementTick>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004904:	4b16      	ldr	r3, [pc, #88]	; (8004960 <xTaskResumeAll+0x130>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3b01      	subs	r3, #1
 800490e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f1      	bne.n	80048fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <xTaskResumeAll+0x134>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <xTaskResumeAll+0x130>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <xTaskResumeAll+0x138>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004938:	f001 f9bc 	bl	8005cb4 <vPortExitCritical>

	return xAlreadyYielded;
 800493c:	68bb      	ldr	r3, [r7, #8]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000de8 	.word	0x20000de8
 800494c:	20000dc0 	.word	0x20000dc0
 8004950:	20000d80 	.word	0x20000d80
 8004954:	20000dc8 	.word	0x20000dc8
 8004958:	200008f0 	.word	0x200008f0
 800495c:	200008ec 	.word	0x200008ec
 8004960:	20000dd4 	.word	0x20000dd4
 8004964:	20000dd0 	.word	0x20000dd0
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <xTaskGetTickCount+0x1c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004978:	687b      	ldr	r3, [r7, #4]
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000dc4 	.word	0x20000dc4

0800498c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004996:	4b4f      	ldr	r3, [pc, #316]	; (8004ad4 <xTaskIncrementTick+0x148>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 808f 	bne.w	8004abe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d120      	bne.n	80049f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049b4:	4b49      	ldr	r3, [pc, #292]	; (8004adc <xTaskIncrementTick+0x150>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	603b      	str	r3, [r7, #0]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <xTaskIncrementTick+0x46>
 80049d4:	4b41      	ldr	r3, [pc, #260]	; (8004adc <xTaskIncrementTick+0x150>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <xTaskIncrementTick+0x154>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <xTaskIncrementTick+0x150>)
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	4a3f      	ldr	r2, [pc, #252]	; (8004ae0 <xTaskIncrementTick+0x154>)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <xTaskIncrementTick+0x158>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	4a3d      	ldr	r2, [pc, #244]	; (8004ae4 <xTaskIncrementTick+0x158>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	f000 fb79 	bl	80050e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049f6:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d349      	bcc.n	8004a94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a00:	4b36      	ldr	r3, [pc, #216]	; (8004adc <xTaskIncrementTick+0x150>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a10:	601a      	str	r2, [r3, #0]
					break;
 8004a12:	e03f      	b.n	8004a94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a14:	4b31      	ldr	r3, [pc, #196]	; (8004adc <xTaskIncrementTick+0x150>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d203      	bcs.n	8004a34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a32:	e02f      	b.n	8004a94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe ff79 	bl	8003930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3318      	adds	r3, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe ff70 	bl	8003930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <xTaskIncrementTick+0x160>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d903      	bls.n	8004a64 <xTaskIncrementTick+0xd8>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <xTaskIncrementTick+0x160>)
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <xTaskIncrementTick+0x164>)
 8004a72:	441a      	add	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fe fefb 	bl	8003876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <xTaskIncrementTick+0x168>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b8      	bcc.n	8004a00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a92:	e7b5      	b.n	8004a00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <xTaskIncrementTick+0x168>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	4915      	ldr	r1, [pc, #84]	; (8004af0 <xTaskIncrementTick+0x164>)
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d901      	bls.n	8004ab0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <xTaskIncrementTick+0x16c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e004      	b.n	8004ac8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004abe:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <xTaskIncrementTick+0x170>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4a0d      	ldr	r2, [pc, #52]	; (8004afc <xTaskIncrementTick+0x170>)
 8004ac6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ac8:	697b      	ldr	r3, [r7, #20]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000de8 	.word	0x20000de8
 8004ad8:	20000dc4 	.word	0x20000dc4
 8004adc:	20000d78 	.word	0x20000d78
 8004ae0:	20000d7c 	.word	0x20000d7c
 8004ae4:	20000dd8 	.word	0x20000dd8
 8004ae8:	20000de0 	.word	0x20000de0
 8004aec:	20000dc8 	.word	0x20000dc8
 8004af0:	200008f0 	.word	0x200008f0
 8004af4:	200008ec 	.word	0x200008ec
 8004af8:	20000dd4 	.word	0x20000dd4
 8004afc:	20000dd0 	.word	0x20000dd0

08004b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b06:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <vTaskSwitchContext+0xb0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <vTaskSwitchContext+0xb4>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b14:	e046      	b.n	8004ba4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <vTaskSwitchContext+0xb4>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1c:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <vTaskSwitchContext+0xb8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e010      	b.n	8004b46 <vTaskSwitchContext+0x46>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	607b      	str	r3, [r7, #4]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vTaskSwitchContext+0x3e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	491d      	ldr	r1, [pc, #116]	; (8004bbc <vTaskSwitchContext+0xbc>)
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0e4      	beq.n	8004b24 <vTaskSwitchContext+0x24>
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <vTaskSwitchContext+0xbc>)
 8004b66:	4413      	add	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d104      	bne.n	8004b8a <vTaskSwitchContext+0x8a>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <vTaskSwitchContext+0xc0>)
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <vTaskSwitchContext+0xb8>)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <vTaskSwitchContext+0xc0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3354      	adds	r3, #84	; 0x54
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <vTaskSwitchContext+0xc4>)
 8004ba2:	6013      	str	r3, [r2, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000de8 	.word	0x20000de8
 8004bb4:	20000dd4 	.word	0x20000dd4
 8004bb8:	20000dc8 	.word	0x20000dc8
 8004bbc:	200008f0 	.word	0x200008f0
 8004bc0:	200008ec 	.word	0x200008ec
 8004bc4:	20000010 	.word	0x20000010

08004bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <vTaskPlaceOnEventList+0x44>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3318      	adds	r3, #24
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fe fe61 	bl	80038be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	6838      	ldr	r0, [r7, #0]
 8004c00:	f000 fb36 	bl	8005270 <prvAddCurrentTaskToDelayedList>
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	200008ec 	.word	0x200008ec

08004c10 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	617b      	str	r3, [r7, #20]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	613b      	str	r3, [r7, #16]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c60:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3318      	adds	r3, #24
 8004c68:	4619      	mov	r1, r3
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7fe fe03 	bl	8003876 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c70:	2101      	movs	r1, #1
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fafc 	bl	8005270 <prvAddCurrentTaskToDelayedList>
}
 8004c78:	bf00      	nop
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000de8 	.word	0x20000de8
 8004c84:	200008ec 	.word	0x200008ec

08004c88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	617b      	str	r3, [r7, #20]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <vTaskPlaceOnEventListRestricted+0x54>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3318      	adds	r3, #24
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7fe fddc 	bl	8003876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	68b8      	ldr	r0, [r7, #8]
 8004cce:	f000 facf 	bl	8005270 <prvAddCurrentTaskToDelayedList>
	}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200008ec 	.word	0x200008ec

08004ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60fb      	str	r3, [r7, #12]
}
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	3318      	adds	r3, #24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fe0d 	bl	8003930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <xTaskRemoveFromEventList+0xb0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fe04 	bl	8003930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <xTaskRemoveFromEventList+0xb4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d903      	bls.n	8004d3c <xTaskRemoveFromEventList+0x5c>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <xTaskRemoveFromEventList+0xb4>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <xTaskRemoveFromEventList+0xb8>)
 8004d4a:	441a      	add	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f7fe fd8f 	bl	8003876 <vListInsertEnd>
 8004d58:	e005      	b.n	8004d66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3318      	adds	r3, #24
 8004d5e:	4619      	mov	r1, r3
 8004d60:	480e      	ldr	r0, [pc, #56]	; (8004d9c <xTaskRemoveFromEventList+0xbc>)
 8004d62:	f7fe fd88 	bl	8003876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <xTaskRemoveFromEventList+0xc0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d905      	bls.n	8004d80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <xTaskRemoveFromEventList+0xc4>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e001      	b.n	8004d84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d84:	697b      	ldr	r3, [r7, #20]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000de8 	.word	0x20000de8
 8004d94:	20000dc8 	.word	0x20000dc8
 8004d98:	200008f0 	.word	0x200008f0
 8004d9c:	20000d80 	.word	0x20000d80
 8004da0:	200008ec 	.word	0x200008ec
 8004da4:	20000dd4 	.word	0x20000dd4

08004da8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	613b      	str	r3, [r7, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60fb      	str	r3, [r7, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fe fd97 	bl	8003930 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fd92 	bl	8003930 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d903      	bls.n	8004e20 <vTaskRemoveFromUnorderedEventList+0x78>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004e2e:	441a      	add	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f7fe fd1d 	bl	8003876 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d902      	bls.n	8004e50 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
	}
}
 8004e50:	bf00      	nop
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000de8 	.word	0x20000de8
 8004e5c:	20000dc8 	.word	0x20000dc8
 8004e60:	200008f0 	.word	0x200008f0
 8004e64:	200008ec 	.word	0x200008ec
 8004e68:	20000dd4 	.word	0x20000dd4

08004e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <vTaskInternalSetTimeOutState+0x24>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <vTaskInternalSetTimeOutState+0x28>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	20000dd8 	.word	0x20000dd8
 8004e94:	20000dc4 	.word	0x20000dc4

08004e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	613b      	str	r3, [r7, #16]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60fb      	str	r3, [r7, #12]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004eda:	f000 febb 	bl	8005c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ede:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <xTaskCheckForTimeOut+0xbc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d102      	bne.n	8004efe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e023      	b.n	8004f46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <xTaskCheckForTimeOut+0xc0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d007      	beq.n	8004f1a <xTaskCheckForTimeOut+0x82>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d302      	bcc.n	8004f1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	e015      	b.n	8004f46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d20b      	bcs.n	8004f3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1ad2      	subs	r2, r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ff9b 	bl	8004e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	e004      	b.n	8004f46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f46:	f000 feb5 	bl	8005cb4 <vPortExitCritical>

	return xReturn;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000dc4 	.word	0x20000dc4
 8004f58:	20000dd8 	.word	0x20000dd8

08004f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <vTaskMissedYield+0x14>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000dd4 	.word	0x20000dd4

08004f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f7c:	f000 f852 	bl	8005024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <prvIdleTask+0x28>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d9f9      	bls.n	8004f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <prvIdleTask+0x2c>)
 8004f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f98:	e7f0      	b.n	8004f7c <prvIdleTask+0x8>
 8004f9a:	bf00      	nop
 8004f9c:	200008f0 	.word	0x200008f0
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	e00c      	b.n	8004fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <prvInitialiseTaskLists+0x60>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fc2c 	bl	800381c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b37      	cmp	r3, #55	; 0x37
 8004fce:	d9ef      	bls.n	8004fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fd0:	480d      	ldr	r0, [pc, #52]	; (8005008 <prvInitialiseTaskLists+0x64>)
 8004fd2:	f7fe fc23 	bl	800381c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fd6:	480d      	ldr	r0, [pc, #52]	; (800500c <prvInitialiseTaskLists+0x68>)
 8004fd8:	f7fe fc20 	bl	800381c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fdc:	480c      	ldr	r0, [pc, #48]	; (8005010 <prvInitialiseTaskLists+0x6c>)
 8004fde:	f7fe fc1d 	bl	800381c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fe2:	480c      	ldr	r0, [pc, #48]	; (8005014 <prvInitialiseTaskLists+0x70>)
 8004fe4:	f7fe fc1a 	bl	800381c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fe8:	480b      	ldr	r0, [pc, #44]	; (8005018 <prvInitialiseTaskLists+0x74>)
 8004fea:	f7fe fc17 	bl	800381c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <prvInitialiseTaskLists+0x78>)
 8004ff0:	4a05      	ldr	r2, [pc, #20]	; (8005008 <prvInitialiseTaskLists+0x64>)
 8004ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <prvInitialiseTaskLists+0x7c>)
 8004ff6:	4a05      	ldr	r2, [pc, #20]	; (800500c <prvInitialiseTaskLists+0x68>)
 8004ff8:	601a      	str	r2, [r3, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200008f0 	.word	0x200008f0
 8005008:	20000d50 	.word	0x20000d50
 800500c:	20000d64 	.word	0x20000d64
 8005010:	20000d80 	.word	0x20000d80
 8005014:	20000d94 	.word	0x20000d94
 8005018:	20000dac 	.word	0x20000dac
 800501c:	20000d78 	.word	0x20000d78
 8005020:	20000d7c 	.word	0x20000d7c

08005024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800502a:	e019      	b.n	8005060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800502c:	f000 fe12 	bl	8005c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005030:	4b10      	ldr	r3, [pc, #64]	; (8005074 <prvCheckTasksWaitingTermination+0x50>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe fc77 	bl	8003930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <prvCheckTasksWaitingTermination+0x54>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3b01      	subs	r3, #1
 8005048:	4a0b      	ldr	r2, [pc, #44]	; (8005078 <prvCheckTasksWaitingTermination+0x54>)
 800504a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <prvCheckTasksWaitingTermination+0x58>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3b01      	subs	r3, #1
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <prvCheckTasksWaitingTermination+0x58>)
 8005054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005056:	f000 fe2d 	bl	8005cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f810 	bl	8005080 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <prvCheckTasksWaitingTermination+0x58>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e1      	bne.n	800502c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000d94 	.word	0x20000d94
 8005078:	20000dc0 	.word	0x20000dc0
 800507c:	20000da8 	.word	0x20000da8

08005080 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3354      	adds	r3, #84	; 0x54
 800508c:	4618      	mov	r0, r3
 800508e:	f001 f937 	bl	8006300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005098:	2b00      	cmp	r3, #0
 800509a:	d108      	bne.n	80050ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 ffc5 	bl	8006030 <vPortFree>
				vPortFree( pxTCB );
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 ffc2 	bl	8006030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050ac:	e018      	b.n	80050e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d103      	bne.n	80050c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 ffb9 	bl	8006030 <vPortFree>
	}
 80050be:	e00f      	b.n	80050e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d00a      	beq.n	80050e0 <prvDeleteTCB+0x60>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60fb      	str	r3, [r7, #12]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <prvDeleteTCB+0x5e>
	}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <prvResetNextTaskUnblockTime+0x38>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <prvResetNextTaskUnblockTime+0x3c>)
 80050fa:	f04f 32ff 	mov.w	r2, #4294967295
 80050fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005100:	e008      	b.n	8005114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <prvResetNextTaskUnblockTime+0x38>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <prvResetNextTaskUnblockTime+0x3c>)
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000d78 	.word	0x20000d78
 8005124:	20000de0 	.word	0x20000de0

08005128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <xTaskGetSchedulerState+0x34>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005136:	2301      	movs	r3, #1
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	e008      	b.n	800514e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513c:	4b08      	ldr	r3, [pc, #32]	; (8005160 <xTaskGetSchedulerState+0x38>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005144:	2302      	movs	r3, #2
 8005146:	607b      	str	r3, [r7, #4]
 8005148:	e001      	b.n	800514e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800514e:	687b      	ldr	r3, [r7, #4]
	}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000dcc 	.word	0x20000dcc
 8005160:	20000de8 	.word	0x20000de8

08005164 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d056      	beq.n	8005228 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800517a:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <xTaskPriorityDisinherit+0xd0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	429a      	cmp	r2, r3
 8005182:	d00a      	beq.n	800519a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
}
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60bb      	str	r3, [r7, #8]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d02c      	beq.n	8005228 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d128      	bne.n	8005228 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3304      	adds	r3, #4
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fba8 	bl	8003930 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <xTaskPriorityDisinherit+0xd4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d903      	bls.n	8005208 <xTaskPriorityDisinherit+0xa4>
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <xTaskPriorityDisinherit+0xd4>)
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4a09      	ldr	r2, [pc, #36]	; (800523c <xTaskPriorityDisinherit+0xd8>)
 8005216:	441a      	add	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7fe fb29 	bl	8003876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005224:	2301      	movs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005228:	697b      	ldr	r3, [r7, #20]
	}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200008ec 	.word	0x200008ec
 8005238:	20000dc8 	.word	0x20000dc8
 800523c:	200008f0 	.word	0x200008f0

08005240 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <uxTaskResetEventItemValue+0x2c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <uxTaskResetEventItemValue+0x2c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4b05      	ldr	r3, [pc, #20]	; (800526c <uxTaskResetEventItemValue+0x2c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800525c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800525e:	687b      	ldr	r3, [r7, #4]
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	200008ec 	.word	0x200008ec

08005270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800527a:	4b21      	ldr	r3, [pc, #132]	; (8005300 <prvAddCurrentTaskToDelayedList+0x90>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005280:	4b20      	ldr	r3, [pc, #128]	; (8005304 <prvAddCurrentTaskToDelayedList+0x94>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe fb52 	bl	8003930 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d10a      	bne.n	80052aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800529a:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <prvAddCurrentTaskToDelayedList+0x94>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4819      	ldr	r0, [pc, #100]	; (8005308 <prvAddCurrentTaskToDelayedList+0x98>)
 80052a4:	f7fe fae7 	bl	8003876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052a8:	e026      	b.n	80052f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4413      	add	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <prvAddCurrentTaskToDelayedList+0x94>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d209      	bcs.n	80052d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <prvAddCurrentTaskToDelayedList+0x9c>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <prvAddCurrentTaskToDelayedList+0x94>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f7fe faf5 	bl	80038be <vListInsert>
}
 80052d4:	e010      	b.n	80052f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052d6:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <prvAddCurrentTaskToDelayedList+0x94>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f7fe faeb 	bl	80038be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d202      	bcs.n	80052f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6013      	str	r3, [r2, #0]
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000dc4 	.word	0x20000dc4
 8005304:	200008ec 	.word	0x200008ec
 8005308:	20000dac 	.word	0x20000dac
 800530c:	20000d7c 	.word	0x20000d7c
 8005310:	20000d78 	.word	0x20000d78
 8005314:	20000de0 	.word	0x20000de0

08005318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005322:	f000 fb07 	bl	8005934 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005326:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <xTimerCreateTimerTask+0x80>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d021      	beq.n	8005372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005336:	1d3a      	adds	r2, r7, #4
 8005338:	f107 0108 	add.w	r1, r7, #8
 800533c:	f107 030c 	add.w	r3, r7, #12
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe f863 	bl	800340c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	9202      	str	r2, [sp, #8]
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	2302      	movs	r3, #2
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	460a      	mov	r2, r1
 8005358:	4910      	ldr	r1, [pc, #64]	; (800539c <xTimerCreateTimerTask+0x84>)
 800535a:	4811      	ldr	r0, [pc, #68]	; (80053a0 <xTimerCreateTimerTask+0x88>)
 800535c:	f7fe fffe 	bl	800435c <xTaskCreateStatic>
 8005360:	4603      	mov	r3, r0
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <xTimerCreateTimerTask+0x8c>)
 8005364:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <xTimerCreateTimerTask+0x8c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800536e:	2301      	movs	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	613b      	str	r3, [r7, #16]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800538e:	697b      	ldr	r3, [r7, #20]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000e1c 	.word	0x20000e1c
 800539c:	080064a0 	.word	0x080064a0
 80053a0:	080054dd 	.word	0x080054dd
 80053a4:	20000e20 	.word	0x20000e20

080053a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	623b      	str	r3, [r7, #32]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <xTimerGenericCommand+0x98>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d02a      	beq.n	8005434 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b05      	cmp	r3, #5
 80053ee:	dc18      	bgt.n	8005422 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053f0:	f7ff fe9a 	bl	8005128 <xTaskGetSchedulerState>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d109      	bne.n	800540e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <xTimerGenericCommand+0x98>)
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	f107 0110 	add.w	r1, r7, #16
 8005402:	2300      	movs	r3, #0
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	f7fe fbc1 	bl	8003b8c <xQueueGenericSend>
 800540a:	6278      	str	r0, [r7, #36]	; 0x24
 800540c:	e012      	b.n	8005434 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <xTimerGenericCommand+0x98>)
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	f107 0110 	add.w	r1, r7, #16
 8005416:	2300      	movs	r3, #0
 8005418:	2200      	movs	r2, #0
 800541a:	f7fe fbb7 	bl	8003b8c <xQueueGenericSend>
 800541e:	6278      	str	r0, [r7, #36]	; 0x24
 8005420:	e008      	b.n	8005434 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005422:	4b07      	ldr	r3, [pc, #28]	; (8005440 <xTimerGenericCommand+0x98>)
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	f107 0110 	add.w	r1, r7, #16
 800542a:	2300      	movs	r3, #0
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	f7fe fcab 	bl	8003d88 <xQueueGenericSendFromISR>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005436:	4618      	mov	r0, r3
 8005438:	3728      	adds	r7, #40	; 0x28
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000e1c 	.word	0x20000e1c

08005444 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <prvProcessExpiredTimer+0x94>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3304      	adds	r3, #4
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe fa67 	bl	8003930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d022      	beq.n	80054b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	18d1      	adds	r1, r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	6978      	ldr	r0, [r7, #20]
 800547e:	f000 f8d1 	bl	8005624 <prvInsertTimerInActiveList>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01f      	beq.n	80054c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005488:	2300      	movs	r3, #0
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2300      	movs	r3, #0
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	2100      	movs	r1, #0
 8005492:	6978      	ldr	r0, [r7, #20]
 8005494:	f7ff ff88 	bl	80053a8 <xTimerGenericCommand>
 8005498:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d113      	bne.n	80054c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60fb      	str	r3, [r7, #12]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	6978      	ldr	r0, [r7, #20]
 80054ce:	4798      	blx	r3
}
 80054d0:	bf00      	nop
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000e14 	.word	0x20000e14

080054dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054e4:	f107 0308 	add.w	r3, r7, #8
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f857 	bl	800559c <prvGetNextExpireTime>
 80054ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4619      	mov	r1, r3
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f803 	bl	8005500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054fa:	f000 f8d5 	bl	80056a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054fe:	e7f1      	b.n	80054e4 <prvTimerTask+0x8>

08005500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800550a:	f7ff f983 	bl	8004814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f866 	bl	80055e4 <prvSampleTimeNow>
 8005518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d130      	bne.n	8005582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <prvProcessTimerOrBlockTask+0x3c>
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	429a      	cmp	r2, r3
 800552c:	d806      	bhi.n	800553c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800552e:	f7ff f97f 	bl	8004830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff85 	bl	8005444 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800553a:	e024      	b.n	8005586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <prvProcessTimerOrBlockTask+0x90>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <prvProcessTimerOrBlockTask+0x50>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <prvProcessTimerOrBlockTask+0x52>
 8005550:	2300      	movs	r3, #0
 8005552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <prvProcessTimerOrBlockTask+0x94>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	f7fe fec7 	bl	80042f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005566:	f7ff f963 	bl	8004830 <xTaskResumeAll>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <prvProcessTimerOrBlockTask+0x98>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
}
 8005580:	e001      	b.n	8005586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005582:	f7ff f955 	bl	8004830 <xTaskResumeAll>
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000e18 	.word	0x20000e18
 8005594:	20000e1c 	.word	0x20000e1c
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <prvGetNextExpireTime+0x44>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <prvGetNextExpireTime+0x16>
 80055ae:	2201      	movs	r2, #1
 80055b0:	e000      	b.n	80055b4 <prvGetNextExpireTime+0x18>
 80055b2:	2200      	movs	r2, #0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <prvGetNextExpireTime+0x44>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e001      	b.n	80055d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055d0:	68fb      	ldr	r3, [r7, #12]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000e14 	.word	0x20000e14

080055e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055ec:	f7ff f9be 	bl	800496c <xTaskGetTickCount>
 80055f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <prvSampleTimeNow+0x3c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d205      	bcs.n	8005608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055fc:	f000 f936 	bl	800586c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e002      	b.n	800560e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800560e:	4a04      	ldr	r2, [pc, #16]	; (8005620 <prvSampleTimeNow+0x3c>)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000e24 	.word	0x20000e24

08005624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d812      	bhi.n	8005670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e01b      	b.n	8005696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <prvInsertTimerInActiveList+0x7c>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7fe f928 	bl	80038be <vListInsert>
 800566e:	e012      	b.n	8005696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d206      	bcs.n	8005686 <prvInsertTimerInActiveList+0x62>
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005680:	2301      	movs	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e007      	b.n	8005696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <prvInsertTimerInActiveList+0x80>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fe f914 	bl	80038be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005696:	697b      	ldr	r3, [r7, #20]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000e18 	.word	0x20000e18
 80056a4:	20000e14 	.word	0x20000e14

080056a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	; 0x38
 80056ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ae:	e0ca      	b.n	8005846 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da18      	bge.n	80056e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056b6:	1d3b      	adds	r3, r7, #4
 80056b8:	3304      	adds	r3, #4
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	61fb      	str	r3, [r7, #28]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056de:	6850      	ldr	r0, [r2, #4]
 80056e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e2:	6892      	ldr	r2, [r2, #8]
 80056e4:	4611      	mov	r1, r2
 80056e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f2c0 80aa 	blt.w	8005844 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	3304      	adds	r3, #4
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe f915 	bl	8003930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005706:	463b      	mov	r3, r7
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff ff6b 	bl	80055e4 <prvSampleTimeNow>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b09      	cmp	r3, #9
 8005714:	f200 8097 	bhi.w	8005846 <prvProcessReceivedCommands+0x19e>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <prvProcessReceivedCommands+0x78>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005749 	.word	0x08005749
 8005724:	08005749 	.word	0x08005749
 8005728:	08005749 	.word	0x08005749
 800572c:	080057bd 	.word	0x080057bd
 8005730:	080057d1 	.word	0x080057d1
 8005734:	0800581b 	.word	0x0800581b
 8005738:	08005749 	.word	0x08005749
 800573c:	08005749 	.word	0x08005749
 8005740:	080057bd 	.word	0x080057bd
 8005744:	080057d1 	.word	0x080057d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	18d1      	adds	r1, r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005768:	f7ff ff5c 	bl	8005624 <prvInsertTimerInActiveList>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d069      	beq.n	8005846 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05e      	beq.n	8005846 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	441a      	add	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	2100      	movs	r1, #0
 8005798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579a:	f7ff fe05 	bl	80053a8 <xTimerGenericCommand>
 800579e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d14f      	bne.n	8005846 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	61bb      	str	r3, [r7, #24]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80057ce:	e03a      	b.n	8005846 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	617b      	str	r3, [r7, #20]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	18d1      	adds	r1, r2, r3
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005814:	f7ff ff06 	bl	8005624 <prvInsertTimerInActiveList>
					break;
 8005818:	e015      	b.n	8005846 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800582a:	f000 fc01 	bl	8006030 <vPortFree>
 800582e:	e00a      	b.n	8005846 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005842:	e000      	b.n	8005846 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005844:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <prvProcessReceivedCommands+0x1c0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1d39      	adds	r1, r7, #4
 800584c:	2200      	movs	r2, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fb36 	bl	8003ec0 <xQueueReceive>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	f47f af2a 	bne.w	80056b0 <prvProcessReceivedCommands+0x8>
	}
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3730      	adds	r7, #48	; 0x30
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000e1c 	.word	0x20000e1c

0800586c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005872:	e048      	b.n	8005906 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005874:	4b2d      	ldr	r3, [pc, #180]	; (800592c <prvSwitchTimerLists+0xc0>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <prvSwitchTimerLists+0xc0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3304      	adds	r3, #4
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe f84f 	bl	8003930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02e      	beq.n	8005906 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d90e      	bls.n	80058d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058c6:	4b19      	ldr	r3, [pc, #100]	; (800592c <prvSwitchTimerLists+0xc0>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f7fd fff4 	bl	80038be <vListInsert>
 80058d6:	e016      	b.n	8005906 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058d8:	2300      	movs	r3, #0
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2300      	movs	r3, #0
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	2100      	movs	r1, #0
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fd60 	bl	80053a8 <xTimerGenericCommand>
 80058e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	603b      	str	r3, [r7, #0]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <prvSwitchTimerLists+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1b1      	bne.n	8005874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <prvSwitchTimerLists+0xc0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <prvSwitchTimerLists+0xc4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a04      	ldr	r2, [pc, #16]	; (800592c <prvSwitchTimerLists+0xc0>)
 800591c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800591e:	4a04      	ldr	r2, [pc, #16]	; (8005930 <prvSwitchTimerLists+0xc4>)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	6013      	str	r3, [r2, #0]
}
 8005924:	bf00      	nop
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000e14 	.word	0x20000e14
 8005930:	20000e18 	.word	0x20000e18

08005934 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800593a:	f000 f98b 	bl	8005c54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <prvCheckForValidListAndQueue+0x60>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d120      	bne.n	8005988 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005946:	4814      	ldr	r0, [pc, #80]	; (8005998 <prvCheckForValidListAndQueue+0x64>)
 8005948:	f7fd ff68 	bl	800381c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800594c:	4813      	ldr	r0, [pc, #76]	; (800599c <prvCheckForValidListAndQueue+0x68>)
 800594e:	f7fd ff65 	bl	800381c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005952:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <prvCheckForValidListAndQueue+0x6c>)
 8005954:	4a10      	ldr	r2, [pc, #64]	; (8005998 <prvCheckForValidListAndQueue+0x64>)
 8005956:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005958:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <prvCheckForValidListAndQueue+0x70>)
 800595a:	4a10      	ldr	r2, [pc, #64]	; (800599c <prvCheckForValidListAndQueue+0x68>)
 800595c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800595e:	2300      	movs	r3, #0
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <prvCheckForValidListAndQueue+0x74>)
 8005964:	4a11      	ldr	r2, [pc, #68]	; (80059ac <prvCheckForValidListAndQueue+0x78>)
 8005966:	2110      	movs	r1, #16
 8005968:	200a      	movs	r0, #10
 800596a:	f7fe f873 	bl	8003a54 <xQueueGenericCreateStatic>
 800596e:	4603      	mov	r3, r0
 8005970:	4a08      	ldr	r2, [pc, #32]	; (8005994 <prvCheckForValidListAndQueue+0x60>)
 8005972:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <prvCheckForValidListAndQueue+0x60>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <prvCheckForValidListAndQueue+0x60>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	490b      	ldr	r1, [pc, #44]	; (80059b0 <prvCheckForValidListAndQueue+0x7c>)
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe fc8c 	bl	80042a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005988:	f000 f994 	bl	8005cb4 <vPortExitCritical>
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000e1c 	.word	0x20000e1c
 8005998:	20000dec 	.word	0x20000dec
 800599c:	20000e00 	.word	0x20000e00
 80059a0:	20000e14 	.word	0x20000e14
 80059a4:	20000e18 	.word	0x20000e18
 80059a8:	20000ec8 	.word	0x20000ec8
 80059ac:	20000e28 	.word	0x20000e28
 80059b0:	080064a8 	.word	0x080064a8

080059b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80059c2:	f06f 0301 	mvn.w	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <xTimerPendFunctionCallFromISR+0x3c>)
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	f107 0114 	add.w	r1, r7, #20
 80059dc:	2300      	movs	r3, #0
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	f7fe f9d2 	bl	8003d88 <xQueueGenericSendFromISR>
 80059e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3728      	adds	r7, #40	; 0x28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000e1c 	.word	0x20000e1c

080059f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b04      	subs	r3, #4
 8005a04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3b04      	subs	r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f023 0201 	bic.w	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b04      	subs	r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <pxPortInitialiseStack+0x64>)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3b14      	subs	r3, #20
 8005a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f06f 0202 	mvn.w	r2, #2
 8005a42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3b20      	subs	r3, #32
 8005a48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	08005a5d 	.word	0x08005a5d

08005a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a66:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <prvTaskExitError+0x54>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d00a      	beq.n	8005a86 <prvTaskExitError+0x2a>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	60fb      	str	r3, [r7, #12]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <prvTaskExitError+0x28>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	60bb      	str	r3, [r7, #8]
}
 8005a98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a9a:	bf00      	nop
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0fc      	beq.n	8005a9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	2000000c 	.word	0x2000000c
	...

08005ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <pxCurrentTCBConst2>)
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	6808      	ldr	r0, [r1, #0]
 8005ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	f380 8809 	msr	PSP, r0
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f04f 0000 	mov.w	r0, #0
 8005ad6:	f380 8811 	msr	BASEPRI, r0
 8005ada:	4770      	bx	lr
 8005adc:	f3af 8000 	nop.w

08005ae0 <pxCurrentTCBConst2>:
 8005ae0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop

08005ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ae8:	4808      	ldr	r0, [pc, #32]	; (8005b0c <prvPortStartFirstTask+0x24>)
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	6800      	ldr	r0, [r0, #0]
 8005aee:	f380 8808 	msr	MSP, r0
 8005af2:	f04f 0000 	mov.w	r0, #0
 8005af6:	f380 8814 	msr	CONTROL, r0
 8005afa:	b662      	cpsie	i
 8005afc:	b661      	cpsie	f
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	df00      	svc	0
 8005b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b0a:	bf00      	nop
 8005b0c:	e000ed08 	.word	0xe000ed08

08005b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b16:	4b46      	ldr	r3, [pc, #280]	; (8005c30 <xPortStartScheduler+0x120>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a46      	ldr	r2, [pc, #280]	; (8005c34 <xPortStartScheduler+0x124>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10a      	bne.n	8005b36 <xPortStartScheduler+0x26>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	613b      	str	r3, [r7, #16]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b36:	4b3e      	ldr	r3, [pc, #248]	; (8005c30 <xPortStartScheduler+0x120>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3f      	ldr	r2, [pc, #252]	; (8005c38 <xPortStartScheduler+0x128>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d10a      	bne.n	8005b56 <xPortStartScheduler+0x46>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b56:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <xPortStartScheduler+0x12c>)
 8005b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	22ff      	movs	r2, #255	; 0xff
 8005b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <xPortStartScheduler+0x130>)
 8005b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b7e:	4b31      	ldr	r3, [pc, #196]	; (8005c44 <xPortStartScheduler+0x134>)
 8005b80:	2207      	movs	r2, #7
 8005b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b84:	e009      	b.n	8005b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b86:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <xPortStartScheduler+0x134>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <xPortStartScheduler+0x134>)
 8005b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d0ef      	beq.n	8005b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ba6:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <xPortStartScheduler+0x134>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1c3 0307 	rsb	r3, r3, #7
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d00a      	beq.n	8005bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60bb      	str	r3, [r7, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bc8:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <xPortStartScheduler+0x134>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <xPortStartScheduler+0x134>)
 8005bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bd2:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <xPortStartScheduler+0x134>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bda:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <xPortStartScheduler+0x134>)
 8005bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005be6:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <xPortStartScheduler+0x138>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <xPortStartScheduler+0x138>)
 8005bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <xPortStartScheduler+0x138>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <xPortStartScheduler+0x138>)
 8005bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bfe:	f000 f8dd 	bl	8005dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <xPortStartScheduler+0x13c>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c08:	f000 f8fc 	bl	8005e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <xPortStartScheduler+0x140>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a0f      	ldr	r2, [pc, #60]	; (8005c50 <xPortStartScheduler+0x140>)
 8005c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c18:	f7ff ff66 	bl	8005ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c1c:	f7fe ff70 	bl	8004b00 <vTaskSwitchContext>
	prvTaskExitError();
 8005c20:	f7ff ff1c 	bl	8005a5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	e000ed00 	.word	0xe000ed00
 8005c34:	410fc271 	.word	0x410fc271
 8005c38:	410fc270 	.word	0x410fc270
 8005c3c:	e000e400 	.word	0xe000e400
 8005c40:	20000f18 	.word	0x20000f18
 8005c44:	20000f1c 	.word	0x20000f1c
 8005c48:	e000ed20 	.word	0xe000ed20
 8005c4c:	2000000c 	.word	0x2000000c
 8005c50:	e000ef34 	.word	0xe000ef34

08005c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	607b      	str	r3, [r7, #4]
}
 8005c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <vPortEnterCritical+0x58>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <vPortEnterCritical+0x58>)
 8005c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c78:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <vPortEnterCritical+0x58>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10f      	bne.n	8005ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <vPortEnterCritical+0x5c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	603b      	str	r3, [r7, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <vPortEnterCritical+0x4a>
	}
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	2000000c 	.word	0x2000000c
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <vPortExitCritical+0x50>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <vPortExitCritical+0x24>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	607b      	str	r3, [r7, #4]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <vPortExitCritical+0x50>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <vPortExitCritical+0x50>)
 8005ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <vPortExitCritical+0x50>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <vPortExitCritical+0x42>
 8005cea:	2300      	movs	r3, #0
 8005cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	f383 8811 	msr	BASEPRI, r3
}
 8005cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c
	...

08005d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d10:	f3ef 8009 	mrs	r0, PSP
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <pxCurrentTCBConst>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	f01e 0f10 	tst.w	lr, #16
 8005d20:	bf08      	it	eq
 8005d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2a:	6010      	str	r0, [r2, #0]
 8005d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d34:	f380 8811 	msr	BASEPRI, r0
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f7fe fede 	bl	8004b00 <vTaskSwitchContext>
 8005d44:	f04f 0000 	mov.w	r0, #0
 8005d48:	f380 8811 	msr	BASEPRI, r0
 8005d4c:	bc09      	pop	{r0, r3}
 8005d4e:	6819      	ldr	r1, [r3, #0]
 8005d50:	6808      	ldr	r0, [r1, #0]
 8005d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d56:	f01e 0f10 	tst.w	lr, #16
 8005d5a:	bf08      	it	eq
 8005d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d60:	f380 8809 	msr	PSP, r0
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	f3af 8000 	nop.w

08005d70 <pxCurrentTCBConst>:
 8005d70:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop

08005d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	607b      	str	r3, [r7, #4]
}
 8005d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d92:	f7fe fdfb 	bl	800498c <xTaskIncrementTick>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <xPortSysTickHandler+0x40>)
 8005d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	2300      	movs	r3, #0
 8005da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f383 8811 	msr	BASEPRI, r3
}
 8005dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <vPortSetupTimerInterrupt+0x34>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <vPortSetupTimerInterrupt+0x38>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <vPortSetupTimerInterrupt+0x3c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <vPortSetupTimerInterrupt+0x40>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	099b      	lsrs	r3, r3, #6
 8005dd8:	4a09      	ldr	r2, [pc, #36]	; (8005e00 <vPortSetupTimerInterrupt+0x44>)
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <vPortSetupTimerInterrupt+0x34>)
 8005de0:	2207      	movs	r2, #7
 8005de2:	601a      	str	r2, [r3, #0]
}
 8005de4:	bf00      	nop
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	e000e010 	.word	0xe000e010
 8005df4:	e000e018 	.word	0xe000e018
 8005df8:	20000000 	.word	0x20000000
 8005dfc:	10624dd3 	.word	0x10624dd3
 8005e00:	e000e014 	.word	0xe000e014

08005e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e14 <vPortEnableVFP+0x10>
 8005e08:	6801      	ldr	r1, [r0, #0]
 8005e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e0e:	6001      	str	r1, [r0, #0]
 8005e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e12:	bf00      	nop
 8005e14:	e000ed88 	.word	0xe000ed88

08005e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e1e:	f3ef 8305 	mrs	r3, IPSR
 8005e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	d914      	bls.n	8005e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <vPortValidateInterruptPriority+0x70>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e34:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <vPortValidateInterruptPriority+0x74>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	7afa      	ldrb	r2, [r7, #11]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d20a      	bcs.n	8005e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	607b      	str	r3, [r7, #4]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e54:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <vPortValidateInterruptPriority+0x78>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <vPortValidateInterruptPriority+0x7c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d90a      	bls.n	8005e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	603b      	str	r3, [r7, #0]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <vPortValidateInterruptPriority+0x60>
	}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	e000e3f0 	.word	0xe000e3f0
 8005e8c:	20000f18 	.word	0x20000f18
 8005e90:	e000ed0c 	.word	0xe000ed0c
 8005e94:	20000f1c 	.word	0x20000f1c

08005e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ea4:	f7fe fcb6 	bl	8004814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ea8:	4b5b      	ldr	r3, [pc, #364]	; (8006018 <pvPortMalloc+0x180>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005eb0:	f000 f920 	bl	80060f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005eb4:	4b59      	ldr	r3, [pc, #356]	; (800601c <pvPortMalloc+0x184>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 8093 	bne.w	8005fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01d      	beq.n	8005f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ec8:	2208      	movs	r2, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d014      	beq.n	8005f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <pvPortMalloc+0x6c>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	617b      	str	r3, [r7, #20]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d06e      	beq.n	8005fe8 <pvPortMalloc+0x150>
 8005f0a:	4b45      	ldr	r3, [pc, #276]	; (8006020 <pvPortMalloc+0x188>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d869      	bhi.n	8005fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f14:	4b43      	ldr	r3, [pc, #268]	; (8006024 <pvPortMalloc+0x18c>)
 8005f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f18:	4b42      	ldr	r3, [pc, #264]	; (8006024 <pvPortMalloc+0x18c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f1e:	e004      	b.n	8005f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d903      	bls.n	8005f3c <pvPortMalloc+0xa4>
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f1      	bne.n	8005f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f3c:	4b36      	ldr	r3, [pc, #216]	; (8006018 <pvPortMalloc+0x180>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d050      	beq.n	8005fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	4413      	add	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	2308      	movs	r3, #8
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d91f      	bls.n	8005fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <pvPortMalloc+0xf8>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	613b      	str	r3, [r7, #16]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	1ad2      	subs	r2, r2, r3
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fa2:	69b8      	ldr	r0, [r7, #24]
 8005fa4:	f000 f908 	bl	80061b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <pvPortMalloc+0x188>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	4a1b      	ldr	r2, [pc, #108]	; (8006020 <pvPortMalloc+0x188>)
 8005fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <pvPortMalloc+0x188>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <pvPortMalloc+0x190>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d203      	bcs.n	8005fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fc2:	4b17      	ldr	r3, [pc, #92]	; (8006020 <pvPortMalloc+0x188>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a18      	ldr	r2, [pc, #96]	; (8006028 <pvPortMalloc+0x190>)
 8005fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4b13      	ldr	r3, [pc, #76]	; (800601c <pvPortMalloc+0x184>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <pvPortMalloc+0x194>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	4a11      	ldr	r2, [pc, #68]	; (800602c <pvPortMalloc+0x194>)
 8005fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fe8:	f7fe fc22 	bl	8004830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <pvPortMalloc+0x174>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	60fb      	str	r3, [r7, #12]
}
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <pvPortMalloc+0x172>
	return pvReturn;
 800600c:	69fb      	ldr	r3, [r7, #28]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3728      	adds	r7, #40	; 0x28
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20004b28 	.word	0x20004b28
 800601c:	20004b3c 	.word	0x20004b3c
 8006020:	20004b2c 	.word	0x20004b2c
 8006024:	20004b20 	.word	0x20004b20
 8006028:	20004b30 	.word	0x20004b30
 800602c:	20004b34 	.word	0x20004b34

08006030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04d      	beq.n	80060de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006042:	2308      	movs	r3, #8
 8006044:	425b      	negs	r3, r3
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <vPortFree+0xb8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4013      	ands	r3, r2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <vPortFree+0x44>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	60fb      	str	r3, [r7, #12]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <vPortFree+0x62>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60bb      	str	r3, [r7, #8]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	4b14      	ldr	r3, [pc, #80]	; (80060e8 <vPortFree+0xb8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01e      	beq.n	80060de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d11a      	bne.n	80060de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <vPortFree+0xb8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060b8:	f7fe fbac 	bl	8004814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <vPortFree+0xbc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4413      	add	r3, r2
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <vPortFree+0xbc>)
 80060c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f000 f874 	bl	80061b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <vPortFree+0xc0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	4a06      	ldr	r2, [pc, #24]	; (80060f0 <vPortFree+0xc0>)
 80060d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060da:	f7fe fba9 	bl	8004830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060de:	bf00      	nop
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20004b3c 	.word	0x20004b3c
 80060ec:	20004b2c 	.word	0x20004b2c
 80060f0:	20004b38 	.word	0x20004b38

080060f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <prvHeapInit+0xac>)
 8006102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00c      	beq.n	8006128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3307      	adds	r3, #7
 8006112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0307 	bic.w	r3, r3, #7
 800611a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <prvHeapInit+0xac>)
 8006124:	4413      	add	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800612c:	4a1d      	ldr	r2, [pc, #116]	; (80061a4 <prvHeapInit+0xb0>)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006132:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <prvHeapInit+0xb0>)
 8006134:	2200      	movs	r2, #0
 8006136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006140:	2208      	movs	r2, #8
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1a9b      	subs	r3, r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0307 	bic.w	r3, r3, #7
 800614e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <prvHeapInit+0xb4>)
 8006154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <prvHeapInit+0xb4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800615e:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <prvHeapInit+0xb4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <prvHeapInit+0xb4>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <prvHeapInit+0xb8>)
 8006182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <prvHeapInit+0xbc>)
 800618a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <prvHeapInit+0xc0>)
 800618e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006192:	601a      	str	r2, [r3, #0]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000f20 	.word	0x20000f20
 80061a4:	20004b20 	.word	0x20004b20
 80061a8:	20004b28 	.word	0x20004b28
 80061ac:	20004b30 	.word	0x20004b30
 80061b0:	20004b2c 	.word	0x20004b2c
 80061b4:	20004b3c 	.word	0x20004b3c

080061b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061c0:	4b28      	ldr	r3, [pc, #160]	; (8006264 <prvInsertBlockIntoFreeList+0xac>)
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e002      	b.n	80061cc <prvInsertBlockIntoFreeList+0x14>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d8f7      	bhi.n	80061c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	4413      	add	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d108      	bne.n	80061fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	441a      	add	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d118      	bne.n	8006240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <prvInsertBlockIntoFreeList+0xb0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d00d      	beq.n	8006236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	441a      	add	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e008      	b.n	8006248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <prvInsertBlockIntoFreeList+0xb0>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e003      	b.n	8006248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d002      	beq.n	8006256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20004b20 	.word	0x20004b20
 8006268:	20004b28 	.word	0x20004b28

0800626c <__libc_init_array>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4d0d      	ldr	r5, [pc, #52]	; (80062a4 <__libc_init_array+0x38>)
 8006270:	4c0d      	ldr	r4, [pc, #52]	; (80062a8 <__libc_init_array+0x3c>)
 8006272:	1b64      	subs	r4, r4, r5
 8006274:	10a4      	asrs	r4, r4, #2
 8006276:	2600      	movs	r6, #0
 8006278:	42a6      	cmp	r6, r4
 800627a:	d109      	bne.n	8006290 <__libc_init_array+0x24>
 800627c:	4d0b      	ldr	r5, [pc, #44]	; (80062ac <__libc_init_array+0x40>)
 800627e:	4c0c      	ldr	r4, [pc, #48]	; (80062b0 <__libc_init_array+0x44>)
 8006280:	f000 f8f2 	bl	8006468 <_init>
 8006284:	1b64      	subs	r4, r4, r5
 8006286:	10a4      	asrs	r4, r4, #2
 8006288:	2600      	movs	r6, #0
 800628a:	42a6      	cmp	r6, r4
 800628c:	d105      	bne.n	800629a <__libc_init_array+0x2e>
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	f855 3b04 	ldr.w	r3, [r5], #4
 8006294:	4798      	blx	r3
 8006296:	3601      	adds	r6, #1
 8006298:	e7ee      	b.n	8006278 <__libc_init_array+0xc>
 800629a:	f855 3b04 	ldr.w	r3, [r5], #4
 800629e:	4798      	blx	r3
 80062a0:	3601      	adds	r6, #1
 80062a2:	e7f2      	b.n	800628a <__libc_init_array+0x1e>
 80062a4:	0800659c 	.word	0x0800659c
 80062a8:	0800659c 	.word	0x0800659c
 80062ac:	0800659c 	.word	0x0800659c
 80062b0:	080065a0 	.word	0x080065a0

080062b4 <__retarget_lock_acquire_recursive>:
 80062b4:	4770      	bx	lr

080062b6 <__retarget_lock_release_recursive>:
 80062b6:	4770      	bx	lr

080062b8 <memcpy>:
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c0:	d100      	bne.n	80062c4 <memcpy+0xc>
 80062c2:	4770      	bx	lr
 80062c4:	b510      	push	{r4, lr}
 80062c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d1f9      	bne.n	80062c6 <memcpy+0xe>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <memset>:
 80062d4:	4402      	add	r2, r0
 80062d6:	4603      	mov	r3, r0
 80062d8:	4293      	cmp	r3, r2
 80062da:	d100      	bne.n	80062de <memset+0xa>
 80062dc:	4770      	bx	lr
 80062de:	f803 1b01 	strb.w	r1, [r3], #1
 80062e2:	e7f9      	b.n	80062d8 <memset+0x4>

080062e4 <cleanup_glue>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	460c      	mov	r4, r1
 80062e8:	6809      	ldr	r1, [r1, #0]
 80062ea:	4605      	mov	r5, r0
 80062ec:	b109      	cbz	r1, 80062f2 <cleanup_glue+0xe>
 80062ee:	f7ff fff9 	bl	80062e4 <cleanup_glue>
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062fa:	f000 b869 	b.w	80063d0 <_free_r>
	...

08006300 <_reclaim_reent>:
 8006300:	4b2c      	ldr	r3, [pc, #176]	; (80063b4 <_reclaim_reent+0xb4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4283      	cmp	r3, r0
 8006306:	b570      	push	{r4, r5, r6, lr}
 8006308:	4604      	mov	r4, r0
 800630a:	d051      	beq.n	80063b0 <_reclaim_reent+0xb0>
 800630c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800630e:	b143      	cbz	r3, 8006322 <_reclaim_reent+0x22>
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d14a      	bne.n	80063ac <_reclaim_reent+0xac>
 8006316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	b111      	cbz	r1, 8006322 <_reclaim_reent+0x22>
 800631c:	4620      	mov	r0, r4
 800631e:	f000 f857 	bl	80063d0 <_free_r>
 8006322:	6961      	ldr	r1, [r4, #20]
 8006324:	b111      	cbz	r1, 800632c <_reclaim_reent+0x2c>
 8006326:	4620      	mov	r0, r4
 8006328:	f000 f852 	bl	80063d0 <_free_r>
 800632c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800632e:	b111      	cbz	r1, 8006336 <_reclaim_reent+0x36>
 8006330:	4620      	mov	r0, r4
 8006332:	f000 f84d 	bl	80063d0 <_free_r>
 8006336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006338:	b111      	cbz	r1, 8006340 <_reclaim_reent+0x40>
 800633a:	4620      	mov	r0, r4
 800633c:	f000 f848 	bl	80063d0 <_free_r>
 8006340:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006342:	b111      	cbz	r1, 800634a <_reclaim_reent+0x4a>
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f843 	bl	80063d0 <_free_r>
 800634a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800634c:	b111      	cbz	r1, 8006354 <_reclaim_reent+0x54>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f83e 	bl	80063d0 <_free_r>
 8006354:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006356:	b111      	cbz	r1, 800635e <_reclaim_reent+0x5e>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f839 	bl	80063d0 <_free_r>
 800635e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006360:	b111      	cbz	r1, 8006368 <_reclaim_reent+0x68>
 8006362:	4620      	mov	r0, r4
 8006364:	f000 f834 	bl	80063d0 <_free_r>
 8006368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800636a:	b111      	cbz	r1, 8006372 <_reclaim_reent+0x72>
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f82f 	bl	80063d0 <_free_r>
 8006372:	69a3      	ldr	r3, [r4, #24]
 8006374:	b1e3      	cbz	r3, 80063b0 <_reclaim_reent+0xb0>
 8006376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006378:	4620      	mov	r0, r4
 800637a:	4798      	blx	r3
 800637c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800637e:	b1b9      	cbz	r1, 80063b0 <_reclaim_reent+0xb0>
 8006380:	4620      	mov	r0, r4
 8006382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006386:	f7ff bfad 	b.w	80062e4 <cleanup_glue>
 800638a:	5949      	ldr	r1, [r1, r5]
 800638c:	b941      	cbnz	r1, 80063a0 <_reclaim_reent+0xa0>
 800638e:	3504      	adds	r5, #4
 8006390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006392:	2d80      	cmp	r5, #128	; 0x80
 8006394:	68d9      	ldr	r1, [r3, #12]
 8006396:	d1f8      	bne.n	800638a <_reclaim_reent+0x8a>
 8006398:	4620      	mov	r0, r4
 800639a:	f000 f819 	bl	80063d0 <_free_r>
 800639e:	e7ba      	b.n	8006316 <_reclaim_reent+0x16>
 80063a0:	680e      	ldr	r6, [r1, #0]
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f814 	bl	80063d0 <_free_r>
 80063a8:	4631      	mov	r1, r6
 80063aa:	e7ef      	b.n	800638c <_reclaim_reent+0x8c>
 80063ac:	2500      	movs	r5, #0
 80063ae:	e7ef      	b.n	8006390 <_reclaim_reent+0x90>
 80063b0:	bd70      	pop	{r4, r5, r6, pc}
 80063b2:	bf00      	nop
 80063b4:	20000010 	.word	0x20000010

080063b8 <__malloc_lock>:
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <__malloc_lock+0x8>)
 80063ba:	f7ff bf7b 	b.w	80062b4 <__retarget_lock_acquire_recursive>
 80063be:	bf00      	nop
 80063c0:	20004b40 	.word	0x20004b40

080063c4 <__malloc_unlock>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__malloc_unlock+0x8>)
 80063c6:	f7ff bf76 	b.w	80062b6 <__retarget_lock_release_recursive>
 80063ca:	bf00      	nop
 80063cc:	20004b40 	.word	0x20004b40

080063d0 <_free_r>:
 80063d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d044      	beq.n	8006460 <_free_r+0x90>
 80063d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063da:	9001      	str	r0, [sp, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f1a1 0404 	sub.w	r4, r1, #4
 80063e2:	bfb8      	it	lt
 80063e4:	18e4      	addlt	r4, r4, r3
 80063e6:	f7ff ffe7 	bl	80063b8 <__malloc_lock>
 80063ea:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <_free_r+0x94>)
 80063ec:	9801      	ldr	r0, [sp, #4]
 80063ee:	6813      	ldr	r3, [r2, #0]
 80063f0:	b933      	cbnz	r3, 8006400 <_free_r+0x30>
 80063f2:	6063      	str	r3, [r4, #4]
 80063f4:	6014      	str	r4, [r2, #0]
 80063f6:	b003      	add	sp, #12
 80063f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063fc:	f7ff bfe2 	b.w	80063c4 <__malloc_unlock>
 8006400:	42a3      	cmp	r3, r4
 8006402:	d908      	bls.n	8006416 <_free_r+0x46>
 8006404:	6825      	ldr	r5, [r4, #0]
 8006406:	1961      	adds	r1, r4, r5
 8006408:	428b      	cmp	r3, r1
 800640a:	bf01      	itttt	eq
 800640c:	6819      	ldreq	r1, [r3, #0]
 800640e:	685b      	ldreq	r3, [r3, #4]
 8006410:	1949      	addeq	r1, r1, r5
 8006412:	6021      	streq	r1, [r4, #0]
 8006414:	e7ed      	b.n	80063f2 <_free_r+0x22>
 8006416:	461a      	mov	r2, r3
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	b10b      	cbz	r3, 8006420 <_free_r+0x50>
 800641c:	42a3      	cmp	r3, r4
 800641e:	d9fa      	bls.n	8006416 <_free_r+0x46>
 8006420:	6811      	ldr	r1, [r2, #0]
 8006422:	1855      	adds	r5, r2, r1
 8006424:	42a5      	cmp	r5, r4
 8006426:	d10b      	bne.n	8006440 <_free_r+0x70>
 8006428:	6824      	ldr	r4, [r4, #0]
 800642a:	4421      	add	r1, r4
 800642c:	1854      	adds	r4, r2, r1
 800642e:	42a3      	cmp	r3, r4
 8006430:	6011      	str	r1, [r2, #0]
 8006432:	d1e0      	bne.n	80063f6 <_free_r+0x26>
 8006434:	681c      	ldr	r4, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	6053      	str	r3, [r2, #4]
 800643a:	4421      	add	r1, r4
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	e7da      	b.n	80063f6 <_free_r+0x26>
 8006440:	d902      	bls.n	8006448 <_free_r+0x78>
 8006442:	230c      	movs	r3, #12
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	e7d6      	b.n	80063f6 <_free_r+0x26>
 8006448:	6825      	ldr	r5, [r4, #0]
 800644a:	1961      	adds	r1, r4, r5
 800644c:	428b      	cmp	r3, r1
 800644e:	bf04      	itt	eq
 8006450:	6819      	ldreq	r1, [r3, #0]
 8006452:	685b      	ldreq	r3, [r3, #4]
 8006454:	6063      	str	r3, [r4, #4]
 8006456:	bf04      	itt	eq
 8006458:	1949      	addeq	r1, r1, r5
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	6054      	str	r4, [r2, #4]
 800645e:	e7ca      	b.n	80063f6 <_free_r+0x26>
 8006460:	b003      	add	sp, #12
 8006462:	bd30      	pop	{r4, r5, pc}
 8006464:	20004b44 	.word	0x20004b44

08006468 <_init>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr

08006474 <_fini>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr
