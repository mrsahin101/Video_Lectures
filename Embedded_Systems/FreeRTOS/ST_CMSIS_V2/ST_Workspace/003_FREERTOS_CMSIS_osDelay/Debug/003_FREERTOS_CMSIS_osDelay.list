
003_FREERTOS_CMSIS_osDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004acc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b40  20004b40  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001991a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bf  00000000  00000000  000399be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003139  00000000  00000000  0003f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fc7  00000000  00000000  00042521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4b87  00000000  00000000  000584e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d06f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058ac  00000000  00000000  0012d0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ce8 	.word	0x08005ce8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005ce8 	.word	0x08005ce8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fae8 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f826 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8b6 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f88a 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f002 fd5a 	bl	8002ff0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <main+0x40>)
 800053e:	2100      	movs	r1, #0
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x44>)
 8000542:	f002 fd9f 	bl	8003084 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x48>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <main+0x4c>)
 800054e:	2100      	movs	r1, #0
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x50>)
 8000552:	f002 fd97 	bl	8003084 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <main+0x54>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f002 fd6c 	bl	8003038 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x3c>
 8000562:	bf00      	nop
 8000564:	08005d28 	.word	0x08005d28
 8000568:	080007b1 	.word	0x080007b1
 800056c:	200000d4 	.word	0x200000d4
 8000570:	08005d4c 	.word	0x08005d4c
 8000574:	080007d9 	.word	0x080007d9
 8000578:	200000d8 	.word	0x200000d8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fae2 	bl	8005b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe25 	bl	8001250 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f90a 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000618:	23b0      	movs	r3, #176	; 0xb0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f888 	bl	8001740 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000636:	f000 f8f5 	bl	8000824 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 fd5c 	bl	8002140 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f8c9 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000090 	.word	0x20000090
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a31      	ldr	r2, [pc, #196]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_GPIO_Init+0xe8>)
 800072e:	f000 fd37 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000736:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_GPIO_Init+0xec>)
 8000748:	f000 fb8e 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800074c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_GPIO_Init+0xe8>)
 8000766:	f000 fb7f 	bl	8000e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2006      	movs	r0, #6
 8000770:	f000 fabe 	bl	8000cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000774:	2006      	movs	r0, #6
 8000776:	f000 fad7 	bl	8000d28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000

08000790 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe99 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80007a2:	200a      	movs	r0, #10
 80007a4:	f7ff fe96 	bl	80004d4 <ITM_SendChar>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Task_action('1');
 80007b8:	2031      	movs	r0, #49	; 0x31
 80007ba:	f7ff ffe9 	bl	8000790 <Task_action>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <StartTask1+0x24>)
 80007c4:	f000 fd05 	bl	80011d2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f002 fcec 	bl	80031a8 <osDelay>
	Task_action('1');
 80007d0:	e7f2      	b.n	80007b8 <StartTask1+0x8>
 80007d2:	bf00      	nop
 80007d4:	40020c00 	.word	0x40020c00

080007d8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	Task_action('2');
 80007e0:	2032      	movs	r0, #50	; 0x32
 80007e2:	f7ff ffd5 	bl	8000790 <Task_action>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80007e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <StartTask2+0x24>)
 80007ec:	f000 fcf1 	bl	80011d2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80007f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f4:	f002 fcd8 	bl	80031a8 <osDelay>
	Task_action('2');
 80007f8:	e7f2      	b.n	80007e0 <StartTask2+0x8>
 80007fa:	bf00      	nop
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 f995 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40002000 	.word	0x40002000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_MspInit+0x54>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <HAL_MspInit+0x54>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x54>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_MspInit+0x54>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_MspInit+0x54>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x54>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	210f      	movs	r1, #15
 8000872:	f06f 0001 	mvn.w	r0, #1
 8000876:	f000 fa3b 	bl	8000cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_UART_MspInit+0x94>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d133      	bne.n	8000912 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e2:	230c      	movs	r3, #12
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <HAL_UART_MspInit+0x9c>)
 80008fe:	f000 fab3 	bl	8000e68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2105      	movs	r1, #5
 8000906:	2026      	movs	r0, #38	; 0x26
 8000908:	f000 f9f2 	bl	8000cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800090c:	2026      	movs	r0, #38	; 0x26
 800090e:	f000 fa0b 	bl	8000d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40004400 	.word	0x40004400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <HAL_InitTick+0xe4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a32      	ldr	r2, [pc, #200]	; (8000a0c <HAL_InitTick+0xe4>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <HAL_InitTick+0xe4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 0210 	add.w	r2, r7, #16
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 f90e 	bl	8001b80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096a:	2b00      	cmp	r3, #0
 800096c:	d103      	bne.n	8000976 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800096e:	f001 f8df 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8000972:	6378      	str	r0, [r7, #52]	; 0x34
 8000974:	e004      	b.n	8000980 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000976:	f001 f8db 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 800097a:	4603      	mov	r3, r0
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_InitTick+0xe8>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	0c9b      	lsrs	r3, r3, #18
 800098a:	3b01      	subs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_InitTick+0xec>)
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <HAL_InitTick+0xf0>)
 8000992:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_InitTick+0xec>)
 8000996:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_InitTick+0xec>)
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_InitTick+0xec>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_InitTick+0xec>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_InitTick+0xec>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009b4:	4817      	ldr	r0, [pc, #92]	; (8000a14 <HAL_InitTick+0xec>)
 80009b6:	f001 f915 	bl	8001be4 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d11b      	bne.n	8000a00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <HAL_InitTick+0xec>)
 80009ca:	f001 f965 	bl	8001c98 <HAL_TIM_Base_Start_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d111      	bne.n	8000a00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009dc:	202d      	movs	r0, #45	; 0x2d
 80009de:	f000 f9a3 	bl	8000d28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d808      	bhi.n	80009fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	202d      	movs	r0, #45	; 0x2d
 80009ee:	f000 f97f 	bl	8000cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_InitTick+0xf4>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	e002      	b.n	8000a00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3738      	adds	r7, #56	; 0x38
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	40002000 	.word	0x40002000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fbd9 	bl	8001208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USART2_IRQHandler+0x10>)
 8000a62:	f001 fbbb 	bl	80021dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000090 	.word	0x20000090

08000a70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a76:	f001 f97f 	bl	8001d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000dc 	.word	0x200000dc

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad2:	f7ff ffd7 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f005 f809 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd23 	bl	8000524 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aec:	08005df8 	.word	0x08005df8
  ldr r2, =_sbss
 8000af0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000af4:	20004b40 	.word	0x20004b40

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8d8 	bl	8000cda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f7ff fefc 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe7e 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000124 	.word	0x20000124

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000124 	.word	0x20000124

08000b80 <__NVIC_SetPriorityGrouping>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff4c 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d02:	f7ff ff61 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	6978      	ldr	r0, [r7, #20]
 8000d0e:	f7ff ffb1 	bl	8000c74 <NVIC_EncodePriority>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff80 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff54 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d52:	f7ff ff09 	bl	8000b68 <HAL_GetTick>
 8000d56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d008      	beq.n	8000d76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e052      	b.n	8000e1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0216 	bic.w	r2, r2, #22
 8000d84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <HAL_DMA_Abort+0x62>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d007      	beq.n	8000db6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0208 	bic.w	r2, r2, #8
 8000db4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc6:	e013      	b.n	8000df0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dc8:	f7ff fece 	bl	8000b68 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	d90c      	bls.n	8000df0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e015      	b.n	8000e1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1e4      	bne.n	8000dc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	223f      	movs	r2, #63	; 0x3f
 8000e04:	409a      	lsls	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d004      	beq.n	8000e42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00c      	b.n	8000e5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2205      	movs	r2, #5
 8000e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0201 	bic.w	r2, r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e16b      	b.n	800115c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 815a 	bne.w	8001156 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80b4 	beq.w	8001156 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b60      	ldr	r3, [pc, #384]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a5b      	ldr	r2, [pc, #364]	; (8001178 <HAL_GPIO_Init+0x310>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x314>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02b      	beq.n	800108e <HAL_GPIO_Init+0x226>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_GPIO_Init+0x318>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x222>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_GPIO_Init+0x31c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x21e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x320>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x21a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4e      	ldr	r2, [pc, #312]	; (800118c <HAL_GPIO_Init+0x324>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x216>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <HAL_GPIO_Init+0x328>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x212>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_GPIO_Init+0x32c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x20e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4b      	ldr	r2, [pc, #300]	; (8001198 <HAL_GPIO_Init+0x330>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x20a>
 800106e:	2307      	movs	r3, #7
 8001070:	e00e      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001072:	2308      	movs	r3, #8
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001076:	2306      	movs	r3, #6
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108e:	2300      	movs	r3, #0
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a0:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x310>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_GPIO_Init+0x334>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_GPIO_Init+0x334>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_GPIO_Init+0x334>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_GPIO_Init+0x334>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_GPIO_Init+0x334>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_GPIO_Init+0x334>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_GPIO_Init+0x334>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_GPIO_Init+0x334>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	f67f ae90 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40013800 	.word	0x40013800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40021c00 	.word	0x40021c00
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	400b      	ands	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f806 	bl	8001238 <HAL_GPIO_EXTI_Callback>
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e267      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b85      	ldr	r3, [pc, #532]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b82      	ldr	r3, [pc, #520]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b7e      	ldr	r3, [pc, #504]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e242      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a75      	ldr	r2, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b70      	ldr	r3, [pc, #448]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6f      	ldr	r2, [pc, #444]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a6c      	ldr	r2, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b69      	ldr	r3, [pc, #420]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc2e 	bl	8000b68 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fc2a 	bl	8000b68 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e207      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fc1a 	bl	8000b68 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fc16 	bl	8000b68 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1f3      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c7      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4937      	ldr	r1, [pc, #220]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fbcf 	bl	8000b68 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fbcb 	bl	8000b68 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1a8      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4925      	ldr	r1, [pc, #148]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fbae 	bl	8000b68 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fbaa 	bl	8000b68 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e187      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d036      	beq.n	80014a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fb8e 	bl	8000b68 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fb8a 	bl	8000b68 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e167      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e01b      	b.n	80014a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fb77 	bl	8000b68 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e00e      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fb73 	bl	8000b68 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d907      	bls.n	800149c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e150      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ea      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8097 	beq.w	80015e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a7c      	ldr	r2, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b77      	ldr	r3, [pc, #476]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a73      	ldr	r2, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb33 	bl	8000b68 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fb2f 	bl	8000b68 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e10c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x2ea>
 800152c:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	e01c      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x30c>
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5e      	ldr	r2, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a5b      	ldr	r2, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800155c:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a57      	ldr	r2, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 0304 	bic.w	r3, r3, #4
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d015      	beq.n	80015a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff faf4 	bl	8000b68 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff faf0 	bl	8000b68 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0cb      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ee      	beq.n	8001584 <HAL_RCC_OscConfig+0x334>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fade 	bl	8000b68 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fada 	bl	8000b68 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0b5      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ee      	bne.n	80015b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a38      	ldr	r2, [pc, #224]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a1 	beq.w	8001730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d05c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d141      	bne.n	8001686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff faae 	bl	8000b68 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff faaa 	bl	8000b68 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e087      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fa83 	bl	8000b68 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fa7f 	bl	8000b68 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e05c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x416>
 8001684:	e054      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fa6c 	bl	8000b68 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fa68 	bl	8000b68 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e045      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
 80016b2:	e03d      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e038      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d028      	beq.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d121      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d11a      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff f99a 	bl	8000b68 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff f996 	bl	8000b68 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f81e 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	08005d70 	.word	0x08005d70
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001910:	b094      	sub	sp, #80	; 0x50
 8001912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
 8001918:	2300      	movs	r3, #0
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001924:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d00d      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x40>
 8001930:	2b08      	cmp	r3, #8
 8001932:	f200 80e1 	bhi.w	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x34>
 800193a:	2b04      	cmp	r3, #4
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x3a>
 800193e:	e0db      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001944:	e0db      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194a:	e0d8      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	2200      	movs	r2, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
 800196c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
 800197a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	0159      	lsls	r1, r3, #5
 800198c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001990:	0150      	lsls	r0, r2, #5
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4621      	mov	r1, r4
 8001998:	1a51      	subs	r1, r2, r1
 800199a:	6139      	str	r1, [r7, #16]
 800199c:	4629      	mov	r1, r5
 800199e:	eb63 0301 	sbc.w	r3, r3, r1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b0:	4659      	mov	r1, fp
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	4651      	mov	r1, sl
 80019b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ba:	4651      	mov	r1, sl
 80019bc:	018a      	lsls	r2, r1, #6
 80019be:	4651      	mov	r1, sl
 80019c0:	ebb2 0801 	subs.w	r8, r2, r1
 80019c4:	4659      	mov	r1, fp
 80019c6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019de:	4690      	mov	r8, r2
 80019e0:	4699      	mov	r9, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	eb18 0303 	adds.w	r3, r8, r3
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	462b      	mov	r3, r5
 80019ec:	eb49 0303 	adc.w	r3, r9, r3
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fe:	4629      	mov	r1, r5
 8001a00:	024b      	lsls	r3, r1, #9
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a08:	4621      	mov	r1, r4
 8001a0a:	024a      	lsls	r2, r1, #9
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a12:	2200      	movs	r2, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a1c:	f7fe fbd8 	bl	80001d0 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a28:	e058      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	4611      	mov	r1, r2
 8001a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a44:	4642      	mov	r2, r8
 8001a46:	464b      	mov	r3, r9
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	0159      	lsls	r1, r3, #5
 8001a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a56:	0150      	lsls	r0, r2, #5
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a62:	4649      	mov	r1, r9
 8001a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a80:	eb63 050b 	sbc.w	r5, r3, fp
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	00eb      	lsls	r3, r5, #3
 8001a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	18e3      	adds	r3, r4, r3
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	eb45 0303 	adc.w	r3, r5, r3
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	028b      	lsls	r3, r1, #10
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001abc:	4621      	mov	r1, r4
 8001abe:	028a      	lsls	r2, r1, #10
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	61fa      	str	r2, [r7, #28]
 8001acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad0:	f7fe fb7e 	bl	80001d0 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3750      	adds	r7, #80	; 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08005d80 	.word	0x08005d80

08001b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b5c:	f7ff ffdc 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0b5b      	lsrs	r3, r3, #13
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08005d80 	.word	0x08005d80

08001b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_RCC_GetClockConfig+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e041      	b.n	8001c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f839 	bl	8001c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f000 f9d8 	bl	8001fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e04e      	b.n	8001d4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d022      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cda:	d01d      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d010      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3a:	e007      	b.n	8001d4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	40010400 	.word	0x40010400
 8001d70:	40014000 	.word	0x40014000
 8001d74:	40001800 	.word	0x40001800

08001d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d122      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0202 	mvn.w	r2, #2
 8001da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8ee 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8e0 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8f1 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0204 	mvn.w	r2, #4
 8001df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8c4 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8b6 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f8c7 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0208 	mvn.w	r2, #8
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2204      	movs	r2, #4
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f89a 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f88c 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f89d 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d11b      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0210 	mvn.w	r2, #16
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f870 	bl	8001f9c <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f862 	bl	8001f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f873 	bl	8001fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0201 	mvn.w	r2, #1
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fc82 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f902 	bl	800212c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f838 	bl	8001fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0220 	mvn.w	r2, #32
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8cc 	bl	8002118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a40      	ldr	r2, [pc, #256]	; (80020ec <TIM_Base_SetConfig+0x114>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d00f      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <TIM_Base_SetConfig+0x118>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00b      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3c      	ldr	r2, [pc, #240]	; (80020f4 <TIM_Base_SetConfig+0x11c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <TIM_Base_SetConfig+0x120>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d003      	beq.n	8002018 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <TIM_Base_SetConfig+0x124>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d108      	bne.n	800202a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <TIM_Base_SetConfig+0x114>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02b      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002038:	d027      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2c      	ldr	r2, [pc, #176]	; (80020f0 <TIM_Base_SetConfig+0x118>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d023      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <TIM_Base_SetConfig+0x11c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <TIM_Base_SetConfig+0x120>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01b      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a29      	ldr	r2, [pc, #164]	; (80020fc <TIM_Base_SetConfig+0x124>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d017      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a28      	ldr	r2, [pc, #160]	; (8002100 <TIM_Base_SetConfig+0x128>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <TIM_Base_SetConfig+0x12c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00f      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <TIM_Base_SetConfig+0x130>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00b      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <TIM_Base_SetConfig+0x134>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a24      	ldr	r2, [pc, #144]	; (8002110 <TIM_Base_SetConfig+0x138>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <TIM_Base_SetConfig+0x13c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d108      	bne.n	800209c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <TIM_Base_SetConfig+0x114>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0xf8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <TIM_Base_SetConfig+0x124>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d103      	bne.n	80020d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	615a      	str	r2, [r3, #20]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40000c00 	.word	0x40000c00
 80020fc:	40010400 	.word	0x40010400
 8002100:	40014000 	.word	0x40014000
 8002104:	40014400 	.word	0x40014400
 8002108:	40014800 	.word	0x40014800
 800210c:	40001800 	.word	0x40001800
 8002110:	40001c00 	.word	0x40001c00
 8002114:	40002000 	.word	0x40002000

08002118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e03f      	b.n	80021d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fb8e 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fc7b 	bl	8002a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0ba      	sub	sp, #232	; 0xe8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800220e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800221a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_UART_IRQHandler+0x66>
 800222e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fb65 	bl	800290a <UART_Receive_IT>
      return;
 8002240:	e256      	b.n	80026f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80de 	beq.w	8002408 <HAL_UART_IRQHandler+0x22c>
 800224c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800225c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80d1 	beq.w	8002408 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_UART_IRQHandler+0xae>
 8002272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800228a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_UART_IRQHandler+0xd2>
 8002296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_UART_IRQHandler+0xf6>
 80022ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0204 	orr.w	r2, r3, #4
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d011      	beq.n	8002302 <HAL_UART_IRQHandler+0x126>
 80022de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f043 0208 	orr.w	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 81ed 	beq.w	80026e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800230c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_UART_IRQHandler+0x14e>
 8002318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 faf0 	bl	800290a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <HAL_UART_IRQHandler+0x17a>
 800234e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04f      	beq.n	80023f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f9f8 	bl	800274c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d141      	bne.n	80023ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3314      	adds	r3, #20
 8002370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002378:	e853 3f00 	ldrex	r3, [r3]
 800237c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3314      	adds	r3, #20
 8002392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800239a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023a6:	e841 2300 	strex	r3, r2, [r1]
 80023aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1d9      	bne.n	800236a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d013      	beq.n	80023e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	4a7d      	ldr	r2, [pc, #500]	; (80025b8 <HAL_UART_IRQHandler+0x3dc>)
 80023c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fd2a 	bl	8000e24 <HAL_DMA_Abort_IT>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e0:	4610      	mov	r0, r2
 80023e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e4:	e00e      	b.n	8002404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f99a 	bl	8002720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ec:	e00a      	b.n	8002404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f996 	bl	8002720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f4:	e006      	b.n	8002404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f992 	bl	8002720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002402:	e170      	b.n	80026e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002404:	bf00      	nop
    return;
 8002406:	e16e      	b.n	80026e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	2b01      	cmp	r3, #1
 800240e:	f040 814a 	bne.w	80026a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8143 	beq.w	80026a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 813c 	beq.w	80026a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	f040 80b4 	bne.w	80025bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002460:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8140 	beq.w	80026ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800246e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002472:	429a      	cmp	r2, r3
 8002474:	f080 8139 	bcs.w	80026ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800247e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248a:	f000 8088 	beq.w	800259e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	330c      	adds	r3, #12
 8002494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800249c:	e853 3f00 	ldrex	r3, [r3]
 80024a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024ca:	e841 2300 	strex	r3, r2, [r1]
 80024ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1d9      	bne.n	800248e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3314      	adds	r3, #20
 80024e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3314      	adds	r3, #20
 80024fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002502:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002504:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e1      	bne.n	80024da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800252c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3314      	adds	r3, #20
 8002536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800253a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800253c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e3      	bne.n	8002516 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002566:	e853 3f00 	ldrex	r3, [r3]
 800256a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800256c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256e:	f023 0310 	bic.w	r3, r3, #16
 8002572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002580:	65ba      	str	r2, [r7, #88]	; 0x58
 8002582:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800258e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e3      	bne.n	800255c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fbd3 	bl	8000d44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8c0 	bl	8002734 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025b4:	e099      	b.n	80026ea <HAL_UART_IRQHandler+0x50e>
 80025b6:	bf00      	nop
 80025b8:	08002813 	.word	0x08002813
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 808b 	beq.w	80026ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8086 	beq.w	80026ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	330c      	adds	r3, #12
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002606:	647a      	str	r2, [r7, #68]	; 0x44
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800260c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800260e:	e841 2300 	strex	r3, r2, [r1]
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1e3      	bne.n	80025e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3314      	adds	r3, #20
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	e853 3f00 	ldrex	r3, [r3]
 8002628:	623b      	str	r3, [r7, #32]
   return(result);
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3314      	adds	r3, #20
 800263a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800263e:	633a      	str	r2, [r7, #48]	; 0x30
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e3      	bne.n	800261a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	e853 3f00 	ldrex	r3, [r3]
 800266e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0310 	bic.w	r3, r3, #16
 8002676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	330c      	adds	r3, #12
 8002680:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002684:	61fa      	str	r2, [r7, #28]
 8002686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002688:	69b9      	ldr	r1, [r7, #24]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	e841 2300 	strex	r3, r2, [r1]
 8002690:	617b      	str	r3, [r7, #20]
   return(result);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e3      	bne.n	8002660 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f848 	bl	8002734 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026a4:	e023      	b.n	80026ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_UART_IRQHandler+0x4ea>
 80026b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8bb 	bl	800283a <UART_Transmit_IT>
    return;
 80026c4:	e014      	b.n	80026f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00e      	beq.n	80026f0 <HAL_UART_IRQHandler+0x514>
 80026d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8fb 	bl	80028da <UART_EndTransmit_IT>
    return;
 80026e4:	e004      	b.n	80026f0 <HAL_UART_IRQHandler+0x514>
    return;
 80026e6:	bf00      	nop
 80026e8:	e002      	b.n	80026f0 <HAL_UART_IRQHandler+0x514>
      return;
 80026ea:	bf00      	nop
 80026ec:	e000      	b.n	80026f0 <HAL_UART_IRQHandler+0x514>
      return;
 80026ee:	bf00      	nop
  }
}
 80026f0:	37e8      	adds	r7, #232	; 0xe8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop

080026f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800274c:	b480      	push	{r7}
 800274e:	b095      	sub	sp, #84	; 0x54
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002774:	643a      	str	r2, [r7, #64]	; 0x40
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800277a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800277c:	e841 2300 	strex	r3, r2, [r1]
 8002780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e5      	bne.n	8002754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3314      	adds	r3, #20
 800278e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	e853 3f00 	ldrex	r3, [r3]
 8002796:	61fb      	str	r3, [r7, #28]
   return(result);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3314      	adds	r3, #20
 80027a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b0:	e841 2300 	strex	r3, r2, [r1]
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d119      	bne.n	80027f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f023 0310 	bic.w	r3, r3, #16
 80027da:	647b      	str	r3, [r7, #68]	; 0x44
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	330c      	adds	r3, #12
 80027e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027e4:	61ba      	str	r2, [r7, #24]
 80027e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6979      	ldr	r1, [r7, #20]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	613b      	str	r3, [r7, #16]
   return(result);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e5      	bne.n	80027c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002806:	bf00      	nop
 8002808:	3754      	adds	r7, #84	; 0x54
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ff77 	bl	8002720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b21      	cmp	r3, #33	; 0x21
 800284c:	d13e      	bne.n	80028cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	d114      	bne.n	8002882 <UART_Transmit_IT+0x48>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d110      	bne.n	8002882 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002874:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	1c9a      	adds	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	621a      	str	r2, [r3, #32]
 8002880:	e008      	b.n	8002894 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6211      	str	r1, [r2, #32]
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4619      	mov	r1, r3
 80028a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fefc 	bl	80026f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b08c      	sub	sp, #48	; 0x30
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b22      	cmp	r3, #34	; 0x22
 800291c:	f040 80ab 	bne.w	8002a76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	d117      	bne.n	800295a <UART_Receive_IT+0x50>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d113      	bne.n	800295a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	b29a      	uxth	r2, r3
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	1c9a      	adds	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
 8002958:	e026      	b.n	80029a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296c:	d007      	beq.n	800297e <UART_Receive_IT+0x74>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <UART_Receive_IT+0x82>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e008      	b.n	800299e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002998:	b2da      	uxtb	r2, r3
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4619      	mov	r1, r3
 80029b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d15a      	bne.n	8002a72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0220 	bic.w	r2, r2, #32
 80029ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d135      	bne.n	8002a68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	613b      	str	r3, [r7, #16]
   return(result);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f023 0310 	bic.w	r3, r3, #16
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	623a      	str	r2, [r7, #32]
 8002a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	69f9      	ldr	r1, [r7, #28]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e5      	bne.n	8002a02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d10a      	bne.n	8002a5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fe67 	bl	8002734 <HAL_UARTEx_RxEventCallback>
 8002a66:	e002      	b.n	8002a6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe4f 	bl	800270c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e002      	b.n	8002a78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3730      	adds	r7, #48	; 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b0c0      	sub	sp, #256	; 0x100
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	ea40 0301 	orr.w	r3, r0, r1
 8002aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ad8:	f021 010c 	bic.w	r1, r1, #12
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afa:	6999      	ldr	r1, [r3, #24]
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	ea40 0301 	orr.w	r3, r0, r1
 8002b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b8f      	ldr	r3, [pc, #572]	; (8002d4c <UART_SetConfig+0x2cc>)
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d005      	beq.n	8002b20 <UART_SetConfig+0xa0>
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b8d      	ldr	r3, [pc, #564]	; (8002d50 <UART_SetConfig+0x2d0>)
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d104      	bne.n	8002b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff f81a 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 8002b24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b28:	e003      	b.n	8002b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b2a:	f7ff f801 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3c:	f040 810c 	bne.w	8002d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b52:	4622      	mov	r2, r4
 8002b54:	462b      	mov	r3, r5
 8002b56:	1891      	adds	r1, r2, r2
 8002b58:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b5a:	415b      	adcs	r3, r3
 8002b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b62:	4621      	mov	r1, r4
 8002b64:	eb12 0801 	adds.w	r8, r2, r1
 8002b68:	4629      	mov	r1, r5
 8002b6a:	eb43 0901 	adc.w	r9, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb18 0303 	adds.w	r3, r8, r3
 8002b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b90:	462b      	mov	r3, r5
 8002b92:	eb49 0303 	adc.w	r3, r9, r3
 8002b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bae:	460b      	mov	r3, r1
 8002bb0:	18db      	adds	r3, r3, r3
 8002bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	657b      	str	r3, [r7, #84]	; 0x54
 8002bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bc4:	f7fd fb04 	bl	80001d0 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002bce:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	011c      	lsls	r4, r3, #4
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002be0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	1891      	adds	r1, r2, r2
 8002bee:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8002bfe:	4649      	mov	r1, r9
 8002c00:	eb43 0b01 	adc.w	fp, r3, r1
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c18:	4692      	mov	sl, r2
 8002c1a:	469b      	mov	fp, r3
 8002c1c:	4643      	mov	r3, r8
 8002c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c26:	464b      	mov	r3, r9
 8002c28:	eb4b 0303 	adc.w	r3, fp, r3
 8002c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c44:	460b      	mov	r3, r1
 8002c46:	18db      	adds	r3, r3, r3
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	eb42 0303 	adc.w	r3, r2, r3
 8002c50:	647b      	str	r3, [r7, #68]	; 0x44
 8002c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c5a:	f7fd fab9 	bl	80001d0 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002c66:	fba3 2301 	umull	r2, r3, r3, r1
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2264      	movs	r2, #100	; 0x64
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c88:	441c      	add	r4, r3
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cac:	4641      	mov	r1, r8
 8002cae:	1851      	adds	r1, r2, r1
 8002cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	414b      	adcs	r3, r1
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4651      	mov	r1, sl
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4642      	mov	r2, r8
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d00:	460b      	mov	r3, r1
 8002d02:	18db      	adds	r3, r3, r3
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d06:	4613      	mov	r3, r2
 8002d08:	eb42 0303 	adc.w	r3, r2, r3
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d16:	f7fd fa5b 	bl	80001d0 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002d20:	fba3 1302 	umull	r1, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	2164      	movs	r1, #100	; 0x64
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3332      	adds	r3, #50	; 0x32
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	f003 0207 	and.w	r2, r3, #7
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4422      	add	r2, r4
 8002d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d48:	e105      	b.n	8002f56 <UART_SetConfig+0x4d6>
 8002d4a:	bf00      	nop
 8002d4c:	40011000 	.word	0x40011000
 8002d50:	40011400 	.word	0x40011400
 8002d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d6a:	4642      	mov	r2, r8
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	1891      	adds	r1, r2, r2
 8002d70:	6239      	str	r1, [r7, #32]
 8002d72:	415b      	adcs	r3, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	1854      	adds	r4, r2, r1
 8002d7e:	4649      	mov	r1, r9
 8002d80:	eb43 0501 	adc.w	r5, r3, r1
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	00eb      	lsls	r3, r5, #3
 8002d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4643      	mov	r3, r8
 8002d9a:	18e3      	adds	r3, r4, r3
 8002d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002da0:	464b      	mov	r3, r9
 8002da2:	eb45 0303 	adc.w	r3, r5, r3
 8002da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002db6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	008b      	lsls	r3, r1, #2
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	008a      	lsls	r2, r1, #2
 8002dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dd8:	f7fd f9fa 	bl	80001d0 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002de2:	fba3 2302 	umull	r2, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	011c      	lsls	r4, r3, #4
 8002dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002df4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	1891      	adds	r1, r2, r2
 8002e02:	61b9      	str	r1, [r7, #24]
 8002e04:	415b      	adcs	r3, r3
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	1851      	adds	r1, r2, r1
 8002e10:	6139      	str	r1, [r7, #16]
 8002e12:	4649      	mov	r1, r9
 8002e14:	414b      	adcs	r3, r1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e24:	4659      	mov	r1, fp
 8002e26:	00cb      	lsls	r3, r1, #3
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2e:	4651      	mov	r1, sl
 8002e30:	00ca      	lsls	r2, r1, #3
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	4642      	mov	r2, r8
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e40:	464b      	mov	r3, r9
 8002e42:	460a      	mov	r2, r1
 8002e44:	eb42 0303 	adc.w	r3, r2, r3
 8002e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e64:	4649      	mov	r1, r9
 8002e66:	008b      	lsls	r3, r1, #2
 8002e68:	4641      	mov	r1, r8
 8002e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6e:	4641      	mov	r1, r8
 8002e70:	008a      	lsls	r2, r1, #2
 8002e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e76:	f7fd f9ab 	bl	80001d0 <__aeabi_uldivmod>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002e80:	fba3 1302 	umull	r1, r3, r3, r2
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	2164      	movs	r1, #100	; 0x64
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	3332      	adds	r3, #50	; 0x32
 8002e92:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9e:	441c      	add	r4, r3
 8002ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ea8:	677a      	str	r2, [r7, #116]	; 0x74
 8002eaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1851      	adds	r1, r2, r1
 8002ec2:	6039      	str	r1, [r7, #0]
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	414b      	adcs	r3, r1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	00cb      	lsls	r3, r1, #3
 8002eda:	4651      	mov	r1, sl
 8002edc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	00ca      	lsls	r2, r1, #3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4642      	mov	r2, r8
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	663b      	str	r3, [r7, #96]	; 0x60
 8002f04:	667a      	str	r2, [r7, #100]	; 0x64
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f12:	4649      	mov	r1, r9
 8002f14:	008b      	lsls	r3, r1, #2
 8002f16:	4641      	mov	r1, r8
 8002f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	008a      	lsls	r2, r1, #2
 8002f20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f24:	f7fd f954 	bl	80001d0 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2164      	movs	r1, #100	; 0x64
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	3332      	adds	r3, #50	; 0x32
 8002f40:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4422      	add	r2, r4
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	bf00      	nop
 8002f58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f62:	bf00      	nop
 8002f64:	51eb851f 	.word	0x51eb851f

08002f68 <__NVIC_SetPriority>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <SysTick_Handler+0x1c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002fc4:	f001 fd28 	bl	8004a18 <xTaskGetSchedulerState>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002fce:	f002 fb13 	bl	80055f8 <xPortSysTickHandler>
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	e000e010 	.word	0xe000e010

08002fdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	f06f 0004 	mvn.w	r0, #4
 8002fe6:	f7ff ffbf 	bl	8002f68 <__NVIC_SetPriority>
#endif
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff6:	f3ef 8305 	mrs	r3, IPSR
 8002ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8002ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003002:	f06f 0305 	mvn.w	r3, #5
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	e00c      	b.n	8003024 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <osKernelInitialize+0x44>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <osKernelInitialize+0x44>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003018:	2300      	movs	r3, #0
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	e002      	b.n	8003024 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003024:	687b      	ldr	r3, [r7, #4]
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000128 	.word	0x20000128

08003038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800303e:	f3ef 8305 	mrs	r3, IPSR
 8003042:	603b      	str	r3, [r7, #0]
  return(result);
 8003044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <osKernelStart+0x1a>
    stat = osErrorISR;
 800304a:	f06f 0305 	mvn.w	r3, #5
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	e010      	b.n	8003074 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <osKernelStart+0x48>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d109      	bne.n	800306e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800305a:	f7ff ffbf 	bl	8002fdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <osKernelStart+0x48>)
 8003060:	2202      	movs	r2, #2
 8003062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003064:	f001 f87c 	bl	8004160 <vTaskStartScheduler>
      stat = osOK;
 8003068:	2300      	movs	r3, #0
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	e002      	b.n	8003074 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003074:	687b      	ldr	r3, [r7, #4]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000128 	.word	0x20000128

08003084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af04      	add	r7, sp, #16
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003094:	f3ef 8305 	mrs	r3, IPSR
 8003098:	617b      	str	r3, [r7, #20]
  return(result);
 800309a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800309c:	2b00      	cmp	r3, #0
 800309e:	d17e      	bne.n	800319e <osThreadNew+0x11a>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d07b      	beq.n	800319e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030aa:	2318      	movs	r3, #24
 80030ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d045      	beq.n	800314a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <osThreadNew+0x48>
        name = attr->name;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <osThreadNew+0x6e>
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b38      	cmp	r3, #56	; 0x38
 80030e4:	d805      	bhi.n	80030f2 <osThreadNew+0x6e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <osThreadNew+0x72>
        return (NULL);
 80030f2:	2300      	movs	r3, #0
 80030f4:	e054      	b.n	80031a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <osThreadNew+0xa8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2bbb      	cmp	r3, #187	; 0xbb
 8003114:	d90a      	bls.n	800312c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <osThreadNew+0xa8>
        mem = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e010      	b.n	800314e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10c      	bne.n	800314e <osThreadNew+0xca>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <osThreadNew+0xca>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <osThreadNew+0xca>
          mem = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e001      	b.n	800314e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d110      	bne.n	8003176 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800315c:	9202      	str	r2, [sp, #8]
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6a3a      	ldr	r2, [r7, #32]
 8003168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fe0c 	bl	8003d88 <xTaskCreateStatic>
 8003170:	4603      	mov	r3, r0
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e013      	b.n	800319e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d110      	bne.n	800319e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	b29a      	uxth	r2, r3
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fe57 	bl	8003e42 <xTaskCreate>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <osThreadNew+0x11a>
            hTask = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800319e:	693b      	ldr	r3, [r7, #16]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3728      	adds	r7, #40	; 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b0:	f3ef 8305 	mrs	r3, IPSR
 80031b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <osDelay+0x1c>
    stat = osErrorISR;
 80031bc:	f06f 0305 	mvn.w	r3, #5
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	e007      	b.n	80031d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 ff92 	bl	80040f8 <vTaskDelay>
    }
  }

  return (stat);
 80031d4:	68fb      	ldr	r3, [r7, #12]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a07      	ldr	r2, [pc, #28]	; (800320c <vApplicationGetIdleTaskMemory+0x2c>)
 80031f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4a06      	ldr	r2, [pc, #24]	; (8003210 <vApplicationGetIdleTaskMemory+0x30>)
 80031f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	601a      	str	r2, [r3, #0]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	2000012c 	.word	0x2000012c
 8003210:	200001e8 	.word	0x200001e8

08003214 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <vApplicationGetTimerTaskMemory+0x2c>)
 8003224:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <vApplicationGetTimerTaskMemory+0x30>)
 800322a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003232:	601a      	str	r2, [r3, #0]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	200003e8 	.word	0x200003e8
 8003244:	200004a4 	.word	0x200004a4

08003248 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f103 0208 	add.w	r2, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f103 0208 	add.w	r2, r3, #8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f103 0208 	add.w	r2, r3, #8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	601a      	str	r2, [r3, #0]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d103      	bne.n	800330a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e00c      	b.n	8003324 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3308      	adds	r3, #8
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e002      	b.n	8003318 <vListInsert+0x2e>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d2f6      	bcs.n	8003312 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	601a      	str	r2, [r3, #0]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6892      	ldr	r2, [r2, #8]
 8003372:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6852      	ldr	r2, [r2, #4]
 800337c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d103      	bne.n	8003390 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1e5a      	subs	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033da:	f002 f87b 	bl	80054d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	441a      	add	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	3b01      	subs	r3, #1
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	441a      	add	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	22ff      	movs	r2, #255	; 0xff
 8003426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d114      	bne.n	800345a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01a      	beq.n	800346e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3310      	adds	r3, #16
 800343c:	4618      	mov	r0, r3
 800343e:	f001 f929 	bl	8004694 <xTaskRemoveFromEventList>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <xQueueGenericReset+0xcc>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	e009      	b.n	800346e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3310      	adds	r3, #16
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fef2 	bl	8003248 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3324      	adds	r3, #36	; 0x24
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff feed 	bl	8003248 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800346e:	f002 f861 	bl	8005534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003472:	2301      	movs	r3, #1
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	e000ed04 	.word	0xe000ed04

08003480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <xQueueGenericCreateStatic+0x52>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <xQueueGenericCreateStatic+0x56>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <xQueueGenericCreateStatic+0x58>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	623b      	str	r3, [r7, #32]
}
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <xQueueGenericCreateStatic+0x7e>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueGenericCreateStatic+0x82>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueGenericCreateStatic+0x84>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61fb      	str	r3, [r7, #28]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800351e:	2350      	movs	r3, #80	; 0x50
 8003520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b50      	cmp	r3, #80	; 0x50
 8003526:	d00a      	beq.n	800353e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	61bb      	str	r3, [r7, #24]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800353e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003552:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f805 	bl	8003570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003568:	4618      	mov	r0, r3
 800356a:	3730      	adds	r7, #48	; 0x30
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e002      	b.n	8003592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800359e:	2101      	movs	r1, #1
 80035a0:	69b8      	ldr	r0, [r7, #24]
 80035a2:	f7ff ff05 	bl	80033b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08e      	sub	sp, #56	; 0x38
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035c6:	2300      	movs	r3, #0
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xQueueGenericSend+0x32>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <xQueueGenericSend+0x40>
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <xQueueGenericSend+0x44>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <xQueueGenericSend+0x46>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <xQueueGenericSend+0x60>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003614:	bf00      	nop
 8003616:	e7fe      	b.n	8003616 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d103      	bne.n	8003626 <xQueueGenericSend+0x6e>
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <xQueueGenericSend+0x72>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueGenericSend+0x74>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericSend+0x8e>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	623b      	str	r3, [r7, #32]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003646:	f001 f9e7 	bl	8004a18 <xTaskGetSchedulerState>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <xQueueGenericSend+0x9e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <xQueueGenericSend+0xa2>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueGenericSend+0xa4>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xQueueGenericSend+0xbe>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	61fb      	str	r3, [r7, #28]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003676:	f001 ff2d 	bl	80054d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <xQueueGenericSend+0xd4>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d129      	bne.n	80036e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003692:	f000 fa0b 	bl	8003aac <prvCopyDataToQueue>
 8003696:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	3324      	adds	r3, #36	; 0x24
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fff5 	bl	8004694 <xTaskRemoveFromEventList>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <xQueueGenericSend+0x1f8>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	e00a      	b.n	80036d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036c8:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <xQueueGenericSend+0x1f8>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036d8:	f001 ff2c 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 80036dc:	2301      	movs	r3, #1
 80036de:	e063      	b.n	80037a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036e6:	f001 ff25 	bl	8005534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e05c      	b.n	80037a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f82f 	bl	800475c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036fe:	2301      	movs	r3, #1
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003702:	f001 ff17 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003706:	f000 fd9b 	bl	8004240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800370a:	f001 fee3 	bl	80054d4 <vPortEnterCritical>
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003714:	b25b      	sxtb	r3, r3
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d103      	bne.n	8003724 <xQueueGenericSend+0x16c>
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800372a:	b25b      	sxtb	r3, r3
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d103      	bne.n	800373a <xQueueGenericSend+0x182>
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800373a:	f001 fefb 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800373e:	1d3a      	adds	r2, r7, #4
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f001 f81e 	bl	8004788 <xTaskCheckForTimeOut>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d124      	bne.n	800379c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003754:	f000 faa2 	bl	8003c9c <prvIsQueueFull>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d018      	beq.n	8003790 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	3310      	adds	r3, #16
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 ff44 	bl	80045f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800376c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800376e:	f000 fa2d 	bl	8003bcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003772:	f000 fd73 	bl	800425c <xTaskResumeAll>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f47f af7c 	bne.w	8003676 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <xQueueGenericSend+0x1f8>)
 8003780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	e772      	b.n	8003676 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003792:	f000 fa1b 	bl	8003bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003796:	f000 fd61 	bl	800425c <xTaskResumeAll>
 800379a:	e76c      	b.n	8003676 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800379c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800379e:	f000 fa15 	bl	8003bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037a2:	f000 fd5b 	bl	800425c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3738      	adds	r7, #56	; 0x38
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b090      	sub	sp, #64	; 0x40
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <xQueueGenericSendFromISR+0x3c>
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <xQueueGenericSendFromISR+0x40>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <xQueueGenericSendFromISR+0x42>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d103      	bne.n	800381e <xQueueGenericSendFromISR+0x6a>
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <xQueueGenericSendFromISR+0x6e>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueGenericSendFromISR+0x70>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	623b      	str	r3, [r7, #32]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800383e:	f001 ff2b 	bl	8005698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003842:	f3ef 8211 	mrs	r2, BASEPRI
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	61fa      	str	r2, [r7, #28]
 8003858:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800385a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <xQueueGenericSendFromISR+0xbc>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d12f      	bne.n	80038d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003886:	f000 f911 	bl	8003aac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800388a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d112      	bne.n	80038ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d016      	beq.n	80038ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fef7 	bl	8004694 <xTaskRemoveFromEventList>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e007      	b.n	80038ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038be:	3301      	adds	r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	b25a      	sxtb	r2, r3
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038ca:	2301      	movs	r3, #1
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80038ce:	e001      	b.n	80038d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3740      	adds	r7, #64	; 0x40
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <xQueueReceive+0x30>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	623b      	str	r3, [r7, #32]
}
 8003918:	bf00      	nop
 800391a:	e7fe      	b.n	800391a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <xQueueReceive+0x3e>
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <xQueueReceive+0x42>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueReceive+0x44>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <xQueueReceive+0x5e>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	61fb      	str	r3, [r7, #28]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800394a:	f001 f865 	bl	8004a18 <xTaskGetSchedulerState>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <xQueueReceive+0x6e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <xQueueReceive+0x72>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueReceive+0x74>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueReceive+0x8e>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61bb      	str	r3, [r7, #24]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800397a:	f001 fdab 	bl	80054d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01f      	beq.n	80039ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800398e:	f000 f8f7 	bl	8003b80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	1e5a      	subs	r2, r3, #1
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00f      	beq.n	80039c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	3310      	adds	r3, #16
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fe74 	bl	8004694 <xTaskRemoveFromEventList>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <xQueueReceive+0x1bc>)
 80039b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039c2:	f001 fdb7 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e069      	b.n	8003a9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039d0:	f001 fdb0 	bl	8005534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e062      	b.n	8003a9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039de:	f107 0310 	add.w	r3, r7, #16
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 feba 	bl	800475c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ec:	f001 fda2 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039f0:	f000 fc26 	bl	8004240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039f4:	f001 fd6e 	bl	80054d4 <vPortEnterCritical>
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d103      	bne.n	8003a0e <xQueueReceive+0x122>
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d103      	bne.n	8003a24 <xQueueReceive+0x138>
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a24:	f001 fd86 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a28:	1d3a      	adds	r2, r7, #4
 8003a2a:	f107 0310 	add.w	r3, r7, #16
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fea9 	bl	8004788 <xTaskCheckForTimeOut>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d123      	bne.n	8003a84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a3e:	f000 f917 	bl	8003c70 <prvIsQueueEmpty>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d017      	beq.n	8003a78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	3324      	adds	r3, #36	; 0x24
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fdcf 	bl	80045f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a58:	f000 f8b8 	bl	8003bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a5c:	f000 fbfe 	bl	800425c <xTaskResumeAll>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d189      	bne.n	800397a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <xQueueReceive+0x1bc>)
 8003a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	e780      	b.n	800397a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a7a:	f000 f8a7 	bl	8003bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a7e:	f000 fbed 	bl	800425c <xTaskResumeAll>
 8003a82:	e77a      	b.n	800397a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a86:	f000 f8a1 	bl	8003bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a8a:	f000 fbe7 	bl	800425c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a90:	f000 f8ee 	bl	8003c70 <prvIsQueueEmpty>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f43f af6f 	beq.w	800397a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3730      	adds	r7, #48	; 0x30
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d14d      	bne.n	8003b6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 ffbc 	bl	8004a54 <xTaskPriorityDisinherit>
 8003adc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	e043      	b.n	8003b6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d119      	bne.n	8003b20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6858      	ldr	r0, [r3, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	461a      	mov	r2, r3
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	f002 f81e 	bl	8005b38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	441a      	add	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d32b      	bcc.n	8003b6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	e026      	b.n	8003b6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68d8      	ldr	r0, [r3, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	f002 f804 	bl	8005b38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	425b      	negs	r3, r3
 8003b3a:	441a      	add	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d207      	bcs.n	8003b5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	425b      	negs	r3, r3
 8003b56:	441a      	add	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d105      	bne.n	8003b6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b76:	697b      	ldr	r3, [r7, #20]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d018      	beq.n	8003bc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	441a      	add	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d303      	bcc.n	8003bb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68d9      	ldr	r1, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6838      	ldr	r0, [r7, #0]
 8003bc0:	f001 ffba 	bl	8005b38 <memcpy>
	}
}
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bd4:	f001 fc7e 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003be0:	e011      	b.n	8003c06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3324      	adds	r3, #36	; 0x24
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fd50 	bl	8004694 <xTaskRemoveFromEventList>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bfa:	f000 fe27 	bl	800484c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	dce9      	bgt.n	8003be2 <prvUnlockQueue+0x16>
 8003c0e:	e000      	b.n	8003c12 <prvUnlockQueue+0x46>
					break;
 8003c10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c1a:	f001 fc8b 	bl	8005534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c1e:	f001 fc59 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c2a:	e011      	b.n	8003c50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d012      	beq.n	8003c5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3310      	adds	r3, #16
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd2b 	bl	8004694 <xTaskRemoveFromEventList>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c44:	f000 fe02 	bl	800484c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	dce9      	bgt.n	8003c2c <prvUnlockQueue+0x60>
 8003c58:	e000      	b.n	8003c5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	22ff      	movs	r2, #255	; 0xff
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c64:	f001 fc66 	bl	8005534 <vPortExitCritical>
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c78:	f001 fc2c 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e001      	b.n	8003c8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c8e:	f001 fc51 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8003c92:	68fb      	ldr	r3, [r7, #12]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ca4:	f001 fc16 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d102      	bne.n	8003cba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e001      	b.n	8003cbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cbe:	f001 fc39 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e014      	b.n	8003d06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <vQueueAddToRegistry+0x50>)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ce8:	490c      	ldr	r1, [pc, #48]	; (8003d1c <vQueueAddToRegistry+0x50>)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <vQueueAddToRegistry+0x50>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cfe:	e006      	b.n	8003d0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b07      	cmp	r3, #7
 8003d0a:	d9e7      	bls.n	8003cdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	200008a4 	.word	0x200008a4

08003d20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d30:	f001 fbd0 	bl	80054d4 <vPortEnterCritical>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d103      	bne.n	8003d4a <vQueueWaitForMessageRestricted+0x2a>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d50:	b25b      	sxtb	r3, r3
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d103      	bne.n	8003d60 <vQueueWaitForMessageRestricted+0x40>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d60:	f001 fbe8 	bl	8005534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3324      	adds	r3, #36	; 0x24
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fc61 	bl	800463c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f7ff ff26 	bl	8003bcc <prvUnlockQueue>
	}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	; 0x38
 8003d8c:	af04      	add	r7, sp, #16
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <xTaskCreateStatic+0x46>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	61fb      	str	r3, [r7, #28]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dce:	23bc      	movs	r3, #188	; 0xbc
 8003dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2bbc      	cmp	r3, #188	; 0xbc
 8003dd6:	d00a      	beq.n	8003dee <xTaskCreateStatic+0x66>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61bb      	str	r3, [r7, #24]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01e      	beq.n	8003e34 <xTaskCreateStatic+0xac>
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9303      	str	r3, [sp, #12]
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	9302      	str	r3, [sp, #8]
 8003e16:	f107 0314 	add.w	r3, r7, #20
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f850 	bl	8003ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e2e:	f000 f8f3 	bl	8004018 <prvAddNewTaskToReadyList>
 8003e32:	e001      	b.n	8003e38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e38:	697b      	ldr	r3, [r7, #20]
	}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b08c      	sub	sp, #48	; 0x30
 8003e46:	af04      	add	r7, sp, #16
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fc5e 	bl	8005718 <pvPortMalloc>
 8003e5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e64:	20bc      	movs	r0, #188	; 0xbc
 8003e66:	f001 fc57 	bl	8005718 <pvPortMalloc>
 8003e6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
 8003e78:	e005      	b.n	8003e86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f001 fd18 	bl	80058b0 <vPortFree>
 8003e80:	e001      	b.n	8003e86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d017      	beq.n	8003ebc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9303      	str	r3, [sp, #12]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	9302      	str	r3, [sp, #8]
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f80e 	bl	8003ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb0:	69f8      	ldr	r0, [r7, #28]
 8003eb2:	f000 f8b1 	bl	8004018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e002      	b.n	8003ec2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	21a5      	movs	r1, #165	; 0xa5
 8003ee6:	f001 fe35 	bl	8005b54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f023 0307 	bic.w	r3, r3, #7
 8003f02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	617b      	str	r3, [r7, #20]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01f      	beq.n	8003f6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e012      	b.n	8003f56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	7819      	ldrb	r1, [r3, #0]
 8003f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3334      	adds	r3, #52	; 0x34
 8003f40:	460a      	mov	r2, r1
 8003f42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d9e9      	bls.n	8003f30 <prvInitialiseNewTask+0x64>
 8003f5c:	e000      	b.n	8003f60 <prvInitialiseNewTask+0x94>
			{
				break;
 8003f5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f68:	e003      	b.n	8003f72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	2b37      	cmp	r3, #55	; 0x37
 8003f76:	d901      	bls.n	8003f7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f78:	2337      	movs	r3, #55	; 0x37
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f978 	bl	8003288 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff f973 	bl	8003288 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	3354      	adds	r3, #84	; 0x54
 8003fcc:	2260      	movs	r2, #96	; 0x60
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 fdbf 	bl	8005b54 <memset>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	4a0c      	ldr	r2, [pc, #48]	; (800400c <prvInitialiseNewTask+0x140>)
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <prvInitialiseNewTask+0x144>)
 8003fe0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <prvInitialiseNewTask+0x148>)
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	69b8      	ldr	r0, [r7, #24]
 8003fee:	f001 f941 	bl	8005274 <pxPortInitialiseStack>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004004:	bf00      	nop
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	08005da8 	.word	0x08005da8
 8004010:	08005dc8 	.word	0x08005dc8
 8004014:	08005d88 	.word	0x08005d88

08004018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004020:	f001 fa58 	bl	80054d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <prvAddNewTaskToReadyList+0xc4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <prvAddNewTaskToReadyList+0xc4>)
 800402c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800402e:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <prvAddNewTaskToReadyList+0xc8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <prvAddNewTaskToReadyList+0xc8>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800403c:	4b27      	ldr	r3, [pc, #156]	; (80040dc <prvAddNewTaskToReadyList+0xc4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d110      	bne.n	8004066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004044:	f000 fc26 	bl	8004894 <prvInitialiseTaskLists>
 8004048:	e00d      	b.n	8004066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <prvAddNewTaskToReadyList+0xcc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <prvAddNewTaskToReadyList+0xc8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	429a      	cmp	r2, r3
 800405e:	d802      	bhi.n	8004066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <prvAddNewTaskToReadyList+0xc8>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <prvAddNewTaskToReadyList+0xd0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <prvAddNewTaskToReadyList+0xd0>)
 800406e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <prvAddNewTaskToReadyList+0xd0>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <prvAddNewTaskToReadyList+0xd4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d903      	bls.n	800408c <prvAddNewTaskToReadyList+0x74>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	4a18      	ldr	r2, [pc, #96]	; (80040ec <prvAddNewTaskToReadyList+0xd4>)
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <prvAddNewTaskToReadyList+0xd8>)
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7ff f8fd 	bl	80032a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040a8:	f001 fa44 	bl	8005534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <prvAddNewTaskToReadyList+0xcc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00e      	beq.n	80040d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <prvAddNewTaskToReadyList+0xc8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d207      	bcs.n	80040d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <prvAddNewTaskToReadyList+0xdc>)
 80040c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000db8 	.word	0x20000db8
 80040e0:	200008e4 	.word	0x200008e4
 80040e4:	20000dc4 	.word	0x20000dc4
 80040e8:	20000dd4 	.word	0x20000dd4
 80040ec:	20000dc0 	.word	0x20000dc0
 80040f0:	200008e8 	.word	0x200008e8
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d017      	beq.n	800413a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <vTaskDelay+0x60>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <vTaskDelay+0x30>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	60bb      	str	r3, [r7, #8]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004128:	f000 f88a 	bl	8004240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800412c:	2100      	movs	r1, #0
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fcfe 	bl	8004b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004134:	f000 f892 	bl	800425c <xTaskResumeAll>
 8004138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <vTaskDelay+0x64>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000de0 	.word	0x20000de0
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800416e:	463a      	mov	r2, r7
 8004170:	1d39      	adds	r1, r7, #4
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff f832 	bl	80031e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	9202      	str	r2, [sp, #8]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2300      	movs	r3, #0
 800418c:	460a      	mov	r2, r1
 800418e:	4924      	ldr	r1, [pc, #144]	; (8004220 <vTaskStartScheduler+0xc0>)
 8004190:	4824      	ldr	r0, [pc, #144]	; (8004224 <vTaskStartScheduler+0xc4>)
 8004192:	f7ff fdf9 	bl	8003d88 <xTaskCreateStatic>
 8004196:	4603      	mov	r3, r0
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <vTaskStartScheduler+0xc8>)
 800419a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <vTaskStartScheduler+0xc8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e001      	b.n	80041ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041b4:	f000 fd10 	bl	8004bd8 <xTimerCreateTimerTask>
 80041b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d11b      	bne.n	80041f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
}
 80041d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <vTaskStartScheduler+0xcc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3354      	adds	r3, #84	; 0x54
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <vTaskStartScheduler+0xd0>)
 80041dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <vTaskStartScheduler+0xd4>)
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041e6:	4b14      	ldr	r3, [pc, #80]	; (8004238 <vTaskStartScheduler+0xd8>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <vTaskStartScheduler+0xdc>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041f2:	f001 f8cd 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041f6:	e00e      	b.n	8004216 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d10a      	bne.n	8004216 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <vTaskStartScheduler+0xb4>
}
 8004216:	bf00      	nop
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	08005d10 	.word	0x08005d10
 8004224:	08004865 	.word	0x08004865
 8004228:	20000ddc 	.word	0x20000ddc
 800422c:	200008e4 	.word	0x200008e4
 8004230:	20000010 	.word	0x20000010
 8004234:	20000dd8 	.word	0x20000dd8
 8004238:	20000dc4 	.word	0x20000dc4
 800423c:	20000dbc 	.word	0x20000dbc

08004240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <vTaskSuspendAll+0x18>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <vTaskSuspendAll+0x18>)
 800424c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000de0 	.word	0x20000de0

0800425c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800426a:	4b42      	ldr	r3, [pc, #264]	; (8004374 <xTaskResumeAll+0x118>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <xTaskResumeAll+0x2c>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	603b      	str	r3, [r7, #0]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004288:	f001 f924 	bl	80054d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800428c:	4b39      	ldr	r3, [pc, #228]	; (8004374 <xTaskResumeAll+0x118>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3b01      	subs	r3, #1
 8004292:	4a38      	ldr	r2, [pc, #224]	; (8004374 <xTaskResumeAll+0x118>)
 8004294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <xTaskResumeAll+0x118>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d162      	bne.n	8004364 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <xTaskResumeAll+0x11c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d05e      	beq.n	8004364 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a6:	e02f      	b.n	8004308 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a8:	4b34      	ldr	r3, [pc, #208]	; (800437c <xTaskResumeAll+0x120>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3318      	adds	r3, #24
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff f851 	bl	800335c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3304      	adds	r3, #4
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff f84c 	bl	800335c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <xTaskResumeAll+0x124>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d903      	bls.n	80042d8 <xTaskResumeAll+0x7c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	4a2a      	ldr	r2, [pc, #168]	; (8004380 <xTaskResumeAll+0x124>)
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <xTaskResumeAll+0x128>)
 80042e6:	441a      	add	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f7fe ffd7 	bl	80032a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b23      	ldr	r3, [pc, #140]	; (8004388 <xTaskResumeAll+0x12c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004302:	4b22      	ldr	r3, [pc, #136]	; (800438c <xTaskResumeAll+0x130>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <xTaskResumeAll+0x120>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1cb      	bne.n	80042a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004316:	f000 fb5f 	bl	80049d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <xTaskResumeAll+0x134>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004326:	f000 f847 	bl	80043b8 <xTaskIncrementTick>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004330:	4b16      	ldr	r3, [pc, #88]	; (800438c <xTaskResumeAll+0x130>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3b01      	subs	r3, #1
 800433a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f1      	bne.n	8004326 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <xTaskResumeAll+0x134>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <xTaskResumeAll+0x130>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <xTaskResumeAll+0x138>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004364:	f001 f8e6 	bl	8005534 <vPortExitCritical>

	return xAlreadyYielded;
 8004368:	68bb      	ldr	r3, [r7, #8]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000de0 	.word	0x20000de0
 8004378:	20000db8 	.word	0x20000db8
 800437c:	20000d78 	.word	0x20000d78
 8004380:	20000dc0 	.word	0x20000dc0
 8004384:	200008e8 	.word	0x200008e8
 8004388:	200008e4 	.word	0x200008e4
 800438c:	20000dcc 	.word	0x20000dcc
 8004390:	20000dc8 	.word	0x20000dc8
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <xTaskGetTickCount+0x1c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043a4:	687b      	ldr	r3, [r7, #4]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000dbc 	.word	0x20000dbc

080043b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043c2:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <xTaskIncrementTick+0x148>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 808f 	bne.w	80044ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043cc:	4b4d      	ldr	r3, [pc, #308]	; (8004504 <xTaskIncrementTick+0x14c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043d4:	4a4b      	ldr	r2, [pc, #300]	; (8004504 <xTaskIncrementTick+0x14c>)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d120      	bne.n	8004422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043e0:	4b49      	ldr	r3, [pc, #292]	; (8004508 <xTaskIncrementTick+0x150>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <xTaskIncrementTick+0x48>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	603b      	str	r3, [r7, #0]
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <xTaskIncrementTick+0x46>
 8004400:	4b41      	ldr	r3, [pc, #260]	; (8004508 <xTaskIncrementTick+0x150>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b41      	ldr	r3, [pc, #260]	; (800450c <xTaskIncrementTick+0x154>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3f      	ldr	r2, [pc, #252]	; (8004508 <xTaskIncrementTick+0x150>)
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4a3f      	ldr	r2, [pc, #252]	; (800450c <xTaskIncrementTick+0x154>)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <xTaskIncrementTick+0x158>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	4a3d      	ldr	r2, [pc, #244]	; (8004510 <xTaskIncrementTick+0x158>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	f000 fadb 	bl	80049d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004422:	4b3c      	ldr	r3, [pc, #240]	; (8004514 <xTaskIncrementTick+0x15c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d349      	bcc.n	80044c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <xTaskIncrementTick+0x150>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	4b37      	ldr	r3, [pc, #220]	; (8004514 <xTaskIncrementTick+0x15c>)
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	601a      	str	r2, [r3, #0]
					break;
 800443e:	e03f      	b.n	80044c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004440:	4b31      	ldr	r3, [pc, #196]	; (8004508 <xTaskIncrementTick+0x150>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d203      	bcs.n	8004460 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004458:	4a2e      	ldr	r2, [pc, #184]	; (8004514 <xTaskIncrementTick+0x15c>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800445e:	e02f      	b.n	80044c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe ff79 	bl	800335c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3318      	adds	r3, #24
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe ff70 	bl	800335c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <xTaskIncrementTick+0x160>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d903      	bls.n	8004490 <xTaskIncrementTick+0xd8>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <xTaskIncrementTick+0x160>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4a1f      	ldr	r2, [pc, #124]	; (800451c <xTaskIncrementTick+0x164>)
 800449e:	441a      	add	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fe fefb 	bl	80032a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <xTaskIncrementTick+0x168>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d3b8      	bcc.n	800442c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044be:	e7b5      	b.n	800442c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <xTaskIncrementTick+0x168>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4915      	ldr	r1, [pc, #84]	; (800451c <xTaskIncrementTick+0x164>)
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d901      	bls.n	80044dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <xTaskIncrementTick+0x16c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e004      	b.n	80044f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <xTaskIncrementTick+0x170>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a0d      	ldr	r2, [pc, #52]	; (8004528 <xTaskIncrementTick+0x170>)
 80044f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044f4:	697b      	ldr	r3, [r7, #20]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000de0 	.word	0x20000de0
 8004504:	20000dbc 	.word	0x20000dbc
 8004508:	20000d70 	.word	0x20000d70
 800450c:	20000d74 	.word	0x20000d74
 8004510:	20000dd0 	.word	0x20000dd0
 8004514:	20000dd8 	.word	0x20000dd8
 8004518:	20000dc0 	.word	0x20000dc0
 800451c:	200008e8 	.word	0x200008e8
 8004520:	200008e4 	.word	0x200008e4
 8004524:	20000dcc 	.word	0x20000dcc
 8004528:	20000dc8 	.word	0x20000dc8

0800452c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <vTaskSwitchContext+0xb0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800453a:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <vTaskSwitchContext+0xb4>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004540:	e046      	b.n	80045d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <vTaskSwitchContext+0xb4>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004548:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <vTaskSwitchContext+0xb8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	e010      	b.n	8004572 <vTaskSwitchContext+0x46>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <vTaskSwitchContext+0x40>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	607b      	str	r3, [r7, #4]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <vTaskSwitchContext+0x3e>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3b01      	subs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	491d      	ldr	r1, [pc, #116]	; (80045e8 <vTaskSwitchContext+0xbc>)
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0e4      	beq.n	8004550 <vTaskSwitchContext+0x24>
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <vTaskSwitchContext+0xbc>)
 8004592:	4413      	add	r3, r2
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3308      	adds	r3, #8
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d104      	bne.n	80045b6 <vTaskSwitchContext+0x8a>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4a0b      	ldr	r2, [pc, #44]	; (80045ec <vTaskSwitchContext+0xc0>)
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <vTaskSwitchContext+0xb8>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <vTaskSwitchContext+0xc0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3354      	adds	r3, #84	; 0x54
 80045cc:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <vTaskSwitchContext+0xc4>)
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	20000de0 	.word	0x20000de0
 80045e0:	20000dcc 	.word	0x20000dcc
 80045e4:	20000dc0 	.word	0x20000dc0
 80045e8:	200008e8 	.word	0x200008e8
 80045ec:	200008e4 	.word	0x200008e4
 80045f0:	20000010 	.word	0x20000010

080045f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	60fb      	str	r3, [r7, #12]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <vTaskPlaceOnEventList+0x44>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3318      	adds	r3, #24
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fe fe61 	bl	80032ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004628:	2101      	movs	r1, #1
 800462a:	6838      	ldr	r0, [r7, #0]
 800462c:	f000 fa80 	bl	8004b30 <prvAddCurrentTaskToDelayedList>
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200008e4 	.word	0x200008e4

0800463c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	617b      	str	r3, [r7, #20]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <vTaskPlaceOnEventListRestricted+0x54>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3318      	adds	r3, #24
 800466a:	4619      	mov	r1, r3
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7fe fe18 	bl	80032a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004678:	f04f 33ff 	mov.w	r3, #4294967295
 800467c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	68b8      	ldr	r0, [r7, #8]
 8004682:	f000 fa55 	bl	8004b30 <prvAddCurrentTaskToDelayedList>
	}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200008e4 	.word	0x200008e4

08004694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	60fb      	str	r3, [r7, #12]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3318      	adds	r3, #24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fe49 	bl	800335c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <xTaskRemoveFromEventList+0xb0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11d      	bne.n	800470e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fe40 	bl	800335c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	4b19      	ldr	r3, [pc, #100]	; (8004748 <xTaskRemoveFromEventList+0xb4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d903      	bls.n	80046f0 <xTaskRemoveFromEventList+0x5c>
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <xTaskRemoveFromEventList+0xb4>)
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <xTaskRemoveFromEventList+0xb8>)
 80046fe:	441a      	add	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7fe fdcb 	bl	80032a2 <vListInsertEnd>
 800470c:	e005      	b.n	800471a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3318      	adds	r3, #24
 8004712:	4619      	mov	r1, r3
 8004714:	480e      	ldr	r0, [pc, #56]	; (8004750 <xTaskRemoveFromEventList+0xbc>)
 8004716:	f7fe fdc4 	bl	80032a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <xTaskRemoveFromEventList+0xc0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	429a      	cmp	r2, r3
 8004726:	d905      	bls.n	8004734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <xTaskRemoveFromEventList+0xc4>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e001      	b.n	8004738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004738:	697b      	ldr	r3, [r7, #20]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000de0 	.word	0x20000de0
 8004748:	20000dc0 	.word	0x20000dc0
 800474c:	200008e8 	.word	0x200008e8
 8004750:	20000d78 	.word	0x20000d78
 8004754:	200008e4 	.word	0x200008e4
 8004758:	20000dcc 	.word	0x20000dcc

0800475c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <vTaskInternalSetTimeOutState+0x24>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <vTaskInternalSetTimeOutState+0x28>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	605a      	str	r2, [r3, #4]
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	20000dd0 	.word	0x20000dd0
 8004784:	20000dbc 	.word	0x20000dbc

08004788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	613b      	str	r3, [r7, #16]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	60fb      	str	r3, [r7, #12]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80047ca:	f000 fe83 	bl	80054d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047ce:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <xTaskCheckForTimeOut+0xbc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d102      	bne.n	80047ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e023      	b.n	8004836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <xTaskCheckForTimeOut+0xc0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d007      	beq.n	800480a <xTaskCheckForTimeOut+0x82>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e015      	b.n	8004836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	429a      	cmp	r2, r3
 8004812:	d20b      	bcs.n	800482c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff9b 	bl	800475c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e004      	b.n	8004836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004836:	f000 fe7d 	bl	8005534 <vPortExitCritical>

	return xReturn;
 800483a:	69fb      	ldr	r3, [r7, #28]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000dbc 	.word	0x20000dbc
 8004848:	20000dd0 	.word	0x20000dd0

0800484c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <vTaskMissedYield+0x14>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000dcc 	.word	0x20000dcc

08004864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800486c:	f000 f852 	bl	8004914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvIdleTask+0x28>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d9f9      	bls.n	800486c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <prvIdleTask+0x2c>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004888:	e7f0      	b.n	800486c <prvIdleTask+0x8>
 800488a:	bf00      	nop
 800488c:	200008e8 	.word	0x200008e8
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e00c      	b.n	80048ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <prvInitialiseTaskLists+0x60>)
 80048ac:	4413      	add	r3, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fcca 	bl	8003248 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b37      	cmp	r3, #55	; 0x37
 80048be:	d9ef      	bls.n	80048a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048c2:	f7fe fcc1 	bl	8003248 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048c6:	480d      	ldr	r0, [pc, #52]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048c8:	f7fe fcbe 	bl	8003248 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048cc:	480c      	ldr	r0, [pc, #48]	; (8004900 <prvInitialiseTaskLists+0x6c>)
 80048ce:	f7fe fcbb 	bl	8003248 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048d2:	480c      	ldr	r0, [pc, #48]	; (8004904 <prvInitialiseTaskLists+0x70>)
 80048d4:	f7fe fcb8 	bl	8003248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048d8:	480b      	ldr	r0, [pc, #44]	; (8004908 <prvInitialiseTaskLists+0x74>)
 80048da:	f7fe fcb5 	bl	8003248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <prvInitialiseTaskLists+0x78>)
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvInitialiseTaskLists+0x7c>)
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200008e8 	.word	0x200008e8
 80048f8:	20000d48 	.word	0x20000d48
 80048fc:	20000d5c 	.word	0x20000d5c
 8004900:	20000d78 	.word	0x20000d78
 8004904:	20000d8c 	.word	0x20000d8c
 8004908:	20000da4 	.word	0x20000da4
 800490c:	20000d70 	.word	0x20000d70
 8004910:	20000d74 	.word	0x20000d74

08004914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800491a:	e019      	b.n	8004950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800491c:	f000 fdda 	bl	80054d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fd15 	bl	800335c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 800493a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <prvCheckTasksWaitingTermination+0x58>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	4a0a      	ldr	r2, [pc, #40]	; (800496c <prvCheckTasksWaitingTermination+0x58>)
 8004944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004946:	f000 fdf5 	bl	8005534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f810 	bl	8004970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <prvCheckTasksWaitingTermination+0x58>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e1      	bne.n	800491c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000d8c 	.word	0x20000d8c
 8004968:	20000db8 	.word	0x20000db8
 800496c:	20000da0 	.word	0x20000da0

08004970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3354      	adds	r3, #84	; 0x54
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f8ff 	bl	8005b80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	4618      	mov	r0, r3
 8004992:	f000 ff8d 	bl	80058b0 <vPortFree>
				vPortFree( pxTCB );
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 ff8a 	bl	80058b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800499c:	e018      	b.n	80049d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d103      	bne.n	80049b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 ff81 	bl	80058b0 <vPortFree>
	}
 80049ae:	e00f      	b.n	80049d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d00a      	beq.n	80049d0 <prvDeleteTCB+0x60>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60fb      	str	r3, [r7, #12]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <prvDeleteTCB+0x5e>
	}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <prvResetNextTaskUnblockTime+0x38>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <prvResetNextTaskUnblockTime+0x3c>)
 80049ea:	f04f 32ff 	mov.w	r2, #4294967295
 80049ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049f0:	e008      	b.n	8004a04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <prvResetNextTaskUnblockTime+0x38>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <prvResetNextTaskUnblockTime+0x3c>)
 8004a02:	6013      	str	r3, [r2, #0]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	20000d70 	.word	0x20000d70
 8004a14:	20000dd8 	.word	0x20000dd8

08004a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <xTaskGetSchedulerState+0x34>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a26:	2301      	movs	r3, #1
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	e008      	b.n	8004a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a2c:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <xTaskGetSchedulerState+0x38>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d102      	bne.n	8004a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a34:	2302      	movs	r3, #2
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	e001      	b.n	8004a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a3e:	687b      	ldr	r3, [r7, #4]
	}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000dc4 	.word	0x20000dc4
 8004a50:	20000de0 	.word	0x20000de0

08004a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d056      	beq.n	8004b18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <xTaskPriorityDisinherit+0xd0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d00a      	beq.n	8004a8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60bb      	str	r3, [r7, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d02c      	beq.n	8004b18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d128      	bne.n	8004b18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fc46 	bl	800335c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <xTaskPriorityDisinherit+0xd4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d903      	bls.n	8004af8 <xTaskPriorityDisinherit+0xa4>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <xTaskPriorityDisinherit+0xd4>)
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <xTaskPriorityDisinherit+0xd8>)
 8004b06:	441a      	add	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe fbc7 	bl	80032a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b18:	697b      	ldr	r3, [r7, #20]
	}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200008e4 	.word	0x200008e4
 8004b28:	20000dc0 	.word	0x20000dc0
 8004b2c:	200008e8 	.word	0x200008e8

08004b30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b3a:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fc08 	bl	800335c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d10a      	bne.n	8004b6a <prvAddCurrentTaskToDelayedList+0x3a>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4819      	ldr	r0, [pc, #100]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b64:	f7fe fb9d 	bl	80032a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b68:	e026      	b.n	8004bb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d209      	bcs.n	8004b96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7fe fbab 	bl	80032ea <vListInsert>
}
 8004b94:	e010      	b.n	8004bb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fe fba1 	bl	80032ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d202      	bcs.n	8004bb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6013      	str	r3, [r2, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000dbc 	.word	0x20000dbc
 8004bc4:	200008e4 	.word	0x200008e4
 8004bc8:	20000da4 	.word	0x20000da4
 8004bcc:	20000d74 	.word	0x20000d74
 8004bd0:	20000d70 	.word	0x20000d70
 8004bd4:	20000dd8 	.word	0x20000dd8

08004bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004be2:	f000 fb07 	bl	80051f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <xTimerCreateTimerTask+0x80>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d021      	beq.n	8004c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bf6:	1d3a      	adds	r2, r7, #4
 8004bf8:	f107 0108 	add.w	r1, r7, #8
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fe fb07 	bl	8003214 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	9202      	str	r2, [sp, #8]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	2302      	movs	r3, #2
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	460a      	mov	r2, r1
 8004c18:	4910      	ldr	r1, [pc, #64]	; (8004c5c <xTimerCreateTimerTask+0x84>)
 8004c1a:	4811      	ldr	r0, [pc, #68]	; (8004c60 <xTimerCreateTimerTask+0x88>)
 8004c1c:	f7ff f8b4 	bl	8003d88 <xTaskCreateStatic>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <xTimerCreateTimerTask+0x8c>)
 8004c24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <xTimerCreateTimerTask+0x8c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	613b      	str	r3, [r7, #16]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000e14 	.word	0x20000e14
 8004c5c:	08005d18 	.word	0x08005d18
 8004c60:	08004d9d 	.word	0x08004d9d
 8004c64:	20000e18 	.word	0x20000e18

08004c68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	623b      	str	r3, [r7, #32]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d02a      	beq.n	8004cf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	dc18      	bgt.n	8004ce2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cb0:	f7ff feb2 	bl	8004a18 <xTaskGetSchedulerState>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d109      	bne.n	8004cce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	f107 0110 	add.w	r1, r7, #16
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc6:	f7fe fc77 	bl	80035b8 <xQueueGenericSend>
 8004cca:	6278      	str	r0, [r7, #36]	; 0x24
 8004ccc:	e012      	b.n	8004cf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	f107 0110 	add.w	r1, r7, #16
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f7fe fc6d 	bl	80035b8 <xQueueGenericSend>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24
 8004ce0:	e008      	b.n	8004cf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ce2:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	f107 0110 	add.w	r1, r7, #16
 8004cea:	2300      	movs	r3, #0
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	f7fe fd61 	bl	80037b4 <xQueueGenericSendFromISR>
 8004cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3728      	adds	r7, #40	; 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000e14 	.word	0x20000e14

08004d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0e:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <prvProcessExpiredTimer+0x94>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fe fb1d 	bl	800335c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d022      	beq.n	8004d76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	699a      	ldr	r2, [r3, #24]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	18d1      	adds	r1, r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f000 f8d1 	bl	8004ee4 <prvInsertTimerInActiveList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01f      	beq.n	8004d88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	2100      	movs	r1, #0
 8004d52:	6978      	ldr	r0, [r7, #20]
 8004d54:	f7ff ff88 	bl	8004c68 <xTimerGenericCommand>
 8004d58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d113      	bne.n	8004d88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	6978      	ldr	r0, [r7, #20]
 8004d8e:	4798      	blx	r3
}
 8004d90:	bf00      	nop
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000e0c 	.word	0x20000e0c

08004d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004da4:	f107 0308 	add.w	r3, r7, #8
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f857 	bl	8004e5c <prvGetNextExpireTime>
 8004dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4619      	mov	r1, r3
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f803 	bl	8004dc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dba:	f000 f8d5 	bl	8004f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dbe:	e7f1      	b.n	8004da4 <prvTimerTask+0x8>

08004dc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dca:	f7ff fa39 	bl	8004240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f866 	bl	8004ea4 <prvSampleTimeNow>
 8004dd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d130      	bne.n	8004e42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <prvProcessTimerOrBlockTask+0x3c>
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d806      	bhi.n	8004dfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dee:	f7ff fa35 	bl	800425c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff85 	bl	8004d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004dfa:	e024      	b.n	8004e46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <prvProcessTimerOrBlockTask+0x90>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <prvProcessTimerOrBlockTask+0x50>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <prvProcessTimerOrBlockTask+0x52>
 8004e10:	2300      	movs	r3, #0
 8004e12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <prvProcessTimerOrBlockTask+0x94>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	f7fe ff7d 	bl	8003d20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e26:	f7ff fa19 	bl	800425c <xTaskResumeAll>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <prvProcessTimerOrBlockTask+0x98>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
}
 8004e40:	e001      	b.n	8004e46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e42:	f7ff fa0b 	bl	800425c <xTaskResumeAll>
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000e10 	.word	0x20000e10
 8004e54:	20000e14 	.word	0x20000e14
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <prvGetNextExpireTime+0x44>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <prvGetNextExpireTime+0x16>
 8004e6e:	2201      	movs	r2, #1
 8004e70:	e000      	b.n	8004e74 <prvGetNextExpireTime+0x18>
 8004e72:	2200      	movs	r2, #0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <prvGetNextExpireTime+0x44>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e001      	b.n	8004e90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e90:	68fb      	ldr	r3, [r7, #12]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000e0c 	.word	0x20000e0c

08004ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004eac:	f7ff fa74 	bl	8004398 <xTaskGetTickCount>
 8004eb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <prvSampleTimeNow+0x3c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d205      	bcs.n	8004ec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ebc:	f000 f936 	bl	800512c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <prvSampleTimeNow+0x3c>)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000e1c 	.word	0x20000e1c

08004ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d812      	bhi.n	8004f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e01b      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <prvInsertTimerInActiveList+0x7c>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fe f9de 	bl	80032ea <vListInsert>
 8004f2e:	e012      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d206      	bcs.n	8004f46 <prvInsertTimerInActiveList+0x62>
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e007      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvInsertTimerInActiveList+0x80>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f7fe f9ca 	bl	80032ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000e10 	.word	0x20000e10
 8004f64:	20000e0c 	.word	0x20000e0c

08004f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08e      	sub	sp, #56	; 0x38
 8004f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f6e:	e0ca      	b.n	8005106 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da18      	bge.n	8004fa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	3304      	adds	r3, #4
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	61fb      	str	r3, [r7, #28]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9e:	6850      	ldr	r0, [r2, #4]
 8004fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa2:	6892      	ldr	r2, [r2, #8]
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f2c0 80aa 	blt.w	8005104 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe f9cb 	bl	800335c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff6b 	bl	8004ea4 <prvSampleTimeNow>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b09      	cmp	r3, #9
 8004fd4:	f200 8097 	bhi.w	8005106 <prvProcessReceivedCommands+0x19e>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <prvProcessReceivedCommands+0x78>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005009 	.word	0x08005009
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005009 	.word	0x08005009
 8004fec:	0800507d 	.word	0x0800507d
 8004ff0:	08005091 	.word	0x08005091
 8004ff4:	080050db 	.word	0x080050db
 8004ff8:	08005009 	.word	0x08005009
 8004ffc:	08005009 	.word	0x08005009
 8005000:	0800507d 	.word	0x0800507d
 8005004:	08005091 	.word	0x08005091
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	b2da      	uxtb	r2, r3
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	18d1      	adds	r1, r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005028:	f7ff ff5c 	bl	8004ee4 <prvInsertTimerInActiveList>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d069      	beq.n	8005106 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005038:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05e      	beq.n	8005106 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	441a      	add	r2, r3
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	2100      	movs	r1, #0
 8005058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505a:	f7ff fe05 	bl	8004c68 <xTimerGenericCommand>
 800505e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d14f      	bne.n	8005106 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	61bb      	str	r3, [r7, #24]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800508e:	e03a      	b.n	8005106 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	b2da      	uxtb	r2, r3
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	617b      	str	r3, [r7, #20]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	18d1      	adds	r1, r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d4:	f7ff ff06 	bl	8004ee4 <prvInsertTimerInActiveList>
					break;
 80050d8:	e015      	b.n	8005106 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d103      	bne.n	80050f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80050e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ea:	f000 fbe1 	bl	80058b0 <vPortFree>
 80050ee:	e00a      	b.n	8005106 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005102:	e000      	b.n	8005106 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005104:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <prvProcessReceivedCommands+0x1c0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1d39      	adds	r1, r7, #4
 800510c:	2200      	movs	r2, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fbec 	bl	80038ec <xQueueReceive>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	f47f af2a 	bne.w	8004f70 <prvProcessReceivedCommands+0x8>
	}
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	3730      	adds	r7, #48	; 0x30
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000e14 	.word	0x20000e14

0800512c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005132:	e048      	b.n	80051c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005134:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <prvSwitchTimerLists+0xc0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513e:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <prvSwitchTimerLists+0xc0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe f905 	bl	800335c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02e      	beq.n	80051c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	429a      	cmp	r2, r3
 8005178:	d90e      	bls.n	8005198 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005186:	4b19      	ldr	r3, [pc, #100]	; (80051ec <prvSwitchTimerLists+0xc0>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f7fe f8aa 	bl	80032ea <vListInsert>
 8005196:	e016      	b.n	80051c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005198:	2300      	movs	r3, #0
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	2300      	movs	r3, #0
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	2100      	movs	r1, #0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff fd60 	bl	8004c68 <xTimerGenericCommand>
 80051a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	603b      	str	r3, [r7, #0]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <prvSwitchTimerLists+0xc0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1b1      	bne.n	8005134 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <prvSwitchTimerLists+0xc0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <prvSwitchTimerLists+0xc4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <prvSwitchTimerLists+0xc0>)
 80051dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051de:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <prvSwitchTimerLists+0xc4>)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000e0c 	.word	0x20000e0c
 80051f0:	20000e10 	.word	0x20000e10

080051f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051fa:	f000 f96b 	bl	80054d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d120      	bne.n	8005248 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005206:	4814      	ldr	r0, [pc, #80]	; (8005258 <prvCheckForValidListAndQueue+0x64>)
 8005208:	f7fe f81e 	bl	8003248 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800520c:	4813      	ldr	r0, [pc, #76]	; (800525c <prvCheckForValidListAndQueue+0x68>)
 800520e:	f7fe f81b 	bl	8003248 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005212:	4b13      	ldr	r3, [pc, #76]	; (8005260 <prvCheckForValidListAndQueue+0x6c>)
 8005214:	4a10      	ldr	r2, [pc, #64]	; (8005258 <prvCheckForValidListAndQueue+0x64>)
 8005216:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <prvCheckForValidListAndQueue+0x70>)
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <prvCheckForValidListAndQueue+0x68>)
 800521c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800521e:	2300      	movs	r3, #0
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <prvCheckForValidListAndQueue+0x74>)
 8005224:	4a11      	ldr	r2, [pc, #68]	; (800526c <prvCheckForValidListAndQueue+0x78>)
 8005226:	2110      	movs	r1, #16
 8005228:	200a      	movs	r0, #10
 800522a:	f7fe f929 	bl	8003480 <xQueueGenericCreateStatic>
 800522e:	4603      	mov	r3, r0
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 8005232:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	490b      	ldr	r1, [pc, #44]	; (8005270 <prvCheckForValidListAndQueue+0x7c>)
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fd42 	bl	8003ccc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005248:	f000 f974 	bl	8005534 <vPortExitCritical>
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000e14 	.word	0x20000e14
 8005258:	20000de4 	.word	0x20000de4
 800525c:	20000df8 	.word	0x20000df8
 8005260:	20000e0c 	.word	0x20000e0c
 8005264:	20000e10 	.word	0x20000e10
 8005268:	20000ec0 	.word	0x20000ec0
 800526c:	20000e20 	.word	0x20000e20
 8005270:	08005d20 	.word	0x08005d20

08005274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3b04      	subs	r3, #4
 8005284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800528c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b04      	subs	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b04      	subs	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a4:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <pxPortInitialiseStack+0x64>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b14      	subs	r3, #20
 80052ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b04      	subs	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f06f 0202 	mvn.w	r2, #2
 80052c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3b20      	subs	r3, #32
 80052c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	080052dd 	.word	0x080052dd

080052dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <prvTaskExitError+0x54>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d00a      	beq.n	8005306 <prvTaskExitError+0x2a>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <prvTaskExitError+0x28>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60bb      	str	r3, [r7, #8]
}
 8005318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800531a:	bf00      	nop
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0fc      	beq.n	800531c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	2000000c 	.word	0x2000000c
	...

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	; (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005396:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <xPortStartScheduler+0x120>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <xPortStartScheduler+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10a      	bne.n	80053b6 <xPortStartScheduler+0x26>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <xPortStartScheduler+0x120>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <xPortStartScheduler+0x128>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10a      	bne.n	80053d6 <xPortStartScheduler+0x46>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <xPortStartScheduler+0x12c>)
 80053d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	22ff      	movs	r2, #255	; 0xff
 80053e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xPortStartScheduler+0x130>)
 80053fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <xPortStartScheduler+0x134>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005404:	e009      	b.n	800541a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005406:	4b2f      	ldr	r3, [pc, #188]	; (80054c4 <xPortStartScheduler+0x134>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3b01      	subs	r3, #1
 800540c:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <xPortStartScheduler+0x134>)
 800540e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d0ef      	beq.n	8005406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <xPortStartScheduler+0x134>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1c3 0307 	rsb	r3, r3, #7
 800542e:	2b04      	cmp	r3, #4
 8005430:	d00a      	beq.n	8005448 <xPortStartScheduler+0xb8>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <xPortStartScheduler+0x134>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <xPortStartScheduler+0x134>)
 8005450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <xPortStartScheduler+0x134>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <xPortStartScheduler+0x134>)
 800545c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005466:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <xPortStartScheduler+0x138>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <xPortStartScheduler+0x138>)
 800546c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <xPortStartScheduler+0x138>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <xPortStartScheduler+0x138>)
 8005478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800547c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800547e:	f000 f8dd 	bl	800563c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <xPortStartScheduler+0x13c>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005488:	f000 f8fc 	bl	8005684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xPortStartScheduler+0x140>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <xPortStartScheduler+0x140>)
 8005492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005498:	f7ff ff66 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800549c:	f7ff f846 	bl	800452c <vTaskSwitchContext>
	prvTaskExitError();
 80054a0:	f7ff ff1c 	bl	80052dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000ed00 	.word	0xe000ed00
 80054b4:	410fc271 	.word	0x410fc271
 80054b8:	410fc270 	.word	0x410fc270
 80054bc:	e000e400 	.word	0xe000e400
 80054c0:	20000f10 	.word	0x20000f10
 80054c4:	20000f14 	.word	0x20000f14
 80054c8:	e000ed20 	.word	0xe000ed20
 80054cc:	2000000c 	.word	0x2000000c
 80054d0:	e000ef34 	.word	0xe000ef34

080054d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
}
 80054ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <vPortEnterCritical+0x58>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a0d      	ldr	r2, [pc, #52]	; (800552c <vPortEnterCritical+0x58>)
 80054f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <vPortEnterCritical+0x58>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10f      	bne.n	8005520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vPortEnterCritical+0x5c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <vPortEnterCritical+0x4c>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <vPortEnterCritical+0x4a>
	}
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <vPortExitCritical+0x50>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <vPortExitCritical+0x24>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	607b      	str	r3, [r7, #4]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <vPortExitCritical+0x50>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <vPortExitCritical+0x50>)
 8005560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <vPortExitCritical+0x50>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d105      	bne.n	8005576 <vPortExitCritical+0x42>
 800556a:	2300      	movs	r3, #0
 800556c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f383 8811 	msr	BASEPRI, r3
}
 8005574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000000c 	.word	0x2000000c
	...

08005590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f01e 0f10 	tst.w	lr, #16
 80055a0:	bf08      	it	eq
 80055a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055b4:	f380 8811 	msr	BASEPRI, r0
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f7fe ffb4 	bl	800452c <vTaskSwitchContext>
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f380 8811 	msr	BASEPRI, r0
 80055cc:	bc09      	pop	{r0, r3}
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	6808      	ldr	r0, [r1, #0]
 80055d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d6:	f01e 0f10 	tst.w	lr, #16
 80055da:	bf08      	it	eq
 80055dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055e0:	f380 8809 	msr	PSP, r0
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst>:
 80055f0:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005612:	f7fe fed1 	bl	80043b8 <xTaskIncrementTick>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <xPortSysTickHandler+0x40>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <vPortSetupTimerInterrupt+0x38>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <vPortSetupTimerInterrupt+0x3c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <vPortSetupTimerInterrupt+0x40>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <vPortSetupTimerInterrupt+0x44>)
 800565a:	3b01      	subs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000e010 	.word	0xe000e010
 8005674:	e000e018 	.word	0xe000e018
 8005678:	20000000 	.word	0x20000000
 800567c:	10624dd3 	.word	0x10624dd3
 8005680:	e000e014 	.word	0xe000e014

08005684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005694 <vPortEnableVFP+0x10>
 8005688:	6801      	ldr	r1, [r0, #0]
 800568a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800568e:	6001      	str	r1, [r0, #0]
 8005690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005692:	bf00      	nop
 8005694:	e000ed88 	.word	0xe000ed88

08005698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800569e:	f3ef 8305 	mrs	r3, IPSR
 80056a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b0f      	cmp	r3, #15
 80056a8:	d914      	bls.n	80056d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <vPortValidateInterruptPriority+0x70>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <vPortValidateInterruptPriority+0x74>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	7afa      	ldrb	r2, [r7, #11]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d20a      	bcs.n	80056d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <vPortValidateInterruptPriority+0x78>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <vPortValidateInterruptPriority+0x7c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d90a      	bls.n	80056fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	603b      	str	r3, [r7, #0]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <vPortValidateInterruptPriority+0x60>
	}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	e000e3f0 	.word	0xe000e3f0
 800570c:	20000f10 	.word	0x20000f10
 8005710:	e000ed0c 	.word	0xe000ed0c
 8005714:	20000f14 	.word	0x20000f14

08005718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005724:	f7fe fd8c 	bl	8004240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005728:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <pvPortMalloc+0x180>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005730:	f000 f920 	bl	8005974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005734:	4b59      	ldr	r3, [pc, #356]	; (800589c <pvPortMalloc+0x184>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8093 	bne.w	8005868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005748:	2208      	movs	r2, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d014      	beq.n	8005784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <pvPortMalloc+0x6c>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	617b      	str	r3, [r7, #20]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d06e      	beq.n	8005868 <pvPortMalloc+0x150>
 800578a:	4b45      	ldr	r3, [pc, #276]	; (80058a0 <pvPortMalloc+0x188>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d869      	bhi.n	8005868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005794:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <pvPortMalloc+0x18c>)
 8005796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005798:	4b42      	ldr	r3, [pc, #264]	; (80058a4 <pvPortMalloc+0x18c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800579e:	e004      	b.n	80057aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d903      	bls.n	80057bc <pvPortMalloc+0xa4>
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f1      	bne.n	80057a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <pvPortMalloc+0x180>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d050      	beq.n	8005868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	4413      	add	r3, r2
 80057ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	2308      	movs	r3, #8
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d91f      	bls.n	8005828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <pvPortMalloc+0xf8>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	613b      	str	r3, [r7, #16]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	f000 f908 	bl	8005a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005828:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <pvPortMalloc+0x188>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <pvPortMalloc+0x188>)
 8005834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005836:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <pvPortMalloc+0x188>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <pvPortMalloc+0x190>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d203      	bcs.n	800584a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005842:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <pvPortMalloc+0x188>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <pvPortMalloc+0x190>)
 8005848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <pvPortMalloc+0x184>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	431a      	orrs	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <pvPortMalloc+0x194>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3301      	adds	r3, #1
 8005864:	4a11      	ldr	r2, [pc, #68]	; (80058ac <pvPortMalloc+0x194>)
 8005866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005868:	f7fe fcf8 	bl	800425c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <pvPortMalloc+0x174>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60fb      	str	r3, [r7, #12]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <pvPortMalloc+0x172>
	return pvReturn;
 800588c:	69fb      	ldr	r3, [r7, #28]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3728      	adds	r7, #40	; 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20004b20 	.word	0x20004b20
 800589c:	20004b34 	.word	0x20004b34
 80058a0:	20004b24 	.word	0x20004b24
 80058a4:	20004b18 	.word	0x20004b18
 80058a8:	20004b28 	.word	0x20004b28
 80058ac:	20004b2c 	.word	0x20004b2c

080058b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d04d      	beq.n	800595e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058c2:	2308      	movs	r3, #8
 80058c4:	425b      	negs	r3, r3
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4413      	add	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4b24      	ldr	r3, [pc, #144]	; (8005968 <vPortFree+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <vPortFree+0x44>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60fb      	str	r3, [r7, #12]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <vPortFree+0x62>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60bb      	str	r3, [r7, #8]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <vPortFree+0xb8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01e      	beq.n	800595e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11a      	bne.n	800595e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <vPortFree+0xb8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005938:	f7fe fc82 	bl	8004240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <vPortFree+0xbc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4413      	add	r3, r2
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <vPortFree+0xbc>)
 8005948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f000 f874 	bl	8005a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <vPortFree+0xc0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vPortFree+0xc0>)
 8005958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800595a:	f7fe fc7f 	bl	800425c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20004b34 	.word	0x20004b34
 800596c:	20004b24 	.word	0x20004b24
 8005970:	20004b30 	.word	0x20004b30

08005974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800597a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800597e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <prvHeapInit+0xac>)
 8005982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3307      	adds	r3, #7
 8005992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <prvHeapInit+0xac>)
 80059a4:	4413      	add	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <prvHeapInit+0xb0>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <prvHeapInit+0xb0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059c0:	2208      	movs	r2, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <prvHeapInit+0xb4>)
 80059d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <prvHeapInit+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <prvHeapInit+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvHeapInit+0xb4>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <prvHeapInit+0xb8>)
 8005a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <prvHeapInit+0xbc>)
 8005a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <prvHeapInit+0xc0>)
 8005a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000f18 	.word	0x20000f18
 8005a24:	20004b18 	.word	0x20004b18
 8005a28:	20004b20 	.word	0x20004b20
 8005a2c:	20004b28 	.word	0x20004b28
 8005a30:	20004b24 	.word	0x20004b24
 8005a34:	20004b34 	.word	0x20004b34

08005a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a40:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <prvInsertBlockIntoFreeList+0xac>)
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e002      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x14>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d8f7      	bhi.n	8005a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d108      	bne.n	8005a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d118      	bne.n	8005ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d00d      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e008      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e003      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d002      	beq.n	8005ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20004b18 	.word	0x20004b18
 8005ae8:	20004b20 	.word	0x20004b20

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4d0d      	ldr	r5, [pc, #52]	; (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	; (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2600      	movs	r6, #0
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4d0b      	ldr	r5, [pc, #44]	; (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	; (8005b30 <__libc_init_array+0x44>)
 8005b00:	f000 f8f2 	bl	8005ce8 <_init>
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2600      	movs	r6, #0
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	08005df0 	.word	0x08005df0
 8005b28:	08005df0 	.word	0x08005df0
 8005b2c:	08005df0 	.word	0x08005df0
 8005b30:	08005df4 	.word	0x08005df4

08005b34 <__retarget_lock_acquire_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <__retarget_lock_release_recursive>:
 8005b36:	4770      	bx	lr

08005b38 <memcpy>:
 8005b38:	440a      	add	r2, r1
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b40:	d100      	bne.n	8005b44 <memcpy+0xc>
 8005b42:	4770      	bx	lr
 8005b44:	b510      	push	{r4, lr}
 8005b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4e:	4291      	cmp	r1, r2
 8005b50:	d1f9      	bne.n	8005b46 <memcpy+0xe>
 8005b52:	bd10      	pop	{r4, pc}

08005b54 <memset>:
 8005b54:	4402      	add	r2, r0
 8005b56:	4603      	mov	r3, r0
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d100      	bne.n	8005b5e <memset+0xa>
 8005b5c:	4770      	bx	lr
 8005b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b62:	e7f9      	b.n	8005b58 <memset+0x4>

08005b64 <cleanup_glue>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	460c      	mov	r4, r1
 8005b68:	6809      	ldr	r1, [r1, #0]
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	b109      	cbz	r1, 8005b72 <cleanup_glue+0xe>
 8005b6e:	f7ff fff9 	bl	8005b64 <cleanup_glue>
 8005b72:	4621      	mov	r1, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b7a:	f000 b869 	b.w	8005c50 <_free_r>
	...

08005b80 <_reclaim_reent>:
 8005b80:	4b2c      	ldr	r3, [pc, #176]	; (8005c34 <_reclaim_reent+0xb4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4283      	cmp	r3, r0
 8005b86:	b570      	push	{r4, r5, r6, lr}
 8005b88:	4604      	mov	r4, r0
 8005b8a:	d051      	beq.n	8005c30 <_reclaim_reent+0xb0>
 8005b8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b8e:	b143      	cbz	r3, 8005ba2 <_reclaim_reent+0x22>
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d14a      	bne.n	8005c2c <_reclaim_reent+0xac>
 8005b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	b111      	cbz	r1, 8005ba2 <_reclaim_reent+0x22>
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 f857 	bl	8005c50 <_free_r>
 8005ba2:	6961      	ldr	r1, [r4, #20]
 8005ba4:	b111      	cbz	r1, 8005bac <_reclaim_reent+0x2c>
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 f852 	bl	8005c50 <_free_r>
 8005bac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005bae:	b111      	cbz	r1, 8005bb6 <_reclaim_reent+0x36>
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 f84d 	bl	8005c50 <_free_r>
 8005bb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005bb8:	b111      	cbz	r1, 8005bc0 <_reclaim_reent+0x40>
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 f848 	bl	8005c50 <_free_r>
 8005bc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005bc2:	b111      	cbz	r1, 8005bca <_reclaim_reent+0x4a>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 f843 	bl	8005c50 <_free_r>
 8005bca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005bcc:	b111      	cbz	r1, 8005bd4 <_reclaim_reent+0x54>
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 f83e 	bl	8005c50 <_free_r>
 8005bd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005bd6:	b111      	cbz	r1, 8005bde <_reclaim_reent+0x5e>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 f839 	bl	8005c50 <_free_r>
 8005bde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005be0:	b111      	cbz	r1, 8005be8 <_reclaim_reent+0x68>
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 f834 	bl	8005c50 <_free_r>
 8005be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bea:	b111      	cbz	r1, 8005bf2 <_reclaim_reent+0x72>
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 f82f 	bl	8005c50 <_free_r>
 8005bf2:	69a3      	ldr	r3, [r4, #24]
 8005bf4:	b1e3      	cbz	r3, 8005c30 <_reclaim_reent+0xb0>
 8005bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4798      	blx	r3
 8005bfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bfe:	b1b9      	cbz	r1, 8005c30 <_reclaim_reent+0xb0>
 8005c00:	4620      	mov	r0, r4
 8005c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c06:	f7ff bfad 	b.w	8005b64 <cleanup_glue>
 8005c0a:	5949      	ldr	r1, [r1, r5]
 8005c0c:	b941      	cbnz	r1, 8005c20 <_reclaim_reent+0xa0>
 8005c0e:	3504      	adds	r5, #4
 8005c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c12:	2d80      	cmp	r5, #128	; 0x80
 8005c14:	68d9      	ldr	r1, [r3, #12]
 8005c16:	d1f8      	bne.n	8005c0a <_reclaim_reent+0x8a>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 f819 	bl	8005c50 <_free_r>
 8005c1e:	e7ba      	b.n	8005b96 <_reclaim_reent+0x16>
 8005c20:	680e      	ldr	r6, [r1, #0]
 8005c22:	4620      	mov	r0, r4
 8005c24:	f000 f814 	bl	8005c50 <_free_r>
 8005c28:	4631      	mov	r1, r6
 8005c2a:	e7ef      	b.n	8005c0c <_reclaim_reent+0x8c>
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	e7ef      	b.n	8005c10 <_reclaim_reent+0x90>
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	bf00      	nop
 8005c34:	20000010 	.word	0x20000010

08005c38 <__malloc_lock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__malloc_lock+0x8>)
 8005c3a:	f7ff bf7b 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20004b38 	.word	0x20004b38

08005c44 <__malloc_unlock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__malloc_unlock+0x8>)
 8005c46:	f7ff bf76 	b.w	8005b36 <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20004b38 	.word	0x20004b38

08005c50 <_free_r>:
 8005c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c52:	2900      	cmp	r1, #0
 8005c54:	d044      	beq.n	8005ce0 <_free_r+0x90>
 8005c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c5a:	9001      	str	r0, [sp, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c62:	bfb8      	it	lt
 8005c64:	18e4      	addlt	r4, r4, r3
 8005c66:	f7ff ffe7 	bl	8005c38 <__malloc_lock>
 8005c6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <_free_r+0x94>)
 8005c6c:	9801      	ldr	r0, [sp, #4]
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	b933      	cbnz	r3, 8005c80 <_free_r+0x30>
 8005c72:	6063      	str	r3, [r4, #4]
 8005c74:	6014      	str	r4, [r2, #0]
 8005c76:	b003      	add	sp, #12
 8005c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c7c:	f7ff bfe2 	b.w	8005c44 <__malloc_unlock>
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d908      	bls.n	8005c96 <_free_r+0x46>
 8005c84:	6825      	ldr	r5, [r4, #0]
 8005c86:	1961      	adds	r1, r4, r5
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf01      	itttt	eq
 8005c8c:	6819      	ldreq	r1, [r3, #0]
 8005c8e:	685b      	ldreq	r3, [r3, #4]
 8005c90:	1949      	addeq	r1, r1, r5
 8005c92:	6021      	streq	r1, [r4, #0]
 8005c94:	e7ed      	b.n	8005c72 <_free_r+0x22>
 8005c96:	461a      	mov	r2, r3
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b10b      	cbz	r3, 8005ca0 <_free_r+0x50>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d9fa      	bls.n	8005c96 <_free_r+0x46>
 8005ca0:	6811      	ldr	r1, [r2, #0]
 8005ca2:	1855      	adds	r5, r2, r1
 8005ca4:	42a5      	cmp	r5, r4
 8005ca6:	d10b      	bne.n	8005cc0 <_free_r+0x70>
 8005ca8:	6824      	ldr	r4, [r4, #0]
 8005caa:	4421      	add	r1, r4
 8005cac:	1854      	adds	r4, r2, r1
 8005cae:	42a3      	cmp	r3, r4
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	d1e0      	bne.n	8005c76 <_free_r+0x26>
 8005cb4:	681c      	ldr	r4, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	6053      	str	r3, [r2, #4]
 8005cba:	4421      	add	r1, r4
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	e7da      	b.n	8005c76 <_free_r+0x26>
 8005cc0:	d902      	bls.n	8005cc8 <_free_r+0x78>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	6003      	str	r3, [r0, #0]
 8005cc6:	e7d6      	b.n	8005c76 <_free_r+0x26>
 8005cc8:	6825      	ldr	r5, [r4, #0]
 8005cca:	1961      	adds	r1, r4, r5
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf04      	itt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	6063      	str	r3, [r4, #4]
 8005cd6:	bf04      	itt	eq
 8005cd8:	1949      	addeq	r1, r1, r5
 8005cda:	6021      	streq	r1, [r4, #0]
 8005cdc:	6054      	str	r4, [r2, #4]
 8005cde:	e7ca      	b.n	8005c76 <_free_r+0x26>
 8005ce0:	b003      	add	sp, #12
 8005ce2:	bd30      	pop	{r4, r5, pc}
 8005ce4:	20004b3c 	.word	0x20004b3c

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
