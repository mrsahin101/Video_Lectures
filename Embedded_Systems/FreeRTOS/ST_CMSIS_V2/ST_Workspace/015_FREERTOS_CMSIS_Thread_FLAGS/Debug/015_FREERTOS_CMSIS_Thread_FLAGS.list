
015_FREERTOS_CMSIS_Thread_FLAGS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006338  08006338  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006340  08006340  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004acc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b40  20004b40  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019968  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bf  00000000  00000000  00039a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001330  00000000  00000000  0003e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003139  00000000  00000000  0003f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fc6  00000000  00000000  00042581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4b8c  00000000  00000000  00058547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d0d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058d0  00000000  00000000  0012d124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006238 	.word	0x08006238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006238 	.word	0x08006238

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 faea 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f826 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8b6 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f88a 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f002 fd36 	bl	8002fa8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <main+0x40>)
 800053e:	2100      	movs	r1, #0
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x44>)
 8000542:	f002 fd7b 	bl	800303c <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x48>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <main+0x4c>)
 800054e:	2100      	movs	r1, #0
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x50>)
 8000552:	f002 fd73 	bl	800303c <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <main+0x54>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f002 fd48 	bl	8002ff0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x3c>
 8000562:	bf00      	nop
 8000564:	08006278 	.word	0x08006278
 8000568:	080007d9 	.word	0x080007d9
 800056c:	200000d4 	.word	0x200000d4
 8000570:	0800629c 	.word	0x0800629c
 8000574:	080007f5 	.word	0x080007f5
 8000578:	200000d8 	.word	0x200000d8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fd8a 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe01 	bl	8001208 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f90c 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000618:	23b0      	movs	r3, #176	; 0xb0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f864 	bl	80016f8 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000636:	f000 f8f7 	bl	8000828 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 fd38 	bl	80020f8 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f8cb 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000090 	.word	0x20000090
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a31      	ldr	r2, [pc, #196]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_GPIO_Init+0xe4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_GPIO_Init+0xe8>)
 800072e:	f000 fd39 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000736:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_GPIO_Init+0xec>)
 8000748:	f000 fb90 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800074c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_GPIO_Init+0xe8>)
 8000766:	f000 fb81 	bl	8000e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2006      	movs	r0, #6
 8000770:	f000 fac0 	bl	8000cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000774:	2006      	movs	r0, #6
 8000776:	f000 fad9 	bl	8000d2c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000

08000790 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe99 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80007a2:	200a      	movs	r0, #10
 80007a4:	f7ff fe96 	bl	80004d4 <ITM_SendChar>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	80fb      	strh	r3, [r7, #6]
	osThreadFlagsSet(Task1Handle, 1);
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2101      	movs	r1, #1
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fccd 	bl	8003160 <osThreadFlagsSet>
	Task_action('!');
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ffe2 	bl	8000790 <Task_action>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000d4 	.word	0x200000d4

080007d8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, 0, osWaitForever);
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	2100      	movs	r1, #0
 80007e6:	2001      	movs	r0, #1
 80007e8:	f002 fd08 	bl	80031fc <osThreadFlagsWait>
	  Task_action('1');
 80007ec:	2031      	movs	r0, #49	; 0x31
 80007ee:	f7ff ffcf 	bl	8000790 <Task_action>
	  osThreadFlagsWait(1, 0, osWaitForever);
 80007f2:	e7f5      	b.n	80007e0 <StartTask1+0x8>

080007f4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f002 fd7e 	bl	80032fe <osDelay>
 8000802:	e7fb      	b.n	80007fc <StartTask2+0x8>

08000804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d101      	bne.n	800081a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000816:	f000 f995 	bl	8000b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40002000 	.word	0x40002000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a11      	ldr	r2, [pc, #68]	; (8000888 <HAL_MspInit+0x54>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x54>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x54>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x54>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 fa3b 	bl	8000cf4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <HAL_UART_MspInit+0x94>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d133      	bne.n	8000916 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a14      	ldr	r2, [pc, #80]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e6:	230c      	movs	r3, #12
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <HAL_UART_MspInit+0x9c>)
 8000902:	f000 fab3 	bl	8000e6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	2026      	movs	r0, #38	; 0x26
 800090c:	f000 f9f2 	bl	8000cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000910:	2026      	movs	r0, #38	; 0x26
 8000912:	f000 fa0b 	bl	8000d2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <HAL_InitTick+0xe4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <HAL_InitTick+0xe4>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <HAL_InitTick+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f8e8 	bl	8001b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000972:	f001 f8b9 	bl	8001ae8 <HAL_RCC_GetPCLK1Freq>
 8000976:	6378      	str	r0, [r7, #52]	; 0x34
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097a:	f001 f8b5 	bl	8001ae8 <HAL_RCC_GetPCLK1Freq>
 800097e:	4603      	mov	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <HAL_InitTick+0xe8>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9b      	lsrs	r3, r3, #18
 800098e:	3b01      	subs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_InitTick+0xec>)
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_InitTick+0xf0>)
 8000996:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <HAL_InitTick+0xec>)
 800099a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <HAL_InitTick+0xec>)
 80009a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_InitTick+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <HAL_InitTick+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_InitTick+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <HAL_InitTick+0xec>)
 80009ba:	f001 f8ef 	bl	8001b9c <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d11b      	bne.n	8000a04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009cc:	4812      	ldr	r0, [pc, #72]	; (8000a18 <HAL_InitTick+0xec>)
 80009ce:	f001 f93f 	bl	8001c50 <HAL_TIM_Base_Start_IT>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d111      	bne.n	8000a04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009e0:	202d      	movs	r0, #45	; 0x2d
 80009e2:	f000 f9a3 	bl	8000d2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d808      	bhi.n	80009fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	202d      	movs	r0, #45	; 0x2d
 80009f2:	f000 f97f 	bl	8000cf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_InitTick+0xf4>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e002      	b.n	8000a04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3738      	adds	r7, #56	; 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	200000dc 	.word	0x200000dc
 8000a1c:	40002000 	.word	0x40002000
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fbbf 	bl	80011d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <USART2_IRQHandler+0x10>)
 8000a66:	f001 fb95 	bl	8002194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000090 	.word	0x20000090

08000a74 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a7a:	f001 f959 	bl	8001d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000dc 	.word	0x200000dc

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f005 faaf 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd21 	bl	8000524 <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000af0:	08006348 	.word	0x08006348
  ldr r2, =_sbss
 8000af4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000af8:	20004b40 	.word	0x20004b40

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f8d8 	bl	8000cde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f7ff fefc 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe7e 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000124 	.word	0x20000124

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000124 	.word	0x20000124

08000b84 <__NVIC_SetPriorityGrouping>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff4c 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d06:	f7ff ff61 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f7ff ffb1 	bl	8000c78 <NVIC_EncodePriority>
 8000d16:	4602      	mov	r2, r0
 8000d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff80 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff54 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d56:	f7ff ff09 	bl	8000b6c <HAL_GetTick>
 8000d5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d008      	beq.n	8000d7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e052      	b.n	8000e20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0216 	bic.w	r2, r2, #22
 8000d88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d103      	bne.n	8000daa <HAL_DMA_Abort+0x62>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0208 	bic.w	r2, r2, #8
 8000db8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0201 	bic.w	r2, r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dca:	e013      	b.n	8000df4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dcc:	f7ff fece 	bl	8000b6c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d90c      	bls.n	8000df4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e015      	b.n	8000e20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1e4      	bne.n	8000dcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e06:	223f      	movs	r2, #63	; 0x3f
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d004      	beq.n	8000e46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00c      	b.n	8000e60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2205      	movs	r2, #5
 8000e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0201 	bic.w	r2, r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e16b      	b.n	8001160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 815a 	bne.w	800115a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80b4 	beq.w	800115a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b60      	ldr	r3, [pc, #384]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a5f      	ldr	r2, [pc, #380]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b5d      	ldr	r3, [pc, #372]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100e:	4a5b      	ldr	r2, [pc, #364]	; (800117c <HAL_GPIO_Init+0x310>)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x314>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d02b      	beq.n	8001092 <HAL_GPIO_Init+0x226>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x318>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x222>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x31c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x21e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x320>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x21a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x324>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x216>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x328>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x212>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x32c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x20e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x330>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x20a>
 8001072:	2307      	movs	r3, #7
 8001074:	e00e      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001076:	2308      	movs	r3, #8
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107a:	2306      	movs	r3, #6
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x310>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_GPIO_Init+0x334>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae90 	bls.w	8000e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40021400 	.word	0x40021400
 8001198:	40021800 	.word	0x40021800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fada 	bl	80007b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e267      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d075      	beq.n	8001312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4b85      	ldr	r3, [pc, #532]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d05b      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d157      	bne.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e242      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x74>
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a75      	ldr	r2, [pc, #468]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b70      	ldr	r3, [pc, #448]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6f      	ldr	r2, [pc, #444]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6c      	ldr	r2, [pc, #432]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 80012a0:	4b69      	ldr	r3, [pc, #420]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a68      	ldr	r2, [pc, #416]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc54 	bl	8000b6c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc50 	bl	8000b6c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e207      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc40 	bl	8000b6c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc3c 	bl	8000b6c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1f3      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c7      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4937      	ldr	r1, [pc, #220]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x244>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fbf5 	bl	8000b6c <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fbf1 	bl	8000b6c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a8      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4925      	ldr	r1, [pc, #148]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x244>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fbd4 	bl	8000b6c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbd0 	bl	8000b6c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e187      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d036      	beq.n	8001460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_RCC_OscConfig+0x248>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fbb4 	bl	8000b6c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fbb0 	bl	8000b6c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e167      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x200>
 8001426:	e01b      	b.n	8001460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x248>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb9d 	bl	8000b6c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	e00e      	b.n	8001454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fb99 	bl	8000b6c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d907      	bls.n	8001454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e150      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001448:	40023800 	.word	0x40023800
 800144c:	42470000 	.word	0x42470000
 8001450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ea      	bne.n	8001436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8097 	beq.w	800159c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b7d      	ldr	r3, [pc, #500]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a7c      	ldr	r2, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b7a      	ldr	r3, [pc, #488]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b77      	ldr	r3, [pc, #476]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a73      	ldr	r2, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb59 	bl	8000b6c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fb55 	bl	8000b6c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e10c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4b6a      	ldr	r3, [pc, #424]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2ea>
 80014e4:	4b64      	ldr	r3, [pc, #400]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a63      	ldr	r2, [pc, #396]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	e01c      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x30c>
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a57      	ldr	r2, [pc, #348]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	4b55      	ldr	r3, [pc, #340]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001526:	f023 0304 	bic.w	r3, r3, #4
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d015      	beq.n	8001560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fb1a 	bl	8000b6c <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fb16 	bl	8000b6c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0cb      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0ee      	beq.n	800153c <HAL_RCC_OscConfig+0x334>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fb04 	bl	8000b6c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fb00 	bl	8000b6c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0b5      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ee      	bne.n	8001568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a38      	ldr	r2, [pc, #224]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a1 	beq.w	80016e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d05c      	beq.n	800166c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d141      	bne.n	800163e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fad4 	bl	8000b6c <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fad0 	bl	8000b6c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e087      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	491b      	ldr	r1, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faa9 	bl	8000b6c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff faa5 	bl	8000b6c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e05c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x416>
 800163c:	e054      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa92 	bl	8000b6c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fa8e 	bl	8000b6c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e045      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x444>
 800166a:	e03d      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e038      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000
 8001680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d028      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d121      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d11a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016bc:	4293      	cmp	r3, r2
 80016be:	d111      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cc      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d044      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e067      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff f9c0 	bl	8000b6c <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff f9bc 	bl	8000b6c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e04f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f844 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	080062c0 	.word	0x080062c0
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c8:	b094      	sub	sp, #80	; 0x50
 80018ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d4:	2300      	movs	r3, #0
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018dc:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d00d      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	f200 80e1 	bhi.w	8001ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3a>
 80018f6:	e0db      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018fc:	e0db      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_GetSysClockFreq+0x208>)
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001902:	e0d8      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d063      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	2200      	movs	r2, #0
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
 8001924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
 8001932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001936:	4622      	mov	r2, r4
 8001938:	462b      	mov	r3, r5
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001948:	0150      	lsls	r0, r2, #5
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4621      	mov	r1, r4
 8001950:	1a51      	subs	r1, r2, r1
 8001952:	6139      	str	r1, [r7, #16]
 8001954:	4629      	mov	r1, r5
 8001956:	eb63 0301 	sbc.w	r3, r3, r1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001968:	4659      	mov	r1, fp
 800196a:	018b      	lsls	r3, r1, #6
 800196c:	4651      	mov	r1, sl
 800196e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001972:	4651      	mov	r1, sl
 8001974:	018a      	lsls	r2, r1, #6
 8001976:	4651      	mov	r1, sl
 8001978:	ebb2 0801 	subs.w	r8, r2, r1
 800197c:	4659      	mov	r1, fp
 800197e:	eb63 0901 	sbc.w	r9, r3, r1
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	4623      	mov	r3, r4
 800199c:	eb18 0303 	adds.w	r3, r8, r3
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	462b      	mov	r3, r5
 80019a4:	eb49 0303 	adc.w	r3, r9, r3
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019b6:	4629      	mov	r1, r5
 80019b8:	024b      	lsls	r3, r1, #9
 80019ba:	4621      	mov	r1, r4
 80019bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019c0:	4621      	mov	r1, r4
 80019c2:	024a      	lsls	r2, r1, #9
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ca:	2200      	movs	r2, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019d4:	f7fe fbfc 	bl	80001d0 <__aeabi_uldivmod>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4613      	mov	r3, r2
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e0:	e058      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	4611      	mov	r1, r2
 80019ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019fc:	4642      	mov	r2, r8
 80019fe:	464b      	mov	r3, r9
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	0159      	lsls	r1, r3, #5
 8001a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0e:	0150      	lsls	r0, r2, #5
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4641      	mov	r1, r8
 8001a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a34:	ebb2 040a 	subs.w	r4, r2, sl
 8001a38:	eb63 050b 	sbc.w	r5, r3, fp
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	00eb      	lsls	r3, r5, #3
 8001a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4a:	00e2      	lsls	r2, r4, #3
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4643      	mov	r3, r8
 8001a52:	18e3      	adds	r3, r4, r3
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	464b      	mov	r3, r9
 8001a58:	eb45 0303 	adc.w	r3, r5, r3
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	028b      	lsls	r3, r1, #10
 8001a6e:	4621      	mov	r1, r4
 8001a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a74:	4621      	mov	r1, r4
 8001a76:	028a      	lsls	r2, r1, #10
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	61fa      	str	r2, [r7, #28]
 8001a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a88:	f7fe fba2 	bl	80001d0 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3750      	adds	r7, #80	; 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aec:	f7ff fff0 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	080062d0 	.word	0x080062d0

08001b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b14:	f7ff ffdc 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0b5b      	lsrs	r3, r3, #13
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	080062d0 	.word	0x080062d0

08001b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	220f      	movs	r2, #15
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_RCC_GetClockConfig+0x60>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0207 	and.w	r2, r3, #7
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f839 	bl	8001c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 f9d8 	bl	8001f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d001      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e04e      	b.n	8001d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d022      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d01d      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d111      	bne.n	8001cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d010      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf2:	e007      	b.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	40010400 	.word	0x40010400
 8001d28:	40014000 	.word	0x40014000
 8001d2c:	40001800 	.word	0x40001800

08001d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0202 	mvn.w	r2, #2
 8001d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8ee 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8e0 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8f1 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0204 	mvn.w	r2, #4
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8c4 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8b6 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8c7 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0208 	mvn.w	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89a 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f88c 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f89d 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0210 	mvn.w	r2, #16
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f870 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f862 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f873 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0201 	mvn.w	r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fca8 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f902 	bl	80020e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f838 	bl	8001f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0220 	mvn.w	r2, #32
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8cc 	bl	80020d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d00f      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3c      	ldr	r2, [pc, #240]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3a      	ldr	r2, [pc, #232]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d027      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d023      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d017      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <TIM_Base_SetConfig+0x128>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <TIM_Base_SetConfig+0x12c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <TIM_Base_SetConfig+0x130>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <TIM_Base_SetConfig+0x134>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <TIM_Base_SetConfig+0x138>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <TIM_Base_SetConfig+0x13c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0xf8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d103      	bne.n	8002090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	615a      	str	r2, [r3, #20]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40000c00 	.word	0x40000c00
 80020b4:	40010400 	.word	0x40010400
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800
 80020c4:	40001800 	.word	0x40001800
 80020c8:	40001c00 	.word	0x40001c00
 80020cc:	40002000 	.word	0x40002000

080020d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e03f      	b.n	800218a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fbb4 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2224      	movs	r2, #36	; 0x24
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800213a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fc7b 	bl	8002a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0ba      	sub	sp, #232	; 0xe8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_UART_IRQHandler+0x66>
 80021e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fb65 	bl	80028c2 <UART_Receive_IT>
      return;
 80021f8:	e256      	b.n	80026a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80de 	beq.w	80023c0 <HAL_UART_IRQHandler+0x22c>
 8002204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002214:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80d1 	beq.w	80023c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800221e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_UART_IRQHandler+0xae>
 800222a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_UART_IRQHandler+0xd2>
 800224e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0202 	orr.w	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_UART_IRQHandler+0xf6>
 8002272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0204 	orr.w	r2, r3, #4
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800228a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d011      	beq.n	80022ba <HAL_UART_IRQHandler+0x126>
 8002296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0208 	orr.w	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 81ed 	beq.w	800269e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_UART_IRQHandler+0x14e>
 80022d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 faf0 	bl	80028c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_UART_IRQHandler+0x17a>
 8002306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d04f      	beq.n	80023ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f9f8 	bl	8002704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d141      	bne.n	80023a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3314      	adds	r3, #20
 8002328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800233c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3314      	adds	r3, #20
 800234a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800234e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800235a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800235e:	e841 2300 	strex	r3, r2, [r1]
 8002362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1d9      	bne.n	8002322 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	2b00      	cmp	r3, #0
 8002374:	d013      	beq.n	800239e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	4a7d      	ldr	r2, [pc, #500]	; (8002570 <HAL_UART_IRQHandler+0x3dc>)
 800237c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fd50 	bl	8000e28 <HAL_DMA_Abort_IT>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002398:	4610      	mov	r0, r2
 800239a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239c:	e00e      	b.n	80023bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f99a 	bl	80026d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a4:	e00a      	b.n	80023bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f996 	bl	80026d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ac:	e006      	b.n	80023bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f992 	bl	80026d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023ba:	e170      	b.n	800269e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023bc:	bf00      	nop
    return;
 80023be:	e16e      	b.n	800269e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 814a 	bne.w	800265e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8143 	beq.w	800265e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 813c 	beq.w	800265e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	f040 80b4 	bne.w	8002574 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8140 	beq.w	80026a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800242a:	429a      	cmp	r2, r3
 800242c:	f080 8139 	bcs.w	80026a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002436:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002442:	f000 8088 	beq.w	8002556 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800245c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800247e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800248a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1d9      	bne.n	8002446 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3314      	adds	r3, #20
 8002498:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249c:	e853 3f00 	ldrex	r3, [r3]
 80024a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3314      	adds	r3, #20
 80024b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024c2:	e841 2300 	strex	r3, r2, [r1]
 80024c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e1      	bne.n	8002492 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3314      	adds	r3, #20
 80024d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d8:	e853 3f00 	ldrex	r3, [r3]
 80024dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024fa:	e841 2300 	strex	r3, r2, [r1]
 80024fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e3      	bne.n	80024ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	e853 3f00 	ldrex	r3, [r3]
 8002522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002526:	f023 0310 	bic.w	r3, r3, #16
 800252a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002538:	65ba      	str	r2, [r7, #88]	; 0x58
 800253a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800253e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002540:	e841 2300 	strex	r3, r2, [r1]
 8002544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e3      	bne.n	8002514 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fbf9 	bl	8000d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800255e:	b29b      	uxth	r3, r3
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8c0 	bl	80026ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800256c:	e099      	b.n	80026a2 <HAL_UART_IRQHandler+0x50e>
 800256e:	bf00      	nop
 8002570:	080027cb 	.word	0x080027cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800257c:	b29b      	uxth	r3, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 808b 	beq.w	80026a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8086 	beq.w	80026a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330c      	adds	r3, #12
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025be:	647a      	str	r2, [r7, #68]	; 0x44
 80025c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025c6:	e841 2300 	strex	r3, r2, [r1]
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e3      	bne.n	800259a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3314      	adds	r3, #20
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	623b      	str	r3, [r7, #32]
   return(result);
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3314      	adds	r3, #20
 80025f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025f6:	633a      	str	r2, [r7, #48]	; 0x30
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fe:	e841 2300 	strex	r3, r2, [r1]
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e3      	bne.n	80025d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	60fb      	str	r3, [r7, #12]
   return(result);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0310 	bic.w	r3, r3, #16
 800262e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800263c:	61fa      	str	r2, [r7, #28]
 800263e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002640:	69b9      	ldr	r1, [r7, #24]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	e841 2300 	strex	r3, r2, [r1]
 8002648:	617b      	str	r3, [r7, #20]
   return(result);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e3      	bne.n	8002618 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002654:	4619      	mov	r1, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f848 	bl	80026ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800265c:	e023      	b.n	80026a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_UART_IRQHandler+0x4ea>
 800266a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8bb 	bl	80027f2 <UART_Transmit_IT>
    return;
 800267c:	e014      	b.n	80026a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00e      	beq.n	80026a8 <HAL_UART_IRQHandler+0x514>
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8fb 	bl	8002892 <UART_EndTransmit_IT>
    return;
 800269c:	e004      	b.n	80026a8 <HAL_UART_IRQHandler+0x514>
    return;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <HAL_UART_IRQHandler+0x514>
      return;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <HAL_UART_IRQHandler+0x514>
      return;
 80026a6:	bf00      	nop
  }
}
 80026a8:	37e8      	adds	r7, #232	; 0xe8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop

080026b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b095      	sub	sp, #84	; 0x54
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800272c:	643a      	str	r2, [r7, #64]	; 0x40
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002734:	e841 2300 	strex	r3, r2, [r1]
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e5      	bne.n	800270c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3314      	adds	r3, #20
 8002746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	e853 3f00 	ldrex	r3, [r3]
 800274e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3314      	adds	r3, #20
 800275e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e5      	bne.n	8002740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	2b01      	cmp	r3, #1
 800277a:	d119      	bne.n	80027b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	60bb      	str	r3, [r7, #8]
   return(result);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f023 0310 	bic.w	r3, r3, #16
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800279c:	61ba      	str	r2, [r7, #24]
 800279e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	613b      	str	r3, [r7, #16]
   return(result);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e5      	bne.n	800277c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027be:	bf00      	nop
 80027c0:	3754      	adds	r7, #84	; 0x54
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff ff77 	bl	80026d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b21      	cmp	r3, #33	; 0x21
 8002804:	d13e      	bne.n	8002884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d114      	bne.n	800283a <UART_Transmit_IT+0x48>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d110      	bne.n	800283a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c9a      	adds	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	e008      	b.n	800284c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6211      	str	r1, [r2, #32]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fefc 	bl	80026b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b08c      	sub	sp, #48	; 0x30
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b22      	cmp	r3, #34	; 0x22
 80028d4:	f040 80ab 	bne.w	8002a2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d117      	bne.n	8002912 <UART_Receive_IT+0x50>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	b29a      	uxth	r2, r3
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
 8002910:	e026      	b.n	8002960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d007      	beq.n	8002936 <UART_Receive_IT+0x74>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <UART_Receive_IT+0x82>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e008      	b.n	8002956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002950:	b2da      	uxtb	r2, r3
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002970:	2b00      	cmp	r3, #0
 8002972:	d15a      	bne.n	8002a2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0220 	bic.w	r2, r2, #32
 8002982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d135      	bne.n	8002a20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f023 0310 	bic.w	r3, r3, #16
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	623a      	str	r2, [r7, #32]
 80029dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	69f9      	ldr	r1, [r7, #28]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e5      	bne.n	80029ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d10a      	bne.n	8002a12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fe67 	bl	80026ec <HAL_UARTEx_RxEventCallback>
 8002a1e:	e002      	b.n	8002a26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fe4f 	bl	80026c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e002      	b.n	8002a30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3730      	adds	r7, #48	; 0x30
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3c:	b0c0      	sub	sp, #256	; 0x100
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	ea40 0301 	orr.w	r3, r0, r1
 8002a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a90:	f021 010c 	bic.w	r1, r1, #12
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab2:	6999      	ldr	r1, [r3, #24]
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	ea40 0301 	orr.w	r3, r0, r1
 8002abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <UART_SetConfig+0x2cc>)
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d005      	beq.n	8002ad8 <UART_SetConfig+0xa0>
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b8d      	ldr	r3, [pc, #564]	; (8002d08 <UART_SetConfig+0x2d0>)
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d104      	bne.n	8002ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff f81a 	bl	8001b10 <HAL_RCC_GetPCLK2Freq>
 8002adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ae0:	e003      	b.n	8002aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ae2:	f7ff f801 	bl	8001ae8 <HAL_RCC_GetPCLK1Freq>
 8002ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af4:	f040 810c 	bne.w	8002d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afc:	2200      	movs	r2, #0
 8002afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b0a:	4622      	mov	r2, r4
 8002b0c:	462b      	mov	r3, r5
 8002b0e:	1891      	adds	r1, r2, r2
 8002b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b12:	415b      	adcs	r3, r3
 8002b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	eb12 0801 	adds.w	r8, r2, r1
 8002b20:	4629      	mov	r1, r5
 8002b22:	eb43 0901 	adc.w	r9, r3, r1
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b3a:	4690      	mov	r8, r2
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	eb18 0303 	adds.w	r3, r8, r3
 8002b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b48:	462b      	mov	r3, r5
 8002b4a:	eb49 0303 	adc.w	r3, r9, r3
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b66:	460b      	mov	r3, r1
 8002b68:	18db      	adds	r3, r3, r3
 8002b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	eb42 0303 	adc.w	r3, r2, r3
 8002b72:	657b      	str	r3, [r7, #84]	; 0x54
 8002b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b7c:	f7fd fb28 	bl	80001d0 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002b86:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	011c      	lsls	r4, r3, #4
 8002b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	1891      	adds	r1, r2, r2
 8002ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ba8:	415b      	adcs	r3, r3
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd0:	4692      	mov	sl, r2
 8002bd2:	469b      	mov	fp, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bde:	464b      	mov	r3, r9
 8002be0:	eb4b 0303 	adc.w	r3, fp, r3
 8002be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	18db      	adds	r3, r3, r3
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
 8002c02:	4613      	mov	r3, r2
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
 8002c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c12:	f7fd fadd 	bl	80001d0 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2264      	movs	r2, #100	; 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002c34:	fba3 2302 	umull	r2, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c40:	441c      	add	r4, r3
 8002c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	6339      	str	r1, [r7, #48]	; 0x30
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cb8:	460b      	mov	r3, r1
 8002cba:	18db      	adds	r3, r3, r3
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cce:	f7fd fa7f 	bl	80001d0 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2164      	movs	r1, #100	; 0x64
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3332      	adds	r3, #50	; 0x32
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	f003 0207 	and.w	r2, r3, #7
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4422      	add	r2, r4
 8002cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d00:	e105      	b.n	8002f0e <UART_SetConfig+0x4d6>
 8002d02:	bf00      	nop
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d22:	4642      	mov	r2, r8
 8002d24:	464b      	mov	r3, r9
 8002d26:	1891      	adds	r1, r2, r2
 8002d28:	6239      	str	r1, [r7, #32]
 8002d2a:	415b      	adcs	r3, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d32:	4641      	mov	r1, r8
 8002d34:	1854      	adds	r4, r2, r1
 8002d36:	4649      	mov	r1, r9
 8002d38:	eb43 0501 	adc.w	r5, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d58:	464b      	mov	r3, r9
 8002d5a:	eb45 0303 	adc.w	r3, r5, r3
 8002d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d7e:	4629      	mov	r1, r5
 8002d80:	008b      	lsls	r3, r1, #2
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d88:	4621      	mov	r1, r4
 8002d8a:	008a      	lsls	r2, r1, #2
 8002d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d90:	f7fd fa1e 	bl	80001d0 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b60      	ldr	r3, [pc, #384]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011c      	lsls	r4, r3, #4
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	61b9      	str	r1, [r7, #24]
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	1851      	adds	r1, r2, r1
 8002dc8:	6139      	str	r1, [r7, #16]
 8002dca:	4649      	mov	r1, r9
 8002dcc:	414b      	adcs	r3, r1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ddc:	4659      	mov	r1, fp
 8002dde:	00cb      	lsls	r3, r1, #3
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de6:	4651      	mov	r1, sl
 8002de8:	00ca      	lsls	r2, r1, #3
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	4642      	mov	r2, r8
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df8:	464b      	mov	r3, r9
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	008b      	lsls	r3, r1, #2
 8002e20:	4641      	mov	r1, r8
 8002e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e26:	4641      	mov	r1, r8
 8002e28:	008a      	lsls	r2, r1, #2
 8002e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e2e:	f7fd f9cf 	bl	80001d0 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002e38:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2164      	movs	r1, #100	; 0x64
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e56:	441c      	add	r4, r3
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e60:	677a      	str	r2, [r7, #116]	; 0x74
 8002e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e66:	4642      	mov	r2, r8
 8002e68:	464b      	mov	r3, r9
 8002e6a:	1891      	adds	r1, r2, r2
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	415b      	adcs	r3, r3
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e76:	4641      	mov	r1, r8
 8002e78:	1851      	adds	r1, r2, r1
 8002e7a:	6039      	str	r1, [r7, #0]
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	414b      	adcs	r3, r1
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e8e:	4659      	mov	r1, fp
 8002e90:	00cb      	lsls	r3, r1, #3
 8002e92:	4651      	mov	r1, sl
 8002e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e98:	4651      	mov	r1, sl
 8002e9a:	00ca      	lsls	r2, r1, #3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	460a      	mov	r2, r1
 8002eac:	eb42 0303 	adc.w	r3, r2, r3
 8002eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eca:	4649      	mov	r1, r9
 8002ecc:	008b      	lsls	r3, r1, #2
 8002ece:	4641      	mov	r1, r8
 8002ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	008a      	lsls	r2, r1, #2
 8002ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002edc:	f7fd f978 	bl	80001d0 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2164      	movs	r1, #100	; 0x64
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	3332      	adds	r3, #50	; 0x32
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4422      	add	r2, r4
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	51eb851f 	.word	0x51eb851f

08002f20 <__NVIC_SetPriority>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db0a      	blt.n	8002f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	490c      	ldr	r1, [pc, #48]	; (8002f6c <__NVIC_SetPriority+0x4c>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f48:	e00a      	b.n	8002f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4908      	ldr	r1, [pc, #32]	; (8002f70 <__NVIC_SetPriority+0x50>)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3b04      	subs	r3, #4
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	761a      	strb	r2, [r3, #24]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SysTick_Handler+0x1c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002f7c:	f001 fdf6 	bl	8004b6c <xTaskGetSchedulerState>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d001      	beq.n	8002f8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002f86:	f002 fddf 	bl	8005b48 <xPortSysTickHandler>
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f98:	2100      	movs	r1, #0
 8002f9a:	f06f 0004 	mvn.w	r0, #4
 8002f9e:	f7ff ffbf 	bl	8002f20 <__NVIC_SetPriority>
#endif
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fae:	f3ef 8305 	mrs	r3, IPSR
 8002fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8002fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002fba:	f06f 0305 	mvn.w	r3, #5
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	e00c      	b.n	8002fdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <osKernelInitialize+0x44>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <osKernelInitialize+0x44>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	e002      	b.n	8002fdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002fdc:	687b      	ldr	r3, [r7, #4]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000128 	.word	0x20000128

08002ff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff6:	f3ef 8305 	mrs	r3, IPSR
 8002ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8002ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003002:	f06f 0305 	mvn.w	r3, #5
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	e010      	b.n	800302c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <osKernelStart+0x48>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d109      	bne.n	8003026 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003012:	f7ff ffbf 	bl	8002f94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <osKernelStart+0x48>)
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800301c:	f001 f94a 	bl	80042b4 <vTaskStartScheduler>
      stat = osOK;
 8003020:	2300      	movs	r3, #0
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	e002      	b.n	800302c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800302c:	687b      	ldr	r3, [r7, #4]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000128 	.word	0x20000128

0800303c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af04      	add	r7, sp, #16
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800304c:	f3ef 8305 	mrs	r3, IPSR
 8003050:	617b      	str	r3, [r7, #20]
  return(result);
 8003052:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003054:	2b00      	cmp	r3, #0
 8003056:	d17e      	bne.n	8003156 <osThreadNew+0x11a>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d07b      	beq.n	8003156 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003062:	2318      	movs	r3, #24
 8003064:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d045      	beq.n	8003102 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <osThreadNew+0x48>
        name = attr->name;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <osThreadNew+0x6e>
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b38      	cmp	r3, #56	; 0x38
 800309c:	d805      	bhi.n	80030aa <osThreadNew+0x6e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <osThreadNew+0x72>
        return (NULL);
 80030aa:	2300      	movs	r3, #0
 80030ac:	e054      	b.n	8003158 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00e      	beq.n	80030e4 <osThreadNew+0xa8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2bbb      	cmp	r3, #187	; 0xbb
 80030cc:	d90a      	bls.n	80030e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <osThreadNew+0xa8>
        mem = 1;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e010      	b.n	8003106 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10c      	bne.n	8003106 <osThreadNew+0xca>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <osThreadNew+0xca>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <osThreadNew+0xca>
          mem = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e001      	b.n	8003106 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d110      	bne.n	800312e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003114:	9202      	str	r2, [sp, #8]
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 feda 	bl	8003edc <xTaskCreateStatic>
 8003128:	4603      	mov	r3, r0
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	e013      	b.n	8003156 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d110      	bne.n	8003156 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	b29a      	uxth	r2, r3
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 ff25 	bl	8003f96 <xTaskCreate>
 800314c:	4603      	mov	r3, r0
 800314e:	2b01      	cmp	r3, #1
 8003150:	d001      	beq.n	8003156 <osThreadNew+0x11a>
            hTask = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003156:	693b      	ldr	r3, [r7, #16]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3728      	adds	r7, #40	; 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <osThreadFlagsSet+0x1a>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	da03      	bge.n	8003182 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800317a:	f06f 0303 	mvn.w	r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e035      	b.n	80031ee <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003188:	f3ef 8305 	mrs	r3, IPSR
 800318c:	613b      	str	r3, [r7, #16]
  return(result);
 800318e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01f      	beq.n	80031d4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	2201      	movs	r2, #1
 80031a2:	6839      	ldr	r1, [r7, #0]
 80031a4:	6978      	ldr	r0, [r7, #20]
 80031a6:	f001 fe8b 	bl	8004ec0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	2200      	movs	r2, #0
 80031b0:	9200      	str	r2, [sp, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f001 fe82 	bl	8004ec0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d015      	beq.n	80031ee <osThreadFlagsSet+0x8e>
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <osThreadFlagsSet+0x98>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	e00c      	b.n	80031ee <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80031d4:	2300      	movs	r3, #0
 80031d6:	2201      	movs	r2, #1
 80031d8:	6839      	ldr	r1, [r7, #0]
 80031da:	6978      	ldr	r0, [r7, #20]
 80031dc:	f001 fdb2 	bl	8004d44 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	6978      	ldr	r0, [r7, #20]
 80031ea:	f001 fdab 	bl	8004d44 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	; 0x30
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003208:	f3ef 8305 	mrs	r3, IPSR
 800320c:	617b      	str	r3, [r7, #20]
  return(result);
 800320e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8003214:	f06f 0305 	mvn.w	r3, #5
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321a:	e06b      	b.n	80032f4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	da03      	bge.n	800322a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8003222:	f06f 0303 	mvn.w	r3, #3
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003228:	e064      	b.n	80032f4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
 8003238:	e001      	b.n	800323e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8003246:	f001 f951 	bl	80044ec <xTaskGetTickCount>
 800324a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800324c:	f107 0210 	add.w	r2, r7, #16
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003254:	2000      	movs	r0, #0
 8003256:	f001 fd15 	bl	8004c84 <xTaskNotifyWait>
 800325a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d137      	bne.n	80032d2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8003262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326e:	4313      	orrs	r3, r2
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00c      	beq.n	8003296 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	4013      	ands	r3, r2
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	429a      	cmp	r2, r3
 8003286:	d032      	beq.n	80032ee <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800328e:	f06f 0302 	mvn.w	r3, #2
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003294:	e02e      	b.n	80032f4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d128      	bne.n	80032f2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80032a6:	f06f 0302 	mvn.w	r3, #2
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80032ac:	e022      	b.n	80032f4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80032ae:	f001 f91d 	bl	80044ec <xTaskGetTickCount>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	429a      	cmp	r2, r3
 80032c0:	d902      	bls.n	80032c8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	e00e      	b.n	80032e6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80032c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	e009      	b.n	80032e6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d103      	bne.n	80032e0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80032d8:	f06f 0302 	mvn.w	r3, #2
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032de:	e002      	b.n	80032e6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80032e0:	f06f 0301 	mvn.w	r3, #1
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1af      	bne.n	800324c <osThreadFlagsWait+0x50>
 80032ec:	e002      	b.n	80032f4 <osThreadFlagsWait+0xf8>
            break;
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <osThreadFlagsWait+0xf8>
            break;
 80032f2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3730      	adds	r7, #48	; 0x30
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003306:	f3ef 8305 	mrs	r3, IPSR
 800330a:	60bb      	str	r3, [r7, #8]
  return(result);
 800330c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <osDelay+0x1c>
    stat = osErrorISR;
 8003312:	f06f 0305 	mvn.w	r3, #5
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e007      	b.n	800332a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <osDelay+0x2c>
      vTaskDelay(ticks);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 ff91 	bl	800424c <vTaskDelay>
    }
  }

  return (stat);
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <vApplicationGetIdleTaskMemory+0x2c>)
 8003344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <vApplicationGetIdleTaskMemory+0x30>)
 800334a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2000012c 	.word	0x2000012c
 8003364:	200001e8 	.word	0x200001e8

08003368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <vApplicationGetTimerTaskMemory+0x2c>)
 8003378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4a06      	ldr	r2, [pc, #24]	; (8003398 <vApplicationGetTimerTaskMemory+0x30>)
 800337e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003386:	601a      	str	r2, [r3, #0]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	200003e8 	.word	0x200003e8
 8003398:	200004a4 	.word	0x200004a4

0800339c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f103 0208 	add.w	r2, r3, #8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f103 0208 	add.w	r2, r3, #8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f103 0208 	add.w	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800343e:	b480      	push	{r7}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d103      	bne.n	800345e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e00c      	b.n	8003478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3308      	adds	r3, #8
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e002      	b.n	800346c <vListInsert+0x2e>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	d2f6      	bcs.n	8003466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	601a      	str	r2, [r3, #0]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d103      	bne.n	80034e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800352e:	f002 fa79 	bl	8005a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	3b01      	subs	r3, #1
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	441a      	add	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d114      	bne.n	80035ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01a      	beq.n	80035c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3310      	adds	r3, #16
 8003590:	4618      	mov	r0, r3
 8003592:	f001 f929 	bl	80047e8 <xTaskRemoveFromEventList>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d012      	beq.n	80035c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <xQueueGenericReset+0xcc>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	e009      	b.n	80035c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3310      	adds	r3, #16
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fef2 	bl	800339c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3324      	adds	r3, #36	; 0x24
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff feed 	bl	800339c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035c2:	f002 fa5f 	bl	8005a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035c6:	2301      	movs	r3, #1
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08e      	sub	sp, #56	; 0x38
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <xQueueGenericCreateStatic+0x52>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <xQueueGenericCreateStatic+0x56>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueGenericCreateStatic+0x58>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	623b      	str	r3, [r7, #32]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <xQueueGenericCreateStatic+0x7e>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <xQueueGenericCreateStatic+0x82>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <xQueueGenericCreateStatic+0x84>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	61fb      	str	r3, [r7, #28]
}
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003672:	2350      	movs	r3, #80	; 0x50
 8003674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b50      	cmp	r3, #80	; 0x50
 800367a:	d00a      	beq.n	8003692 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61bb      	str	r3, [r7, #24]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003692:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f805 	bl	80036c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036bc:	4618      	mov	r0, r3
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d103      	bne.n	80036e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e002      	b.n	80036e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036f2:	2101      	movs	r1, #1
 80036f4:	69b8      	ldr	r0, [r7, #24]
 80036f6:	f7ff ff05 	bl	8003504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	; 0x38
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800371a:	2300      	movs	r3, #0
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xQueueGenericSend+0x32>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <xQueueGenericSend+0x40>
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <xQueueGenericSend+0x44>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <xQueueGenericSend+0x46>
 8003750:	2300      	movs	r3, #0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <xQueueGenericSend+0x60>
	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d103      	bne.n	800377a <xQueueGenericSend+0x6e>
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <xQueueGenericSend+0x72>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueGenericSend+0x74>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericSend+0x8e>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	623b      	str	r3, [r7, #32]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800379a:	f001 f9e7 	bl	8004b6c <xTaskGetSchedulerState>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <xQueueGenericSend+0x9e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <xQueueGenericSend+0xa2>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <xQueueGenericSend+0xa4>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericSend+0xbe>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	61fb      	str	r3, [r7, #28]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ca:	f002 f92b 	bl	8005a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <xQueueGenericSend+0xd4>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d129      	bne.n	8003834 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037e6:	f000 fa0b 	bl	8003c00 <prvCopyDataToQueue>
 80037ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	3324      	adds	r3, #36	; 0x24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fff5 	bl	80047e8 <xTaskRemoveFromEventList>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003804:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <xQueueGenericSend+0x1f8>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	e00a      	b.n	800382c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800381c:	4b39      	ldr	r3, [pc, #228]	; (8003904 <xQueueGenericSend+0x1f8>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800382c:	f002 f92a 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 8003830:	2301      	movs	r3, #1
 8003832:	e063      	b.n	80038fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800383a:	f002 f923 	bl	8005a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800383e:	2300      	movs	r3, #0
 8003840:	e05c      	b.n	80038fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4618      	mov	r0, r3
 800384e:	f001 f82f 	bl	80048b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003852:	2301      	movs	r3, #1
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003856:	f002 f915 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800385a:	f000 fd9b 	bl	8004394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800385e:	f002 f8e1 	bl	8005a24 <vPortEnterCritical>
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003868:	b25b      	sxtb	r3, r3
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d103      	bne.n	8003878 <xQueueGenericSend+0x16c>
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800387e:	b25b      	sxtb	r3, r3
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d103      	bne.n	800388e <xQueueGenericSend+0x182>
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800388e:	f002 f8f9 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003892:	1d3a      	adds	r2, r7, #4
 8003894:	f107 0314 	add.w	r3, r7, #20
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f001 f81e 	bl	80048dc <xTaskCheckForTimeOut>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d124      	bne.n	80038f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a8:	f000 faa2 	bl	8003df0 <prvIsQueueFull>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	3310      	adds	r3, #16
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 ff44 	bl	8004748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038c2:	f000 fa2d 	bl	8003d20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038c6:	f000 fd73 	bl	80043b0 <xTaskResumeAll>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f af7c 	bne.w	80037ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <xQueueGenericSend+0x1f8>)
 80038d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	e772      	b.n	80037ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038e6:	f000 fa1b 	bl	8003d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ea:	f000 fd61 	bl	80043b0 <xTaskResumeAll>
 80038ee:	e76c      	b.n	80037ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038f2:	f000 fa15 	bl	8003d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038f6:	f000 fd5b 	bl	80043b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3738      	adds	r7, #56	; 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b090      	sub	sp, #64	; 0x40
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <xQueueGenericSendFromISR+0x3c>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <xQueueGenericSendFromISR+0x40>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <xQueueGenericSendFromISR+0x42>
 8003948:	2300      	movs	r3, #0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003960:	bf00      	nop
 8003962:	e7fe      	b.n	8003962 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d103      	bne.n	8003972 <xQueueGenericSendFromISR+0x6a>
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <xQueueGenericSendFromISR+0x6e>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <xQueueGenericSendFromISR+0x70>
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	623b      	str	r3, [r7, #32]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003992:	f002 f929 	bl	8005be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003996:	f3ef 8211 	mrs	r2, BASEPRI
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	61fa      	str	r2, [r7, #28]
 80039ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <xQueueGenericSendFromISR+0xbc>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d12f      	bne.n	8003a24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039da:	f000 f911 	bl	8003c00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d112      	bne.n	8003a0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	3324      	adds	r3, #36	; 0x24
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fef7 	bl	80047e8 <xTaskRemoveFromEventList>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e007      	b.n	8003a1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a12:	3301      	adds	r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	b25a      	sxtb	r2, r3
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a22:	e001      	b.n	8003a28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3740      	adds	r7, #64	; 0x40
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <xQueueReceive+0x30>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	623b      	str	r3, [r7, #32]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <xQueueReceive+0x3e>
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <xQueueReceive+0x42>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <xQueueReceive+0x44>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xQueueReceive+0x5e>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	61fb      	str	r3, [r7, #28]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a9e:	f001 f865 	bl	8004b6c <xTaskGetSchedulerState>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <xQueueReceive+0x6e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <xQueueReceive+0x72>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <xQueueReceive+0x74>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <xQueueReceive+0x8e>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	61bb      	str	r3, [r7, #24]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ace:	f001 ffa9 	bl	8005a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01f      	beq.n	8003b1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae2:	f000 f8f7 	bl	8003cd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00f      	beq.n	8003b16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	3310      	adds	r3, #16
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fe74 	bl	80047e8 <xTaskRemoveFromEventList>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <xQueueReceive+0x1bc>)
 8003b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b16:	f001 ffb5 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e069      	b.n	8003bf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b24:	f001 ffae 	bl	8005a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e062      	b.n	8003bf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b32:	f107 0310 	add.w	r3, r7, #16
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 feba 	bl	80048b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b40:	f001 ffa0 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b44:	f000 fc26 	bl	8004394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b48:	f001 ff6c 	bl	8005a24 <vPortEnterCritical>
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b52:	b25b      	sxtb	r3, r3
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d103      	bne.n	8003b62 <xQueueReceive+0x122>
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b68:	b25b      	sxtb	r3, r3
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d103      	bne.n	8003b78 <xQueueReceive+0x138>
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b78:	f001 ff84 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b7c:	1d3a      	adds	r2, r7, #4
 8003b7e:	f107 0310 	add.w	r3, r7, #16
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fea9 	bl	80048dc <xTaskCheckForTimeOut>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d123      	bne.n	8003bd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b92:	f000 f917 	bl	8003dc4 <prvIsQueueEmpty>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d017      	beq.n	8003bcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	3324      	adds	r3, #36	; 0x24
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fdcf 	bl	8004748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bac:	f000 f8b8 	bl	8003d20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bb0:	f000 fbfe 	bl	80043b0 <xTaskResumeAll>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d189      	bne.n	8003ace <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <xQueueReceive+0x1bc>)
 8003bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	e780      	b.n	8003ace <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bce:	f000 f8a7 	bl	8003d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bd2:	f000 fbed 	bl	80043b0 <xTaskResumeAll>
 8003bd6:	e77a      	b.n	8003ace <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bda:	f000 f8a1 	bl	8003d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bde:	f000 fbe7 	bl	80043b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003be4:	f000 f8ee 	bl	8003dc4 <prvIsQueueEmpty>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f43f af6f 	beq.w	8003ace <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3730      	adds	r7, #48	; 0x30
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d14d      	bne.n	8003cc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 ffbc 	bl	8004ba8 <xTaskPriorityDisinherit>
 8003c30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	e043      	b.n	8003cc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d119      	bne.n	8003c74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6858      	ldr	r0, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	f002 fa1c 	bl	8006088 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	441a      	add	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d32b      	bcc.n	8003cc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	e026      	b.n	8003cc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68d8      	ldr	r0, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	f002 fa02 	bl	8006088 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	425b      	negs	r3, r3
 8003c8e:	441a      	add	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	425b      	negs	r3, r3
 8003caa:	441a      	add	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d105      	bne.n	8003cc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cca:	697b      	ldr	r3, [r7, #20]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d018      	beq.n	8003d18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	441a      	add	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d303      	bcc.n	8003d08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68d9      	ldr	r1, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	461a      	mov	r2, r3
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	f002 f9b8 	bl	8006088 <memcpy>
	}
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d28:	f001 fe7c 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d34:	e011      	b.n	8003d5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d012      	beq.n	8003d64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3324      	adds	r3, #36	; 0x24
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fd50 	bl	80047e8 <xTaskRemoveFromEventList>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d4e:	f000 fe27 	bl	80049a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	dce9      	bgt.n	8003d36 <prvUnlockQueue+0x16>
 8003d62:	e000      	b.n	8003d66 <prvUnlockQueue+0x46>
					break;
 8003d64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	22ff      	movs	r2, #255	; 0xff
 8003d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d6e:	f001 fe89 	bl	8005a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d72:	f001 fe57 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d7e:	e011      	b.n	8003da4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3310      	adds	r3, #16
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fd2b 	bl	80047e8 <xTaskRemoveFromEventList>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d98:	f000 fe02 	bl	80049a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d9c:	7bbb      	ldrb	r3, [r7, #14]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dce9      	bgt.n	8003d80 <prvUnlockQueue+0x60>
 8003dac:	e000      	b.n	8003db0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	22ff      	movs	r2, #255	; 0xff
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003db8:	f001 fe64 	bl	8005a84 <vPortExitCritical>
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dcc:	f001 fe2a 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e001      	b.n	8003de2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003de2:	f001 fe4f 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8003de6:	68fb      	ldr	r3, [r7, #12]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003df8:	f001 fe14 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d102      	bne.n	8003e0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e001      	b.n	8003e12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e12:	f001 fe37 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e014      	b.n	8003e5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e30:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <vQueueAddToRegistry+0x50>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <vQueueAddToRegistry+0x50>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <vQueueAddToRegistry+0x50>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e52:	e006      	b.n	8003e62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b07      	cmp	r3, #7
 8003e5e:	d9e7      	bls.n	8003e30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	200008a4 	.word	0x200008a4

08003e74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e84:	f001 fdce 	bl	8005a24 <vPortEnterCritical>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d103      	bne.n	8003e9e <vQueueWaitForMessageRestricted+0x2a>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d103      	bne.n	8003eb4 <vQueueWaitForMessageRestricted+0x40>
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb4:	f001 fde6 	bl	8005a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3324      	adds	r3, #36	; 0x24
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fc61 	bl	8004790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7ff ff26 	bl	8003d20 <prvUnlockQueue>
	}
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08e      	sub	sp, #56	; 0x38
 8003ee0:	af04      	add	r7, sp, #16
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	623b      	str	r3, [r7, #32]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	61fb      	str	r3, [r7, #28]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f22:	23bc      	movs	r3, #188	; 0xbc
 8003f24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2bbc      	cmp	r3, #188	; 0xbc
 8003f2a:	d00a      	beq.n	8003f42 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61bb      	str	r3, [r7, #24]
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01e      	beq.n	8003f88 <xTaskCreateStatic+0xac>
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f62:	2300      	movs	r3, #0
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f850 	bl	8004020 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f82:	f000 f8f3 	bl	800416c <prvAddNewTaskToReadyList>
 8003f86:	e001      	b.n	8003f8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f8c:	697b      	ldr	r3, [r7, #20]
	}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3728      	adds	r7, #40	; 0x28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08c      	sub	sp, #48	; 0x30
 8003f9a:	af04      	add	r7, sp, #16
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 fe5c 	bl	8005c68 <pvPortMalloc>
 8003fb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00e      	beq.n	8003fd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fb8:	20bc      	movs	r0, #188	; 0xbc
 8003fba:	f001 fe55 	bl	8005c68 <pvPortMalloc>
 8003fbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
 8003fcc:	e005      	b.n	8003fda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fce:	6978      	ldr	r0, [r7, #20]
 8003fd0:	f001 ff16 	bl	8005e00 <vPortFree>
 8003fd4:	e001      	b.n	8003fda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d017      	beq.n	8004010 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9303      	str	r3, [sp, #12]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	9302      	str	r3, [sp, #8]
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f80e 	bl	8004020 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004004:	69f8      	ldr	r0, [r7, #28]
 8004006:	f000 f8b1 	bl	800416c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800400a:	2301      	movs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e002      	b.n	8004016 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
 8004014:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004016:	69bb      	ldr	r3, [r7, #24]
	}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	461a      	mov	r2, r3
 8004038:	21a5      	movs	r1, #165	; 0xa5
 800403a:	f002 f833 	bl	80060a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004048:	3b01      	subs	r3, #1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f023 0307 	bic.w	r3, r3, #7
 8004056:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	617b      	str	r3, [r7, #20]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01f      	beq.n	80040be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e012      	b.n	80040aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	7819      	ldrb	r1, [r3, #0]
 800408c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	3334      	adds	r3, #52	; 0x34
 8004094:	460a      	mov	r2, r1
 8004096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d9e9      	bls.n	8004084 <prvInitialiseNewTask+0x64>
 80040b0:	e000      	b.n	80040b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80040b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040bc:	e003      	b.n	80040c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b37      	cmp	r3, #55	; 0x37
 80040ca:	d901      	bls.n	80040d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040cc:	2337      	movs	r3, #55	; 0x37
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	2200      	movs	r2, #0
 80040e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff f978 	bl	80033dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	3318      	adds	r3, #24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff f973 	bl	80033dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	2200      	movs	r2, #0
 8004110:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	2200      	movs	r2, #0
 8004118:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	3354      	adds	r3, #84	; 0x54
 8004120:	2260      	movs	r2, #96	; 0x60
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f001 ffbd 	bl	80060a4 <memset>
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <prvInitialiseNewTask+0x140>)
 800412e:	659a      	str	r2, [r3, #88]	; 0x58
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <prvInitialiseNewTask+0x144>)
 8004134:	65da      	str	r2, [r3, #92]	; 0x5c
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <prvInitialiseNewTask+0x148>)
 800413a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	69b8      	ldr	r0, [r7, #24]
 8004142:	f001 fb43 	bl	80057cc <pxPortInitialiseStack>
 8004146:	4602      	mov	r2, r0
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004156:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004158:	bf00      	nop
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	080062f8 	.word	0x080062f8
 8004164:	08006318 	.word	0x08006318
 8004168:	080062d8 	.word	0x080062d8

0800416c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004174:	f001 fc56 	bl	8005a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <prvAddNewTaskToReadyList+0xc4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <prvAddNewTaskToReadyList+0xc4>)
 8004180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004182:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <prvAddNewTaskToReadyList+0xc8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800418a:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <prvAddNewTaskToReadyList+0xc8>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <prvAddNewTaskToReadyList+0xc4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d110      	bne.n	80041ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004198:	f000 fc26 	bl	80049e8 <prvInitialiseTaskLists>
 800419c:	e00d      	b.n	80041ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800419e:	4b26      	ldr	r3, [pc, #152]	; (8004238 <prvAddNewTaskToReadyList+0xcc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041a6:	4b23      	ldr	r3, [pc, #140]	; (8004234 <prvAddNewTaskToReadyList+0xc8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d802      	bhi.n	80041ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041b4:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <prvAddNewTaskToReadyList+0xc8>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <prvAddNewTaskToReadyList+0xd0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <prvAddNewTaskToReadyList+0xd0>)
 80041c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041c4:	4b1d      	ldr	r3, [pc, #116]	; (800423c <prvAddNewTaskToReadyList+0xd0>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <prvAddNewTaskToReadyList+0xd4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d903      	bls.n	80041e0 <prvAddNewTaskToReadyList+0x74>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <prvAddNewTaskToReadyList+0xd4>)
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <prvAddNewTaskToReadyList+0xd8>)
 80041ee:	441a      	add	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f7ff f8fd 	bl	80033f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041fc:	f001 fc42 	bl	8005a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <prvAddNewTaskToReadyList+0xcc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <prvAddNewTaskToReadyList+0xc8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	429a      	cmp	r2, r3
 8004214:	d207      	bcs.n	8004226 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <prvAddNewTaskToReadyList+0xdc>)
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000db8 	.word	0x20000db8
 8004234:	200008e4 	.word	0x200008e4
 8004238:	20000dc4 	.word	0x20000dc4
 800423c:	20000dd4 	.word	0x20000dd4
 8004240:	20000dc0 	.word	0x20000dc0
 8004244:	200008e8 	.word	0x200008e8
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d017      	beq.n	800428e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <vTaskDelay+0x60>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <vTaskDelay+0x30>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60bb      	str	r3, [r7, #8]
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800427c:	f000 f88a 	bl	8004394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004280:	2100      	movs	r1, #0
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 ff00 	bl	8005088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004288:	f000 f892 	bl	80043b0 <xTaskResumeAll>
 800428c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <vTaskDelay+0x64>)
 8004296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000de0 	.word	0x20000de0
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042c2:	463a      	mov	r2, r7
 80042c4:	1d39      	adds	r1, r7, #4
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f832 	bl	8003334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	9202      	str	r2, [sp, #8]
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	460a      	mov	r2, r1
 80042e2:	4924      	ldr	r1, [pc, #144]	; (8004374 <vTaskStartScheduler+0xc0>)
 80042e4:	4824      	ldr	r0, [pc, #144]	; (8004378 <vTaskStartScheduler+0xc4>)
 80042e6:	f7ff fdf9 	bl	8003edc <xTaskCreateStatic>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a23      	ldr	r2, [pc, #140]	; (800437c <vTaskStartScheduler+0xc8>)
 80042ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <vTaskStartScheduler+0xc8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042f8:	2301      	movs	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e001      	b.n	8004302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004308:	f000 ff12 	bl	8005130 <xTimerCreateTimerTask>
 800430c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d11b      	bne.n	800434c <vTaskStartScheduler+0x98>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	613b      	str	r3, [r7, #16]
}
 8004326:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <vTaskStartScheduler+0xcc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3354      	adds	r3, #84	; 0x54
 800432e:	4a15      	ldr	r2, [pc, #84]	; (8004384 <vTaskStartScheduler+0xd0>)
 8004330:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <vTaskStartScheduler+0xd4>)
 8004334:	f04f 32ff 	mov.w	r2, #4294967295
 8004338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <vTaskStartScheduler+0xd8>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <vTaskStartScheduler+0xdc>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004346:	f001 facb 	bl	80058e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800434a:	e00e      	b.n	800436a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d10a      	bne.n	800436a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <vTaskStartScheduler+0xb4>
}
 800436a:	bf00      	nop
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	08006260 	.word	0x08006260
 8004378:	080049b9 	.word	0x080049b9
 800437c:	20000ddc 	.word	0x20000ddc
 8004380:	200008e4 	.word	0x200008e4
 8004384:	20000010 	.word	0x20000010
 8004388:	20000dd8 	.word	0x20000dd8
 800438c:	20000dc4 	.word	0x20000dc4
 8004390:	20000dbc 	.word	0x20000dbc

08004394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <vTaskSuspendAll+0x18>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	4a03      	ldr	r2, [pc, #12]	; (80043ac <vTaskSuspendAll+0x18>)
 80043a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	20000de0 	.word	0x20000de0

080043b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043be:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <xTaskResumeAll+0x118>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <xTaskResumeAll+0x2c>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	603b      	str	r3, [r7, #0]
}
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043dc:	f001 fb22 	bl	8005a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043e0:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <xTaskResumeAll+0x118>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	4a38      	ldr	r2, [pc, #224]	; (80044c8 <xTaskResumeAll+0x118>)
 80043e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ea:	4b37      	ldr	r3, [pc, #220]	; (80044c8 <xTaskResumeAll+0x118>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d162      	bne.n	80044b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043f2:	4b36      	ldr	r3, [pc, #216]	; (80044cc <xTaskResumeAll+0x11c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d05e      	beq.n	80044b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043fa:	e02f      	b.n	800445c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fc:	4b34      	ldr	r3, [pc, #208]	; (80044d0 <xTaskResumeAll+0x120>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3318      	adds	r3, #24
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff f851 	bl	80034b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f84c 	bl	80034b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <xTaskResumeAll+0x124>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d903      	bls.n	800442c <xTaskResumeAll+0x7c>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <xTaskResumeAll+0x124>)
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4a27      	ldr	r2, [pc, #156]	; (80044d8 <xTaskResumeAll+0x128>)
 800443a:	441a      	add	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f7fe ffd7 	bl	80033f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <xTaskResumeAll+0x12c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <xTaskResumeAll+0x130>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800445c:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <xTaskResumeAll+0x120>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1cb      	bne.n	80043fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800446a:	f000 fb5f 	bl	8004b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <xTaskResumeAll+0x134>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d010      	beq.n	800449c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800447a:	f000 f847 	bl	800450c <xTaskIncrementTick>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004484:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <xTaskResumeAll+0x130>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3b01      	subs	r3, #1
 800448e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f1      	bne.n	800447a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004496:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <xTaskResumeAll+0x134>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800449c:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <xTaskResumeAll+0x130>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <xTaskResumeAll+0x138>)
 80044aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044b8:	f001 fae4 	bl	8005a84 <vPortExitCritical>

	return xAlreadyYielded;
 80044bc:	68bb      	ldr	r3, [r7, #8]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000de0 	.word	0x20000de0
 80044cc:	20000db8 	.word	0x20000db8
 80044d0:	20000d78 	.word	0x20000d78
 80044d4:	20000dc0 	.word	0x20000dc0
 80044d8:	200008e8 	.word	0x200008e8
 80044dc:	200008e4 	.word	0x200008e4
 80044e0:	20000dcc 	.word	0x20000dcc
 80044e4:	20000dc8 	.word	0x20000dc8
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <xTaskGetTickCount+0x1c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044f8:	687b      	ldr	r3, [r7, #4]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000dbc 	.word	0x20000dbc

0800450c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004516:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <xTaskIncrementTick+0x148>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 808f 	bne.w	800463e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004520:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <xTaskIncrementTick+0x14c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004528:	4a4b      	ldr	r2, [pc, #300]	; (8004658 <xTaskIncrementTick+0x14c>)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d120      	bne.n	8004576 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004534:	4b49      	ldr	r3, [pc, #292]	; (800465c <xTaskIncrementTick+0x150>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <xTaskIncrementTick+0x48>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	603b      	str	r3, [r7, #0]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xTaskIncrementTick+0x46>
 8004554:	4b41      	ldr	r3, [pc, #260]	; (800465c <xTaskIncrementTick+0x150>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	4b41      	ldr	r3, [pc, #260]	; (8004660 <xTaskIncrementTick+0x154>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a3f      	ldr	r2, [pc, #252]	; (800465c <xTaskIncrementTick+0x150>)
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <xTaskIncrementTick+0x154>)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <xTaskIncrementTick+0x158>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	4a3d      	ldr	r2, [pc, #244]	; (8004664 <xTaskIncrementTick+0x158>)
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	f000 fadb 	bl	8004b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004576:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <xTaskIncrementTick+0x15c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d349      	bcc.n	8004614 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004580:	4b36      	ldr	r3, [pc, #216]	; (800465c <xTaskIncrementTick+0x150>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <xTaskIncrementTick+0x15c>)
 800458c:	f04f 32ff 	mov.w	r2, #4294967295
 8004590:	601a      	str	r2, [r3, #0]
					break;
 8004592:	e03f      	b.n	8004614 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004594:	4b31      	ldr	r3, [pc, #196]	; (800465c <xTaskIncrementTick+0x150>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d203      	bcs.n	80045b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045ac:	4a2e      	ldr	r2, [pc, #184]	; (8004668 <xTaskIncrementTick+0x15c>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045b2:	e02f      	b.n	8004614 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe ff79 	bl	80034b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3318      	adds	r3, #24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe ff70 	bl	80034b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <xTaskIncrementTick+0x160>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d903      	bls.n	80045e4 <xTaskIncrementTick+0xd8>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4a22      	ldr	r2, [pc, #136]	; (800466c <xTaskIncrementTick+0x160>)
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <xTaskIncrementTick+0x164>)
 80045f2:	441a      	add	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f7fe fefb 	bl	80033f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <xTaskIncrementTick+0x168>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d3b8      	bcc.n	8004580 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800460e:	2301      	movs	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004612:	e7b5      	b.n	8004580 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <xTaskIncrementTick+0x168>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4915      	ldr	r1, [pc, #84]	; (8004670 <xTaskIncrementTick+0x164>)
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d901      	bls.n	8004630 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <xTaskIncrementTick+0x16c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e004      	b.n	8004648 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <xTaskIncrementTick+0x170>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <xTaskIncrementTick+0x170>)
 8004646:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004648:	697b      	ldr	r3, [r7, #20]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000de0 	.word	0x20000de0
 8004658:	20000dbc 	.word	0x20000dbc
 800465c:	20000d70 	.word	0x20000d70
 8004660:	20000d74 	.word	0x20000d74
 8004664:	20000dd0 	.word	0x20000dd0
 8004668:	20000dd8 	.word	0x20000dd8
 800466c:	20000dc0 	.word	0x20000dc0
 8004670:	200008e8 	.word	0x200008e8
 8004674:	200008e4 	.word	0x200008e4
 8004678:	20000dcc 	.word	0x20000dcc
 800467c:	20000dc8 	.word	0x20000dc8

08004680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004686:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <vTaskSwitchContext+0xb0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800468e:	4b29      	ldr	r3, [pc, #164]	; (8004734 <vTaskSwitchContext+0xb4>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004694:	e046      	b.n	8004724 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <vTaskSwitchContext+0xb4>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800469c:	4b26      	ldr	r3, [pc, #152]	; (8004738 <vTaskSwitchContext+0xb8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e010      	b.n	80046c6 <vTaskSwitchContext+0x46>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	607b      	str	r3, [r7, #4]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <vTaskSwitchContext+0x3e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	491d      	ldr	r1, [pc, #116]	; (800473c <vTaskSwitchContext+0xbc>)
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0e4      	beq.n	80046a4 <vTaskSwitchContext+0x24>
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <vTaskSwitchContext+0xbc>)
 80046e6:	4413      	add	r3, r2
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	605a      	str	r2, [r3, #4]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3308      	adds	r3, #8
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d104      	bne.n	800470a <vTaskSwitchContext+0x8a>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a0b      	ldr	r2, [pc, #44]	; (8004740 <vTaskSwitchContext+0xc0>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4a08      	ldr	r2, [pc, #32]	; (8004738 <vTaskSwitchContext+0xb8>)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <vTaskSwitchContext+0xc0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3354      	adds	r3, #84	; 0x54
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <vTaskSwitchContext+0xc4>)
 8004722:	6013      	str	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000de0 	.word	0x20000de0
 8004734:	20000dcc 	.word	0x20000dcc
 8004738:	20000dc0 	.word	0x20000dc0
 800473c:	200008e8 	.word	0x200008e8
 8004740:	200008e4 	.word	0x200008e4
 8004744:	20000010 	.word	0x20000010

08004748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60fb      	str	r3, [r7, #12]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <vTaskPlaceOnEventList+0x44>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3318      	adds	r3, #24
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fe fe61 	bl	800343e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800477c:	2101      	movs	r1, #1
 800477e:	6838      	ldr	r0, [r7, #0]
 8004780:	f000 fc82 	bl	8005088 <prvAddCurrentTaskToDelayedList>
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200008e4 	.word	0x200008e4

08004790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	617b      	str	r3, [r7, #20]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3318      	adds	r3, #24
 80047be:	4619      	mov	r1, r3
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7fe fe18 	bl	80033f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	68b8      	ldr	r0, [r7, #8]
 80047d6:	f000 fc57 	bl	8005088 <prvAddCurrentTaskToDelayedList>
	}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200008e4 	.word	0x200008e4

080047e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3318      	adds	r3, #24
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fe49 	bl	80034b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481e:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <xTaskRemoveFromEventList+0xb0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d11d      	bne.n	8004862 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fe40 	bl	80034b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <xTaskRemoveFromEventList+0xb4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d903      	bls.n	8004844 <xTaskRemoveFromEventList+0x5c>
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <xTaskRemoveFromEventList+0xb4>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <xTaskRemoveFromEventList+0xb8>)
 8004852:	441a      	add	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7fe fdcb 	bl	80033f6 <vListInsertEnd>
 8004860:	e005      	b.n	800486e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3318      	adds	r3, #24
 8004866:	4619      	mov	r1, r3
 8004868:	480e      	ldr	r0, [pc, #56]	; (80048a4 <xTaskRemoveFromEventList+0xbc>)
 800486a:	f7fe fdc4 	bl	80033f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <xTaskRemoveFromEventList+0xc0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	429a      	cmp	r2, r3
 800487a:	d905      	bls.n	8004888 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800487c:	2301      	movs	r3, #1
 800487e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <xTaskRemoveFromEventList+0xc4>)
 8004882:	2201      	movs	r2, #1
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e001      	b.n	800488c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800488c:	697b      	ldr	r3, [r7, #20]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000de0 	.word	0x20000de0
 800489c:	20000dc0 	.word	0x20000dc0
 80048a0:	200008e8 	.word	0x200008e8
 80048a4:	20000d78 	.word	0x20000d78
 80048a8:	200008e4 	.word	0x200008e4
 80048ac:	20000dcc 	.word	0x20000dcc

080048b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <vTaskInternalSetTimeOutState+0x24>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <vTaskInternalSetTimeOutState+0x28>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	605a      	str	r2, [r3, #4]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	20000dd0 	.word	0x20000dd0
 80048d8:	20000dbc 	.word	0x20000dbc

080048dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	613b      	str	r3, [r7, #16]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800491e:	f001 f881 	bl	8005a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <xTaskCheckForTimeOut+0xbc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d102      	bne.n	8004942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	e023      	b.n	800498a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <xTaskCheckForTimeOut+0xc0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d007      	beq.n	800495e <xTaskCheckForTimeOut+0x82>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e015      	b.n	800498a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	d20b      	bcs.n	8004980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff9b 	bl	80048b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e004      	b.n	800498a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800498a:	f001 f87b 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 800498e:	69fb      	ldr	r3, [r7, #28]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000dbc 	.word	0x20000dbc
 800499c:	20000dd0 	.word	0x20000dd0

080049a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <vTaskMissedYield+0x14>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20000dcc 	.word	0x20000dcc

080049b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049c0:	f000 f852 	bl	8004a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <prvIdleTask+0x28>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d9f9      	bls.n	80049c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <prvIdleTask+0x2c>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049dc:	e7f0      	b.n	80049c0 <prvIdleTask+0x8>
 80049de:	bf00      	nop
 80049e0:	200008e8 	.word	0x200008e8
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	e00c      	b.n	8004a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <prvInitialiseTaskLists+0x60>)
 8004a00:	4413      	add	r3, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fcca 	bl	800339c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b37      	cmp	r3, #55	; 0x37
 8004a12:	d9ef      	bls.n	80049f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a14:	480d      	ldr	r0, [pc, #52]	; (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a16:	f7fe fcc1 	bl	800339c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a1a:	480d      	ldr	r0, [pc, #52]	; (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a1c:	f7fe fcbe 	bl	800339c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a20:	480c      	ldr	r0, [pc, #48]	; (8004a54 <prvInitialiseTaskLists+0x6c>)
 8004a22:	f7fe fcbb 	bl	800339c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a26:	480c      	ldr	r0, [pc, #48]	; (8004a58 <prvInitialiseTaskLists+0x70>)
 8004a28:	f7fe fcb8 	bl	800339c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a2c:	480b      	ldr	r0, [pc, #44]	; (8004a5c <prvInitialiseTaskLists+0x74>)
 8004a2e:	f7fe fcb5 	bl	800339c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <prvInitialiseTaskLists+0x78>)
 8004a34:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <prvInitialiseTaskLists+0x7c>)
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	200008e8 	.word	0x200008e8
 8004a4c:	20000d48 	.word	0x20000d48
 8004a50:	20000d5c 	.word	0x20000d5c
 8004a54:	20000d78 	.word	0x20000d78
 8004a58:	20000d8c 	.word	0x20000d8c
 8004a5c:	20000da4 	.word	0x20000da4
 8004a60:	20000d70 	.word	0x20000d70
 8004a64:	20000d74 	.word	0x20000d74

08004a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a6e:	e019      	b.n	8004aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a70:	f000 ffd8 	bl	8005a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <prvCheckTasksWaitingTermination+0x50>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fd15 	bl	80034b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a9a:	f000 fff3 	bl	8005a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f810 	bl	8004ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e1      	bne.n	8004a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000d8c 	.word	0x20000d8c
 8004abc:	20000db8 	.word	0x20000db8
 8004ac0:	20000da0 	.word	0x20000da0

08004ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3354      	adds	r3, #84	; 0x54
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fafd 	bl	80060d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 f98b 	bl	8005e00 <vPortFree>
				vPortFree( pxTCB );
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f001 f988 	bl	8005e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004af0:	e018      	b.n	8004b24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d103      	bne.n	8004b04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f001 f97f 	bl	8005e00 <vPortFree>
	}
 8004b02:	e00f      	b.n	8004b24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d00a      	beq.n	8004b24 <prvDeleteTCB+0x60>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	60fb      	str	r3, [r7, #12]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <prvDeleteTCB+0x5e>
	}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <prvResetNextTaskUnblockTime+0x38>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <prvResetNextTaskUnblockTime+0x3c>)
 8004b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b44:	e008      	b.n	8004b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <prvResetNextTaskUnblockTime+0x38>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <prvResetNextTaskUnblockTime+0x3c>)
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	20000d70 	.word	0x20000d70
 8004b68:	20000dd8 	.word	0x20000dd8

08004b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <xTaskGetSchedulerState+0x34>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	e008      	b.n	8004b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b80:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <xTaskGetSchedulerState+0x38>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	e001      	b.n	8004b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b92:	687b      	ldr	r3, [r7, #4]
	}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000dc4 	.word	0x20000dc4
 8004ba4:	20000de0 	.word	0x20000de0

08004ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d056      	beq.n	8004c6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <xTaskPriorityDisinherit+0xd0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d00a      	beq.n	8004bde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60fb      	str	r3, [r7, #12]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c00:	1e5a      	subs	r2, r3, #1
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d02c      	beq.n	8004c6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d128      	bne.n	8004c6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fc46 	bl	80034b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <xTaskPriorityDisinherit+0xd4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d903      	bls.n	8004c4c <xTaskPriorityDisinherit+0xa4>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <xTaskPriorityDisinherit+0xd4>)
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <xTaskPriorityDisinherit+0xd8>)
 8004c5a:	441a      	add	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f7fe fbc7 	bl	80033f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c6c:	697b      	ldr	r3, [r7, #20]
	}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200008e4 	.word	0x200008e4
 8004c7c:	20000dc0 	.word	0x20000dc0
 8004c80:	200008e8 	.word	0x200008e8

08004c84 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004c92:	f000 fec7 	bl	8005a24 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c96:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <xTaskNotifyWait+0xb8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d01c      	beq.n	8004cde <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <xTaskNotifyWait+0xb8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	43d2      	mvns	r2, r2
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004cb6:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <xTaskNotifyWait+0xb8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f000 f9dd 	bl	8005088 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004cce:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <xTaskNotifyWait+0xbc>)
 8004cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004cde:	f000 fed1 	bl	8005a84 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004ce2:	f000 fe9f 	bl	8005a24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <xTaskNotifyWait+0xb8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004cf8:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <xTaskNotifyWait+0xb8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d002      	beq.n	8004d0c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e00a      	b.n	8004d22 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <xTaskNotifyWait+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	43d2      	mvns	r2, r2
 8004d18:	400a      	ands	r2, r1
 8004d1a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <xTaskNotifyWait+0xb8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8004d2c:	f000 feaa 	bl	8005a84 <vPortExitCritical>

		return xReturn;
 8004d30:	697b      	ldr	r3, [r7, #20]
	}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200008e4 	.word	0x200008e4
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d54:	2301      	movs	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <xTaskGenericNotify+0x30>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	61bb      	str	r3, [r7, #24]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004d78:	f000 fe54 	bl	8005a24 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004d92:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d82d      	bhi.n	8004dfe <xTaskGenericNotify+0xba>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <xTaskGenericNotify+0x64>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004e21 	.word	0x08004e21
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dcf 	.word	0x08004dcf
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004de9 	.word	0x08004de9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004dcc:	e02b      	b.n	8004e26 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004ddc:	e023      	b.n	8004e26 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004de6:	e01e      	b.n	8004e26 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004de8:	7ffb      	ldrb	r3, [r7, #31]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d004      	beq.n	8004df8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004df6:	e016      	b.n	8004e26 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004dfc:	e013      	b.n	8004e26 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d00c      	beq.n	8004e24 <xTaskGenericNotify+0xe0>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	617b      	str	r3, [r7, #20]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <xTaskGenericNotify+0xda>
					break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <xTaskGenericNotify+0xe2>

					break;
 8004e24:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e26:	7ffb      	ldrb	r3, [r7, #31]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d13a      	bne.n	8004ea2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe fb3d 	bl	80034b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <xTaskGenericNotify+0x16c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d903      	bls.n	8004e4a <xTaskGenericNotify+0x106>
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <xTaskGenericNotify+0x16c>)
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <xTaskGenericNotify+0x170>)
 8004e58:	441a      	add	r2, r3
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f7fe fac8 	bl	80033f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <xTaskGenericNotify+0x140>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	613b      	str	r3, [r7, #16]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <xTaskGenericNotify+0x174>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d907      	bls.n	8004ea2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <xTaskGenericNotify+0x178>)
 8004e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004ea2:	f000 fdef 	bl	8005a84 <vPortExitCritical>

		return xReturn;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000dc0 	.word	0x20000dc0
 8004eb4:	200008e8 	.word	0x200008e8
 8004eb8:	200008e4 	.word	0x200008e4
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08e      	sub	sp, #56	; 0x38
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ef0:	f000 fe7a 	bl	8005be8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	623a      	str	r2, [r7, #32]
 8004f0e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004f10:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d82f      	bhi.n	8004f9c <xTaskGenericNotifyFromISR+0xdc>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <xTaskGenericNotifyFromISR+0x84>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004fbf 	.word	0x08004fbf
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f6b 	.word	0x08004f6b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f85 	.word	0x08004f85
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004f68:	e02c      	b.n	8004fc4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004f78:	e024      	b.n	8004fc4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004f82:	e01f      	b.n	8004fc4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004f84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d004      	beq.n	8004f96 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004f94:	e016      	b.n	8004fc4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004f9a:	e013      	b.n	8004fc4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d00c      	beq.n	8004fc2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61bb      	str	r3, [r7, #24]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xTaskGenericNotifyFromISR+0xfc>
					break;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <xTaskGenericNotifyFromISR+0x104>
					break;
 8004fc2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d146      	bne.n	800505a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	617b      	str	r3, [r7, #20]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fea:	4b21      	ldr	r3, [pc, #132]	; (8005070 <xTaskGenericNotifyFromISR+0x1b0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11d      	bne.n	800502e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fa5a 	bl	80034b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <xTaskGenericNotifyFromISR+0x1b4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d903      	bls.n	8005010 <xTaskGenericNotifyFromISR+0x150>
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4a19      	ldr	r2, [pc, #100]	; (8005074 <xTaskGenericNotifyFromISR+0x1b4>)
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4a16      	ldr	r2, [pc, #88]	; (8005078 <xTaskGenericNotifyFromISR+0x1b8>)
 800501e:	441a      	add	r2, r3
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7fe f9e5 	bl	80033f6 <vListInsertEnd>
 800502c:	e005      	b.n	800503a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	3318      	adds	r3, #24
 8005032:	4619      	mov	r1, r3
 8005034:	4811      	ldr	r0, [pc, #68]	; (800507c <xTaskGenericNotifyFromISR+0x1bc>)
 8005036:	f7fe f9de 	bl	80033f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <xTaskGenericNotifyFromISR+0x1c0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	429a      	cmp	r2, r3
 8005046:	d908      	bls.n	800505a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800504e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005050:	2201      	movs	r2, #1
 8005052:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <xTaskGenericNotifyFromISR+0x1c4>)
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f383 8811 	msr	BASEPRI, r3
}
 8005064:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005068:	4618      	mov	r0, r3
 800506a:	3738      	adds	r7, #56	; 0x38
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20000de0 	.word	0x20000de0
 8005074:	20000dc0 	.word	0x20000dc0
 8005078:	200008e8 	.word	0x200008e8
 800507c:	20000d78 	.word	0x20000d78
 8005080:	200008e4 	.word	0x200008e4
 8005084:	20000dcc 	.word	0x20000dcc

08005088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005092:	4b21      	ldr	r3, [pc, #132]	; (8005118 <prvAddCurrentTaskToDelayedList+0x90>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005098:	4b20      	ldr	r3, [pc, #128]	; (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3304      	adds	r3, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fa06 	bl	80034b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d10a      	bne.n	80050c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b2:	4b1a      	ldr	r3, [pc, #104]	; (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4819      	ldr	r0, [pc, #100]	; (8005120 <prvAddCurrentTaskToDelayedList+0x98>)
 80050bc:	f7fe f99b 	bl	80033f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050c0:	e026      	b.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d209      	bcs.n	80050ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fe f9a9 	bl	800343e <vListInsert>
}
 80050ec:	e010      	b.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ee:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fe f99f 	bl	800343e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d202      	bcs.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800510a:	4a08      	ldr	r2, [pc, #32]	; (800512c <prvAddCurrentTaskToDelayedList+0xa4>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000dbc 	.word	0x20000dbc
 800511c:	200008e4 	.word	0x200008e4
 8005120:	20000da4 	.word	0x20000da4
 8005124:	20000d74 	.word	0x20000d74
 8005128:	20000d70 	.word	0x20000d70
 800512c:	20000dd8 	.word	0x20000dd8

08005130 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800513a:	f000 fb07 	bl	800574c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800513e:	4b1c      	ldr	r3, [pc, #112]	; (80051b0 <xTimerCreateTimerTask+0x80>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d021      	beq.n	800518a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800514e:	1d3a      	adds	r2, r7, #4
 8005150:	f107 0108 	add.w	r1, r7, #8
 8005154:	f107 030c 	add.w	r3, r7, #12
 8005158:	4618      	mov	r0, r3
 800515a:	f7fe f905 	bl	8003368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	9202      	str	r2, [sp, #8]
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	2302      	movs	r3, #2
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	460a      	mov	r2, r1
 8005170:	4910      	ldr	r1, [pc, #64]	; (80051b4 <xTimerCreateTimerTask+0x84>)
 8005172:	4811      	ldr	r0, [pc, #68]	; (80051b8 <xTimerCreateTimerTask+0x88>)
 8005174:	f7fe feb2 	bl	8003edc <xTaskCreateStatic>
 8005178:	4603      	mov	r3, r0
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <xTimerCreateTimerTask+0x8c>)
 800517c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <xTimerCreateTimerTask+0x8c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051a6:	697b      	ldr	r3, [r7, #20]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000e14 	.word	0x20000e14
 80051b4:	08006268 	.word	0x08006268
 80051b8:	080052f5 	.word	0x080052f5
 80051bc:	20000e18 	.word	0x20000e18

080051c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	623b      	str	r3, [r7, #32]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <xTimerGenericCommand+0x98>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d02a      	beq.n	800524c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b05      	cmp	r3, #5
 8005206:	dc18      	bgt.n	800523a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005208:	f7ff fcb0 	bl	8004b6c <xTaskGetSchedulerState>
 800520c:	4603      	mov	r3, r0
 800520e:	2b02      	cmp	r3, #2
 8005210:	d109      	bne.n	8005226 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <xTimerGenericCommand+0x98>)
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f107 0110 	add.w	r1, r7, #16
 800521a:	2300      	movs	r3, #0
 800521c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521e:	f7fe fa75 	bl	800370c <xQueueGenericSend>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24
 8005224:	e012      	b.n	800524c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <xTimerGenericCommand+0x98>)
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	f107 0110 	add.w	r1, r7, #16
 800522e:	2300      	movs	r3, #0
 8005230:	2200      	movs	r2, #0
 8005232:	f7fe fa6b 	bl	800370c <xQueueGenericSend>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24
 8005238:	e008      	b.n	800524c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <xTimerGenericCommand+0x98>)
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	f107 0110 	add.w	r1, r7, #16
 8005242:	2300      	movs	r3, #0
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	f7fe fb5f 	bl	8003908 <xQueueGenericSendFromISR>
 800524a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800524e:	4618      	mov	r0, r3
 8005250:	3728      	adds	r7, #40	; 0x28
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000e14 	.word	0x20000e14

0800525c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <prvProcessExpiredTimer+0x94>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3304      	adds	r3, #4
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe f91b 	bl	80034b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d022      	beq.n	80052ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	18d1      	adds	r1, r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	6978      	ldr	r0, [r7, #20]
 8005296:	f000 f8d1 	bl	800543c <prvInsertTimerInActiveList>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01f      	beq.n	80052e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a0:	2300      	movs	r3, #0
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2300      	movs	r3, #0
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	2100      	movs	r1, #0
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff ff88 	bl	80051c0 <xTimerGenericCommand>
 80052b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d113      	bne.n	80052e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	6978      	ldr	r0, [r7, #20]
 80052e6:	4798      	blx	r3
}
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000e0c 	.word	0x20000e0c

080052f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052fc:	f107 0308 	add.w	r3, r7, #8
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f857 	bl	80053b4 <prvGetNextExpireTime>
 8005306:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4619      	mov	r1, r3
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f803 	bl	8005318 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005312:	f000 f8d5 	bl	80054c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005316:	e7f1      	b.n	80052fc <prvTimerTask+0x8>

08005318 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005322:	f7ff f837 	bl	8004394 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005326:	f107 0308 	add.w	r3, r7, #8
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f866 	bl	80053fc <prvSampleTimeNow>
 8005330:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d130      	bne.n	800539a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <prvProcessTimerOrBlockTask+0x3c>
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	429a      	cmp	r2, r3
 8005344:	d806      	bhi.n	8005354 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005346:	f7ff f833 	bl	80043b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff85 	bl	800525c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005352:	e024      	b.n	800539e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <prvProcessTimerOrBlockTask+0x90>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <prvProcessTimerOrBlockTask+0x50>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <prvProcessTimerOrBlockTask+0x52>
 8005368:	2300      	movs	r3, #0
 800536a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800536c:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <prvProcessTimerOrBlockTask+0x94>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	4619      	mov	r1, r3
 800537a:	f7fe fd7b 	bl	8003e74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800537e:	f7ff f817 	bl	80043b0 <xTaskResumeAll>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <prvProcessTimerOrBlockTask+0x98>)
 800538a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	f3bf 8f6f 	isb	sy
}
 8005398:	e001      	b.n	800539e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800539a:	f7ff f809 	bl	80043b0 <xTaskResumeAll>
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000e10 	.word	0x20000e10
 80053ac:	20000e14 	.word	0x20000e14
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <prvGetNextExpireTime+0x44>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <prvGetNextExpireTime+0x16>
 80053c6:	2201      	movs	r2, #1
 80053c8:	e000      	b.n	80053cc <prvGetNextExpireTime+0x18>
 80053ca:	2200      	movs	r2, #0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <prvGetNextExpireTime+0x44>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e001      	b.n	80053e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053e8:	68fb      	ldr	r3, [r7, #12]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000e0c 	.word	0x20000e0c

080053fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005404:	f7ff f872 	bl	80044ec <xTaskGetTickCount>
 8005408:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <prvSampleTimeNow+0x3c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	429a      	cmp	r2, r3
 8005412:	d205      	bcs.n	8005420 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005414:	f000 f936 	bl	8005684 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e002      	b.n	8005426 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005426:	4a04      	ldr	r2, [pc, #16]	; (8005438 <prvSampleTimeNow+0x3c>)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800542c:	68fb      	ldr	r3, [r7, #12]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000e1c 	.word	0x20000e1c

0800543c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d812      	bhi.n	8005488 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	d302      	bcc.n	8005476 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005470:	2301      	movs	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	e01b      	b.n	80054ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005476:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <prvInsertTimerInActiveList+0x7c>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7fd ffdc 	bl	800343e <vListInsert>
 8005486:	e012      	b.n	80054ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d206      	bcs.n	800549e <prvInsertTimerInActiveList+0x62>
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d302      	bcc.n	800549e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e007      	b.n	80054ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800549e:	4b07      	ldr	r3, [pc, #28]	; (80054bc <prvInsertTimerInActiveList+0x80>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7fd ffc8 	bl	800343e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054ae:	697b      	ldr	r3, [r7, #20]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000e10 	.word	0x20000e10
 80054bc:	20000e0c 	.word	0x20000e0c

080054c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08e      	sub	sp, #56	; 0x38
 80054c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054c6:	e0ca      	b.n	800565e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da18      	bge.n	8005500 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	3304      	adds	r3, #4
 80054d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	61fb      	str	r3, [r7, #28]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	6850      	ldr	r0, [r2, #4]
 80054f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fa:	6892      	ldr	r2, [r2, #8]
 80054fc:	4611      	mov	r1, r2
 80054fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f2c0 80aa 	blt.w	800565c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	3304      	adds	r3, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f7fd ffc9 	bl	80034b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800551e:	463b      	mov	r3, r7
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff6b 	bl	80053fc <prvSampleTimeNow>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b09      	cmp	r3, #9
 800552c:	f200 8097 	bhi.w	800565e <prvProcessReceivedCommands+0x19e>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <prvProcessReceivedCommands+0x78>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	08005561 	.word	0x08005561
 800553c:	08005561 	.word	0x08005561
 8005540:	08005561 	.word	0x08005561
 8005544:	080055d5 	.word	0x080055d5
 8005548:	080055e9 	.word	0x080055e9
 800554c:	08005633 	.word	0x08005633
 8005550:	08005561 	.word	0x08005561
 8005554:	08005561 	.word	0x08005561
 8005558:	080055d5 	.word	0x080055d5
 800555c:	080055e9 	.word	0x080055e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	b2da      	uxtb	r2, r3
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	18d1      	adds	r1, r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005580:	f7ff ff5c 	bl	800543c <prvInsertTimerInActiveList>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d069      	beq.n	800565e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005590:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d05e      	beq.n	800565e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	441a      	add	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	2100      	movs	r1, #0
 80055b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b2:	f7ff fe05 	bl	80051c0 <xTimerGenericCommand>
 80055b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d14f      	bne.n	800565e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61bb      	str	r3, [r7, #24]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055e6:	e03a      	b.n	800565e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	617b      	str	r3, [r7, #20]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	18d1      	adds	r1, r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562c:	f7ff ff06 	bl	800543c <prvInsertTimerInActiveList>
					break;
 8005630:	e015      	b.n	800565e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005642:	f000 fbdd 	bl	8005e00 <vPortFree>
 8005646:	e00a      	b.n	800565e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800564e:	f023 0301 	bic.w	r3, r3, #1
 8005652:	b2da      	uxtb	r2, r3
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800565a:	e000      	b.n	800565e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800565c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <prvProcessReceivedCommands+0x1c0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	1d39      	adds	r1, r7, #4
 8005664:	2200      	movs	r2, #0
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe f9ea 	bl	8003a40 <xQueueReceive>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	f47f af2a 	bne.w	80054c8 <prvProcessReceivedCommands+0x8>
	}
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	3730      	adds	r7, #48	; 0x30
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000e14 	.word	0x20000e14

08005684 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800568a:	e048      	b.n	800571e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800568c:	4b2d      	ldr	r3, [pc, #180]	; (8005744 <prvSwitchTimerLists+0xc0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <prvSwitchTimerLists+0xc0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fd ff03 	bl	80034b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02e      	beq.n	800571e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d90e      	bls.n	80056f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056de:	4b19      	ldr	r3, [pc, #100]	; (8005744 <prvSwitchTimerLists+0xc0>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7fd fea8 	bl	800343e <vListInsert>
 80056ee:	e016      	b.n	800571e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056f0:	2300      	movs	r3, #0
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	2100      	movs	r1, #0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fd60 	bl	80051c0 <xTimerGenericCommand>
 8005700:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	603b      	str	r3, [r7, #0]
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <prvSwitchTimerLists+0xc0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1b1      	bne.n	800568c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <prvSwitchTimerLists+0xc0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <prvSwitchTimerLists+0xc4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a04      	ldr	r2, [pc, #16]	; (8005744 <prvSwitchTimerLists+0xc0>)
 8005734:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005736:	4a04      	ldr	r2, [pc, #16]	; (8005748 <prvSwitchTimerLists+0xc4>)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	6013      	str	r3, [r2, #0]
}
 800573c:	bf00      	nop
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000e0c 	.word	0x20000e0c
 8005748:	20000e10 	.word	0x20000e10

0800574c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005752:	f000 f967 	bl	8005a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005756:	4b15      	ldr	r3, [pc, #84]	; (80057ac <prvCheckForValidListAndQueue+0x60>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d120      	bne.n	80057a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800575e:	4814      	ldr	r0, [pc, #80]	; (80057b0 <prvCheckForValidListAndQueue+0x64>)
 8005760:	f7fd fe1c 	bl	800339c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005764:	4813      	ldr	r0, [pc, #76]	; (80057b4 <prvCheckForValidListAndQueue+0x68>)
 8005766:	f7fd fe19 	bl	800339c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <prvCheckForValidListAndQueue+0x6c>)
 800576c:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <prvCheckForValidListAndQueue+0x64>)
 800576e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005770:	4b12      	ldr	r3, [pc, #72]	; (80057bc <prvCheckForValidListAndQueue+0x70>)
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <prvCheckForValidListAndQueue+0x68>)
 8005774:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005776:	2300      	movs	r3, #0
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <prvCheckForValidListAndQueue+0x74>)
 800577c:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <prvCheckForValidListAndQueue+0x78>)
 800577e:	2110      	movs	r1, #16
 8005780:	200a      	movs	r0, #10
 8005782:	f7fd ff27 	bl	80035d4 <xQueueGenericCreateStatic>
 8005786:	4603      	mov	r3, r0
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <prvCheckForValidListAndQueue+0x60>)
 800578a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800578c:	4b07      	ldr	r3, [pc, #28]	; (80057ac <prvCheckForValidListAndQueue+0x60>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <prvCheckForValidListAndQueue+0x60>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	490b      	ldr	r1, [pc, #44]	; (80057c8 <prvCheckForValidListAndQueue+0x7c>)
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fb40 	bl	8003e20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057a0:	f000 f970 	bl	8005a84 <vPortExitCritical>
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000e14 	.word	0x20000e14
 80057b0:	20000de4 	.word	0x20000de4
 80057b4:	20000df8 	.word	0x20000df8
 80057b8:	20000e0c 	.word	0x20000e0c
 80057bc:	20000e10 	.word	0x20000e10
 80057c0:	20000ec0 	.word	0x20000ec0
 80057c4:	20000e20 	.word	0x20000e20
 80057c8:	08006270 	.word	0x08006270

080057cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3b04      	subs	r3, #4
 80057dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3b04      	subs	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3b04      	subs	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057fc:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <pxPortInitialiseStack+0x64>)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b14      	subs	r3, #20
 8005806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b04      	subs	r3, #4
 8005812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f06f 0202 	mvn.w	r2, #2
 800581a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b20      	subs	r3, #32
 8005820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	08005835 	.word	0x08005835

08005834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800583e:	4b12      	ldr	r3, [pc, #72]	; (8005888 <prvTaskExitError+0x54>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d00a      	beq.n	800585e <prvTaskExitError+0x2a>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <prvTaskExitError+0x28>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	60bb      	str	r3, [r7, #8]
}
 8005870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005872:	bf00      	nop
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0fc      	beq.n	8005874 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	2000000c 	.word	0x2000000c
 800588c:	00000000 	.word	0x00000000

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <xPortStartScheduler+0x120>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a46      	ldr	r2, [pc, #280]	; (8005a04 <xPortStartScheduler+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10a      	bne.n	8005906 <xPortStartScheduler+0x26>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x46>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <xPortStartScheduler+0x130>)
 800594c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <xPortStartScheduler+0x134>)
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005954:	e009      	b.n	800596a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <xPortStartScheduler+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xPortStartScheduler+0x134>)
 800595e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d0ef      	beq.n	8005956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00a      	beq.n	8005998 <xPortStartScheduler+0xb8>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60bb      	str	r3, [r7, #8]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <xPortStartScheduler+0x134>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <xPortStartScheduler+0x134>)
 80059ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xPortStartScheduler+0x138>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <xPortStartScheduler+0x138>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ce:	f000 f8dd 	bl	8005b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <xPortStartScheduler+0x13c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059d8:	f000 f8fc 	bl	8005bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xPortStartScheduler+0x140>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <xPortStartScheduler+0x140>)
 80059e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e8:	f7ff ff66 	bl	80058b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ec:	f7fe fe48 	bl	8004680 <vTaskSwitchContext>
	prvTaskExitError();
 80059f0:	f7ff ff20 	bl	8005834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000ed00 	.word	0xe000ed00
 8005a04:	410fc271 	.word	0x410fc271
 8005a08:	410fc270 	.word	0x410fc270
 8005a0c:	e000e400 	.word	0xe000e400
 8005a10:	20000f10 	.word	0x20000f10
 8005a14:	20000f14 	.word	0x20000f14
 8005a18:	e000ed20 	.word	0xe000ed20
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	e000ef34 	.word	0xe000ef34

08005a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
}
 8005a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a3e:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortEnterCritical+0x5c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vPortEnterCritical+0x4a>
	}
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vPortExitCritical+0x50>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vPortExitCritical+0x24>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vPortExitCritical+0x50>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <vPortExitCritical+0x42>
 8005aba:	2300      	movs	r3, #0
 8005abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
}
 8005ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	2000000c 	.word	0x2000000c
	...

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7fe fdb6 	bl	8004680 <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7fe fcd3 	bl	800450c <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <xPortSysTickHandler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005be2:	bf00      	nop
 8005be4:	e000ed88 	.word	0xe000ed88

08005be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d914      	bls.n	8005c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <vPortValidateInterruptPriority+0x70>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20a      	bcs.n	8005c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <vPortValidateInterruptPriority+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d90a      	bls.n	8005c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	603b      	str	r3, [r7, #0]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <vPortValidateInterruptPriority+0x60>
	}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e3f0 	.word	0xe000e3f0
 8005c5c:	20000f10 	.word	0x20000f10
 8005c60:	e000ed0c 	.word	0xe000ed0c
 8005c64:	20000f14 	.word	0x20000f14

08005c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c74:	f7fe fb8e 	bl	8004394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <pvPortMalloc+0x180>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c80:	f000 f920 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8093 	bne.w	8005db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01d      	beq.n	8005cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <pvPortMalloc+0x188>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d869      	bhi.n	8005db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <pvPortMalloc+0x18c>)
 8005ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <pvPortMalloc+0x18c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cee:	e004      	b.n	8005cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <pvPortMalloc+0xa4>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f1      	bne.n	8005cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <pvPortMalloc+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d050      	beq.n	8005db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d91f      	bls.n	8005d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <pvPortMalloc+0xf8>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	613b      	str	r3, [r7, #16]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f000 f908 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <pvPortMalloc+0x188>)
 8005d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <pvPortMalloc+0x188>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <pvPortMalloc+0x190>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d203      	bcs.n	8005d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <pvPortMalloc+0x188>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <pvPortMalloc+0x190>)
 8005d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x184>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <pvPortMalloc+0x194>)
 8005db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db8:	f7fe fafa 	bl	80043b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <pvPortMalloc+0x174>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <pvPortMalloc+0x172>
	return pvReturn;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004b20 	.word	0x20004b20
 8005dec:	20004b34 	.word	0x20004b34
 8005df0:	20004b24 	.word	0x20004b24
 8005df4:	20004b18 	.word	0x20004b18
 8005df8:	20004b28 	.word	0x20004b28
 8005dfc:	20004b2c 	.word	0x20004b2c

08005e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04d      	beq.n	8005eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e12:	2308      	movs	r3, #8
 8005e14:	425b      	negs	r3, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vPortFree+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <vPortFree+0x44>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <vPortFree+0x62>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <vPortFree+0xb8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <vPortFree+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e88:	f7fe fa84 	bl	8004394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <vPortFree+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vPortFree+0xbc>)
 8005e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xc0>)
 8005ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eaa:	f7fe fa81 	bl	80043b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20004b34 	.word	0x20004b34
 8005ebc:	20004b24 	.word	0x20004b24
 8005ec0:	20004b30 	.word	0x20004b30

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000f18 	.word	0x20000f18
 8005f74:	20004b18 	.word	0x20004b18
 8005f78:	20004b20 	.word	0x20004b20
 8005f7c:	20004b28 	.word	0x20004b28
 8005f80:	20004b24 	.word	0x20004b24
 8005f84:	20004b34 	.word	0x20004b34

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20004b18 	.word	0x20004b18
 8006038:	20004b20 	.word	0x20004b20

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4d0d      	ldr	r5, [pc, #52]	; (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	; (8006078 <__libc_init_array+0x3c>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2600      	movs	r6, #0
 8006048:	42a6      	cmp	r6, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4d0b      	ldr	r5, [pc, #44]	; (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	; (8006080 <__libc_init_array+0x44>)
 8006050:	f000 f8f2 	bl	8006238 <_init>
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2600      	movs	r6, #0
 800605a:	42a6      	cmp	r6, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f855 3b04 	ldr.w	r3, [r5], #4
 8006064:	4798      	blx	r3
 8006066:	3601      	adds	r6, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f855 3b04 	ldr.w	r3, [r5], #4
 800606e:	4798      	blx	r3
 8006070:	3601      	adds	r6, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	08006340 	.word	0x08006340
 8006078:	08006340 	.word	0x08006340
 800607c:	08006340 	.word	0x08006340
 8006080:	08006344 	.word	0x08006344

08006084 <__retarget_lock_acquire_recursive>:
 8006084:	4770      	bx	lr

08006086 <__retarget_lock_release_recursive>:
 8006086:	4770      	bx	lr

08006088 <memcpy>:
 8006088:	440a      	add	r2, r1
 800608a:	4291      	cmp	r1, r2
 800608c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006090:	d100      	bne.n	8006094 <memcpy+0xc>
 8006092:	4770      	bx	lr
 8006094:	b510      	push	{r4, lr}
 8006096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800609a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800609e:	4291      	cmp	r1, r2
 80060a0:	d1f9      	bne.n	8006096 <memcpy+0xe>
 80060a2:	bd10      	pop	{r4, pc}

080060a4 <memset>:
 80060a4:	4402      	add	r2, r0
 80060a6:	4603      	mov	r3, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <cleanup_glue>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	460c      	mov	r4, r1
 80060b8:	6809      	ldr	r1, [r1, #0]
 80060ba:	4605      	mov	r5, r0
 80060bc:	b109      	cbz	r1, 80060c2 <cleanup_glue+0xe>
 80060be:	f7ff fff9 	bl	80060b4 <cleanup_glue>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ca:	f000 b869 	b.w	80061a0 <_free_r>
	...

080060d0 <_reclaim_reent>:
 80060d0:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <_reclaim_reent+0xb4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4283      	cmp	r3, r0
 80060d6:	b570      	push	{r4, r5, r6, lr}
 80060d8:	4604      	mov	r4, r0
 80060da:	d051      	beq.n	8006180 <_reclaim_reent+0xb0>
 80060dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060de:	b143      	cbz	r3, 80060f2 <_reclaim_reent+0x22>
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d14a      	bne.n	800617c <_reclaim_reent+0xac>
 80060e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	b111      	cbz	r1, 80060f2 <_reclaim_reent+0x22>
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 f857 	bl	80061a0 <_free_r>
 80060f2:	6961      	ldr	r1, [r4, #20]
 80060f4:	b111      	cbz	r1, 80060fc <_reclaim_reent+0x2c>
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f852 	bl	80061a0 <_free_r>
 80060fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060fe:	b111      	cbz	r1, 8006106 <_reclaim_reent+0x36>
 8006100:	4620      	mov	r0, r4
 8006102:	f000 f84d 	bl	80061a0 <_free_r>
 8006106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006108:	b111      	cbz	r1, 8006110 <_reclaim_reent+0x40>
 800610a:	4620      	mov	r0, r4
 800610c:	f000 f848 	bl	80061a0 <_free_r>
 8006110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006112:	b111      	cbz	r1, 800611a <_reclaim_reent+0x4a>
 8006114:	4620      	mov	r0, r4
 8006116:	f000 f843 	bl	80061a0 <_free_r>
 800611a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800611c:	b111      	cbz	r1, 8006124 <_reclaim_reent+0x54>
 800611e:	4620      	mov	r0, r4
 8006120:	f000 f83e 	bl	80061a0 <_free_r>
 8006124:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006126:	b111      	cbz	r1, 800612e <_reclaim_reent+0x5e>
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f839 	bl	80061a0 <_free_r>
 800612e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006130:	b111      	cbz	r1, 8006138 <_reclaim_reent+0x68>
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f834 	bl	80061a0 <_free_r>
 8006138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613a:	b111      	cbz	r1, 8006142 <_reclaim_reent+0x72>
 800613c:	4620      	mov	r0, r4
 800613e:	f000 f82f 	bl	80061a0 <_free_r>
 8006142:	69a3      	ldr	r3, [r4, #24]
 8006144:	b1e3      	cbz	r3, 8006180 <_reclaim_reent+0xb0>
 8006146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006148:	4620      	mov	r0, r4
 800614a:	4798      	blx	r3
 800614c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800614e:	b1b9      	cbz	r1, 8006180 <_reclaim_reent+0xb0>
 8006150:	4620      	mov	r0, r4
 8006152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006156:	f7ff bfad 	b.w	80060b4 <cleanup_glue>
 800615a:	5949      	ldr	r1, [r1, r5]
 800615c:	b941      	cbnz	r1, 8006170 <_reclaim_reent+0xa0>
 800615e:	3504      	adds	r5, #4
 8006160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006162:	2d80      	cmp	r5, #128	; 0x80
 8006164:	68d9      	ldr	r1, [r3, #12]
 8006166:	d1f8      	bne.n	800615a <_reclaim_reent+0x8a>
 8006168:	4620      	mov	r0, r4
 800616a:	f000 f819 	bl	80061a0 <_free_r>
 800616e:	e7ba      	b.n	80060e6 <_reclaim_reent+0x16>
 8006170:	680e      	ldr	r6, [r1, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	f000 f814 	bl	80061a0 <_free_r>
 8006178:	4631      	mov	r1, r6
 800617a:	e7ef      	b.n	800615c <_reclaim_reent+0x8c>
 800617c:	2500      	movs	r5, #0
 800617e:	e7ef      	b.n	8006160 <_reclaim_reent+0x90>
 8006180:	bd70      	pop	{r4, r5, r6, pc}
 8006182:	bf00      	nop
 8006184:	20000010 	.word	0x20000010

08006188 <__malloc_lock>:
 8006188:	4801      	ldr	r0, [pc, #4]	; (8006190 <__malloc_lock+0x8>)
 800618a:	f7ff bf7b 	b.w	8006084 <__retarget_lock_acquire_recursive>
 800618e:	bf00      	nop
 8006190:	20004b38 	.word	0x20004b38

08006194 <__malloc_unlock>:
 8006194:	4801      	ldr	r0, [pc, #4]	; (800619c <__malloc_unlock+0x8>)
 8006196:	f7ff bf76 	b.w	8006086 <__retarget_lock_release_recursive>
 800619a:	bf00      	nop
 800619c:	20004b38 	.word	0x20004b38

080061a0 <_free_r>:
 80061a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061a2:	2900      	cmp	r1, #0
 80061a4:	d044      	beq.n	8006230 <_free_r+0x90>
 80061a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061aa:	9001      	str	r0, [sp, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f1a1 0404 	sub.w	r4, r1, #4
 80061b2:	bfb8      	it	lt
 80061b4:	18e4      	addlt	r4, r4, r3
 80061b6:	f7ff ffe7 	bl	8006188 <__malloc_lock>
 80061ba:	4a1e      	ldr	r2, [pc, #120]	; (8006234 <_free_r+0x94>)
 80061bc:	9801      	ldr	r0, [sp, #4]
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	b933      	cbnz	r3, 80061d0 <_free_r+0x30>
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	6014      	str	r4, [r2, #0]
 80061c6:	b003      	add	sp, #12
 80061c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061cc:	f7ff bfe2 	b.w	8006194 <__malloc_unlock>
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d908      	bls.n	80061e6 <_free_r+0x46>
 80061d4:	6825      	ldr	r5, [r4, #0]
 80061d6:	1961      	adds	r1, r4, r5
 80061d8:	428b      	cmp	r3, r1
 80061da:	bf01      	itttt	eq
 80061dc:	6819      	ldreq	r1, [r3, #0]
 80061de:	685b      	ldreq	r3, [r3, #4]
 80061e0:	1949      	addeq	r1, r1, r5
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	e7ed      	b.n	80061c2 <_free_r+0x22>
 80061e6:	461a      	mov	r2, r3
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	b10b      	cbz	r3, 80061f0 <_free_r+0x50>
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	d9fa      	bls.n	80061e6 <_free_r+0x46>
 80061f0:	6811      	ldr	r1, [r2, #0]
 80061f2:	1855      	adds	r5, r2, r1
 80061f4:	42a5      	cmp	r5, r4
 80061f6:	d10b      	bne.n	8006210 <_free_r+0x70>
 80061f8:	6824      	ldr	r4, [r4, #0]
 80061fa:	4421      	add	r1, r4
 80061fc:	1854      	adds	r4, r2, r1
 80061fe:	42a3      	cmp	r3, r4
 8006200:	6011      	str	r1, [r2, #0]
 8006202:	d1e0      	bne.n	80061c6 <_free_r+0x26>
 8006204:	681c      	ldr	r4, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	6053      	str	r3, [r2, #4]
 800620a:	4421      	add	r1, r4
 800620c:	6011      	str	r1, [r2, #0]
 800620e:	e7da      	b.n	80061c6 <_free_r+0x26>
 8006210:	d902      	bls.n	8006218 <_free_r+0x78>
 8006212:	230c      	movs	r3, #12
 8006214:	6003      	str	r3, [r0, #0]
 8006216:	e7d6      	b.n	80061c6 <_free_r+0x26>
 8006218:	6825      	ldr	r5, [r4, #0]
 800621a:	1961      	adds	r1, r4, r5
 800621c:	428b      	cmp	r3, r1
 800621e:	bf04      	itt	eq
 8006220:	6819      	ldreq	r1, [r3, #0]
 8006222:	685b      	ldreq	r3, [r3, #4]
 8006224:	6063      	str	r3, [r4, #4]
 8006226:	bf04      	itt	eq
 8006228:	1949      	addeq	r1, r1, r5
 800622a:	6021      	streq	r1, [r4, #0]
 800622c:	6054      	str	r4, [r2, #4]
 800622e:	e7ca      	b.n	80061c6 <_free_r+0x26>
 8006230:	b003      	add	sp, #12
 8006232:	bd30      	pop	{r4, r5, pc}
 8006234:	20004b3c 	.word	0x20004b3c

08006238 <_init>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr

08006244 <_fini>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr
