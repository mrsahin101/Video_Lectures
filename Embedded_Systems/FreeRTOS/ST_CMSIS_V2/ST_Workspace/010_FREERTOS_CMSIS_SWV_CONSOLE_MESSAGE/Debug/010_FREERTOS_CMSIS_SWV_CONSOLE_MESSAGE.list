
010_FREERTOS_CMSIS_SWV_CONSOLE_MESSAGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ac  080048ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b4  080048b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a84  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004af8  20004af8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001466e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab6  00000000  00000000  00034712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  000371c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  000382f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ecf  00000000  00000000  00039300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011994  00000000  00000000  0003c1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20f9  00000000  00000000  0004db63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011fc5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b2c  00000000  00000000  0011fcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047c8 	.word	0x080047c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080047c8 	.word	0x080047c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d013      	beq.n	8000524 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000500:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000504:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00b      	beq.n	8000524 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800050c:	e000      	b.n	8000510 <ITM_SendChar+0x2c>
    {
      __NOP();
 800050e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f9      	beq.n	800050e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800051a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fa04 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f816 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f87c 	bl	800063c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000544:	f001 faca 	bl	8001adc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <main+0x2c>)
 800054a:	2100      	movs	r1, #0
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <main+0x30>)
 800054e:	f001 fb0f 	bl	8001b70 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <main+0x34>)
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f001 fae4 	bl	8001b24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x28>
 800055e:	bf00      	nop
 8000560:	08004810 	.word	0x08004810
 8000564:	080006ed 	.word	0x080006ed
 8000568:	20000090 	.word	0x20000090

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 f85a 	bl	8004634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xc8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a26      	ldr	r2, [pc, #152]	; (8000634 <SystemClock_Config+0xc8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <SystemClock_Config+0xcc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <SystemClock_Config+0xcc>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 facb 	bl	8000b8c <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f898 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000608:	23b0      	movs	r3, #176	; 0xb0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fd2e 	bl	800107c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000626:	f000 f883 	bl	8000730 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <MX_GPIO_Init+0x68>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x68>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char *message)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	uint8_t length = strlen(message);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fd8d 	bl	80001d0 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < length; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e009      	b.n	80006d4 <Task_action+0x2c>
	{
		ITM_SendChar(message[i]);
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff0b 	bl	80004e4 <ITM_SendChar>
	for(uint8_t i = 0; i < length; i++)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	3301      	adds	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	7bfa      	ldrb	r2, [r7, #15]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3f1      	bcc.n	80006c0 <Task_action+0x18>
	}
	ITM_SendChar('\n');
 80006dc:	200a      	movs	r0, #10
 80006de:	f7ff ff01 	bl	80004e4 <ITM_SendChar>
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  const char *Message = "Hello World";
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <StartDefaultTask+0x1c>)
 80006f6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	Task_action(Message);
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f7ff ffd5 	bl	80006a8 <Task_action>
    osDelay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000702:	f001 fac7 	bl	8001c94 <osDelay>
	Task_action(Message);
 8000706:	e7f7      	b.n	80006f8 <StartDefaultTask+0xc>
 8000708:	080047ec 	.word	0x080047ec

0800070c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d101      	bne.n	8000722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071e:	f000 f933 	bl	8000988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40001000 	.word	0x40001000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_MspInit+0x54>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <HAL_MspInit+0x54>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6453      	str	r3, [r2, #68]	; 0x44
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x54>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_MspInit+0x54>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_MspInit+0x54>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_MspInit+0x54>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	f06f 0001 	mvn.w	r0, #1
 8000782:	f000 f9d9 	bl	8000b38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08e      	sub	sp, #56	; 0x38
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <HAL_InitTick+0xe4>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a32      	ldr	r2, [pc, #200]	; (8000878 <HAL_InitTick+0xe4>)
 80007ae:	f043 0310 	orr.w	r3, r3, #16
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <HAL_InitTick+0xe4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 0310 	and.w	r3, r3, #16
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c0:	f107 0210 	add.w	r2, r7, #16
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fe62 	bl	8001494 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d103      	bne.n	80007e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007da:	f000 fe47 	bl	800146c <HAL_RCC_GetPCLK1Freq>
 80007de:	6378      	str	r0, [r7, #52]	; 0x34
 80007e0:	e004      	b.n	80007ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007e2:	f000 fe43 	bl	800146c <HAL_RCC_GetPCLK1Freq>
 80007e6:	4603      	mov	r3, r0
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ee:	4a23      	ldr	r2, [pc, #140]	; (800087c <HAL_InitTick+0xe8>)
 80007f0:	fba2 2303 	umull	r2, r3, r2, r3
 80007f4:	0c9b      	lsrs	r3, r3, #18
 80007f6:	3b01      	subs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <HAL_InitTick+0xec>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <HAL_InitTick+0xf0>)
 80007fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <HAL_InitTick+0xec>)
 8000802:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000806:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_InitTick+0xec>)
 800080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_InitTick+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <HAL_InitTick+0xec>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_InitTick+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <HAL_InitTick+0xec>)
 8000822:	f000 fe69 	bl	80014f8 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800082c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000830:	2b00      	cmp	r3, #0
 8000832:	d11b      	bne.n	800086c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <HAL_InitTick+0xec>)
 8000836:	f000 feb9 	bl	80015ac <HAL_TIM_Base_Start_IT>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000844:	2b00      	cmp	r3, #0
 8000846:	d111      	bne.n	800086c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000848:	2036      	movs	r0, #54	; 0x36
 800084a:	f000 f991 	bl	8000b70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d808      	bhi.n	8000866 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2036      	movs	r0, #54	; 0x36
 800085a:	f000 f96d 	bl	8000b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_InitTick+0xf4>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e002      	b.n	800086c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800086c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000870:	4618      	mov	r0, r3
 8000872:	3738      	adds	r7, #56	; 0x38
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	431bde83 	.word	0x431bde83
 8000880:	20000094 	.word	0x20000094
 8000884:	40001000 	.word	0x40001000
 8000888:	20000004 	.word	0x20000004

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM6_DAC_IRQHandler+0x10>)
 80008be:	f000 fee5 	bl	800168c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000094 	.word	0x20000094

080008cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008f6:	490e      	ldr	r1, [pc, #56]	; (8000930 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800090c:	4c0b      	ldr	r4, [pc, #44]	; (800093c <LoopFillZerobss+0x26>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800091a:	f7ff ffd7 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f003 fe55 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fe07 	bl	8000534 <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000934:	080048bc 	.word	0x080048bc
  ldr r2, =_sbss
 8000938:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800093c:	20004af8 	.word	0x20004af8

08000940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <HAL_Init+0x40>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_Init+0x40>)
 800095a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_Init+0x40>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f8d8 	bl	8000b22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff ff0e 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff fee0 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023c00 	.word	0x40023c00

08000988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	200000dc 	.word	0x200000dc

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	200000dc 	.word	0x200000dc

080009c8 <__NVIC_SetPriorityGrouping>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ff4c 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4a:	f7ff ff61 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	6978      	ldr	r0, [r7, #20]
 8000b56:	f7ff ffb1 	bl	8000abc <NVIC_EncodePriority>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff80 	bl	8000a68 <__NVIC_SetPriority>
}
 8000b68:	bf00      	nop
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff54 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e267      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d075      	beq.n	8000c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000baa:	4b88      	ldr	r3, [pc, #544]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 030c 	and.w	r3, r3, #12
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d00c      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb6:	4b85      	ldr	r3, [pc, #532]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d112      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	4b82      	ldr	r3, [pc, #520]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bce:	d10b      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	4b7e      	ldr	r3, [pc, #504]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d05b      	beq.n	8000c94 <HAL_RCC_OscConfig+0x108>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d157      	bne.n	8000c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e242      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d106      	bne.n	8000c00 <HAL_RCC_OscConfig+0x74>
 8000bf2:	4b76      	ldr	r3, [pc, #472]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a75      	ldr	r2, [pc, #468]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e01d      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x98>
 8000c0a:	4b70      	ldr	r3, [pc, #448]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6f      	ldr	r2, [pc, #444]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b6d      	ldr	r3, [pc, #436]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a6c      	ldr	r2, [pc, #432]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e00b      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c24:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a68      	ldr	r2, [pc, #416]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a65      	ldr	r2, [pc, #404]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d013      	beq.n	8000c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff feb4 	bl	80009b0 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff feb0 	bl	80009b0 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e207      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0xc0>
 8000c6a:	e014      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fea0 	bl	80009b0 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fe9c 	bl	80009b0 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e1f3      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	4b51      	ldr	r3, [pc, #324]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0xe8>
 8000c92:	e000      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d063      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ca2:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d11c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d116      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e1c7      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4937      	ldr	r1, [pc, #220]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	e03a      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <HAL_RCC_OscConfig+0x244>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d02:	f7ff fe55 	bl	80009b0 <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fe51 	bl	80009b0 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e1a8      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f0      	beq.n	8000d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4925      	ldr	r1, [pc, #148]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e015      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <HAL_RCC_OscConfig+0x244>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d44:	f7ff fe34 	bl	80009b0 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fe30 	bl	80009b0 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e187      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d036      	beq.n	8000de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d016      	beq.n	8000dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_RCC_OscConfig+0x248>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d84:	f7ff fe14 	bl	80009b0 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fe10 	bl	80009b0 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e167      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_RCC_OscConfig+0x240>)
 8000da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x200>
 8000daa:	e01b      	b.n	8000de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_RCC_OscConfig+0x248>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db2:	f7ff fdfd 	bl	80009b0 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	e00e      	b.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dba:	f7ff fdf9 	bl	80009b0 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d907      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e150      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	42470000 	.word	0x42470000
 8000dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd8:	4b88      	ldr	r3, [pc, #544]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1ea      	bne.n	8000dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 8097 	beq.w	8000f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df6:	4b81      	ldr	r3, [pc, #516]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10f      	bne.n	8000e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b7d      	ldr	r3, [pc, #500]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a7c      	ldr	r2, [pc, #496]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b7a      	ldr	r3, [pc, #488]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e22:	4b77      	ldr	r3, [pc, #476]	; (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d118      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e2e:	4b74      	ldr	r3, [pc, #464]	; (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a73      	ldr	r2, [pc, #460]	; (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fdb9 	bl	80009b0 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e42:	f7ff fdb5 	bl	80009b0 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e10c      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x474>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f0      	beq.n	8000e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d106      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2ea>
 8000e68:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6c:	4a63      	ldr	r2, [pc, #396]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6713      	str	r3, [r2, #112]	; 0x70
 8000e74:	e01c      	b.n	8000eb0 <HAL_RCC_OscConfig+0x324>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0x30c>
 8000e7e:	4b5f      	ldr	r3, [pc, #380]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e82:	4a5e      	ldr	r2, [pc, #376]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8e:	4a5b      	ldr	r2, [pc, #364]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6713      	str	r3, [r2, #112]	; 0x70
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0x324>
 8000e98:	4b58      	ldr	r3, [pc, #352]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9c:	4a57      	ldr	r2, [pc, #348]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea4:	4b55      	ldr	r3, [pc, #340]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea8:	4a54      	ldr	r2, [pc, #336]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000eaa:	f023 0304 	bic.w	r3, r3, #4
 8000eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d015      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb8:	f7ff fd7a 	bl	80009b0 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ebe:	e00a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fd76 	bl	80009b0 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e0cb      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed6:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0ee      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x334>
 8000ee2:	e014      	b.n	8000f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fd64 	bl	80009b0 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eea:	e00a      	b.n	8000f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eec:	f7ff fd60 	bl	80009b0 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e0b5      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f02:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1ee      	bne.n	8000eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d105      	bne.n	8000f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f14:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80a1 	beq.w	800106c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d05c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d141      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <HAL_RCC_OscConfig+0x478>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fd34 	bl	80009b0 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4c:	f7ff fd30 	bl	80009b0 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e087      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	3b01      	subs	r3, #1
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	491b      	ldr	r1, [pc, #108]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_RCC_OscConfig+0x478>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fd09 	bl	80009b0 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fd05 	bl	80009b0 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e05c      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x416>
 8000fc0:	e054      	b.n	800106c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_RCC_OscConfig+0x478>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fcf2 	bl	80009b0 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff fcee 	bl	80009b0 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e045      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_RCC_OscConfig+0x470>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x444>
 8000fee:	e03d      	b.n	800106c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e038      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000
 8001004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_RCC_OscConfig+0x4ec>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d028      	beq.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001020:	429a      	cmp	r2, r3
 8001022:	d121      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102e:	429a      	cmp	r2, r3
 8001030:	d11a      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001038:	4013      	ands	r3, r2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800103e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001040:	4293      	cmp	r3, r2
 8001042:	d111      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	085b      	lsrs	r3, r3, #1
 8001050:	3b01      	subs	r3, #1
 8001052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001054:	429a      	cmp	r2, r3
 8001056:	d107      	bne.n	8001068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001064:	429a      	cmp	r2, r3
 8001066:	d001      	beq.n	800106c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0cc      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001090:	4b68      	ldr	r3, [pc, #416]	; (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d90c      	bls.n	80010b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	4b65      	ldr	r3, [pc, #404]	; (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a6:	4b63      	ldr	r3, [pc, #396]	; (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0b8      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d0:	4b59      	ldr	r3, [pc, #356]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a58      	ldr	r2, [pc, #352]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010e8:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f4:	4b50      	ldr	r3, [pc, #320]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	494d      	ldr	r1, [pc, #308]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	4313      	orrs	r3, r2
 8001104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d044      	beq.n	800119c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d107      	bne.n	800112a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	4b47      	ldr	r3, [pc, #284]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d119      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e07f      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d003      	beq.n	800113a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001136:	2b03      	cmp	r3, #3
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e06f      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e067      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f023 0203 	bic.w	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4934      	ldr	r1, [pc, #208]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	4313      	orrs	r3, r2
 800116a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800116c:	f7ff fc20 	bl	80009b0 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	e00a      	b.n	800118a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f7ff fc1c 	bl	80009b0 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e04f      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 020c 	and.w	r2, r3, #12
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d1eb      	bne.n	8001174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d20c      	bcs.n	80011c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_RCC_ClockConfig+0x1b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e032      	b.n	800122a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4916      	ldr	r1, [pc, #88]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	490e      	ldr	r1, [pc, #56]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001202:	f000 f821 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 8001206:	4602      	mov	r2, r0
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	490a      	ldr	r1, [pc, #40]	; (800123c <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	5ccb      	ldrb	r3, [r1, r3]
 8001216:	fa22 f303 	lsr.w	r3, r2, r3
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_RCC_ClockConfig+0x1c8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fab6 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00
 8001238:	40023800 	.word	0x40023800
 800123c:	08004834 	.word	0x08004834
 8001240:	20000000 	.word	0x20000000
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124c:	b094      	sub	sp, #80	; 0x50
 800124e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
 8001254:	2300      	movs	r3, #0
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001258:	2300      	movs	r3, #0
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001260:	4b79      	ldr	r3, [pc, #484]	; (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d00d      	beq.n	8001288 <HAL_RCC_GetSysClockFreq+0x40>
 800126c:	2b08      	cmp	r3, #8
 800126e:	f200 80e1 	bhi.w	8001434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_RCC_GetSysClockFreq+0x34>
 8001276:	2b04      	cmp	r3, #4
 8001278:	d003      	beq.n	8001282 <HAL_RCC_GetSysClockFreq+0x3a>
 800127a:	e0db      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800127c:	4b73      	ldr	r3, [pc, #460]	; (800144c <HAL_RCC_GetSysClockFreq+0x204>)
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001280:	e0db      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001282:	4b73      	ldr	r3, [pc, #460]	; (8001450 <HAL_RCC_GetSysClockFreq+0x208>)
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001286:	e0d8      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001288:	4b6f      	ldr	r3, [pc, #444]	; (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800129e:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	099b      	lsrs	r3, r3, #6
 80012a4:	2200      	movs	r2, #0
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80012a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80012aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
 80012b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012ba:	4622      	mov	r2, r4
 80012bc:	462b      	mov	r3, r5
 80012be:	f04f 0000 	mov.w	r0, #0
 80012c2:	f04f 0100 	mov.w	r1, #0
 80012c6:	0159      	lsls	r1, r3, #5
 80012c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012cc:	0150      	lsls	r0, r2, #5
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4621      	mov	r1, r4
 80012d4:	1a51      	subs	r1, r2, r1
 80012d6:	6139      	str	r1, [r7, #16]
 80012d8:	4629      	mov	r1, r5
 80012da:	eb63 0301 	sbc.w	r3, r3, r1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012ec:	4659      	mov	r1, fp
 80012ee:	018b      	lsls	r3, r1, #6
 80012f0:	4651      	mov	r1, sl
 80012f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012f6:	4651      	mov	r1, sl
 80012f8:	018a      	lsls	r2, r1, #6
 80012fa:	4651      	mov	r1, sl
 80012fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001300:	4659      	mov	r1, fp
 8001302:	eb63 0901 	sbc.w	r9, r3, r1
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800131a:	4690      	mov	r8, r2
 800131c:	4699      	mov	r9, r3
 800131e:	4623      	mov	r3, r4
 8001320:	eb18 0303 	adds.w	r3, r8, r3
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	462b      	mov	r3, r5
 8001328:	eb49 0303 	adc.w	r3, r9, r3
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800133a:	4629      	mov	r1, r5
 800133c:	024b      	lsls	r3, r1, #9
 800133e:	4621      	mov	r1, r4
 8001340:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001344:	4621      	mov	r1, r4
 8001346:	024a      	lsls	r2, r1, #9
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134e:	2200      	movs	r2, #0
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
 8001352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001358:	f7fe ff42 	bl	80001e0 <__aeabi_uldivmod>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4613      	mov	r3, r2
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001364:	e058      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	099b      	lsrs	r3, r3, #6
 800136c:	2200      	movs	r2, #0
 800136e:	4618      	mov	r0, r3
 8001370:	4611      	mov	r1, r2
 8001372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
 800137c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001380:	4642      	mov	r2, r8
 8001382:	464b      	mov	r3, r9
 8001384:	f04f 0000 	mov.w	r0, #0
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	0159      	lsls	r1, r3, #5
 800138e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001392:	0150      	lsls	r0, r2, #5
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4641      	mov	r1, r8
 800139a:	ebb2 0a01 	subs.w	sl, r2, r1
 800139e:	4649      	mov	r1, r9
 80013a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013b8:	ebb2 040a 	subs.w	r4, r2, sl
 80013bc:	eb63 050b 	sbc.w	r5, r3, fp
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	00eb      	lsls	r3, r5, #3
 80013ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013ce:	00e2      	lsls	r2, r4, #3
 80013d0:	4614      	mov	r4, r2
 80013d2:	461d      	mov	r5, r3
 80013d4:	4643      	mov	r3, r8
 80013d6:	18e3      	adds	r3, r4, r3
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	464b      	mov	r3, r9
 80013dc:	eb45 0303 	adc.w	r3, r5, r3
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013ee:	4629      	mov	r1, r5
 80013f0:	028b      	lsls	r3, r1, #10
 80013f2:	4621      	mov	r1, r4
 80013f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013f8:	4621      	mov	r1, r4
 80013fa:	028a      	lsls	r2, r1, #10
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001402:	2200      	movs	r2, #0
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	61fa      	str	r2, [r7, #28]
 8001408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140c:	f7fe fee8 	bl	80001e0 <__aeabi_uldivmod>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4613      	mov	r3, r2
 8001416:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_GetSysClockFreq+0x200>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	0c1b      	lsrs	r3, r3, #16
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	3301      	adds	r3, #1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800142a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001432:	e002      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_RCC_GetSysClockFreq+0x204>)
 8001436:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800143a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800143c:	4618      	mov	r0, r3
 800143e:	3750      	adds	r7, #80	; 0x50
 8001440:	46bd      	mov	sp, r7
 8001442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	00f42400 	.word	0x00f42400
 8001450:	007a1200 	.word	0x007a1200

08001454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_RCC_GetHCLKFreq+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001470:	f7ff fff0 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001474:	4602      	mov	r2, r0
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0a9b      	lsrs	r3, r3, #10
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	4903      	ldr	r1, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001482:	5ccb      	ldrb	r3, [r1, r3]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	08004844 	.word	0x08004844

08001494 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	220f      	movs	r2, #15
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_RCC_GetClockConfig+0x60>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0207 	and.w	r2, r3, #7
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e041      	b.n	800158e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f839 	bl	8001596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3304      	adds	r3, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f000 f9d8 	bl	80018ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d001      	beq.n	80015c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e04e      	b.n	8001662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <HAL_TIM_Base_Start_IT+0xc4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d022      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x80>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ee:	d01d      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x80>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_TIM_Base_Start_IT+0xc8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d018      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x80>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_TIM_Base_Start_IT+0xcc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x80>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1c      	ldr	r2, [pc, #112]	; (800167c <HAL_TIM_Base_Start_IT+0xd0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00e      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x80>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_TIM_Base_Start_IT+0xd4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d009      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x80>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_TIM_Base_Start_IT+0xd8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x80>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_TIM_Base_Start_IT+0xdc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d111      	bne.n	8001650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b06      	cmp	r3, #6
 800163c:	d010      	beq.n	8001660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164e:	e007      	b.n	8001660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40010000 	.word	0x40010000
 8001674:	40000400 	.word	0x40000400
 8001678:	40000800 	.word	0x40000800
 800167c:	40000c00 	.word	0x40000c00
 8001680:	40010400 	.word	0x40010400
 8001684:	40014000 	.word	0x40014000
 8001688:	40001800 	.word	0x40001800

0800168c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d122      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d11b      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 0202 	mvn.w	r2, #2
 80016b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f8ee 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 80016d4:	e005      	b.n	80016e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8e0 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f8f1 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d122      	bne.n	800173c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b04      	cmp	r3, #4
 8001702:	d11b      	bne.n	800173c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f06f 0204 	mvn.w	r2, #4
 800170c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2202      	movs	r2, #2
 8001712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f8c4 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 8001728:	e005      	b.n	8001736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8b6 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f8c7 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b08      	cmp	r3, #8
 8001748:	d122      	bne.n	8001790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b08      	cmp	r3, #8
 8001756:	d11b      	bne.n	8001790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0208 	mvn.w	r2, #8
 8001760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2204      	movs	r2, #4
 8001766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f89a 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 800177c:	e005      	b.n	800178a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f88c 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f89d 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b10      	cmp	r3, #16
 800179c:	d122      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d11b      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0210 	mvn.w	r2, #16
 80017b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2208      	movs	r2, #8
 80017ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f870 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 80017d0:	e005      	b.n	80017de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f862 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f873 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10e      	bne.n	8001810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 0201 	mvn.w	r2, #1
 8001808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe ff7e 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	2b80      	cmp	r3, #128	; 0x80
 800181c:	d10e      	bne.n	800183c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	2b80      	cmp	r3, #128	; 0x80
 800182a:	d107      	bne.n	800183c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f902 	bl	8001a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d10e      	bne.n	8001868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001854:	2b40      	cmp	r3, #64	; 0x40
 8001856:	d107      	bne.n	8001868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f838 	bl	80018d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	2b20      	cmp	r3, #32
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b20      	cmp	r3, #32
 8001882:	d107      	bne.n	8001894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0220 	mvn.w	r2, #32
 800188c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8cc 	bl	8001a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <TIM_Base_SetConfig+0x114>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <TIM_Base_SetConfig+0x40>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190a:	d00f      	beq.n	800192c <TIM_Base_SetConfig+0x40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3d      	ldr	r2, [pc, #244]	; (8001a04 <TIM_Base_SetConfig+0x118>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00b      	beq.n	800192c <TIM_Base_SetConfig+0x40>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3c      	ldr	r2, [pc, #240]	; (8001a08 <TIM_Base_SetConfig+0x11c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d007      	beq.n	800192c <TIM_Base_SetConfig+0x40>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3b      	ldr	r2, [pc, #236]	; (8001a0c <TIM_Base_SetConfig+0x120>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d003      	beq.n	800192c <TIM_Base_SetConfig+0x40>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <TIM_Base_SetConfig+0x124>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d108      	bne.n	800193e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <TIM_Base_SetConfig+0x114>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d02b      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194c:	d027      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a2c      	ldr	r2, [pc, #176]	; (8001a04 <TIM_Base_SetConfig+0x118>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d023      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <TIM_Base_SetConfig+0x11c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a2a      	ldr	r2, [pc, #168]	; (8001a0c <TIM_Base_SetConfig+0x120>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01b      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <TIM_Base_SetConfig+0x124>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d017      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <TIM_Base_SetConfig+0x128>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <TIM_Base_SetConfig+0x12c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00f      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <TIM_Base_SetConfig+0x130>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00b      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <TIM_Base_SetConfig+0x134>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <TIM_Base_SetConfig+0x138>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d003      	beq.n	800199e <TIM_Base_SetConfig+0xb2>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <TIM_Base_SetConfig+0x13c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d108      	bne.n	80019b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <TIM_Base_SetConfig+0x114>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d003      	beq.n	80019e4 <TIM_Base_SetConfig+0xf8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <TIM_Base_SetConfig+0x124>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d103      	bne.n	80019ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	615a      	str	r2, [r3, #20]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40000400 	.word	0x40000400
 8001a08:	40000800 	.word	0x40000800
 8001a0c:	40000c00 	.word	0x40000c00
 8001a10:	40010400 	.word	0x40010400
 8001a14:	40014000 	.word	0x40014000
 8001a18:	40014400 	.word	0x40014400
 8001a1c:	40014800 	.word	0x40014800
 8001a20:	40001800 	.word	0x40001800
 8001a24:	40001c00 	.word	0x40001c00
 8001a28:	40002000 	.word	0x40002000

08001a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <__NVIC_SetPriority>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Handler+0x1c>)
 8001aae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ab0:	f001 fd28 	bl	8003504 <xTaskGetSchedulerState>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001aba:	f002 fb0d 	bl	80040d8 <xPortSysTickHandler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001acc:	2100      	movs	r1, #0
 8001ace:	f06f 0004 	mvn.w	r0, #4
 8001ad2:	f7ff ffbf 	bl	8001a54 <__NVIC_SetPriority>
#endif
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ae2:	f3ef 8305 	mrs	r3, IPSR
 8001ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001aee:	f06f 0305 	mvn.w	r3, #5
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	e00c      	b.n	8001b10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <osKernelInitialize+0x44>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <osKernelInitialize+0x44>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	e002      	b.n	8001b10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200000e0 	.word	0x200000e0

08001b24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b2a:	f3ef 8305 	mrs	r3, IPSR
 8001b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8001b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001b36:	f06f 0305 	mvn.w	r3, #5
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	e010      	b.n	8001b60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <osKernelStart+0x48>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d109      	bne.n	8001b5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001b46:	f7ff ffbf 	bl	8001ac8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <osKernelStart+0x48>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001b50:	f001 f87c 	bl	8002c4c <vTaskStartScheduler>
      stat = osOK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	e002      	b.n	8001b60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200000e0 	.word	0x200000e0

08001b70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b80:	f3ef 8305 	mrs	r3, IPSR
 8001b84:	617b      	str	r3, [r7, #20]
  return(result);
 8001b86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d17e      	bne.n	8001c8a <osThreadNew+0x11a>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07b      	beq.n	8001c8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001b96:	2318      	movs	r3, #24
 8001b98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d045      	beq.n	8001c36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <osThreadNew+0x48>
        name = attr->name;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <osThreadNew+0x6e>
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b38      	cmp	r3, #56	; 0x38
 8001bd0:	d805      	bhi.n	8001bde <osThreadNew+0x6e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <osThreadNew+0x72>
        return (NULL);
 8001bde:	2300      	movs	r3, #0
 8001be0:	e054      	b.n	8001c8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <osThreadNew+0xa8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2bbb      	cmp	r3, #187	; 0xbb
 8001c00:	d90a      	bls.n	8001c18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <osThreadNew+0xa8>
        mem = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	e010      	b.n	8001c3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10c      	bne.n	8001c3a <osThreadNew+0xca>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d108      	bne.n	8001c3a <osThreadNew+0xca>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <osThreadNew+0xca>
          mem = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e001      	b.n	8001c3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d110      	bne.n	8001c62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c48:	9202      	str	r2, [sp, #8]
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	6a3a      	ldr	r2, [r7, #32]
 8001c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fe0c 	bl	8002874 <xTaskCreateStatic>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	e013      	b.n	8001c8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d110      	bne.n	8001c8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fe57 	bl	800292e <xTaskCreate>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d001      	beq.n	8001c8a <osThreadNew+0x11a>
            hTask = NULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001c8a:	693b      	ldr	r3, [r7, #16]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c9c:	f3ef 8305 	mrs	r3, IPSR
 8001ca0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <osDelay+0x1c>
    stat = osErrorISR;
 8001ca8:	f06f 0305 	mvn.w	r3, #5
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e007      	b.n	8001cc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 ff92 	bl	8002be4 <vTaskDelay>
    }
  }

  return (stat);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <vApplicationGetIdleTaskMemory+0x30>)
 8001ce2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200000e4 	.word	0x200000e4
 8001cfc:	200001a0 	.word	0x200001a0

08001d00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <vApplicationGetTimerTaskMemory+0x2c>)
 8001d10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <vApplicationGetTimerTaskMemory+0x30>)
 8001d16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	200003a0 	.word	0x200003a0
 8001d30:	2000045c 	.word	0x2000045c

08001d34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f103 0208 	add.w	r2, r3, #8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f103 0208 	add.w	r2, r3, #8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f103 0208 	add.w	r2, r3, #8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d103      	bne.n	8001df6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e00c      	b.n	8001e10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3308      	adds	r3, #8
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e002      	b.n	8001e04 <vListInsert+0x2e>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d2f6      	bcs.n	8001dfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6892      	ldr	r2, [r2, #8]
 8001e5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6852      	ldr	r2, [r2, #4]
 8001e68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d103      	bne.n	8001e7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	1e5a      	subs	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ec2:	bf00      	nop
 8001ec4:	e7fe      	b.n	8001ec4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ec6:	f002 f875 	bl	8003fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	441a      	add	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	441a      	add	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	22ff      	movs	r2, #255	; 0xff
 8001f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d114      	bne.n	8001f46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01a      	beq.n	8001f5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3310      	adds	r3, #16
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f929 	bl	8003180 <xTaskRemoveFromEventList>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d012      	beq.n	8001f5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <xQueueGenericReset+0xcc>)
 8001f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	e009      	b.n	8001f5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3310      	adds	r3, #16
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fef2 	bl	8001d34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3324      	adds	r3, #36	; 0x24
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff feed 	bl	8001d34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f5a:	f002 f85b 	bl	8004014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	e000ed04 	.word	0xe000ed04

08001f6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f92:	bf00      	nop
 8001f94:	e7fe      	b.n	8001f94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fae:	bf00      	nop
 8001fb0:	e7fe      	b.n	8001fb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <xQueueGenericCreateStatic+0x52>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <xQueueGenericCreateStatic+0x56>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <xQueueGenericCreateStatic+0x58>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	623b      	str	r3, [r7, #32]
}
 8001fda:	bf00      	nop
 8001fdc:	e7fe      	b.n	8001fdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <xQueueGenericCreateStatic+0x7e>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <xQueueGenericCreateStatic+0x82>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <xQueueGenericCreateStatic+0x84>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	61fb      	str	r3, [r7, #28]
}
 8002006:	bf00      	nop
 8002008:	e7fe      	b.n	8002008 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800200a:	2350      	movs	r3, #80	; 0x50
 800200c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b50      	cmp	r3, #80	; 0x50
 8002012:	d00a      	beq.n	800202a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	61bb      	str	r3, [r7, #24]
}
 8002026:	bf00      	nop
 8002028:	e7fe      	b.n	8002028 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800202a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00d      	beq.n	8002052 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800203e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f805 	bl	800205c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002054:	4618      	mov	r0, r3
 8002056:	3730      	adds	r7, #48	; 0x30
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e002      	b.n	800207e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800208a:	2101      	movs	r1, #1
 800208c:	69b8      	ldr	r0, [r7, #24]
 800208e:	f7ff ff05 	bl	8001e9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	; 0x38
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <xQueueGenericSend+0x32>
	__asm volatile
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80020d2:	bf00      	nop
 80020d4:	e7fe      	b.n	80020d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <xQueueGenericSend+0x40>
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <xQueueGenericSend+0x44>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <xQueueGenericSend+0x46>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10a      	bne.n	8002104 <xQueueGenericSend+0x60>
	__asm volatile
 80020ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002100:	bf00      	nop
 8002102:	e7fe      	b.n	8002102 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d103      	bne.n	8002112 <xQueueGenericSend+0x6e>
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <xQueueGenericSend+0x72>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <xQueueGenericSend+0x74>
 8002116:	2300      	movs	r3, #0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <xQueueGenericSend+0x8e>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	623b      	str	r3, [r7, #32]
}
 800212e:	bf00      	nop
 8002130:	e7fe      	b.n	8002130 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002132:	f001 f9e7 	bl	8003504 <xTaskGetSchedulerState>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <xQueueGenericSend+0x9e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <xQueueGenericSend+0xa2>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <xQueueGenericSend+0xa4>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <xQueueGenericSend+0xbe>
	__asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	61fb      	str	r3, [r7, #28]
}
 800215e:	bf00      	nop
 8002160:	e7fe      	b.n	8002160 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002162:	f001 ff27 	bl	8003fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	429a      	cmp	r2, r3
 8002170:	d302      	bcc.n	8002178 <xQueueGenericSend+0xd4>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d129      	bne.n	80021cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217e:	f000 fa0b 	bl	8002598 <prvCopyDataToQueue>
 8002182:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	3324      	adds	r3, #36	; 0x24
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fff5 	bl	8003180 <xTaskRemoveFromEventList>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <xQueueGenericSend+0x1f8>)
 800219e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	e00a      	b.n	80021c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80021b4:	4b39      	ldr	r3, [pc, #228]	; (800229c <xQueueGenericSend+0x1f8>)
 80021b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80021c4:	f001 ff26 	bl	8004014 <vPortExitCritical>
				return pdPASS;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e063      	b.n	8002294 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021d2:	f001 ff1f 	bl	8004014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e05c      	b.n	8002294 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 f82f 	bl	8003248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021ee:	f001 ff11 	bl	8004014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021f2:	f000 fd9b 	bl	8002d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021f6:	f001 fedd 	bl	8003fb4 <vPortEnterCritical>
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002200:	b25b      	sxtb	r3, r3
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d103      	bne.n	8002210 <xQueueGenericSend+0x16c>
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002216:	b25b      	sxtb	r3, r3
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d103      	bne.n	8002226 <xQueueGenericSend+0x182>
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002226:	f001 fef5 	bl	8004014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800222a:	1d3a      	adds	r2, r7, #4
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f001 f81e 	bl	8003274 <xTaskCheckForTimeOut>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d124      	bne.n	8002288 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800223e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002240:	f000 faa2 	bl	8002788 <prvIsQueueFull>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d018      	beq.n	800227c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	3310      	adds	r3, #16
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f000 ff44 	bl	80030e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800225a:	f000 fa2d 	bl	80026b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800225e:	f000 fd73 	bl	8002d48 <xTaskResumeAll>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f47f af7c 	bne.w	8002162 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <xQueueGenericSend+0x1f8>)
 800226c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	e772      	b.n	8002162 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800227c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800227e:	f000 fa1b 	bl	80026b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002282:	f000 fd61 	bl	8002d48 <xTaskResumeAll>
 8002286:	e76c      	b.n	8002162 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800228a:	f000 fa15 	bl	80026b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800228e:	f000 fd5b 	bl	8002d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002292:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002294:	4618      	mov	r0, r3
 8002296:	3738      	adds	r7, #56	; 0x38
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	e000ed04 	.word	0xe000ed04

080022a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b090      	sub	sp, #64	; 0x40
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80022b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022ca:	bf00      	nop
 80022cc:	e7fe      	b.n	80022cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d103      	bne.n	80022dc <xQueueGenericSendFromISR+0x3c>
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <xQueueGenericSendFromISR+0x40>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <xQueueGenericSendFromISR+0x42>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022f8:	bf00      	nop
 80022fa:	e7fe      	b.n	80022fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d103      	bne.n	800230a <xQueueGenericSendFromISR+0x6a>
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <xQueueGenericSendFromISR+0x6e>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <xQueueGenericSendFromISR+0x70>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	623b      	str	r3, [r7, #32]
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800232a:	f001 ff25 	bl	8004178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800232e:	f3ef 8211 	mrs	r2, BASEPRI
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	61fa      	str	r2, [r7, #28]
 8002344:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002346:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <xQueueGenericSendFromISR+0xbc>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d12f      	bne.n	80023bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002372:	f000 f911 	bl	8002598 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002376:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237e:	d112      	bne.n	80023a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2b00      	cmp	r3, #0
 8002386:	d016      	beq.n	80023b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238a:	3324      	adds	r3, #36	; 0x24
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fef7 	bl	8003180 <xTaskRemoveFromEventList>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e007      	b.n	80023b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80023a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	b25a      	sxtb	r2, r3
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80023b6:	2301      	movs	r3, #1
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80023ba:	e001      	b.n	80023c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80023ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3740      	adds	r7, #64	; 0x40
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <xQueueReceive+0x30>
	__asm volatile
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	623b      	str	r3, [r7, #32]
}
 8002404:	bf00      	nop
 8002406:	e7fe      	b.n	8002406 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <xQueueReceive+0x3e>
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <xQueueReceive+0x42>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueReceive+0x44>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueReceive+0x5e>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	61fb      	str	r3, [r7, #28]
}
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002436:	f001 f865 	bl	8003504 <xTaskGetSchedulerState>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <xQueueReceive+0x6e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <xQueueReceive+0x72>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <xQueueReceive+0x74>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <xQueueReceive+0x8e>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	61bb      	str	r3, [r7, #24]
}
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002466:	f001 fda5 	bl	8003fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01f      	beq.n	80024b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800247a:	f000 f8f7 	bl	800266c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00f      	beq.n	80024ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	3310      	adds	r3, #16
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fe74 	bl	8003180 <xTaskRemoveFromEventList>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <xQueueReceive+0x1bc>)
 80024a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024ae:	f001 fdb1 	bl	8004014 <vPortExitCritical>
				return pdPASS;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e069      	b.n	800258a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024bc:	f001 fdaa 	bl	8004014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e062      	b.n	800258a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 feba 	bl	8003248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024d8:	f001 fd9c 	bl	8004014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024dc:	f000 fc26 	bl	8002d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024e0:	f001 fd68 	bl	8003fb4 <vPortEnterCritical>
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d103      	bne.n	80024fa <xQueueReceive+0x122>
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002500:	b25b      	sxtb	r3, r3
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d103      	bne.n	8002510 <xQueueReceive+0x138>
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002510:	f001 fd80 	bl	8004014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002514:	1d3a      	adds	r2, r7, #4
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fea9 	bl	8003274 <xTaskCheckForTimeOut>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d123      	bne.n	8002570 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800252a:	f000 f917 	bl	800275c <prvIsQueueEmpty>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d017      	beq.n	8002564 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	3324      	adds	r3, #36	; 0x24
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fdcf 	bl	80030e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002544:	f000 f8b8 	bl	80026b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002548:	f000 fbfe 	bl	8002d48 <xTaskResumeAll>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d189      	bne.n	8002466 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <xQueueReceive+0x1bc>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	e780      	b.n	8002466 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002566:	f000 f8a7 	bl	80026b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800256a:	f000 fbed 	bl	8002d48 <xTaskResumeAll>
 800256e:	e77a      	b.n	8002466 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002572:	f000 f8a1 	bl	80026b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002576:	f000 fbe7 	bl	8002d48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800257a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800257c:	f000 f8ee 	bl	800275c <prvIsQueueEmpty>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f43f af6f 	beq.w	8002466 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002588:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800258a:	4618      	mov	r0, r3
 800258c:	3730      	adds	r7, #48	; 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d14d      	bne.n	800265a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 ffbc 	bl	8003540 <xTaskPriorityDisinherit>
 80025c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	e043      	b.n	800265a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d119      	bne.n	800260c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6858      	ldr	r0, [r3, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	461a      	mov	r2, r3
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	f002 f818 	bl	8004618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	441a      	add	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d32b      	bcc.n	800265a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e026      	b.n	800265a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68d8      	ldr	r0, [r3, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	461a      	mov	r2, r3
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	f001 fffe 	bl	8004618 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	425b      	negs	r3, r3
 8002626:	441a      	add	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d207      	bcs.n	8002648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	425b      	negs	r3, r3
 8002642:	441a      	add	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d105      	bne.n	800265a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	3b01      	subs	r3, #1
 8002658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002662:	697b      	ldr	r3, [r7, #20]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	441a      	add	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	d303      	bcc.n	80026a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68d9      	ldr	r1, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	461a      	mov	r2, r3
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f001 ffb4 	bl	8004618 <memcpy>
	}
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026c0:	f001 fc78 	bl	8003fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026cc:	e011      	b.n	80026f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3324      	adds	r3, #36	; 0x24
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fd50 	bl	8003180 <xTaskRemoveFromEventList>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80026e6:	f000 fe27 	bl	8003338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dce9      	bgt.n	80026ce <prvUnlockQueue+0x16>
 80026fa:	e000      	b.n	80026fe <prvUnlockQueue+0x46>
					break;
 80026fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	22ff      	movs	r2, #255	; 0xff
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002706:	f001 fc85 	bl	8004014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800270a:	f001 fc53 	bl	8003fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002714:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002716:	e011      	b.n	800273c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3310      	adds	r3, #16
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fd2b 	bl	8003180 <xTaskRemoveFromEventList>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002730:	f000 fe02 	bl	8003338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	3b01      	subs	r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800273c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002740:	2b00      	cmp	r3, #0
 8002742:	dce9      	bgt.n	8002718 <prvUnlockQueue+0x60>
 8002744:	e000      	b.n	8002748 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002746:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002750:	f001 fc60 	bl	8004014 <vPortExitCritical>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002764:	f001 fc26 	bl	8003fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002770:	2301      	movs	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e001      	b.n	800277a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800277a:	f001 fc4b 	bl	8004014 <vPortExitCritical>

	return xReturn;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002790:	f001 fc10 	bl	8003fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	429a      	cmp	r2, r3
 800279e:	d102      	bne.n	80027a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e001      	b.n	80027aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027aa:	f001 fc33 	bl	8004014 <vPortExitCritical>

	return xReturn;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e014      	b.n	80027f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <vQueueAddToRegistry+0x50>)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <vQueueAddToRegistry+0x50>)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <vQueueAddToRegistry+0x50>)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80027ea:	e006      	b.n	80027fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b07      	cmp	r3, #7
 80027f6:	d9e7      	bls.n	80027c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	2000085c 	.word	0x2000085c

0800280c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800281c:	f001 fbca 	bl	8003fb4 <vPortEnterCritical>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002826:	b25b      	sxtb	r3, r3
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d103      	bne.n	8002836 <vQueueWaitForMessageRestricted+0x2a>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800283c:	b25b      	sxtb	r3, r3
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d103      	bne.n	800284c <vQueueWaitForMessageRestricted+0x40>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800284c:	f001 fbe2 	bl	8004014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3324      	adds	r3, #36	; 0x24
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fc61 	bl	8003128 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002866:	6978      	ldr	r0, [r7, #20]
 8002868:	f7ff ff26 	bl	80026b8 <prvUnlockQueue>
	}
 800286c:	bf00      	nop
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af04      	add	r7, sp, #16
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	623b      	str	r3, [r7, #32]
}
 800289a:	bf00      	nop
 800289c:	e7fe      	b.n	800289c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xTaskCreateStatic+0x46>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	61fb      	str	r3, [r7, #28]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028ba:	23bc      	movs	r3, #188	; 0xbc
 80028bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2bbc      	cmp	r3, #188	; 0xbc
 80028c2:	d00a      	beq.n	80028da <xTaskCreateStatic+0x66>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	61bb      	str	r3, [r7, #24]
}
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01e      	beq.n	8002920 <xTaskCreateStatic+0xac>
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01b      	beq.n	8002920 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028fa:	2300      	movs	r3, #0
 80028fc:	9303      	str	r3, [sp, #12]
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	9302      	str	r3, [sp, #8]
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f850 	bl	80029b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800291a:	f000 f8f3 	bl	8002b04 <prvAddNewTaskToReadyList>
 800291e:	e001      	b.n	8002924 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002924:	697b      	ldr	r3, [r7, #20]
	}
 8002926:	4618      	mov	r0, r3
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08c      	sub	sp, #48	; 0x30
 8002932:	af04      	add	r7, sp, #16
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fc58 	bl	80041f8 <pvPortMalloc>
 8002948:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00e      	beq.n	800296e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002950:	20bc      	movs	r0, #188	; 0xbc
 8002952:	f001 fc51 	bl	80041f8 <pvPortMalloc>
 8002956:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
 8002964:	e005      	b.n	8002972 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f001 fd12 	bl	8004390 <vPortFree>
 800296c:	e001      	b.n	8002972 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d017      	beq.n	80029a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	2300      	movs	r3, #0
 8002984:	9303      	str	r3, [sp, #12]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	9302      	str	r3, [sp, #8]
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f80e 	bl	80029b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800299c:	69f8      	ldr	r0, [r7, #28]
 800299e:	f000 f8b1 	bl	8002b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e002      	b.n	80029ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029ae:	69bb      	ldr	r3, [r7, #24]
	}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	461a      	mov	r2, r3
 80029d0:	21a5      	movs	r1, #165	; 0xa5
 80029d2:	f001 fe2f 	bl	8004634 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029e0:	3b01      	subs	r3, #1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f023 0307 	bic.w	r3, r3, #7
 80029ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <prvInitialiseNewTask+0x58>
	__asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	617b      	str	r3, [r7, #20]
}
 8002a0c:	bf00      	nop
 8002a0e:	e7fe      	b.n	8002a0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01f      	beq.n	8002a56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e012      	b.n	8002a42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	7819      	ldrb	r1, [r3, #0]
 8002a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3334      	adds	r3, #52	; 0x34
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d9e9      	bls.n	8002a1c <prvInitialiseNewTask+0x64>
 8002a48:	e000      	b.n	8002a4c <prvInitialiseNewTask+0x94>
			{
				break;
 8002a4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a54:	e003      	b.n	8002a5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	2b37      	cmp	r3, #55	; 0x37
 8002a62:	d901      	bls.n	8002a68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a64:	2337      	movs	r3, #55	; 0x37
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	2200      	movs	r2, #0
 8002a78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f978 	bl	8001d74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	3318      	adds	r3, #24
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f973 	bl	8001d74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	3354      	adds	r3, #84	; 0x54
 8002ab8:	2260      	movs	r2, #96	; 0x60
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 fdb9 	bl	8004634 <memset>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <prvInitialiseNewTask+0x140>)
 8002ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <prvInitialiseNewTask+0x144>)
 8002acc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <prvInitialiseNewTask+0x148>)
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	69b8      	ldr	r0, [r7, #24]
 8002ada:	f001 f941 	bl	8003d60 <pxPortInitialiseStack>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002af0:	bf00      	nop
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	0800486c 	.word	0x0800486c
 8002afc:	0800488c 	.word	0x0800488c
 8002b00:	0800484c 	.word	0x0800484c

08002b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b0c:	f001 fa52 	bl	8003fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b22:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d110      	bne.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b30:	f000 fc26 	bl	8003380 <prvInitialiseTaskLists>
 8002b34:	e00d      	b.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <prvAddNewTaskToReadyList+0xcc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d802      	bhi.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <prvAddNewTaskToReadyList+0xd0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <prvAddNewTaskToReadyList+0xd0>)
 8002b5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <prvAddNewTaskToReadyList+0xd0>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <prvAddNewTaskToReadyList+0xd4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d903      	bls.n	8002b78 <prvAddNewTaskToReadyList+0x74>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <prvAddNewTaskToReadyList+0xd4>)
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <prvAddNewTaskToReadyList+0xd8>)
 8002b86:	441a      	add	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f7ff f8fd 	bl	8001d8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b94:	f001 fa3e 	bl	8004014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <prvAddNewTaskToReadyList+0xcc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d207      	bcs.n	8002bbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <prvAddNewTaskToReadyList+0xdc>)
 8002bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000d70 	.word	0x20000d70
 8002bcc:	2000089c 	.word	0x2000089c
 8002bd0:	20000d7c 	.word	0x20000d7c
 8002bd4:	20000d8c 	.word	0x20000d8c
 8002bd8:	20000d78 	.word	0x20000d78
 8002bdc:	200008a0 	.word	0x200008a0
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d017      	beq.n	8002c26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <vTaskDelay+0x60>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <vTaskDelay+0x30>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	60bb      	str	r3, [r7, #8]
}
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c14:	f000 f88a 	bl	8002d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c18:	2100      	movs	r1, #0
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fcfe 	bl	800361c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c20:	f000 f892 	bl	8002d48 <xTaskResumeAll>
 8002c24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <vTaskDelay+0x64>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000d98 	.word	0x20000d98
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c5a:	463a      	mov	r2, r7
 8002c5c:	1d39      	adds	r1, r7, #4
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff f832 	bl	8001ccc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	460a      	mov	r2, r1
 8002c7a:	4924      	ldr	r1, [pc, #144]	; (8002d0c <vTaskStartScheduler+0xc0>)
 8002c7c:	4824      	ldr	r0, [pc, #144]	; (8002d10 <vTaskStartScheduler+0xc4>)
 8002c7e:	f7ff fdf9 	bl	8002874 <xTaskCreateStatic>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <vTaskStartScheduler+0xc8>)
 8002c86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <vTaskStartScheduler+0xc8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e001      	b.n	8002c9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ca0:	f000 fd10 	bl	80036c4 <xTimerCreateTimerTask>
 8002ca4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d11b      	bne.n	8002ce4 <vTaskStartScheduler+0x98>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	613b      	str	r3, [r7, #16]
}
 8002cbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <vTaskStartScheduler+0xcc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3354      	adds	r3, #84	; 0x54
 8002cc6:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <vTaskStartScheduler+0xd0>)
 8002cc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <vTaskStartScheduler+0xd4>)
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <vTaskStartScheduler+0xd8>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <vTaskStartScheduler+0xdc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cde:	f001 f8c7 	bl	8003e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ce2:	e00e      	b.n	8002d02 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d10a      	bne.n	8002d02 <vTaskStartScheduler+0xb6>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	60fb      	str	r3, [r7, #12]
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <vTaskStartScheduler+0xb4>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	080047f8 	.word	0x080047f8
 8002d10:	08003351 	.word	0x08003351
 8002d14:	20000d94 	.word	0x20000d94
 8002d18:	2000089c 	.word	0x2000089c
 8002d1c:	20000010 	.word	0x20000010
 8002d20:	20000d90 	.word	0x20000d90
 8002d24:	20000d7c 	.word	0x20000d7c
 8002d28:	20000d74 	.word	0x20000d74

08002d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000d98 	.word	0x20000d98

08002d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d56:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <xTaskResumeAll+0x118>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	603b      	str	r3, [r7, #0]
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d74:	f001 f91e 	bl	8003fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <xTaskResumeAll+0x118>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <xTaskResumeAll+0x118>)
 8002d80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d82:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <xTaskResumeAll+0x118>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d162      	bne.n	8002e50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <xTaskResumeAll+0x11c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d05e      	beq.n	8002e50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d92:	e02f      	b.n	8002df4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <xTaskResumeAll+0x120>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3318      	adds	r3, #24
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f851 	bl	8001e48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f84c 	bl	8001e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <xTaskResumeAll+0x124>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d903      	bls.n	8002dc4 <xTaskResumeAll+0x7c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <xTaskResumeAll+0x124>)
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <xTaskResumeAll+0x128>)
 8002dd2:	441a      	add	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f7fe ffd7 	bl	8001d8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <xTaskResumeAll+0x12c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <xTaskResumeAll+0x130>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df4:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <xTaskResumeAll+0x120>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1cb      	bne.n	8002d94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e02:	f000 fb5f 	bl	80034c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <xTaskResumeAll+0x134>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e12:	f000 f847 	bl	8002ea4 <xTaskIncrementTick>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <xTaskResumeAll+0x130>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f1      	bne.n	8002e12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <xTaskResumeAll+0x134>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e34:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <xTaskResumeAll+0x130>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <xTaskResumeAll+0x138>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e50:	f001 f8e0 	bl	8004014 <vPortExitCritical>

	return xAlreadyYielded;
 8002e54:	68bb      	ldr	r3, [r7, #8]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000d98 	.word	0x20000d98
 8002e64:	20000d70 	.word	0x20000d70
 8002e68:	20000d30 	.word	0x20000d30
 8002e6c:	20000d78 	.word	0x20000d78
 8002e70:	200008a0 	.word	0x200008a0
 8002e74:	2000089c 	.word	0x2000089c
 8002e78:	20000d84 	.word	0x20000d84
 8002e7c:	20000d80 	.word	0x20000d80
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <xTaskGetTickCount+0x1c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000d74 	.word	0x20000d74

08002ea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eae:	4b4f      	ldr	r3, [pc, #316]	; (8002fec <xTaskIncrementTick+0x148>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 808f 	bne.w	8002fd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <xTaskIncrementTick+0x14c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ec0:	4a4b      	ldr	r2, [pc, #300]	; (8002ff0 <xTaskIncrementTick+0x14c>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d120      	bne.n	8002f0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ecc:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <xTaskIncrementTick+0x150>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <xTaskIncrementTick+0x48>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	603b      	str	r3, [r7, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <xTaskIncrementTick+0x46>
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <xTaskIncrementTick+0x150>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <xTaskIncrementTick+0x154>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3f      	ldr	r2, [pc, #252]	; (8002ff4 <xTaskIncrementTick+0x150>)
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4a3f      	ldr	r2, [pc, #252]	; (8002ff8 <xTaskIncrementTick+0x154>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <xTaskIncrementTick+0x158>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4a3d      	ldr	r2, [pc, #244]	; (8002ffc <xTaskIncrementTick+0x158>)
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	f000 fadb 	bl	80034c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <xTaskIncrementTick+0x15c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d349      	bcc.n	8002fac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f18:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <xTaskIncrementTick+0x150>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <xTaskIncrementTick+0x15c>)
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	601a      	str	r2, [r3, #0]
					break;
 8002f2a:	e03f      	b.n	8002fac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <xTaskIncrementTick+0x150>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d203      	bcs.n	8002f4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f44:	4a2e      	ldr	r2, [pc, #184]	; (8003000 <xTaskIncrementTick+0x15c>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f4a:	e02f      	b.n	8002fac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe ff79 	bl	8001e48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3318      	adds	r3, #24
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe ff70 	bl	8001e48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <xTaskIncrementTick+0x160>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d903      	bls.n	8002f7c <xTaskIncrementTick+0xd8>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <xTaskIncrementTick+0x160>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <xTaskIncrementTick+0x164>)
 8002f8a:	441a      	add	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7fe fefb 	bl	8001d8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <xTaskIncrementTick+0x168>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d3b8      	bcc.n	8002f18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002faa:	e7b5      	b.n	8002f18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <xTaskIncrementTick+0x168>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4915      	ldr	r1, [pc, #84]	; (8003008 <xTaskIncrementTick+0x164>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d901      	bls.n	8002fc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <xTaskIncrementTick+0x16c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e004      	b.n	8002fe0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <xTaskIncrementTick+0x170>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	; (8003014 <xTaskIncrementTick+0x170>)
 8002fde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002fe0:	697b      	ldr	r3, [r7, #20]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000d98 	.word	0x20000d98
 8002ff0:	20000d74 	.word	0x20000d74
 8002ff4:	20000d28 	.word	0x20000d28
 8002ff8:	20000d2c 	.word	0x20000d2c
 8002ffc:	20000d88 	.word	0x20000d88
 8003000:	20000d90 	.word	0x20000d90
 8003004:	20000d78 	.word	0x20000d78
 8003008:	200008a0 	.word	0x200008a0
 800300c:	2000089c 	.word	0x2000089c
 8003010:	20000d84 	.word	0x20000d84
 8003014:	20000d80 	.word	0x20000d80

08003018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <vTaskSwitchContext+0xb0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <vTaskSwitchContext+0xb4>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800302c:	e046      	b.n	80030bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800302e:	4b27      	ldr	r3, [pc, #156]	; (80030cc <vTaskSwitchContext+0xb4>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <vTaskSwitchContext+0xb8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	e010      	b.n	800305e <vTaskSwitchContext+0x46>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <vTaskSwitchContext+0x40>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	607b      	str	r3, [r7, #4]
}
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <vTaskSwitchContext+0x3e>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3b01      	subs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	491d      	ldr	r1, [pc, #116]	; (80030d4 <vTaskSwitchContext+0xbc>)
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0e4      	beq.n	800303c <vTaskSwitchContext+0x24>
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <vTaskSwitchContext+0xbc>)
 800307e:	4413      	add	r3, r2
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3308      	adds	r3, #8
 8003094:	429a      	cmp	r2, r3
 8003096:	d104      	bne.n	80030a2 <vTaskSwitchContext+0x8a>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <vTaskSwitchContext+0xc0>)
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <vTaskSwitchContext+0xb8>)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <vTaskSwitchContext+0xc0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3354      	adds	r3, #84	; 0x54
 80030b8:	4a08      	ldr	r2, [pc, #32]	; (80030dc <vTaskSwitchContext+0xc4>)
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	20000d98 	.word	0x20000d98
 80030cc:	20000d84 	.word	0x20000d84
 80030d0:	20000d78 	.word	0x20000d78
 80030d4:	200008a0 	.word	0x200008a0
 80030d8:	2000089c 	.word	0x2000089c
 80030dc:	20000010 	.word	0x20000010

080030e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	60fb      	str	r3, [r7, #12]
}
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <vTaskPlaceOnEventList+0x44>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3318      	adds	r3, #24
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe fe61 	bl	8001dd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003114:	2101      	movs	r1, #1
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	f000 fa80 	bl	800361c <prvAddCurrentTaskToDelayedList>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	2000089c 	.word	0x2000089c

08003128 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	617b      	str	r3, [r7, #20]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <vTaskPlaceOnEventListRestricted+0x54>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3318      	adds	r3, #24
 8003156:	4619      	mov	r1, r3
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7fe fe18 	bl	8001d8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
 8003168:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68b8      	ldr	r0, [r7, #8]
 800316e:	f000 fa55 	bl	800361c <prvAddCurrentTaskToDelayedList>
	}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000089c 	.word	0x2000089c

08003180 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	60fb      	str	r3, [r7, #12]
}
 80031a8:	bf00      	nop
 80031aa:	e7fe      	b.n	80031aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	3318      	adds	r3, #24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fe49 	bl	8001e48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <xTaskRemoveFromEventList+0xb0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11d      	bne.n	80031fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fe40 	bl	8001e48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <xTaskRemoveFromEventList+0xb4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d903      	bls.n	80031dc <xTaskRemoveFromEventList+0x5c>
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4a16      	ldr	r2, [pc, #88]	; (8003234 <xTaskRemoveFromEventList+0xb4>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <xTaskRemoveFromEventList+0xb8>)
 80031ea:	441a      	add	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7fe fdcb 	bl	8001d8e <vListInsertEnd>
 80031f8:	e005      	b.n	8003206 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3318      	adds	r3, #24
 80031fe:	4619      	mov	r1, r3
 8003200:	480e      	ldr	r0, [pc, #56]	; (800323c <xTaskRemoveFromEventList+0xbc>)
 8003202:	f7fe fdc4 	bl	8001d8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <xTaskRemoveFromEventList+0xc0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	429a      	cmp	r2, r3
 8003212:	d905      	bls.n	8003220 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <xTaskRemoveFromEventList+0xc4>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e001      	b.n	8003224 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003224:	697b      	ldr	r3, [r7, #20]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000d98 	.word	0x20000d98
 8003234:	20000d78 	.word	0x20000d78
 8003238:	200008a0 	.word	0x200008a0
 800323c:	20000d30 	.word	0x20000d30
 8003240:	2000089c 	.word	0x2000089c
 8003244:	20000d84 	.word	0x20000d84

08003248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <vTaskInternalSetTimeOutState+0x24>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <vTaskInternalSetTimeOutState+0x28>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	605a      	str	r2, [r3, #4]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	20000d88 	.word	0x20000d88
 8003270:	20000d74 	.word	0x20000d74

08003274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	613b      	str	r3, [r7, #16]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	60fb      	str	r3, [r7, #12]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80032b6:	f000 fe7d 	bl	8003fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <xTaskCheckForTimeOut+0xbc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d102      	bne.n	80032da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	e023      	b.n	8003322 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <xTaskCheckForTimeOut+0xc0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d007      	beq.n	80032f6 <xTaskCheckForTimeOut+0x82>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d302      	bcc.n	80032f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80032f0:	2301      	movs	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	e015      	b.n	8003322 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d20b      	bcs.n	8003318 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	1ad2      	subs	r2, r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff9b 	bl	8003248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e004      	b.n	8003322 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800331e:	2301      	movs	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003322:	f000 fe77 	bl	8004014 <vPortExitCritical>

	return xReturn;
 8003326:	69fb      	ldr	r3, [r7, #28]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000d74 	.word	0x20000d74
 8003334:	20000d88 	.word	0x20000d88

08003338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <vTaskMissedYield+0x14>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	20000d84 	.word	0x20000d84

08003350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003358:	f000 f852 	bl	8003400 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <prvIdleTask+0x28>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d9f9      	bls.n	8003358 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <prvIdleTask+0x2c>)
 8003366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003374:	e7f0      	b.n	8003358 <prvIdleTask+0x8>
 8003376:	bf00      	nop
 8003378:	200008a0 	.word	0x200008a0
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	e00c      	b.n	80033a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <prvInitialiseTaskLists+0x60>)
 8003398:	4413      	add	r3, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fcca 	bl	8001d34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3301      	adds	r3, #1
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b37      	cmp	r3, #55	; 0x37
 80033aa:	d9ef      	bls.n	800338c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033ac:	480d      	ldr	r0, [pc, #52]	; (80033e4 <prvInitialiseTaskLists+0x64>)
 80033ae:	f7fe fcc1 	bl	8001d34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033b2:	480d      	ldr	r0, [pc, #52]	; (80033e8 <prvInitialiseTaskLists+0x68>)
 80033b4:	f7fe fcbe 	bl	8001d34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033b8:	480c      	ldr	r0, [pc, #48]	; (80033ec <prvInitialiseTaskLists+0x6c>)
 80033ba:	f7fe fcbb 	bl	8001d34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033be:	480c      	ldr	r0, [pc, #48]	; (80033f0 <prvInitialiseTaskLists+0x70>)
 80033c0:	f7fe fcb8 	bl	8001d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033c4:	480b      	ldr	r0, [pc, #44]	; (80033f4 <prvInitialiseTaskLists+0x74>)
 80033c6:	f7fe fcb5 	bl	8001d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <prvInitialiseTaskLists+0x78>)
 80033cc:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <prvInitialiseTaskLists+0x64>)
 80033ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <prvInitialiseTaskLists+0x7c>)
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <prvInitialiseTaskLists+0x68>)
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200008a0 	.word	0x200008a0
 80033e4:	20000d00 	.word	0x20000d00
 80033e8:	20000d14 	.word	0x20000d14
 80033ec:	20000d30 	.word	0x20000d30
 80033f0:	20000d44 	.word	0x20000d44
 80033f4:	20000d5c 	.word	0x20000d5c
 80033f8:	20000d28 	.word	0x20000d28
 80033fc:	20000d2c 	.word	0x20000d2c

08003400 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003406:	e019      	b.n	800343c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003408:	f000 fdd4 	bl	8003fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800340c:	4b10      	ldr	r3, [pc, #64]	; (8003450 <prvCheckTasksWaitingTermination+0x50>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe fd15 	bl	8001e48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <prvCheckTasksWaitingTermination+0x54>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3b01      	subs	r3, #1
 8003424:	4a0b      	ldr	r2, [pc, #44]	; (8003454 <prvCheckTasksWaitingTermination+0x54>)
 8003426:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <prvCheckTasksWaitingTermination+0x58>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3b01      	subs	r3, #1
 800342e:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <prvCheckTasksWaitingTermination+0x58>)
 8003430:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003432:	f000 fdef 	bl	8004014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f810 	bl	800345c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <prvCheckTasksWaitingTermination+0x58>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e1      	bne.n	8003408 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000d44 	.word	0x20000d44
 8003454:	20000d70 	.word	0x20000d70
 8003458:	20000d58 	.word	0x20000d58

0800345c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3354      	adds	r3, #84	; 0x54
 8003468:	4618      	mov	r0, r3
 800346a:	f001 f8f9 	bl	8004660 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	4618      	mov	r0, r3
 800347e:	f000 ff87 	bl	8004390 <vPortFree>
				vPortFree( pxTCB );
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 ff84 	bl	8004390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003488:	e018      	b.n	80034bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003490:	2b01      	cmp	r3, #1
 8003492:	d103      	bne.n	800349c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 ff7b 	bl	8004390 <vPortFree>
	}
 800349a:	e00f      	b.n	80034bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d00a      	beq.n	80034bc <prvDeleteTCB+0x60>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	60fb      	str	r3, [r7, #12]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <prvDeleteTCB+0x5e>
	}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <prvResetNextTaskUnblockTime+0x38>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d104      	bne.n	80034de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <prvResetNextTaskUnblockTime+0x3c>)
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034dc:	e008      	b.n	80034f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <prvResetNextTaskUnblockTime+0x38>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <prvResetNextTaskUnblockTime+0x3c>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	20000d28 	.word	0x20000d28
 8003500:	20000d90 	.word	0x20000d90

08003504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <xTaskGetSchedulerState+0x34>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003512:	2301      	movs	r3, #1
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	e008      	b.n	800352a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <xTaskGetSchedulerState+0x38>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003520:	2302      	movs	r3, #2
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	e001      	b.n	800352a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800352a:	687b      	ldr	r3, [r7, #4]
	}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	20000d7c 	.word	0x20000d7c
 800353c:	20000d98 	.word	0x20000d98

08003540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d056      	beq.n	8003604 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003556:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <xTaskPriorityDisinherit+0xd0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d00a      	beq.n	8003576 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60fb      	str	r3, [r7, #12]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60bb      	str	r3, [r7, #8]
}
 8003590:	bf00      	nop
 8003592:	e7fe      	b.n	8003592 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	1e5a      	subs	r2, r3, #1
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d02c      	beq.n	8003604 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d128      	bne.n	8003604 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fc46 	bl	8001e48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <xTaskPriorityDisinherit+0xd4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d903      	bls.n	80035e4 <xTaskPriorityDisinherit+0xa4>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <xTaskPriorityDisinherit+0xd4>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4a09      	ldr	r2, [pc, #36]	; (8003618 <xTaskPriorityDisinherit+0xd8>)
 80035f2:	441a      	add	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7fe fbc7 	bl	8001d8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003604:	697b      	ldr	r3, [r7, #20]
	}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000089c 	.word	0x2000089c
 8003614:	20000d78 	.word	0x20000d78
 8003618:	200008a0 	.word	0x200008a0

0800361c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <prvAddCurrentTaskToDelayedList+0x90>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3304      	adds	r3, #4
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fc08 	bl	8001e48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d10a      	bne.n	8003656 <prvAddCurrentTaskToDelayedList+0x3a>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4819      	ldr	r0, [pc, #100]	; (80036b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003650:	f7fe fb9d 	bl	8001d8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003654:	e026      	b.n	80036a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	429a      	cmp	r2, r3
 800366c:	d209      	bcs.n	8003682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f7fe fbab 	bl	8001dd6 <vListInsert>
}
 8003680:	e010      	b.n	80036a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f7fe fba1 	bl	8001dd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d202      	bcs.n	80036a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6013      	str	r3, [r2, #0]
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000d74 	.word	0x20000d74
 80036b0:	2000089c 	.word	0x2000089c
 80036b4:	20000d5c 	.word	0x20000d5c
 80036b8:	20000d2c 	.word	0x20000d2c
 80036bc:	20000d28 	.word	0x20000d28
 80036c0:	20000d90 	.word	0x20000d90

080036c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80036ce:	f000 fb07 	bl	8003ce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <xTimerCreateTimerTask+0x80>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d021      	beq.n	800371e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80036e2:	1d3a      	adds	r2, r7, #4
 80036e4:	f107 0108 	add.w	r1, r7, #8
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fb07 	bl	8001d00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	9202      	str	r2, [sp, #8]
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2302      	movs	r3, #2
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	460a      	mov	r2, r1
 8003704:	4910      	ldr	r1, [pc, #64]	; (8003748 <xTimerCreateTimerTask+0x84>)
 8003706:	4811      	ldr	r0, [pc, #68]	; (800374c <xTimerCreateTimerTask+0x88>)
 8003708:	f7ff f8b4 	bl	8002874 <xTaskCreateStatic>
 800370c:	4603      	mov	r3, r0
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <xTimerCreateTimerTask+0x8c>)
 8003710:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <xTimerCreateTimerTask+0x8c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800371a:	2301      	movs	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	613b      	str	r3, [r7, #16]
}
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800373a:	697b      	ldr	r3, [r7, #20]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000dcc 	.word	0x20000dcc
 8003748:	08004800 	.word	0x08004800
 800374c:	08003889 	.word	0x08003889
 8003750:	20000dd0 	.word	0x20000dd0

08003754 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xTimerGenericCommand+0x2e>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <xTimerGenericCommand+0x98>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02a      	beq.n	80037e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b05      	cmp	r3, #5
 800379a:	dc18      	bgt.n	80037ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800379c:	f7ff feb2 	bl	8003504 <xTaskGetSchedulerState>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d109      	bne.n	80037ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <xTimerGenericCommand+0x98>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	f107 0110 	add.w	r1, r7, #16
 80037ae:	2300      	movs	r3, #0
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	f7fe fc77 	bl	80020a4 <xQueueGenericSend>
 80037b6:	6278      	str	r0, [r7, #36]	; 0x24
 80037b8:	e012      	b.n	80037e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <xTimerGenericCommand+0x98>)
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	f107 0110 	add.w	r1, r7, #16
 80037c2:	2300      	movs	r3, #0
 80037c4:	2200      	movs	r2, #0
 80037c6:	f7fe fc6d 	bl	80020a4 <xQueueGenericSend>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24
 80037cc:	e008      	b.n	80037e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <xTimerGenericCommand+0x98>)
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f107 0110 	add.w	r1, r7, #16
 80037d6:	2300      	movs	r3, #0
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	f7fe fd61 	bl	80022a0 <xQueueGenericSendFromISR>
 80037de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3728      	adds	r7, #40	; 0x28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000dcc 	.word	0x20000dcc

080037f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fa:	4b22      	ldr	r3, [pc, #136]	; (8003884 <prvProcessExpiredTimer+0x94>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3304      	adds	r3, #4
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fb1d 	bl	8001e48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	18d1      	adds	r1, r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	6978      	ldr	r0, [r7, #20]
 800382a:	f000 f8d1 	bl	80039d0 <prvInsertTimerInActiveList>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01f      	beq.n	8003874 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003834:	2300      	movs	r3, #0
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	2300      	movs	r3, #0
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	2100      	movs	r1, #0
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff88 	bl	8003754 <xTimerGenericCommand>
 8003844:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d113      	bne.n	8003874 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	60fb      	str	r3, [r7, #12]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	b2da      	uxtb	r2, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	6978      	ldr	r0, [r7, #20]
 800387a:	4798      	blx	r3
}
 800387c:	bf00      	nop
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000dc4 	.word	0x20000dc4

08003888 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f857 	bl	8003948 <prvGetNextExpireTime>
 800389a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4619      	mov	r1, r3
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f803 	bl	80038ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80038a6:	f000 f8d5 	bl	8003a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038aa:	e7f1      	b.n	8003890 <prvTimerTask+0x8>

080038ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80038b6:	f7ff fa39 	bl	8002d2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f866 	bl	8003990 <prvSampleTimeNow>
 80038c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d130      	bne.n	800392e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <prvProcessTimerOrBlockTask+0x3c>
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d806      	bhi.n	80038e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80038da:	f7ff fa35 	bl	8002d48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff85 	bl	80037f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80038e6:	e024      	b.n	8003932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <prvProcessTimerOrBlockTask+0x90>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <prvProcessTimerOrBlockTask+0x50>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <prvProcessTimerOrBlockTask+0x52>
 80038fc:	2300      	movs	r3, #0
 80038fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <prvProcessTimerOrBlockTask+0x94>)
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	4619      	mov	r1, r3
 800390e:	f7fe ff7d 	bl	800280c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003912:	f7ff fa19 	bl	8002d48 <xTaskResumeAll>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <prvProcessTimerOrBlockTask+0x98>)
 800391e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	f3bf 8f6f 	isb	sy
}
 800392c:	e001      	b.n	8003932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800392e:	f7ff fa0b 	bl	8002d48 <xTaskResumeAll>
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000dc8 	.word	0x20000dc8
 8003940:	20000dcc 	.word	0x20000dcc
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <prvGetNextExpireTime+0x44>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <prvGetNextExpireTime+0x16>
 800395a:	2201      	movs	r2, #1
 800395c:	e000      	b.n	8003960 <prvGetNextExpireTime+0x18>
 800395e:	2200      	movs	r2, #0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <prvGetNextExpireTime+0x44>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e001      	b.n	800397c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800397c:	68fb      	ldr	r3, [r7, #12]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000dc4 	.word	0x20000dc4

08003990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003998:	f7ff fa74 	bl	8002e84 <xTaskGetTickCount>
 800399c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <prvSampleTimeNow+0x3c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d205      	bcs.n	80039b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80039a8:	f000 f936 	bl	8003c18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e002      	b.n	80039ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80039ba:	4a04      	ldr	r2, [pc, #16]	; (80039cc <prvSampleTimeNow+0x3c>)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80039c0:	68fb      	ldr	r3, [r7, #12]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000dd4 	.word	0x20000dd4

080039d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d812      	bhi.n	8003a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e01b      	b.n	8003a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <prvInsertTimerInActiveList+0x7c>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7fe f9de 	bl	8001dd6 <vListInsert>
 8003a1a:	e012      	b.n	8003a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d206      	bcs.n	8003a32 <prvInsertTimerInActiveList+0x62>
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e007      	b.n	8003a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <prvInsertTimerInActiveList+0x80>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe f9ca 	bl	8001dd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a42:	697b      	ldr	r3, [r7, #20]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000dc8 	.word	0x20000dc8
 8003a50:	20000dc4 	.word	0x20000dc4

08003a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08e      	sub	sp, #56	; 0x38
 8003a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a5a:	e0ca      	b.n	8003bf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da18      	bge.n	8003a94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	3304      	adds	r3, #4
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61fb      	str	r3, [r7, #28]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8a:	6850      	ldr	r0, [r2, #4]
 8003a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f2c0 80aa 	blt.w	8003bf0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe f9cb 	bl	8001e48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff6b 	bl	8003990 <prvSampleTimeNow>
 8003aba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b09      	cmp	r3, #9
 8003ac0:	f200 8097 	bhi.w	8003bf2 <prvProcessReceivedCommands+0x19e>
 8003ac4:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <prvProcessReceivedCommands+0x78>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003af5 	.word	0x08003af5
 8003ad8:	08003b69 	.word	0x08003b69
 8003adc:	08003b7d 	.word	0x08003b7d
 8003ae0:	08003bc7 	.word	0x08003bc7
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003af5 	.word	0x08003af5
 8003aec:	08003b69 	.word	0x08003b69
 8003af0:	08003b7d 	.word	0x08003b7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	18d1      	adds	r1, r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b14:	f7ff ff5c 	bl	80039d0 <prvInsertTimerInActiveList>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d069      	beq.n	8003bf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05e      	beq.n	8003bf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2100      	movs	r1, #0
 8003b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b46:	f7ff fe05 	bl	8003754 <xTimerGenericCommand>
 8003b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d14f      	bne.n	8003bf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	61bb      	str	r3, [r7, #24]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b7a:	e03a      	b.n	8003bf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	617b      	str	r3, [r7, #20]
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	18d1      	adds	r1, r2, r3
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc0:	f7ff ff06 	bl	80039d0 <prvInsertTimerInActiveList>
					break;
 8003bc4:	e015      	b.n	8003bf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d103      	bne.n	8003bdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd6:	f000 fbdb 	bl	8004390 <vPortFree>
 8003bda:	e00a      	b.n	8003bf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003bee:	e000      	b.n	8003bf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003bf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <prvProcessReceivedCommands+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1d39      	adds	r1, r7, #4
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fbec 	bl	80023d8 <xQueueReceive>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f47f af2a 	bne.w	8003a5c <prvProcessReceivedCommands+0x8>
	}
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3730      	adds	r7, #48	; 0x30
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000dcc 	.word	0x20000dcc

08003c18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c1e:	e048      	b.n	8003cb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c20:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <prvSwitchTimerLists+0xc0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <prvSwitchTimerLists+0xc0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe f905 	bl	8001e48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02e      	beq.n	8003cb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d90e      	bls.n	8003c84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <prvSwitchTimerLists+0xc0>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f7fe f8aa 	bl	8001dd6 <vListInsert>
 8003c82:	e016      	b.n	8003cb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fd60 	bl	8003754 <xTimerGenericCommand>
 8003c94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	603b      	str	r3, [r7, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <prvSwitchTimerLists+0xc0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1b1      	bne.n	8003c20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <prvSwitchTimerLists+0xc0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <prvSwitchTimerLists+0xc4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <prvSwitchTimerLists+0xc0>)
 8003cc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <prvSwitchTimerLists+0xc4>)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000dc4 	.word	0x20000dc4
 8003cdc:	20000dc8 	.word	0x20000dc8

08003ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ce6:	f000 f965 	bl	8003fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d120      	bne.n	8003d34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003cf2:	4814      	ldr	r0, [pc, #80]	; (8003d44 <prvCheckForValidListAndQueue+0x64>)
 8003cf4:	f7fe f81e 	bl	8001d34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003cf8:	4813      	ldr	r0, [pc, #76]	; (8003d48 <prvCheckForValidListAndQueue+0x68>)
 8003cfa:	f7fe f81b 	bl	8001d34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <prvCheckForValidListAndQueue+0x6c>)
 8003d00:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <prvCheckForValidListAndQueue+0x64>)
 8003d02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <prvCheckForValidListAndQueue+0x70>)
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <prvCheckForValidListAndQueue+0x68>)
 8003d08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <prvCheckForValidListAndQueue+0x74>)
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <prvCheckForValidListAndQueue+0x78>)
 8003d12:	2110      	movs	r1, #16
 8003d14:	200a      	movs	r0, #10
 8003d16:	f7fe f929 	bl	8001f6c <xQueueGenericCreateStatic>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003d1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	490b      	ldr	r1, [pc, #44]	; (8003d5c <prvCheckForValidListAndQueue+0x7c>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fd42 	bl	80027b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d34:	f000 f96e 	bl	8004014 <vPortExitCritical>
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000dcc 	.word	0x20000dcc
 8003d44:	20000d9c 	.word	0x20000d9c
 8003d48:	20000db0 	.word	0x20000db0
 8003d4c:	20000dc4 	.word	0x20000dc4
 8003d50:	20000dc8 	.word	0x20000dc8
 8003d54:	20000e78 	.word	0x20000e78
 8003d58:	20000dd8 	.word	0x20000dd8
 8003d5c:	08004808 	.word	0x08004808

08003d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3b04      	subs	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <pxPortInitialiseStack+0x64>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3b14      	subs	r3, #20
 8003d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b04      	subs	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f06f 0202 	mvn.w	r2, #2
 8003dae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3b20      	subs	r3, #32
 8003db4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	08003dc9 	.word	0x08003dc9

08003dc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <prvTaskExitError+0x54>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d00a      	beq.n	8003df2 <prvTaskExitError+0x2a>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <prvTaskExitError+0x28>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60bb      	str	r3, [r7, #8]
}
 8003e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e06:	bf00      	nop
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0fc      	beq.n	8003e08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <pxCurrentTCBConst2>)
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	6808      	ldr	r0, [r1, #0]
 8003e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2a:	f380 8809 	msr	PSP, r0
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8811 	msr	BASEPRI, r0
 8003e3a:	4770      	bx	lr
 8003e3c:	f3af 8000 	nop.w

08003e40 <pxCurrentTCBConst2>:
 8003e40:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop

08003e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e48:	4808      	ldr	r0, [pc, #32]	; (8003e6c <prvPortStartFirstTask+0x24>)
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	6800      	ldr	r0, [r0, #0]
 8003e4e:	f380 8808 	msr	MSP, r0
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f380 8814 	msr	CONTROL, r0
 8003e5a:	b662      	cpsie	i
 8003e5c:	b661      	cpsie	f
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	df00      	svc	0
 8003e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e6a:	bf00      	nop
 8003e6c:	e000ed08 	.word	0xe000ed08

08003e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e76:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <xPortStartScheduler+0x120>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a46      	ldr	r2, [pc, #280]	; (8003f94 <xPortStartScheduler+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10a      	bne.n	8003e96 <xPortStartScheduler+0x26>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	613b      	str	r3, [r7, #16]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <xPortStartScheduler+0x120>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3f      	ldr	r2, [pc, #252]	; (8003f98 <xPortStartScheduler+0x128>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10a      	bne.n	8003eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	60fb      	str	r3, [r7, #12]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <xPortStartScheduler+0x12c>)
 8003eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <xPortStartScheduler+0x130>)
 8003edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ee4:	e009      	b.n	8003efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	4a2d      	ldr	r2, [pc, #180]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d0ef      	beq.n	8003ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1c3 0307 	rsb	r3, r3, #7
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00a      	beq.n	8003f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60bb      	str	r3, [r7, #8]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f28:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f5e:	f000 f8dd 	bl	800411c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <xPortStartScheduler+0x13c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f68:	f000 f8fc 	bl	8004164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <xPortStartScheduler+0x140>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0f      	ldr	r2, [pc, #60]	; (8003fb0 <xPortStartScheduler+0x140>)
 8003f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f78:	f7ff ff66 	bl	8003e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f7c:	f7ff f84c 	bl	8003018 <vTaskSwitchContext>
	prvTaskExitError();
 8003f80:	f7ff ff22 	bl	8003dc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	e000ed00 	.word	0xe000ed00
 8003f94:	410fc271 	.word	0x410fc271
 8003f98:	410fc270 	.word	0x410fc270
 8003f9c:	e000e400 	.word	0xe000e400
 8003fa0:	20000ec8 	.word	0x20000ec8
 8003fa4:	20000ecc 	.word	0x20000ecc
 8003fa8:	e000ed20 	.word	0xe000ed20
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	e000ef34 	.word	0xe000ef34

08003fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	607b      	str	r3, [r7, #4]
}
 8003fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <vPortEnterCritical+0x58>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	; (800400c <vPortEnterCritical+0x58>)
 8003fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <vPortEnterCritical+0x58>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10f      	bne.n	8004000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <vPortEnterCritical+0x5c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <vPortEnterCritical+0x4c>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vPortEnterCritical+0x4a>
	}
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	2000000c 	.word	0x2000000c
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <vPortExitCritical+0x50>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <vPortExitCritical+0x24>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	607b      	str	r3, [r7, #4]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <vPortExitCritical+0x50>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3b01      	subs	r3, #1
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <vPortExitCritical+0x50>)
 8004040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <vPortExitCritical+0x50>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <vPortExitCritical+0x42>
 800404a:	2300      	movs	r3, #0
 800404c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f383 8811 	msr	BASEPRI, r3
}
 8004054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
	...

08004070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004070:	f3ef 8009 	mrs	r0, PSP
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <pxCurrentTCBConst>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f01e 0f10 	tst.w	lr, #16
 8004080:	bf08      	it	eq
 8004082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408a:	6010      	str	r0, [r2, #0]
 800408c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004094:	f380 8811 	msr	BASEPRI, r0
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f7fe ffba 	bl	8003018 <vTaskSwitchContext>
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f380 8811 	msr	BASEPRI, r0
 80040ac:	bc09      	pop	{r0, r3}
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b6:	f01e 0f10 	tst.w	lr, #16
 80040ba:	bf08      	it	eq
 80040bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040c0:	f380 8809 	msr	PSP, r0
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	f3af 8000 	nop.w

080040d0 <pxCurrentTCBConst>:
 80040d0:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
}
 80040f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040f2:	f7fe fed7 	bl	8002ea4 <xTaskIncrementTick>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <xPortSysTickHandler+0x40>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f383 8811 	msr	BASEPRI, r3
}
 800410e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <vPortSetupTimerInterrupt+0x34>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <vPortSetupTimerInterrupt+0x38>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <vPortSetupTimerInterrupt+0x3c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0a      	ldr	r2, [pc, #40]	; (800415c <vPortSetupTimerInterrupt+0x40>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <vPortSetupTimerInterrupt+0x44>)
 800413a:	3b01      	subs	r3, #1
 800413c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800413e:	4b04      	ldr	r3, [pc, #16]	; (8004150 <vPortSetupTimerInterrupt+0x34>)
 8004140:	2207      	movs	r2, #7
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e010 	.word	0xe000e010
 8004154:	e000e018 	.word	0xe000e018
 8004158:	20000000 	.word	0x20000000
 800415c:	10624dd3 	.word	0x10624dd3
 8004160:	e000e014 	.word	0xe000e014

08004164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004174 <vPortEnableVFP+0x10>
 8004168:	6801      	ldr	r1, [r0, #0]
 800416a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800416e:	6001      	str	r1, [r0, #0]
 8004170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004172:	bf00      	nop
 8004174:	e000ed88 	.word	0xe000ed88

08004178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800417e:	f3ef 8305 	mrs	r3, IPSR
 8004182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	d914      	bls.n	80041b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <vPortValidateInterruptPriority+0x70>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <vPortValidateInterruptPriority+0x74>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	7afa      	ldrb	r2, [r7, #11]
 800419a:	429a      	cmp	r2, r3
 800419c:	d20a      	bcs.n	80041b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	607b      	str	r3, [r7, #4]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <vPortValidateInterruptPriority+0x78>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <vPortValidateInterruptPriority+0x7c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d90a      	bls.n	80041da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	603b      	str	r3, [r7, #0]
}
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <vPortValidateInterruptPriority+0x60>
	}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e3f0 	.word	0xe000e3f0
 80041ec:	20000ec8 	.word	0x20000ec8
 80041f0:	e000ed0c 	.word	0xe000ed0c
 80041f4:	20000ecc 	.word	0x20000ecc

080041f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004204:	f7fe fd92 	bl	8002d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004208:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <pvPortMalloc+0x180>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004210:	f000 f920 	bl	8004454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <pvPortMalloc+0x184>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 8093 	bne.w	8004348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01d      	beq.n	8004264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004228:	2208      	movs	r2, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	2b00      	cmp	r3, #0
 8004238:	d014      	beq.n	8004264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	3308      	adds	r3, #8
 8004242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <pvPortMalloc+0x6c>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	617b      	str	r3, [r7, #20]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06e      	beq.n	8004348 <pvPortMalloc+0x150>
 800426a:	4b45      	ldr	r3, [pc, #276]	; (8004380 <pvPortMalloc+0x188>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d869      	bhi.n	8004348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <pvPortMalloc+0x18c>)
 8004276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <pvPortMalloc+0x18c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800427e:	e004      	b.n	800428a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d903      	bls.n	800429c <pvPortMalloc+0xa4>
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f1      	bne.n	8004280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <pvPortMalloc+0x180>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d050      	beq.n	8004348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2208      	movs	r2, #8
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	2308      	movs	r3, #8
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d91f      	bls.n	8004308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <pvPortMalloc+0xf8>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	613b      	str	r3, [r7, #16]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	1ad2      	subs	r2, r2, r3
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004302:	69b8      	ldr	r0, [r7, #24]
 8004304:	f000 f908 	bl	8004518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <pvPortMalloc+0x188>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <pvPortMalloc+0x188>)
 8004314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <pvPortMalloc+0x188>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <pvPortMalloc+0x190>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d203      	bcs.n	800432a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <pvPortMalloc+0x188>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <pvPortMalloc+0x190>)
 8004328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <pvPortMalloc+0x184>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	431a      	orrs	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <pvPortMalloc+0x194>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a11      	ldr	r2, [pc, #68]	; (800438c <pvPortMalloc+0x194>)
 8004346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004348:	f7fe fcfe 	bl	8002d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <pvPortMalloc+0x174>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60fb      	str	r3, [r7, #12]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <pvPortMalloc+0x172>
	return pvReturn;
 800436c:	69fb      	ldr	r3, [r7, #28]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3728      	adds	r7, #40	; 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20004ad8 	.word	0x20004ad8
 800437c:	20004aec 	.word	0x20004aec
 8004380:	20004adc 	.word	0x20004adc
 8004384:	20004ad0 	.word	0x20004ad0
 8004388:	20004ae0 	.word	0x20004ae0
 800438c:	20004ae4 	.word	0x20004ae4

08004390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04d      	beq.n	800443e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043a2:	2308      	movs	r3, #8
 80043a4:	425b      	negs	r3, r3
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4413      	add	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4b24      	ldr	r3, [pc, #144]	; (8004448 <vPortFree+0xb8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <vPortFree+0x44>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <vPortFree+0x62>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	60bb      	str	r3, [r7, #8]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <vPortFree+0xb8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01e      	beq.n	800443e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11a      	bne.n	800443e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <vPortFree+0xb8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004418:	f7fe fc88 	bl	8002d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <vPortFree+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4413      	add	r3, r2
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <vPortFree+0xbc>)
 8004428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800442a:	6938      	ldr	r0, [r7, #16]
 800442c:	f000 f874 	bl	8004518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <vPortFree+0xc0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	4a06      	ldr	r2, [pc, #24]	; (8004450 <vPortFree+0xc0>)
 8004438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800443a:	f7fe fc85 	bl	8002d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20004aec 	.word	0x20004aec
 800444c:	20004adc 	.word	0x20004adc
 8004450:	20004ae8 	.word	0x20004ae8

08004454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800445a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800445e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <prvHeapInit+0xac>)
 8004462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3307      	adds	r3, #7
 8004472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <prvHeapInit+0xac>)
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <prvHeapInit+0xb0>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <prvHeapInit+0xb0>)
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044a0:	2208      	movs	r2, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <prvHeapInit+0xb4>)
 80044b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <prvHeapInit+0xb4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <prvHeapInit+0xb4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <prvHeapInit+0xb4>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <prvHeapInit+0xb8>)
 80044e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <prvHeapInit+0xbc>)
 80044ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <prvHeapInit+0xc0>)
 80044ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000ed0 	.word	0x20000ed0
 8004504:	20004ad0 	.word	0x20004ad0
 8004508:	20004ad8 	.word	0x20004ad8
 800450c:	20004ae0 	.word	0x20004ae0
 8004510:	20004adc 	.word	0x20004adc
 8004514:	20004aec 	.word	0x20004aec

08004518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <prvInsertBlockIntoFreeList+0xac>)
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e002      	b.n	800452c <prvInsertBlockIntoFreeList+0x14>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d8f7      	bhi.n	8004526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d108      	bne.n	800455a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	441a      	add	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d118      	bne.n	80045a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d00d      	beq.n	8004596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e008      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e003      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d002      	beq.n	80045b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20004ad0 	.word	0x20004ad0
 80045c8:	20004ad8 	.word	0x20004ad8

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	; (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	; (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	; (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	; (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 f8f2 	bl	80047c8 <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	080048b4 	.word	0x080048b4
 8004608:	080048b4 	.word	0x080048b4
 800460c:	080048b4 	.word	0x080048b4
 8004610:	080048b8 	.word	0x080048b8

08004614 <__retarget_lock_acquire_recursive>:
 8004614:	4770      	bx	lr

08004616 <__retarget_lock_release_recursive>:
 8004616:	4770      	bx	lr

08004618 <memcpy>:
 8004618:	440a      	add	r2, r1
 800461a:	4291      	cmp	r1, r2
 800461c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004620:	d100      	bne.n	8004624 <memcpy+0xc>
 8004622:	4770      	bx	lr
 8004624:	b510      	push	{r4, lr}
 8004626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800462a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800462e:	4291      	cmp	r1, r2
 8004630:	d1f9      	bne.n	8004626 <memcpy+0xe>
 8004632:	bd10      	pop	{r4, pc}

08004634 <memset>:
 8004634:	4402      	add	r2, r0
 8004636:	4603      	mov	r3, r0
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	f803 1b01 	strb.w	r1, [r3], #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <cleanup_glue>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	460c      	mov	r4, r1
 8004648:	6809      	ldr	r1, [r1, #0]
 800464a:	4605      	mov	r5, r0
 800464c:	b109      	cbz	r1, 8004652 <cleanup_glue+0xe>
 800464e:	f7ff fff9 	bl	8004644 <cleanup_glue>
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800465a:	f000 b869 	b.w	8004730 <_free_r>
	...

08004660 <_reclaim_reent>:
 8004660:	4b2c      	ldr	r3, [pc, #176]	; (8004714 <_reclaim_reent+0xb4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4283      	cmp	r3, r0
 8004666:	b570      	push	{r4, r5, r6, lr}
 8004668:	4604      	mov	r4, r0
 800466a:	d051      	beq.n	8004710 <_reclaim_reent+0xb0>
 800466c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800466e:	b143      	cbz	r3, 8004682 <_reclaim_reent+0x22>
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d14a      	bne.n	800470c <_reclaim_reent+0xac>
 8004676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	b111      	cbz	r1, 8004682 <_reclaim_reent+0x22>
 800467c:	4620      	mov	r0, r4
 800467e:	f000 f857 	bl	8004730 <_free_r>
 8004682:	6961      	ldr	r1, [r4, #20]
 8004684:	b111      	cbz	r1, 800468c <_reclaim_reent+0x2c>
 8004686:	4620      	mov	r0, r4
 8004688:	f000 f852 	bl	8004730 <_free_r>
 800468c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800468e:	b111      	cbz	r1, 8004696 <_reclaim_reent+0x36>
 8004690:	4620      	mov	r0, r4
 8004692:	f000 f84d 	bl	8004730 <_free_r>
 8004696:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004698:	b111      	cbz	r1, 80046a0 <_reclaim_reent+0x40>
 800469a:	4620      	mov	r0, r4
 800469c:	f000 f848 	bl	8004730 <_free_r>
 80046a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046a2:	b111      	cbz	r1, 80046aa <_reclaim_reent+0x4a>
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 f843 	bl	8004730 <_free_r>
 80046aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80046ac:	b111      	cbz	r1, 80046b4 <_reclaim_reent+0x54>
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 f83e 	bl	8004730 <_free_r>
 80046b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80046b6:	b111      	cbz	r1, 80046be <_reclaim_reent+0x5e>
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 f839 	bl	8004730 <_free_r>
 80046be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80046c0:	b111      	cbz	r1, 80046c8 <_reclaim_reent+0x68>
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 f834 	bl	8004730 <_free_r>
 80046c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ca:	b111      	cbz	r1, 80046d2 <_reclaim_reent+0x72>
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 f82f 	bl	8004730 <_free_r>
 80046d2:	69a3      	ldr	r3, [r4, #24]
 80046d4:	b1e3      	cbz	r3, 8004710 <_reclaim_reent+0xb0>
 80046d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046d8:	4620      	mov	r0, r4
 80046da:	4798      	blx	r3
 80046dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80046de:	b1b9      	cbz	r1, 8004710 <_reclaim_reent+0xb0>
 80046e0:	4620      	mov	r0, r4
 80046e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046e6:	f7ff bfad 	b.w	8004644 <cleanup_glue>
 80046ea:	5949      	ldr	r1, [r1, r5]
 80046ec:	b941      	cbnz	r1, 8004700 <_reclaim_reent+0xa0>
 80046ee:	3504      	adds	r5, #4
 80046f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046f2:	2d80      	cmp	r5, #128	; 0x80
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	d1f8      	bne.n	80046ea <_reclaim_reent+0x8a>
 80046f8:	4620      	mov	r0, r4
 80046fa:	f000 f819 	bl	8004730 <_free_r>
 80046fe:	e7ba      	b.n	8004676 <_reclaim_reent+0x16>
 8004700:	680e      	ldr	r6, [r1, #0]
 8004702:	4620      	mov	r0, r4
 8004704:	f000 f814 	bl	8004730 <_free_r>
 8004708:	4631      	mov	r1, r6
 800470a:	e7ef      	b.n	80046ec <_reclaim_reent+0x8c>
 800470c:	2500      	movs	r5, #0
 800470e:	e7ef      	b.n	80046f0 <_reclaim_reent+0x90>
 8004710:	bd70      	pop	{r4, r5, r6, pc}
 8004712:	bf00      	nop
 8004714:	20000010 	.word	0x20000010

08004718 <__malloc_lock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_lock+0x8>)
 800471a:	f7ff bf7b 	b.w	8004614 <__retarget_lock_acquire_recursive>
 800471e:	bf00      	nop
 8004720:	20004af0 	.word	0x20004af0

08004724 <__malloc_unlock>:
 8004724:	4801      	ldr	r0, [pc, #4]	; (800472c <__malloc_unlock+0x8>)
 8004726:	f7ff bf76 	b.w	8004616 <__retarget_lock_release_recursive>
 800472a:	bf00      	nop
 800472c:	20004af0 	.word	0x20004af0

08004730 <_free_r>:
 8004730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004732:	2900      	cmp	r1, #0
 8004734:	d044      	beq.n	80047c0 <_free_r+0x90>
 8004736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473a:	9001      	str	r0, [sp, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f1a1 0404 	sub.w	r4, r1, #4
 8004742:	bfb8      	it	lt
 8004744:	18e4      	addlt	r4, r4, r3
 8004746:	f7ff ffe7 	bl	8004718 <__malloc_lock>
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <_free_r+0x94>)
 800474c:	9801      	ldr	r0, [sp, #4]
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	b933      	cbnz	r3, 8004760 <_free_r+0x30>
 8004752:	6063      	str	r3, [r4, #4]
 8004754:	6014      	str	r4, [r2, #0]
 8004756:	b003      	add	sp, #12
 8004758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800475c:	f7ff bfe2 	b.w	8004724 <__malloc_unlock>
 8004760:	42a3      	cmp	r3, r4
 8004762:	d908      	bls.n	8004776 <_free_r+0x46>
 8004764:	6825      	ldr	r5, [r4, #0]
 8004766:	1961      	adds	r1, r4, r5
 8004768:	428b      	cmp	r3, r1
 800476a:	bf01      	itttt	eq
 800476c:	6819      	ldreq	r1, [r3, #0]
 800476e:	685b      	ldreq	r3, [r3, #4]
 8004770:	1949      	addeq	r1, r1, r5
 8004772:	6021      	streq	r1, [r4, #0]
 8004774:	e7ed      	b.n	8004752 <_free_r+0x22>
 8004776:	461a      	mov	r2, r3
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b10b      	cbz	r3, 8004780 <_free_r+0x50>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d9fa      	bls.n	8004776 <_free_r+0x46>
 8004780:	6811      	ldr	r1, [r2, #0]
 8004782:	1855      	adds	r5, r2, r1
 8004784:	42a5      	cmp	r5, r4
 8004786:	d10b      	bne.n	80047a0 <_free_r+0x70>
 8004788:	6824      	ldr	r4, [r4, #0]
 800478a:	4421      	add	r1, r4
 800478c:	1854      	adds	r4, r2, r1
 800478e:	42a3      	cmp	r3, r4
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	d1e0      	bne.n	8004756 <_free_r+0x26>
 8004794:	681c      	ldr	r4, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	6053      	str	r3, [r2, #4]
 800479a:	4421      	add	r1, r4
 800479c:	6011      	str	r1, [r2, #0]
 800479e:	e7da      	b.n	8004756 <_free_r+0x26>
 80047a0:	d902      	bls.n	80047a8 <_free_r+0x78>
 80047a2:	230c      	movs	r3, #12
 80047a4:	6003      	str	r3, [r0, #0]
 80047a6:	e7d6      	b.n	8004756 <_free_r+0x26>
 80047a8:	6825      	ldr	r5, [r4, #0]
 80047aa:	1961      	adds	r1, r4, r5
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf04      	itt	eq
 80047b0:	6819      	ldreq	r1, [r3, #0]
 80047b2:	685b      	ldreq	r3, [r3, #4]
 80047b4:	6063      	str	r3, [r4, #4]
 80047b6:	bf04      	itt	eq
 80047b8:	1949      	addeq	r1, r1, r5
 80047ba:	6021      	streq	r1, [r4, #0]
 80047bc:	6054      	str	r4, [r2, #4]
 80047be:	e7ca      	b.n	8004756 <_free_r+0x26>
 80047c0:	b003      	add	sp, #12
 80047c2:	bd30      	pop	{r4, r5, pc}
 80047c4:	20004af4 	.word	0x20004af4

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	bf00      	nop
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
