
018_FreeRTOS_Interrupt_Management.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd0  08006bd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd8  08006bd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b44  20004b44  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196f8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000334f  00000000  00000000  0003979c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001330  00000000  00000000  0003df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c5b  00000000  00000000  0003f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001653d  00000000  00000000  00042ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5dde  00000000  00000000  00059410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f1ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aec  00000000  00000000  0012f240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a70 	.word	0x08006a70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006a70 	.word	0x08006a70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]

}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <vPeriodicTask>:
void vPeriodicTask(void *pvParameters)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b092      	sub	sp, #72	; 0x48
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	char buffer[50];
	int count = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
 8000598:	23fa      	movs	r3, #250	; 0xfa
 800059a:	643b      	str	r3, [r7, #64]	; 0x40

	for(;;)
	{
		sprintf(buffer, "Periyodik 1 calisiyor %d \r\n", count++);
 800059c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	647a      	str	r2, [r7, #68]	; 0x44
 80005a2:	f107 000c 	add.w	r0, r7, #12
 80005a6:	461a      	mov	r2, r3
 80005a8:	4909      	ldr	r1, [pc, #36]	; (80005d0 <vPeriodicTask+0x44>)
 80005aa:	f005 fea7 	bl	80062fc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 50, 1000);
 80005ae:	f107 010c 	add.w	r1, r7, #12
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	2232      	movs	r2, #50	; 0x32
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <vPeriodicTask+0x48>)
 80005ba:	f001 fe9c 	bl	80022f6 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <vPeriodicTask+0x4c>)
 80005c4:	f000 fe9f 	bl	8001306 <HAL_GPIO_TogglePin>
		vTaskDelay(xDelay250ms);
 80005c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80005ca:	f003 ff55 	bl	8004478 <vTaskDelay>
		sprintf(buffer, "Periyodik 1 calisiyor %d \r\n", count++);
 80005ce:	e7e5      	b.n	800059c <vPeriodicTask+0x10>
 80005d0:	08006a88 	.word	0x08006a88
 80005d4:	20000090 	.word	0x20000090
 80005d8:	40020c00 	.word	0x40020c00

080005dc <vInterruptTriggeredTask>:
	}
}
void vInterruptTriggeredTask(void *pvParameters)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Butona Basildi! Kesme tetiklendi!\r\n";
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <vInterruptTriggeredTask+0x50>)
 80005e6:	60fb      	str	r3, [r7, #12]
	const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS(500);
 80005e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005ec:	60bb      	str	r3, [r7, #8]

	for(;;)
	{
		if(xSemaphoreTake(xBinarySemaphore, xMaxExpectedBlockTime) == pdPASS)
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <vInterruptTriggeredTask+0x54>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68b9      	ldr	r1, [r7, #8]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 faf5 	bl	8003be4 <xQueueSemaphoreTake>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10d      	bne.n	800061c <vInterruptTriggeredTask+0x40>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)pcTaskName, 50, HAL_MAX_DELAY);
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2232      	movs	r2, #50	; 0x32
 8000606:	68f9      	ldr	r1, [r7, #12]
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <vInterruptTriggeredTask+0x58>)
 800060a:	f001 fe74 	bl	80022f6 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <vInterruptTriggeredTask+0x5c>)
 8000616:	f000 fe5d 	bl	80012d4 <HAL_GPIO_WritePin>
 800061a:	e7e8      	b.n	80005ee <vInterruptTriggeredTask+0x12>
		}
		else
		{
			HAL_UART_Transmit(&huart2, (uint8_t*) "Semaphore alinamadi!\r\n", 30, HAL_MAX_DELAY);
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	221e      	movs	r2, #30
 8000622:	4906      	ldr	r1, [pc, #24]	; (800063c <vInterruptTriggeredTask+0x60>)
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <vInterruptTriggeredTask+0x58>)
 8000626:	f001 fe66 	bl	80022f6 <HAL_UART_Transmit>
		if(xSemaphoreTake(xBinarySemaphore, xMaxExpectedBlockTime) == pdPASS)
 800062a:	e7e0      	b.n	80005ee <vInterruptTriggeredTask+0x12>
 800062c:	08006aa4 	.word	0x08006aa4
 8000630:	200000d4 	.word	0x200000d4
 8000634:	20000090 	.word	0x20000090
 8000638:	40020c00 	.word	0x40020c00
 800063c:	08006ac8 	.word	0x08006ac8

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 faf3 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f83f 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8d1 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f8a5 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  const char *pcTaskName = "FreeRTOS BASLADI!\r\n";
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <main+0x70>)
 8000658:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)pcTaskName, 25, 1000);
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	2219      	movs	r2, #25
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <main+0x74>)
 8000664:	f001 fe47 	bl	80022f6 <HAL_UART_Transmit>

  xBinarySemaphore = xSemaphoreCreateBinary();
 8000668:	2203      	movs	r2, #3
 800066a:	2100      	movs	r1, #0
 800066c:	2001      	movs	r0, #1
 800066e:	f002 ffe1 	bl	8003634 <xQueueGenericCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <main+0x78>)
 8000676:	6013      	str	r3, [r2, #0]
  if(xBinarySemaphore != NULL)
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <main+0x78>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d015      	beq.n	80006ac <main+0x6c>
  {
	  xTaskCreate(vPeriodicTask, "Periyodik", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000680:	2300      	movs	r3, #0
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	2301      	movs	r3, #1
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <main+0x7c>)
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <main+0x80>)
 8000690:	f003 fd97 	bl	80041c2 <xTaskCreate>
	  xTaskCreate(vInterruptTriggeredTask, "Interrupt", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000694:	2300      	movs	r3, #0
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2303      	movs	r3, #3
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	4908      	ldr	r1, [pc, #32]	; (80006c4 <main+0x84>)
 80006a2:	4809      	ldr	r0, [pc, #36]	; (80006c8 <main+0x88>)
 80006a4:	f003 fd8d 	bl	80041c2 <xTaskCreate>
	  vTaskStartScheduler();
 80006a8:	f003 ff1a 	bl	80044e0 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x6c>
 80006ae:	bf00      	nop
 80006b0:	08006ae0 	.word	0x08006ae0
 80006b4:	20000090 	.word	0x20000090
 80006b8:	200000d4 	.word	0x200000d4
 80006bc:	08006af4 	.word	0x08006af4
 80006c0:	0800058d 	.word	0x0800058d
 80006c4:	08006b00 	.word	0x08006b00
 80006c8:	080005dd 	.word	0x080005dd

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fcf8 	bl	80060d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <SystemClock_Config+0xcc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd0>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fe0a 	bl	800136c <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075e:	f000 f8c5 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f86b 	bl	800185c <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800078c:	f000 f8ae 	bl	80008ec <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f001 fd40 	bl	800225c <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f883 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000090 	.word	0x20000090
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_GPIO_Init+0xc8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <MX_GPIO_Init+0xc8>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_GPIO_Init+0xc8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0xc8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_GPIO_Init+0xc8>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_GPIO_Init+0xc8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_GPIO_Init+0xc8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_GPIO_Init+0xc8>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_GPIO_Init+0xc8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000864:	4816      	ldr	r0, [pc, #88]	; (80008c0 <MX_GPIO_Init+0xcc>)
 8000866:	f000 fd35 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086a:	2301      	movs	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000880:	f000 fb8c 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000884:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <MX_GPIO_Init+0xcc>)
 800089e:	f000 fb7d 	bl	8000f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2006      	movs	r0, #6
 80008a8:	f000 fabc 	bl	8000e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ac:	2006      	movs	r0, #6
 80008ae:	f000 fad5 	bl	8000e5c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	40020000 	.word	0x40020000

080008c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008da:	f000 f9cb 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40002000 	.word	0x40002000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <HAL_MspInit+0x54>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_MspInit+0x54>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fa71 	bl	8000e24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <HAL_UART_MspInit+0x94>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d133      	bne.n	80009da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_UART_MspInit+0x98>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <HAL_UART_MspInit+0x98>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <HAL_UART_MspInit+0x98>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_UART_MspInit+0x98>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_UART_MspInit+0x98>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_UART_MspInit+0x98>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <HAL_UART_MspInit+0x9c>)
 80009c6:	f000 fae9 	bl	8000f9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2105      	movs	r1, #5
 80009ce:	2026      	movs	r0, #38	; 0x26
 80009d0:	f000 fa28 	bl	8000e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009d4:	2026      	movs	r0, #38	; 0x26
 80009d6:	f000 fa41 	bl	8000e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f938 	bl	8001c9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a36:	f001 f909 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8000a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a3c:	e004      	b.n	8000a48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3e:	f001 f905 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8000a42:	4603      	mov	r3, r0
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	0c9b      	lsrs	r3, r3, #18
 8000a52:	3b01      	subs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_InitTick+0xec>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_InitTick+0xf0>)
 8000a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xec>)
 8000a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_InitTick+0xec>)
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_InitTick+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_InitTick+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <HAL_InitTick+0xec>)
 8000a7e:	f001 f93f 	bl	8001d00 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_InitTick+0xec>)
 8000a92:	f001 f98f 	bl	8001db4 <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000aa4:	202d      	movs	r0, #45	; 0x2d
 8000aa6:	f000 f9d9 	bl	8000e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	202d      	movs	r0, #45	; 0x2d
 8000ab6:	f000 f9b5 	bl	8000e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_InitTick+0xf4>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3738      	adds	r7, #56	; 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	200000d8 	.word	0x200000d8
 8000ae0:	40002000 	.word	0x40002000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 fc0f 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <USART2_IRQHandler+0x10>)
 8000b2a:	f001 fc77 	bl	800241c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000090 	.word	0x20000090

08000b38 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b3e:	f001 f9a9 	bl	8001e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000d8 	.word	0x200000d8

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f005 fa6e 	bl	800605c <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20000120 	.word	0x20000120
 8000bb4:	20004b48 	.word	0x20004b48

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ffd7 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f005 fa2d 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fd17 	bl	8000640 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c20:	08006be0 	.word	0x08006be0
  ldr r2, =_sbss
 8000c24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c28:	20004b44 	.word	0x20004b44

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f8d8 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f7ff fec6 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe48 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000124 	.word	0x20000124

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000124 	.word	0x20000124

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e86:	f7ff ff09 	bl	8000c9c <HAL_GetTick>
 8000e8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d008      	beq.n	8000eaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e052      	b.n	8000f50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0216 	bic.w	r2, r2, #22
 8000eb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ec8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <HAL_DMA_Abort+0x62>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0208 	bic.w	r2, r2, #8
 8000ee8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000efa:	e013      	b.n	8000f24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000efc:	f7ff fece 	bl	8000c9c <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b05      	cmp	r3, #5
 8000f08:	d90c      	bls.n	8000f24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2203      	movs	r2, #3
 8000f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e015      	b.n	8000f50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1e4      	bne.n	8000efc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f36:	223f      	movs	r2, #63	; 0x3f
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d004      	beq.n	8000f76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00c      	b.n	8000f90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2205      	movs	r2, #5
 8000f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e16b      	b.n	8001290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 815a 	bne.w	800128a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80b4 	beq.w	800128a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a5f      	ldr	r2, [pc, #380]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a5b      	ldr	r2, [pc, #364]	; (80012ac <HAL_GPIO_Init+0x310>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x314>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_GPIO_Init+0x318>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x222>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_GPIO_Init+0x31c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_GPIO_Init+0x320>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x21a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x216>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x328>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x212>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x20e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <HAL_GPIO_Init+0x330>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x20a>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e00e      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011a6:	2308      	movs	r3, #8
 80011a8:	e00c      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00a      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ae:	2305      	movs	r3, #5
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x310>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_GPIO_Init+0x334>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001206:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f ae90 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40021400 	.word	0x40021400
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	041a      	lsls	r2, r3, #16
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43d9      	mvns	r1, r3
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	400b      	ands	r3, r1
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f90a 	bl	8000574 <HAL_GPIO_EXTI_Callback>
  }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e267      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d075      	beq.n	8001476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d00c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001396:	4b85      	ldr	r3, [pc, #532]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d112      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a2:	4b82      	ldr	r3, [pc, #520]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ae:	d10b      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4b7e      	ldr	r3, [pc, #504]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d05b      	beq.n	8001474 <HAL_RCC_OscConfig+0x108>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d157      	bne.n	8001474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e242      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x74>
 80013d2:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a75      	ldr	r2, [pc, #468]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x98>
 80013ea:	4b70      	ldr	r3, [pc, #448]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6f      	ldr	r2, [pc, #444]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b6d      	ldr	r3, [pc, #436]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6c      	ldr	r2, [pc, #432]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 8001404:	4b69      	ldr	r3, [pc, #420]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a68      	ldr	r2, [pc, #416]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b66      	ldr	r3, [pc, #408]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a65      	ldr	r2, [pc, #404]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fc3a 	bl	8000c9c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fc36 	bl	8000c9c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e207      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0xc0>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fc26 	bl	8000c9c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fc22 	bl	8000c9c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1f3      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0xe8>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d063      	beq.n	800154a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001482:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b47      	ldr	r3, [pc, #284]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	2b08      	cmp	r3, #8
 8001498:	d11c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x152>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e1c7      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4937      	ldr	r1, [pc, #220]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	e03a      	b.n	800154a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_RCC_OscConfig+0x244>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fbdb 	bl	8000c9c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fbd7 	bl	8000c9c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e1a8      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4925      	ldr	r1, [pc, #148]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x244>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fbba 	bl	8000c9c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fbb6 	bl	8000c9c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e187      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d036      	beq.n	80015c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d016      	beq.n	800158c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_RCC_OscConfig+0x248>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fb9a 	bl	8000c9c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fb96 	bl	8000c9c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e167      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_OscConfig+0x240>)
 8001580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x200>
 800158a:	e01b      	b.n	80015c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_OscConfig+0x248>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb83 	bl	8000c9c <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	e00e      	b.n	80015b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fb7f 	bl	8000c9c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d907      	bls.n	80015b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e150      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
 80015ac:	40023800 	.word	0x40023800
 80015b0:	42470000 	.word	0x42470000
 80015b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ea      	bne.n	800159a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 8097 	beq.w	8001700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b81      	ldr	r3, [pc, #516]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b7d      	ldr	r3, [pc, #500]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a7c      	ldr	r2, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b7a      	ldr	r3, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b77      	ldr	r3, [pc, #476]	; (80017e0 <HAL_RCC_OscConfig+0x474>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160e:	4b74      	ldr	r3, [pc, #464]	; (80017e0 <HAL_RCC_OscConfig+0x474>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a73      	ldr	r2, [pc, #460]	; (80017e0 <HAL_RCC_OscConfig+0x474>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fb3f 	bl	8000c9c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fb3b 	bl	8000c9c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e10c      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_OscConfig+0x474>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x2ea>
 8001648:	4b64      	ldr	r3, [pc, #400]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a63      	ldr	r2, [pc, #396]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	e01c      	b.n	8001690 <HAL_RCC_OscConfig+0x324>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x30c>
 800165e:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a5e      	ldr	r2, [pc, #376]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a5b      	ldr	r2, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x324>
 8001678:	4b58      	ldr	r3, [pc, #352]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a57      	ldr	r2, [pc, #348]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	4b55      	ldr	r3, [pc, #340]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a54      	ldr	r2, [pc, #336]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 800168a:	f023 0304 	bic.w	r3, r3, #4
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d015      	beq.n	80016c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fb00 	bl	8000c9c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff fafc 	bl	8000c9c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0cb      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0ee      	beq.n	80016a0 <HAL_RCC_OscConfig+0x334>
 80016c2:	e014      	b.n	80016ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff faea 	bl	8000c9c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fae6 	bl	8000c9c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e0b5      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e2:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ee      	bne.n	80016cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f4:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a38      	ldr	r2, [pc, #224]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80016fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80a1 	beq.w	800184c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b08      	cmp	r3, #8
 8001714:	d05c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d141      	bne.n	80017a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_RCC_OscConfig+0x478>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff faba 	bl	8000c9c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fab6 	bl	8000c9c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e087      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69da      	ldr	r2, [r3, #28]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	019b      	lsls	r3, r3, #6
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	3b01      	subs	r3, #1
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	491b      	ldr	r1, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x478>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fa8f 	bl	8000c9c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff fa8b 	bl	8000c9c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e05c      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x416>
 80017a0:	e054      	b.n	800184c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_RCC_OscConfig+0x478>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fa78 	bl	8000c9c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff fa74 	bl	8000c9c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e045      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_OscConfig+0x470>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x444>
 80017ce:	e03d      	b.n	800184c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e038      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000
 80017e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d028      	beq.n	8001848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d121      	bne.n	8001848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d11a      	bne.n	8001848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800181e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001820:	4293      	cmp	r3, r2
 8001822:	d111      	bne.n	8001848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	3b01      	subs	r3, #1
 8001832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d107      	bne.n	8001848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0cc      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d90c      	bls.n	8001898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d044      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d119      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d003      	beq.n	800191a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e067      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff f9a6 	bl	8000c9c <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff f9a2 	bl	8000c9c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d20c      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fff4 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08006b24 	.word	0x08006b24
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a2c:	b094      	sub	sp, #80	; 0x50
 8001a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
 8001a34:	2300      	movs	r3, #0
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a38:	2300      	movs	r3, #0
 8001a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a40:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d00d      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x40>
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	f200 80e1 	bhi.w	8001c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x34>
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5a:	e0db      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a60:	e0db      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a62:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a66:	e0d8      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a68:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a72:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	2200      	movs	r2, #0
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
 8001a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	0159      	lsls	r1, r3, #5
 8001aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aac:	0150      	lsls	r0, r2, #5
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	1a51      	subs	r1, r2, r1
 8001ab6:	6139      	str	r1, [r7, #16]
 8001ab8:	4629      	mov	r1, r5
 8001aba:	eb63 0301 	sbc.w	r3, r3, r1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001acc:	4659      	mov	r1, fp
 8001ace:	018b      	lsls	r3, r1, #6
 8001ad0:	4651      	mov	r1, sl
 8001ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	018a      	lsls	r2, r1, #6
 8001ada:	4651      	mov	r1, sl
 8001adc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001afa:	4690      	mov	r8, r2
 8001afc:	4699      	mov	r9, r3
 8001afe:	4623      	mov	r3, r4
 8001b00:	eb18 0303 	adds.w	r3, r8, r3
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	462b      	mov	r3, r5
 8001b08:	eb49 0303 	adc.w	r3, r9, r3
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	024b      	lsls	r3, r1, #9
 8001b1e:	4621      	mov	r1, r4
 8001b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b24:	4621      	mov	r1, r4
 8001b26:	024a      	lsls	r2, r1, #9
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2e:	2200      	movs	r2, #0
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b38:	f7fe fb9a 	bl	8000270 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b44:	e058      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4611      	mov	r1, r2
 8001b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b60:	4642      	mov	r2, r8
 8001b62:	464b      	mov	r3, r9
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	0159      	lsls	r1, r3, #5
 8001b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b72:	0150      	lsls	r0, r2, #5
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4641      	mov	r1, r8
 8001b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7e:	4649      	mov	r1, r9
 8001b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b98:	ebb2 040a 	subs.w	r4, r2, sl
 8001b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	00eb      	lsls	r3, r5, #3
 8001baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bae:	00e2      	lsls	r2, r4, #3
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	18e3      	adds	r3, r4, r3
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	464b      	mov	r3, r9
 8001bbc:	eb45 0303 	adc.w	r3, r5, r3
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	028b      	lsls	r3, r1, #10
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd8:	4621      	mov	r1, r4
 8001bda:	028a      	lsls	r2, r1, #10
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be2:	2200      	movs	r2, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	61fa      	str	r2, [r7, #28]
 8001be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bec:	f7fe fb40 	bl	8000270 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3750      	adds	r7, #80	; 0x50
 8001c20:	46bd      	mov	sp, r7
 8001c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	007a1200 	.word	0x007a1200

08001c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0a9b      	lsrs	r3, r3, #10
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08006b34 	.word	0x08006b34

08001c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c78:	f7ff ffdc 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0b5b      	lsrs	r3, r3, #13
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4903      	ldr	r1, [pc, #12]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	08006b34 	.word	0x08006b34

08001c9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	220f      	movs	r2, #15
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_RCC_GetClockConfig+0x60>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0207 	and.w	r2, r3, #7
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f839 	bl	8001d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 f9d8 	bl	80020f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d001      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e04e      	b.n	8001e6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d022      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df6:	d01d      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d010      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e56:	e007      	b.n	8001e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40010400 	.word	0x40010400
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40001800 	.word	0x40001800

08001e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0202 	mvn.w	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8ee 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8e0 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8f1 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0204 	mvn.w	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8c4 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8b6 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8c7 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0208 	mvn.w	r2, #8
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f89a 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f88c 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f89d 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0210 	mvn.w	r2, #16
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f870 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f862 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f873 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fc58 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b80      	cmp	r3, #128	; 0x80
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f902 	bl	8002248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f838 	bl	80020e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b20      	cmp	r3, #32
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b20      	cmp	r3, #32
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0220 	mvn.w	r2, #32
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8cc 	bl	8002234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a40      	ldr	r2, [pc, #256]	; (8002208 <TIM_Base_SetConfig+0x114>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002112:	d00f      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	; (800220c <TIM_Base_SetConfig+0x118>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00b      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <TIM_Base_SetConfig+0x11c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <TIM_Base_SetConfig+0x120>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <TIM_Base_SetConfig+0x124>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <TIM_Base_SetConfig+0x114>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d027      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2c      	ldr	r2, [pc, #176]	; (800220c <TIM_Base_SetConfig+0x118>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d023      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <TIM_Base_SetConfig+0x11c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <TIM_Base_SetConfig+0x120>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <TIM_Base_SetConfig+0x124>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d017      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a28      	ldr	r2, [pc, #160]	; (800221c <TIM_Base_SetConfig+0x128>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <TIM_Base_SetConfig+0x12c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00f      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <TIM_Base_SetConfig+0x130>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <TIM_Base_SetConfig+0x134>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <TIM_Base_SetConfig+0x138>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <TIM_Base_SetConfig+0x13c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <TIM_Base_SetConfig+0x114>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0xf8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <TIM_Base_SetConfig+0x124>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	615a      	str	r2, [r3, #20]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40010400 	.word	0x40010400
 800221c:	40014000 	.word	0x40014000
 8002220:	40014400 	.word	0x40014400
 8002224:	40014800 	.word	0x40014800
 8002228:	40001800 	.word	0x40001800
 800222c:	40001c00 	.word	0x40001c00
 8002230:	40002000 	.word	0x40002000

08002234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e03f      	b.n	80022ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fb64 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fd7b 	bl	8002d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b08a      	sub	sp, #40	; 0x28
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	d17c      	bne.n	8002410 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_UART_Transmit+0x2c>
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e075      	b.n	8002412 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_UART_Transmit+0x3e>
 8002330:	2302      	movs	r3, #2
 8002332:	e06e      	b.n	8002412 <HAL_UART_Transmit+0x11c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800234a:	f7fe fca7 	bl	8000c9c <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002364:	d108      	bne.n	8002378 <HAL_UART_Transmit+0x82>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e003      	b.n	8002380 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002388:	e02a      	b.n	80023e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 faf9 	bl	800298c <UART_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e036      	b.n	8002412 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	3302      	adds	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e007      	b.n	80023d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1cf      	bne.n	800238a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fac9 	bl	800298c <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0ba      	sub	sp, #232	; 0xe8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800245a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
 800246e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fbd3 	bl	8002c26 <UART_Receive_IT>
      return;
 8002480:	e256      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80de 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
 800248c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80d1 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
 80024b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
 80024d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d011      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800252a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0208 	orr.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 81ed 	beq.w	8002926 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800254c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
 8002558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fb5e 	bl	8002c26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_UART_IRQHandler+0x17a>
 800258e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04f      	beq.n	8002636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa66 	bl	8002a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d141      	bne.n	800262e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3314      	adds	r3, #20
 80025b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1d9      	bne.n	80025aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d013      	beq.n	8002626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	4a7d      	ldr	r2, [pc, #500]	; (80027f8 <HAL_UART_IRQHandler+0x3dc>)
 8002604:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fca4 	bl	8000f58 <HAL_DMA_Abort_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002620:	4610      	mov	r0, r2
 8002622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002624:	e00e      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f99a 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e00a      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f996 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e006      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f992 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002642:	e170      	b.n	8002926 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	bf00      	nop
    return;
 8002646:	e16e      	b.n	8002926 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 814a 	bne.w	80028e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8143 	beq.w	80028e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 813c 	beq.w	80028e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	f040 80b4 	bne.w	80027fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8140 	beq.w	800292a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026b2:	429a      	cmp	r2, r3
 80026b4:	f080 8139 	bcs.w	800292a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ca:	f000 8088 	beq.w	80027de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026dc:	e853 3f00 	ldrex	r3, [r3]
 80026e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800270a:	e841 2300 	strex	r3, r2, [r1]
 800270e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1d9      	bne.n	80026ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3314      	adds	r3, #20
 8002720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800272a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800273e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e1      	bne.n	800271a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3314      	adds	r3, #20
 800275c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800276c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3314      	adds	r3, #20
 8002776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800277a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800277c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002782:	e841 2300 	strex	r3, r2, [r1]
 8002786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e3      	bne.n	8002756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027c8:	e841 2300 	strex	r3, r2, [r1]
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e3      	bne.n	800279c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fb4d 	bl	8000e78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8c0 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f4:	e099      	b.n	800292a <HAL_UART_IRQHandler+0x50e>
 80027f6:	bf00      	nop
 80027f8:	08002b2f 	.word	0x08002b2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002804:	b29b      	uxth	r3, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 808b 	beq.w	800292e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8086 	beq.w	800292e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	330c      	adds	r3, #12
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002846:	647a      	str	r2, [r7, #68]	; 0x44
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800284c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e3      	bne.n	8002822 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	e853 3f00 	ldrex	r3, [r3]
 8002868:	623b      	str	r3, [r7, #32]
   return(result);
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3314      	adds	r3, #20
 800287a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800287e:	633a      	str	r2, [r7, #48]	; 0x30
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e3      	bne.n	800285a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	e853 3f00 	ldrex	r3, [r3]
 80028ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0310 	bic.w	r3, r3, #16
 80028b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028c4:	61fa      	str	r2, [r7, #28]
 80028c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c8:	69b9      	ldr	r1, [r7, #24]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	e841 2300 	strex	r3, r2, [r1]
 80028d0:	617b      	str	r3, [r7, #20]
   return(result);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e3      	bne.n	80028a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f848 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028e4:	e023      	b.n	800292e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_UART_IRQHandler+0x4ea>
 80028f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f929 	bl	8002b56 <UART_Transmit_IT>
    return;
 8002904:	e014      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00e      	beq.n	8002930 <HAL_UART_IRQHandler+0x514>
 8002912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f969 	bl	8002bf6 <UART_EndTransmit_IT>
    return;
 8002924:	e004      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
    return;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
      return;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
      return;
 800292e:	bf00      	nop
  }
}
 8002930:	37e8      	adds	r7, #232	; 0xe8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop

08002938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b090      	sub	sp, #64	; 0x40
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299c:	e050      	b.n	8002a40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d04c      	beq.n	8002a40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <UART_WaitOnFlagUntilTimeout+0x30>
 80029ac:	f7fe f976 	bl	8000c9c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d241      	bcs.n	8002a40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029dc:	637a      	str	r2, [r7, #52]	; 0x34
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a10:	623a      	str	r2, [r7, #32]
 8002a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	6a3a      	ldr	r2, [r7, #32]
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e00f      	b.n	8002a60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d09f      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3740      	adds	r7, #64	; 0x40
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b095      	sub	sp, #84	; 0x54
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a90:	643a      	str	r2, [r7, #64]	; 0x40
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e5      	bne.n	8002aa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d119      	bne.n	8002b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	e853 3f00 	ldrex	r3, [r3]
 8002aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 0310 	bic.w	r3, r3, #16
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b00:	61ba      	str	r2, [r7, #24]
 8002b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	6979      	ldr	r1, [r7, #20]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e5      	bne.n	8002ae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b22:	bf00      	nop
 8002b24:	3754      	adds	r7, #84	; 0x54
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff ff09 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b21      	cmp	r3, #33	; 0x21
 8002b68:	d13e      	bne.n	8002be8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	d114      	bne.n	8002b9e <UART_Transmit_IT+0x48>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d110      	bne.n	8002b9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]
 8002b9c:	e008      	b.n	8002bb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	1c59      	adds	r1, r3, #1
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6211      	str	r1, [r2, #32]
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fe8e 	bl	8002938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08c      	sub	sp, #48	; 0x30
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b22      	cmp	r3, #34	; 0x22
 8002c38:	f040 80ab 	bne.w	8002d92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c44:	d117      	bne.n	8002c76 <UART_Receive_IT+0x50>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d113      	bne.n	8002c76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	1c9a      	adds	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
 8002c74:	e026      	b.n	8002cc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c88:	d007      	beq.n	8002c9a <UART_Receive_IT+0x74>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <UART_Receive_IT+0x82>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e008      	b.n	8002cba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d15a      	bne.n	8002d8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0220 	bic.w	r2, r2, #32
 8002ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d135      	bne.n	8002d84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f023 0310 	bic.w	r3, r3, #16
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	623a      	str	r2, [r7, #32]
 8002d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d10a      	bne.n	8002d76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fdf9 	bl	8002974 <HAL_UARTEx_RxEventCallback>
 8002d82:	e002      	b.n	8002d8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fde1 	bl	800294c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e002      	b.n	8002d94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3730      	adds	r7, #48	; 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da0:	b0c0      	sub	sp, #256	; 0x100
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	68d9      	ldr	r1, [r3, #12]
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	ea40 0301 	orr.w	r3, r0, r1
 8002dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002df4:	f021 010c 	bic.w	r1, r1, #12
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e02:	430b      	orrs	r3, r1
 8002e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	6999      	ldr	r1, [r3, #24]
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	ea40 0301 	orr.w	r3, r0, r1
 8002e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b8f      	ldr	r3, [pc, #572]	; (8003068 <UART_SetConfig+0x2cc>)
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d005      	beq.n	8002e3c <UART_SetConfig+0xa0>
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <UART_SetConfig+0x2d0>)
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d104      	bne.n	8002e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e3c:	f7fe ff1a 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8002e40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e44:	e003      	b.n	8002e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e46:	f7fe ff01 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8002e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	f040 810c 	bne.w	8003074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e6e:	4622      	mov	r2, r4
 8002e70:	462b      	mov	r3, r5
 8002e72:	1891      	adds	r1, r2, r2
 8002e74:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e76:	415b      	adcs	r3, r3
 8002e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e7e:	4621      	mov	r1, r4
 8002e80:	eb12 0801 	adds.w	r8, r2, r1
 8002e84:	4629      	mov	r1, r5
 8002e86:	eb43 0901 	adc.w	r9, r3, r1
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9e:	4690      	mov	r8, r2
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	eb18 0303 	adds.w	r3, r8, r3
 8002ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002eac:	462b      	mov	r3, r5
 8002eae:	eb49 0303 	adc.w	r3, r9, r3
 8002eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eca:	460b      	mov	r3, r1
 8002ecc:	18db      	adds	r3, r3, r3
 8002ece:	653b      	str	r3, [r7, #80]	; 0x50
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	eb42 0303 	adc.w	r3, r2, r3
 8002ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ee0:	f7fd f9c6 	bl	8000270 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <UART_SetConfig+0x2d4>)
 8002eea:	fba3 2302 	umull	r2, r3, r3, r2
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	011c      	lsls	r4, r3, #4
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002efc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	1891      	adds	r1, r2, r2
 8002f0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f14:	4641      	mov	r1, r8
 8002f16:	eb12 0a01 	adds.w	sl, r2, r1
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f34:	4692      	mov	sl, r2
 8002f36:	469b      	mov	fp, r3
 8002f38:	4643      	mov	r3, r8
 8002f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f42:	464b      	mov	r3, r9
 8002f44:	eb4b 0303 	adc.w	r3, fp, r3
 8002f48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f60:	460b      	mov	r3, r1
 8002f62:	18db      	adds	r3, r3, r3
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
 8002f66:	4613      	mov	r3, r2
 8002f68:	eb42 0303 	adc.w	r3, r2, r3
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f76:	f7fd f97b 	bl	8000270 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <UART_SetConfig+0x2d4>)
 8002f82:	fba3 2301 	umull	r2, r3, r3, r1
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2264      	movs	r2, #100	; 0x64
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	1acb      	subs	r3, r1, r3
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <UART_SetConfig+0x2d4>)
 8002f98:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fa4:	441c      	add	r4, r3
 8002fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	1891      	adds	r1, r2, r2
 8002fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fc8:	4641      	mov	r1, r8
 8002fca:	1851      	adds	r1, r2, r1
 8002fcc:	6339      	str	r1, [r7, #48]	; 0x30
 8002fce:	4649      	mov	r1, r9
 8002fd0:	414b      	adcs	r3, r1
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	00cb      	lsls	r3, r1, #3
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fea:	4651      	mov	r1, sl
 8002fec:	00ca      	lsls	r2, r1, #3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	460a      	mov	r2, r1
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003014:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800301c:	460b      	mov	r3, r1
 800301e:	18db      	adds	r3, r3, r3
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
 8003022:	4613      	mov	r3, r2
 8003024:	eb42 0303 	adc.w	r3, r2, r3
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800302e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003032:	f7fd f91d 	bl	8000270 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <UART_SetConfig+0x2d4>)
 800303c:	fba3 1302 	umull	r1, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	2164      	movs	r1, #100	; 0x64
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	3332      	adds	r3, #50	; 0x32
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <UART_SetConfig+0x2d4>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	f003 0207 	and.w	r2, r3, #7
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4422      	add	r2, r4
 8003062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003064:	e105      	b.n	8003272 <UART_SetConfig+0x4d6>
 8003066:	bf00      	nop
 8003068:	40011000 	.word	0x40011000
 800306c:	40011400 	.word	0x40011400
 8003070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003078:	2200      	movs	r2, #0
 800307a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800307e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003086:	4642      	mov	r2, r8
 8003088:	464b      	mov	r3, r9
 800308a:	1891      	adds	r1, r2, r2
 800308c:	6239      	str	r1, [r7, #32]
 800308e:	415b      	adcs	r3, r3
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003096:	4641      	mov	r1, r8
 8003098:	1854      	adds	r4, r2, r1
 800309a:	4649      	mov	r1, r9
 800309c:	eb43 0501 	adc.w	r5, r3, r1
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	00eb      	lsls	r3, r5, #3
 80030aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ae:	00e2      	lsls	r2, r4, #3
 80030b0:	4614      	mov	r4, r2
 80030b2:	461d      	mov	r5, r3
 80030b4:	4643      	mov	r3, r8
 80030b6:	18e3      	adds	r3, r4, r3
 80030b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030bc:	464b      	mov	r3, r9
 80030be:	eb45 0303 	adc.w	r3, r5, r3
 80030c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030e2:	4629      	mov	r1, r5
 80030e4:	008b      	lsls	r3, r1, #2
 80030e6:	4621      	mov	r1, r4
 80030e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ec:	4621      	mov	r1, r4
 80030ee:	008a      	lsls	r2, r1, #2
 80030f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030f4:	f7fd f8bc 	bl	8000270 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4b60      	ldr	r3, [pc, #384]	; (8003280 <UART_SetConfig+0x4e4>)
 80030fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	011c      	lsls	r4, r3, #4
 8003106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310a:	2200      	movs	r2, #0
 800310c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003118:	4642      	mov	r2, r8
 800311a:	464b      	mov	r3, r9
 800311c:	1891      	adds	r1, r2, r2
 800311e:	61b9      	str	r1, [r7, #24]
 8003120:	415b      	adcs	r3, r3
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003128:	4641      	mov	r1, r8
 800312a:	1851      	adds	r1, r2, r1
 800312c:	6139      	str	r1, [r7, #16]
 800312e:	4649      	mov	r1, r9
 8003130:	414b      	adcs	r3, r1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003140:	4659      	mov	r1, fp
 8003142:	00cb      	lsls	r3, r1, #3
 8003144:	4651      	mov	r1, sl
 8003146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800314a:	4651      	mov	r1, sl
 800314c:	00ca      	lsls	r2, r1, #3
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	4603      	mov	r3, r0
 8003154:	4642      	mov	r2, r8
 8003156:	189b      	adds	r3, r3, r2
 8003158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800315c:	464b      	mov	r3, r9
 800315e:	460a      	mov	r2, r1
 8003160:	eb42 0303 	adc.w	r3, r2, r3
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	67bb      	str	r3, [r7, #120]	; 0x78
 8003172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003180:	4649      	mov	r1, r9
 8003182:	008b      	lsls	r3, r1, #2
 8003184:	4641      	mov	r1, r8
 8003186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800318a:	4641      	mov	r1, r8
 800318c:	008a      	lsls	r2, r1, #2
 800318e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003192:	f7fd f86d 	bl	8000270 <__aeabi_uldivmod>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <UART_SetConfig+0x4e4>)
 800319c:	fba3 1302 	umull	r1, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	2164      	movs	r1, #100	; 0x64
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	3332      	adds	r3, #50	; 0x32
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <UART_SetConfig+0x4e4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ba:	441c      	add	r4, r3
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	673b      	str	r3, [r7, #112]	; 0x70
 80031c4:	677a      	str	r2, [r7, #116]	; 0x74
 80031c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031ca:	4642      	mov	r2, r8
 80031cc:	464b      	mov	r3, r9
 80031ce:	1891      	adds	r1, r2, r2
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	415b      	adcs	r3, r3
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031da:	4641      	mov	r1, r8
 80031dc:	1851      	adds	r1, r2, r1
 80031de:	6039      	str	r1, [r7, #0]
 80031e0:	4649      	mov	r1, r9
 80031e2:	414b      	adcs	r3, r1
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031f2:	4659      	mov	r1, fp
 80031f4:	00cb      	lsls	r3, r1, #3
 80031f6:	4651      	mov	r1, sl
 80031f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fc:	4651      	mov	r1, sl
 80031fe:	00ca      	lsls	r2, r1, #3
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	4603      	mov	r3, r0
 8003206:	4642      	mov	r2, r8
 8003208:	189b      	adds	r3, r3, r2
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
 800320c:	464b      	mov	r3, r9
 800320e:	460a      	mov	r2, r1
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	663b      	str	r3, [r7, #96]	; 0x60
 8003220:	667a      	str	r2, [r7, #100]	; 0x64
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800322e:	4649      	mov	r1, r9
 8003230:	008b      	lsls	r3, r1, #2
 8003232:	4641      	mov	r1, r8
 8003234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003238:	4641      	mov	r1, r8
 800323a:	008a      	lsls	r2, r1, #2
 800323c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003240:	f7fd f816 	bl	8000270 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <UART_SetConfig+0x4e4>)
 800324a:	fba3 1302 	umull	r1, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2164      	movs	r1, #100	; 0x64
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	3332      	adds	r3, #50	; 0x32
 800325c:	4a08      	ldr	r2, [pc, #32]	; (8003280 <UART_SetConfig+0x4e4>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4422      	add	r2, r4
 8003270:	609a      	str	r2, [r3, #8]
}
 8003272:	bf00      	nop
 8003274:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327e:	bf00      	nop
 8003280:	51eb851f 	.word	0x51eb851f

08003284 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <SysTick_Handler+0x1c>)
 800328a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800328c:	f001 fd84 	bl	8004d98 <xTaskGetSchedulerState>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003296:	f002 fc67 	bl	8005b68 <xPortSysTickHandler>
  }
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	e000e010 	.word	0xe000e010

080032a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80032b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <vApplicationGetIdleTaskMemory+0x30>)
 80032ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000128 	.word	0x20000128
 80032d4:	200001e4 	.word	0x200001e4

080032d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a07      	ldr	r2, [pc, #28]	; (8003304 <vApplicationGetTimerTaskMemory+0x2c>)
 80032e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <vApplicationGetTimerTaskMemory+0x30>)
 80032ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f6:	601a      	str	r2, [r3, #0]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	200003e4 	.word	0x200003e4
 8003308:	200004a0 	.word	0x200004a0

0800330c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f103 0208 	add.w	r2, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f103 0208 	add.w	r2, r3, #8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f103 0208 	add.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d103      	bne.n	80033ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e00c      	b.n	80033e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3308      	adds	r3, #8
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e002      	b.n	80033dc <vListInsert+0x2e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d2f6      	bcs.n	80033d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6852      	ldr	r2, [r2, #4]
 8003440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d103      	bne.n	8003454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800349e:	f002 fad1 	bl	8005a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	3b01      	subs	r3, #1
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	22ff      	movs	r2, #255	; 0xff
 80034e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	22ff      	movs	r2, #255	; 0xff
 80034ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d114      	bne.n	800351e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01a      	beq.n	8003532 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3310      	adds	r3, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f001 fa87 	bl	8004a14 <xTaskRemoveFromEventList>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <xQueueGenericReset+0xcc>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	e009      	b.n	8003532 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3310      	adds	r3, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fef2 	bl	800330c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3324      	adds	r3, #36	; 0x24
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff feed 	bl	800330c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003532:	f002 fab7 	bl	8005aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003536:	2301      	movs	r3, #1
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	e000ed04 	.word	0xe000ed04

08003544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08e      	sub	sp, #56	; 0x38
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <xQueueGenericCreateStatic+0x52>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <xQueueGenericCreateStatic+0x56>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <xQueueGenericCreateStatic+0x58>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	623b      	str	r3, [r7, #32]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <xQueueGenericCreateStatic+0x7e>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <xQueueGenericCreateStatic+0x82>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <xQueueGenericCreateStatic+0x84>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	61fb      	str	r3, [r7, #28]
}
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035e2:	2350      	movs	r3, #80	; 0x50
 80035e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b50      	cmp	r3, #80	; 0x50
 80035ea:	d00a      	beq.n	8003602 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	61bb      	str	r3, [r7, #24]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003602:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003616:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f83f 	bl	80036a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800362c:	4618      	mov	r0, r3
 800362e:	3730      	adds	r7, #48	; 0x30
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	613b      	str	r3, [r7, #16]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	3350      	adds	r3, #80	; 0x50
 800366c:	4618      	mov	r0, r3
 800366e:	f002 fb0b 	bl	8005c88 <pvPortMalloc>
 8003672:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3350      	adds	r3, #80	; 0x50
 8003682:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800368c:	79fa      	ldrb	r2, [r7, #7]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f805 	bl	80036a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800369e:	69bb      	ldr	r3, [r7, #24]
	}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e002      	b.n	80036ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036d6:	2101      	movs	r1, #1
 80036d8:	69b8      	ldr	r0, [r7, #24]
 80036da:	f7ff fecb 	bl	8003474 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08e      	sub	sp, #56	; 0x38
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036fe:	2300      	movs	r3, #0
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <xQueueGenericSend+0x32>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <xQueueGenericSend+0x40>
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <xQueueGenericSend+0x44>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <xQueueGenericSend+0x46>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <xQueueGenericSend+0x60>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d103      	bne.n	800375e <xQueueGenericSend+0x6e>
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <xQueueGenericSend+0x72>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <xQueueGenericSend+0x74>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <xQueueGenericSend+0x8e>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	623b      	str	r3, [r7, #32]
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800377e:	f001 fb0b 	bl	8004d98 <xTaskGetSchedulerState>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <xQueueGenericSend+0x9e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <xQueueGenericSend+0xa2>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <xQueueGenericSend+0xa4>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xQueueGenericSend+0xbe>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	61fb      	str	r3, [r7, #28]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ae:	f002 f949 	bl	8005a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <xQueueGenericSend+0xd4>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d129      	bne.n	8003818 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ca:	f000 fb2f 	bl	8003e2c <prvCopyDataToQueue>
 80037ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	3324      	adds	r3, #36	; 0x24
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f919 	bl	8004a14 <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <xQueueGenericSend+0x1f8>)
 80037ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	e00a      	b.n	8003810 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003800:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <xQueueGenericSend+0x1f8>)
 8003802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003810:	f002 f948 	bl	8005aa4 <vPortExitCritical>
				return pdPASS;
 8003814:	2301      	movs	r3, #1
 8003816:	e063      	b.n	80038e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800381e:	f002 f941 	bl	8005aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003822:	2300      	movs	r3, #0
 8003824:	e05c      	b.n	80038e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f953 	bl	8004adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003836:	2301      	movs	r3, #1
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800383a:	f002 f933 	bl	8005aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800383e:	f000 febf 	bl	80045c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003842:	f002 f8ff 	bl	8005a44 <vPortEnterCritical>
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800384c:	b25b      	sxtb	r3, r3
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d103      	bne.n	800385c <xQueueGenericSend+0x16c>
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003862:	b25b      	sxtb	r3, r3
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d103      	bne.n	8003872 <xQueueGenericSend+0x182>
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003872:	f002 f917 	bl	8005aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003876:	1d3a      	adds	r2, r7, #4
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f942 	bl	8004b08 <xTaskCheckForTimeOut>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d124      	bne.n	80038d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800388a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388c:	f000 fbc6 	bl	800401c <prvIsQueueFull>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	3310      	adds	r3, #16
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 f868 	bl	8004974 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a6:	f000 fb51 	bl	8003f4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038aa:	f000 fe97 	bl	80045dc <xTaskResumeAll>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f af7c 	bne.w	80037ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <xQueueGenericSend+0x1f8>)
 80038b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	e772      	b.n	80037ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ca:	f000 fb3f 	bl	8003f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ce:	f000 fe85 	bl	80045dc <xTaskResumeAll>
 80038d2:	e76c      	b.n	80037ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038d6:	f000 fb39 	bl	8003f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038da:	f000 fe7f 	bl	80045dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3738      	adds	r7, #56	; 0x38
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b090      	sub	sp, #64	; 0x40
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <xQueueGenericSendFromISR+0x3c>
 8003920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <xQueueGenericSendFromISR+0x40>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <xQueueGenericSendFromISR+0x42>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d103      	bne.n	8003956 <xQueueGenericSendFromISR+0x6a>
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <xQueueGenericSendFromISR+0x6e>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <xQueueGenericSendFromISR+0x70>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	623b      	str	r3, [r7, #32]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003976:	f002 f947 	bl	8005c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800397a:	f3ef 8211 	mrs	r2, BASEPRI
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	61fa      	str	r2, [r7, #28]
 8003990:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003992:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <xQueueGenericSendFromISR+0xbc>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d12f      	bne.n	8003a08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039be:	f000 fa35 	bl	8003e2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d112      	bne.n	80039f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d016      	beq.n	8003a02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	3324      	adds	r3, #36	; 0x24
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 f81b 	bl	8004a14 <xTaskRemoveFromEventList>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e007      	b.n	8003a02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039f6:	3301      	adds	r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	b25a      	sxtb	r2, r3
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a02:	2301      	movs	r3, #1
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a06:	e001      	b.n	8003a0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3740      	adds	r7, #64	; 0x40
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <xQueueReceive+0x30>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	623b      	str	r3, [r7, #32]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <xQueueReceive+0x3e>
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <xQueueReceive+0x42>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <xQueueReceive+0x44>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xQueueReceive+0x5e>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61fb      	str	r3, [r7, #28]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a82:	f001 f989 	bl	8004d98 <xTaskGetSchedulerState>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <xQueueReceive+0x6e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <xQueueReceive+0x72>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <xQueueReceive+0x74>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueReceive+0x8e>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	61bb      	str	r3, [r7, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab2:	f001 ffc7 	bl	8005a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01f      	beq.n	8003b02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac6:	f000 fa1b 	bl	8003f00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1e5a      	subs	r2, r3, #1
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00f      	beq.n	8003afa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	3310      	adds	r3, #16
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 ff98 	bl	8004a14 <xTaskRemoveFromEventList>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <xQueueReceive+0x1bc>)
 8003aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003afa:	f001 ffd3 	bl	8005aa4 <vPortExitCritical>
				return pdPASS;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e069      	b.n	8003bd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b08:	f001 ffcc 	bl	8005aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e062      	b.n	8003bd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b16:	f107 0310 	add.w	r3, r7, #16
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 ffde 	bl	8004adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b24:	f001 ffbe 	bl	8005aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b28:	f000 fd4a 	bl	80045c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2c:	f001 ff8a 	bl	8005a44 <vPortEnterCritical>
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d103      	bne.n	8003b46 <xQueueReceive+0x122>
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d103      	bne.n	8003b5c <xQueueReceive+0x138>
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5c:	f001 ffa2 	bl	8005aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b60:	1d3a      	adds	r2, r7, #4
 8003b62:	f107 0310 	add.w	r3, r7, #16
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 ffcd 	bl	8004b08 <xTaskCheckForTimeOut>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d123      	bne.n	8003bbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b76:	f000 fa3b 	bl	8003ff0 <prvIsQueueEmpty>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d017      	beq.n	8003bb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	3324      	adds	r3, #36	; 0x24
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fef3 	bl	8004974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b90:	f000 f9dc 	bl	8003f4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b94:	f000 fd22 	bl	80045dc <xTaskResumeAll>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d189      	bne.n	8003ab2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <xQueueReceive+0x1bc>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	e780      	b.n	8003ab2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb2:	f000 f9cb 	bl	8003f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb6:	f000 fd11 	bl	80045dc <xTaskResumeAll>
 8003bba:	e77a      	b.n	8003ab2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bbe:	f000 f9c5 	bl	8003f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc2:	f000 fd0b 	bl	80045dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc8:	f000 fa12 	bl	8003ff0 <prvIsQueueEmpty>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f43f af6f 	beq.w	8003ab2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3730      	adds	r7, #48	; 0x30
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08e      	sub	sp, #56	; 0x38
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	623b      	str	r3, [r7, #32]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	61fb      	str	r3, [r7, #28]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c34:	f001 f8b0 	bl	8004d98 <xTaskGetSchedulerState>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <xQueueSemaphoreTake+0x60>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <xQueueSemaphoreTake+0x64>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <xQueueSemaphoreTake+0x66>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	61bb      	str	r3, [r7, #24]
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c64:	f001 feee 	bl	8005a44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d024      	beq.n	8003cbe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	1e5a      	subs	r2, r3, #1
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c84:	f001 f9fe 	bl	8005084 <pvTaskIncrementMutexHeldCount>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00f      	beq.n	8003cb6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	3310      	adds	r3, #16
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 feba 	bl	8004a14 <xTaskRemoveFromEventList>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ca6:	4b54      	ldr	r3, [pc, #336]	; (8003df8 <xQueueSemaphoreTake+0x214>)
 8003ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cb6:	f001 fef5 	bl	8005aa4 <vPortExitCritical>
				return pdPASS;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e097      	b.n	8003dee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d111      	bne.n	8003ce8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	617b      	str	r3, [r7, #20]
}
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ce0:	f001 fee0 	bl	8005aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e082      	b.n	8003dee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cee:	f107 030c 	add.w	r3, r7, #12
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fef2 	bl	8004adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cfc:	f001 fed2 	bl	8005aa4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d00:	f000 fc5e 	bl	80045c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d04:	f001 fe9e 	bl	8005a44 <vPortEnterCritical>
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d103      	bne.n	8003d1e <xQueueSemaphoreTake+0x13a>
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d103      	bne.n	8003d34 <xQueueSemaphoreTake+0x150>
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d34:	f001 feb6 	bl	8005aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d38:	463a      	mov	r2, r7
 8003d3a:	f107 030c 	add.w	r3, r7, #12
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fee1 	bl	8004b08 <xTaskCheckForTimeOut>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d132      	bne.n	8003db2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d4e:	f000 f94f 	bl	8003ff0 <prvIsQueueEmpty>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d026      	beq.n	8003da6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003d60:	f001 fe70 	bl	8005a44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 f833 	bl	8004dd4 <xTaskPriorityInherit>
 8003d6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d70:	f001 fe98 	bl	8005aa4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	3324      	adds	r3, #36	; 0x24
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fdf9 	bl	8004974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d84:	f000 f8e2 	bl	8003f4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d88:	f000 fc28 	bl	80045dc <xTaskResumeAll>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f47f af68 	bne.w	8003c64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003d94:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <xQueueSemaphoreTake+0x214>)
 8003d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	e75e      	b.n	8003c64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003da8:	f000 f8d0 	bl	8003f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dac:	f000 fc16 	bl	80045dc <xTaskResumeAll>
 8003db0:	e758      	b.n	8003c64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003db2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003db4:	f000 f8ca 	bl	8003f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003db8:	f000 fc10 	bl	80045dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dbe:	f000 f917 	bl	8003ff0 <prvIsQueueEmpty>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f43f af4d 	beq.w	8003c64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003dd0:	f001 fe38 	bl	8005a44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003dd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dd6:	f000 f811 	bl	8003dfc <prvGetDisinheritPriorityAfterTimeout>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 f8cc 	bl	8004f80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003de8:	f001 fe5c 	bl	8005aa4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3738      	adds	r7, #56	; 0x38
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d006      	beq.n	8003e1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e001      	b.n	8003e1e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d14d      	bne.n	8003eee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 f824 	bl	8004ea4 <xTaskPriorityDisinherit>
 8003e5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	e043      	b.n	8003eee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d119      	bne.n	8003ea0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6858      	ldr	r0, [r3, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	461a      	mov	r2, r3
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	f002 f91c 	bl	80060b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d32b      	bcc.n	8003eee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	e026      	b.n	8003eee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68d8      	ldr	r0, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	f002 f902 	bl	80060b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	425b      	negs	r3, r3
 8003eba:	441a      	add	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d105      	bne.n	8003eee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ef6:	697b      	ldr	r3, [r7, #20]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	441a      	add	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d303      	bcc.n	8003f34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68d9      	ldr	r1, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	f002 f8b8 	bl	80060b4 <memcpy>
	}
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f54:	f001 fd76 	bl	8005a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f60:	e011      	b.n	8003f86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d012      	beq.n	8003f90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	; 0x24
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fd50 	bl	8004a14 <xTaskRemoveFromEventList>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f7a:	f000 fe27 	bl	8004bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dce9      	bgt.n	8003f62 <prvUnlockQueue+0x16>
 8003f8e:	e000      	b.n	8003f92 <prvUnlockQueue+0x46>
					break;
 8003f90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	22ff      	movs	r2, #255	; 0xff
 8003f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f9a:	f001 fd83 	bl	8005aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f9e:	f001 fd51 	bl	8005a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003faa:	e011      	b.n	8003fd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d012      	beq.n	8003fda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fd2b 	bl	8004a14 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fc4:	f000 fe02 	bl	8004bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dce9      	bgt.n	8003fac <prvUnlockQueue+0x60>
 8003fd8:	e000      	b.n	8003fdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	22ff      	movs	r2, #255	; 0xff
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fe4:	f001 fd5e 	bl	8005aa4 <vPortExitCritical>
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ff8:	f001 fd24 	bl	8005a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e001      	b.n	800400e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800400e:	f001 fd49 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004024:	f001 fd0e 	bl	8005a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	429a      	cmp	r2, r3
 8004032:	d102      	bne.n	800403a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e001      	b.n	800403e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800403e:	f001 fd31 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e014      	b.n	8004086 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800405c:	4a0f      	ldr	r2, [pc, #60]	; (800409c <vQueueAddToRegistry+0x50>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004068:	490c      	ldr	r1, [pc, #48]	; (800409c <vQueueAddToRegistry+0x50>)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <vQueueAddToRegistry+0x50>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800407e:	e006      	b.n	800408e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b07      	cmp	r3, #7
 800408a:	d9e7      	bls.n	800405c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	200008a0 	.word	0x200008a0

080040a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040b0:	f001 fcc8 	bl	8005a44 <vPortEnterCritical>
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d103      	bne.n	80040ca <vQueueWaitForMessageRestricted+0x2a>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d103      	bne.n	80040e0 <vQueueWaitForMessageRestricted+0x40>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e0:	f001 fce0 	bl	8005aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3324      	adds	r3, #36	; 0x24
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fc61 	bl	80049bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f7ff ff26 	bl	8003f4c <prvUnlockQueue>
	}
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	; 0x38
 800410c:	af04      	add	r7, sp, #16
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xTaskCreateStatic+0x2a>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	623b      	str	r3, [r7, #32]
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xTaskCreateStatic+0x46>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	61fb      	str	r3, [r7, #28]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800414e:	23bc      	movs	r3, #188	; 0xbc
 8004150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2bbc      	cmp	r3, #188	; 0xbc
 8004156:	d00a      	beq.n	800416e <xTaskCreateStatic+0x66>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	61bb      	str	r3, [r7, #24]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800416e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01e      	beq.n	80041b4 <xTaskCreateStatic+0xac>
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2202      	movs	r2, #2
 800418a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800418e:	2300      	movs	r3, #0
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f850 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ae:	f000 f8f3 	bl	8004398 <prvAddNewTaskToReadyList>
 80041b2:	e001      	b.n	80041b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041b8:	697b      	ldr	r3, [r7, #20]
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08c      	sub	sp, #48	; 0x30
 80041c6:	af04      	add	r7, sp, #16
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 fd56 	bl	8005c88 <pvPortMalloc>
 80041dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041e4:	20bc      	movs	r0, #188	; 0xbc
 80041e6:	f001 fd4f 	bl	8005c88 <pvPortMalloc>
 80041ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
 80041f8:	e005      	b.n	8004206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f001 fe10 	bl	8005e20 <vPortFree>
 8004200:	e001      	b.n	8004206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d017      	beq.n	800423c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	2300      	movs	r3, #0
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f80e 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004230:	69f8      	ldr	r0, [r7, #28]
 8004232:	f000 f8b1 	bl	8004398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e002      	b.n	8004242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004242:	69bb      	ldr	r3, [r7, #24]
	}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	461a      	mov	r2, r3
 8004264:	21a5      	movs	r1, #165	; 0xa5
 8004266:	f001 ff33 	bl	80060d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004274:	3b01      	subs	r3, #1
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f023 0307 	bic.w	r3, r3, #7
 8004282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	617b      	str	r3, [r7, #20]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01f      	beq.n	80042ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	e012      	b.n	80042d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	7819      	ldrb	r1, [r3, #0]
 80042b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	3334      	adds	r3, #52	; 0x34
 80042c0:	460a      	mov	r2, r1
 80042c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	2b0f      	cmp	r3, #15
 80042da:	d9e9      	bls.n	80042b0 <prvInitialiseNewTask+0x64>
 80042dc:	e000      	b.n	80042e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80042de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e8:	e003      	b.n	80042f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	2b37      	cmp	r3, #55	; 0x37
 80042f6:	d901      	bls.n	80042fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042f8:	2337      	movs	r3, #55	; 0x37
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2200      	movs	r2, #0
 800430c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	3304      	adds	r3, #4
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff f81a 	bl	800334c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	3318      	adds	r3, #24
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff f815 	bl	800334c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	3354      	adds	r3, #84	; 0x54
 800434c:	2260      	movs	r2, #96	; 0x60
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f001 febd 	bl	80060d0 <memset>
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	4a0c      	ldr	r2, [pc, #48]	; (800438c <prvInitialiseNewTask+0x140>)
 800435a:	659a      	str	r2, [r3, #88]	; 0x58
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <prvInitialiseNewTask+0x144>)
 8004360:	65da      	str	r2, [r3, #92]	; 0x5c
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <prvInitialiseNewTask+0x148>)
 8004366:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	69b8      	ldr	r0, [r7, #24]
 800436e:	f001 fa3f 	bl	80057f0 <pxPortInitialiseStack>
 8004372:	4602      	mov	r2, r0
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004382:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004384:	bf00      	nop
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	08006b5c 	.word	0x08006b5c
 8004390:	08006b7c 	.word	0x08006b7c
 8004394:	08006b3c 	.word	0x08006b3c

08004398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043a0:	f001 fb50 	bl	8005a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043a4:	4b2d      	ldr	r3, [pc, #180]	; (800445c <prvAddNewTaskToReadyList+0xc4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	4a2c      	ldr	r2, [pc, #176]	; (800445c <prvAddNewTaskToReadyList+0xc4>)
 80043ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ae:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <prvAddNewTaskToReadyList+0xc8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043b6:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <prvAddNewTaskToReadyList+0xc8>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043bc:	4b27      	ldr	r3, [pc, #156]	; (800445c <prvAddNewTaskToReadyList+0xc4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d110      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043c4:	f000 fc26 	bl	8004c14 <prvInitialiseTaskLists>
 80043c8:	e00d      	b.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <prvAddNewTaskToReadyList+0xcc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <prvAddNewTaskToReadyList+0xc8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d802      	bhi.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043e0:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <prvAddNewTaskToReadyList+0xc8>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <prvAddNewTaskToReadyList+0xd0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3301      	adds	r3, #1
 80043ec:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <prvAddNewTaskToReadyList+0xd0>)
 80043ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043f0:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <prvAddNewTaskToReadyList+0xd0>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <prvAddNewTaskToReadyList+0xd4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <prvAddNewTaskToReadyList+0x74>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a18      	ldr	r2, [pc, #96]	; (800446c <prvAddNewTaskToReadyList+0xd4>)
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <prvAddNewTaskToReadyList+0xd8>)
 800441a:	441a      	add	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7fe ff9f 	bl	8003366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004428:	f001 fb3c 	bl	8005aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800442c:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <prvAddNewTaskToReadyList+0xcc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00e      	beq.n	8004452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <prvAddNewTaskToReadyList+0xc8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	429a      	cmp	r2, r3
 8004440:	d207      	bcs.n	8004452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <prvAddNewTaskToReadyList+0xdc>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000db4 	.word	0x20000db4
 8004460:	200008e0 	.word	0x200008e0
 8004464:	20000dc0 	.word	0x20000dc0
 8004468:	20000dd0 	.word	0x20000dd0
 800446c:	20000dbc 	.word	0x20000dbc
 8004470:	200008e4 	.word	0x200008e4
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d017      	beq.n	80044ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <vTaskDelay+0x60>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <vTaskDelay+0x30>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60bb      	str	r3, [r7, #8]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044a8:	f000 f88a 	bl	80045c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044ac:	2100      	movs	r1, #0
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fdfc 	bl	80050ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044b4:	f000 f892 	bl	80045dc <xTaskResumeAll>
 80044b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <vTaskDelay+0x64>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000ddc 	.word	0x20000ddc
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ee:	463a      	mov	r2, r7
 80044f0:	1d39      	adds	r1, r7, #4
 80044f2:	f107 0308 	add.w	r3, r7, #8
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fed4 	bl	80032a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	9202      	str	r2, [sp, #8]
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	2300      	movs	r3, #0
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2300      	movs	r3, #0
 800450c:	460a      	mov	r2, r1
 800450e:	4924      	ldr	r1, [pc, #144]	; (80045a0 <vTaskStartScheduler+0xc0>)
 8004510:	4824      	ldr	r0, [pc, #144]	; (80045a4 <vTaskStartScheduler+0xc4>)
 8004512:	f7ff fdf9 	bl	8004108 <xTaskCreateStatic>
 8004516:	4603      	mov	r3, r0
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <vTaskStartScheduler+0xc8>)
 800451a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <vTaskStartScheduler+0xc8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004524:	2301      	movs	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e001      	b.n	800452e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d102      	bne.n	800453a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004534:	f000 fe0e 	bl	8005154 <xTimerCreateTimerTask>
 8004538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d11b      	bne.n	8004578 <vTaskStartScheduler+0x98>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	613b      	str	r3, [r7, #16]
}
 8004552:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004554:	4b15      	ldr	r3, [pc, #84]	; (80045ac <vTaskStartScheduler+0xcc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3354      	adds	r3, #84	; 0x54
 800455a:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <vTaskStartScheduler+0xd0>)
 800455c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <vTaskStartScheduler+0xd4>)
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <vTaskStartScheduler+0xd8>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800456c:	4b13      	ldr	r3, [pc, #76]	; (80045bc <vTaskStartScheduler+0xdc>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004572:	f001 f9c5 	bl	8005900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004576:	e00e      	b.n	8004596 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d10a      	bne.n	8004596 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60fb      	str	r3, [r7, #12]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <vTaskStartScheduler+0xb4>
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	08006b0c 	.word	0x08006b0c
 80045a4:	08004be5 	.word	0x08004be5
 80045a8:	20000dd8 	.word	0x20000dd8
 80045ac:	200008e0 	.word	0x200008e0
 80045b0:	20000010 	.word	0x20000010
 80045b4:	20000dd4 	.word	0x20000dd4
 80045b8:	20000dc0 	.word	0x20000dc0
 80045bc:	20000db8 	.word	0x20000db8

080045c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <vTaskSuspendAll+0x18>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a03      	ldr	r2, [pc, #12]	; (80045d8 <vTaskSuspendAll+0x18>)
 80045cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20000ddc 	.word	0x20000ddc

080045dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ea:	4b42      	ldr	r3, [pc, #264]	; (80046f4 <xTaskResumeAll+0x118>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <xTaskResumeAll+0x2c>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	603b      	str	r3, [r7, #0]
}
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004608:	f001 fa1c 	bl	8005a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800460c:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <xTaskResumeAll+0x118>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3b01      	subs	r3, #1
 8004612:	4a38      	ldr	r2, [pc, #224]	; (80046f4 <xTaskResumeAll+0x118>)
 8004614:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <xTaskResumeAll+0x118>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d162      	bne.n	80046e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <xTaskResumeAll+0x11c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d05e      	beq.n	80046e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004626:	e02f      	b.n	8004688 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004628:	4b34      	ldr	r3, [pc, #208]	; (80046fc <xTaskResumeAll+0x120>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3318      	adds	r3, #24
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fef3 	bl	8003420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe feee 	bl	8003420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <xTaskResumeAll+0x124>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d903      	bls.n	8004658 <xTaskResumeAll+0x7c>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <xTaskResumeAll+0x124>)
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <xTaskResumeAll+0x128>)
 8004666:	441a      	add	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f7fe fe79 	bl	8003366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	4b23      	ldr	r3, [pc, #140]	; (8004708 <xTaskResumeAll+0x12c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004682:	4b22      	ldr	r3, [pc, #136]	; (800470c <xTaskResumeAll+0x130>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004688:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <xTaskResumeAll+0x120>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1cb      	bne.n	8004628 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004696:	f000 fb5f 	bl	8004d58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800469a:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <xTaskResumeAll+0x134>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046a6:	f000 f847 	bl	8004738 <xTaskIncrementTick>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046b0:	4b16      	ldr	r3, [pc, #88]	; (800470c <xTaskResumeAll+0x130>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f1      	bne.n	80046a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <xTaskResumeAll+0x134>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046c8:	4b10      	ldr	r3, [pc, #64]	; (800470c <xTaskResumeAll+0x130>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <xTaskResumeAll+0x138>)
 80046d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046e4:	f001 f9de 	bl	8005aa4 <vPortExitCritical>

	return xAlreadyYielded;
 80046e8:	68bb      	ldr	r3, [r7, #8]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000ddc 	.word	0x20000ddc
 80046f8:	20000db4 	.word	0x20000db4
 80046fc:	20000d74 	.word	0x20000d74
 8004700:	20000dbc 	.word	0x20000dbc
 8004704:	200008e4 	.word	0x200008e4
 8004708:	200008e0 	.word	0x200008e0
 800470c:	20000dc8 	.word	0x20000dc8
 8004710:	20000dc4 	.word	0x20000dc4
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <xTaskGetTickCount+0x1c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004724:	687b      	ldr	r3, [r7, #4]
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000db8 	.word	0x20000db8

08004738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004742:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <xTaskIncrementTick+0x148>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 808f 	bne.w	800486a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800474c:	4b4d      	ldr	r3, [pc, #308]	; (8004884 <xTaskIncrementTick+0x14c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004754:	4a4b      	ldr	r2, [pc, #300]	; (8004884 <xTaskIncrementTick+0x14c>)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d120      	bne.n	80047a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004760:	4b49      	ldr	r3, [pc, #292]	; (8004888 <xTaskIncrementTick+0x150>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <xTaskIncrementTick+0x48>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	603b      	str	r3, [r7, #0]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <xTaskIncrementTick+0x46>
 8004780:	4b41      	ldr	r3, [pc, #260]	; (8004888 <xTaskIncrementTick+0x150>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	4b41      	ldr	r3, [pc, #260]	; (800488c <xTaskIncrementTick+0x154>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3f      	ldr	r2, [pc, #252]	; (8004888 <xTaskIncrementTick+0x150>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4a3f      	ldr	r2, [pc, #252]	; (800488c <xTaskIncrementTick+0x154>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <xTaskIncrementTick+0x158>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	4a3d      	ldr	r2, [pc, #244]	; (8004890 <xTaskIncrementTick+0x158>)
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	f000 fadb 	bl	8004d58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047a2:	4b3c      	ldr	r3, [pc, #240]	; (8004894 <xTaskIncrementTick+0x15c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d349      	bcc.n	8004840 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <xTaskIncrementTick+0x150>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b6:	4b37      	ldr	r3, [pc, #220]	; (8004894 <xTaskIncrementTick+0x15c>)
 80047b8:	f04f 32ff 	mov.w	r2, #4294967295
 80047bc:	601a      	str	r2, [r3, #0]
					break;
 80047be:	e03f      	b.n	8004840 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c0:	4b31      	ldr	r3, [pc, #196]	; (8004888 <xTaskIncrementTick+0x150>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d203      	bcs.n	80047e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047d8:	4a2e      	ldr	r2, [pc, #184]	; (8004894 <xTaskIncrementTick+0x15c>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047de:	e02f      	b.n	8004840 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fe1b 	bl	8003420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3318      	adds	r3, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fe12 	bl	8003420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	4b25      	ldr	r3, [pc, #148]	; (8004898 <xTaskIncrementTick+0x160>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d903      	bls.n	8004810 <xTaskIncrementTick+0xd8>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4a22      	ldr	r2, [pc, #136]	; (8004898 <xTaskIncrementTick+0x160>)
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4a1f      	ldr	r2, [pc, #124]	; (800489c <xTaskIncrementTick+0x164>)
 800481e:	441a      	add	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fe fd9d 	bl	8003366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <xTaskIncrementTick+0x168>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	429a      	cmp	r2, r3
 8004838:	d3b8      	bcc.n	80047ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800483a:	2301      	movs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800483e:	e7b5      	b.n	80047ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <xTaskIncrementTick+0x168>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004846:	4915      	ldr	r1, [pc, #84]	; (800489c <xTaskIncrementTick+0x164>)
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d901      	bls.n	800485c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <xTaskIncrementTick+0x16c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e004      	b.n	8004874 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <xTaskIncrementTick+0x170>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a0d      	ldr	r2, [pc, #52]	; (80048a8 <xTaskIncrementTick+0x170>)
 8004872:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004874:	697b      	ldr	r3, [r7, #20]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000ddc 	.word	0x20000ddc
 8004884:	20000db8 	.word	0x20000db8
 8004888:	20000d6c 	.word	0x20000d6c
 800488c:	20000d70 	.word	0x20000d70
 8004890:	20000dcc 	.word	0x20000dcc
 8004894:	20000dd4 	.word	0x20000dd4
 8004898:	20000dbc 	.word	0x20000dbc
 800489c:	200008e4 	.word	0x200008e4
 80048a0:	200008e0 	.word	0x200008e0
 80048a4:	20000dc8 	.word	0x20000dc8
 80048a8:	20000dc4 	.word	0x20000dc4

080048ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048b2:	4b2a      	ldr	r3, [pc, #168]	; (800495c <vTaskSwitchContext+0xb0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048ba:	4b29      	ldr	r3, [pc, #164]	; (8004960 <vTaskSwitchContext+0xb4>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048c0:	e046      	b.n	8004950 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80048c2:	4b27      	ldr	r3, [pc, #156]	; (8004960 <vTaskSwitchContext+0xb4>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c8:	4b26      	ldr	r3, [pc, #152]	; (8004964 <vTaskSwitchContext+0xb8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e010      	b.n	80048f2 <vTaskSwitchContext+0x46>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <vTaskSwitchContext+0x40>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	607b      	str	r3, [r7, #4]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <vTaskSwitchContext+0x3e>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	491d      	ldr	r1, [pc, #116]	; (8004968 <vTaskSwitchContext+0xbc>)
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0e4      	beq.n	80048d0 <vTaskSwitchContext+0x24>
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4a15      	ldr	r2, [pc, #84]	; (8004968 <vTaskSwitchContext+0xbc>)
 8004912:	4413      	add	r3, r2
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3308      	adds	r3, #8
 8004928:	429a      	cmp	r2, r3
 800492a:	d104      	bne.n	8004936 <vTaskSwitchContext+0x8a>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a0b      	ldr	r2, [pc, #44]	; (800496c <vTaskSwitchContext+0xc0>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4a08      	ldr	r2, [pc, #32]	; (8004964 <vTaskSwitchContext+0xb8>)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <vTaskSwitchContext+0xc0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3354      	adds	r3, #84	; 0x54
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <vTaskSwitchContext+0xc4>)
 800494e:	6013      	str	r3, [r2, #0]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000ddc 	.word	0x20000ddc
 8004960:	20000dc8 	.word	0x20000dc8
 8004964:	20000dbc 	.word	0x20000dbc
 8004968:	200008e4 	.word	0x200008e4
 800496c:	200008e0 	.word	0x200008e0
 8004970:	20000010 	.word	0x20000010

08004974 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60fb      	str	r3, [r7, #12]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <vTaskPlaceOnEventList+0x44>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3318      	adds	r3, #24
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fe fd03 	bl	80033ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049a8:	2101      	movs	r1, #1
 80049aa:	6838      	ldr	r0, [r7, #0]
 80049ac:	f000 fb7e 	bl	80050ac <prvAddCurrentTaskToDelayedList>
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	200008e0 	.word	0x200008e0

080049bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	617b      	str	r3, [r7, #20]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049e4:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <vTaskPlaceOnEventListRestricted+0x54>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3318      	adds	r3, #24
 80049ea:	4619      	mov	r1, r3
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7fe fcba 	bl	8003366 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295
 80049fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	68b8      	ldr	r0, [r7, #8]
 8004a02:	f000 fb53 	bl	80050ac <prvAddCurrentTaskToDelayedList>
	}
 8004a06:	bf00      	nop
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200008e0 	.word	0x200008e0

08004a14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60fb      	str	r3, [r7, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3318      	adds	r3, #24
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fe fceb 	bl	8003420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <xTaskRemoveFromEventList+0xb0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fce2 	bl	8003420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <xTaskRemoveFromEventList+0xb4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d903      	bls.n	8004a70 <xTaskRemoveFromEventList+0x5c>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <xTaskRemoveFromEventList+0xb4>)
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4a13      	ldr	r2, [pc, #76]	; (8004acc <xTaskRemoveFromEventList+0xb8>)
 8004a7e:	441a      	add	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f7fe fc6d 	bl	8003366 <vListInsertEnd>
 8004a8c:	e005      	b.n	8004a9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3318      	adds	r3, #24
 8004a92:	4619      	mov	r1, r3
 8004a94:	480e      	ldr	r0, [pc, #56]	; (8004ad0 <xTaskRemoveFromEventList+0xbc>)
 8004a96:	f7fe fc66 	bl	8003366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <xTaskRemoveFromEventList+0xc0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d905      	bls.n	8004ab4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <xTaskRemoveFromEventList+0xc4>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e001      	b.n	8004ab8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ab8:	697b      	ldr	r3, [r7, #20]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000ddc 	.word	0x20000ddc
 8004ac8:	20000dbc 	.word	0x20000dbc
 8004acc:	200008e4 	.word	0x200008e4
 8004ad0:	20000d74 	.word	0x20000d74
 8004ad4:	200008e0 	.word	0x200008e0
 8004ad8:	20000dc8 	.word	0x20000dc8

08004adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <vTaskInternalSetTimeOutState+0x24>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <vTaskInternalSetTimeOutState+0x28>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	605a      	str	r2, [r3, #4]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000dcc 	.word	0x20000dcc
 8004b04:	20000db8 	.word	0x20000db8

08004b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	613b      	str	r3, [r7, #16]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	60fb      	str	r3, [r7, #12]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b4a:	f000 ff7b 	bl	8005a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <xTaskCheckForTimeOut+0xbc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d102      	bne.n	8004b6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e023      	b.n	8004bb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <xTaskCheckForTimeOut+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d007      	beq.n	8004b8a <xTaskCheckForTimeOut+0x82>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e015      	b.n	8004bb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d20b      	bcs.n	8004bac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff9b 	bl	8004adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e004      	b.n	8004bb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bb6:	f000 ff75 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 8004bba:	69fb      	ldr	r3, [r7, #28]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000db8 	.word	0x20000db8
 8004bc8:	20000dcc 	.word	0x20000dcc

08004bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <vTaskMissedYield+0x14>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000dc8 	.word	0x20000dc8

08004be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bec:	f000 f852 	bl	8004c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <prvIdleTask+0x28>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d9f9      	bls.n	8004bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <prvIdleTask+0x2c>)
 8004bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c08:	e7f0      	b.n	8004bec <prvIdleTask+0x8>
 8004c0a:	bf00      	nop
 8004c0c:	200008e4 	.word	0x200008e4
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	e00c      	b.n	8004c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <prvInitialiseTaskLists+0x60>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fb6c 	bl	800330c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3301      	adds	r3, #1
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b37      	cmp	r3, #55	; 0x37
 8004c3e:	d9ef      	bls.n	8004c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c40:	480d      	ldr	r0, [pc, #52]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c42:	f7fe fb63 	bl	800330c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c46:	480d      	ldr	r0, [pc, #52]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c48:	f7fe fb60 	bl	800330c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c4c:	480c      	ldr	r0, [pc, #48]	; (8004c80 <prvInitialiseTaskLists+0x6c>)
 8004c4e:	f7fe fb5d 	bl	800330c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c52:	480c      	ldr	r0, [pc, #48]	; (8004c84 <prvInitialiseTaskLists+0x70>)
 8004c54:	f7fe fb5a 	bl	800330c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c58:	480b      	ldr	r0, [pc, #44]	; (8004c88 <prvInitialiseTaskLists+0x74>)
 8004c5a:	f7fe fb57 	bl	800330c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <prvInitialiseTaskLists+0x78>)
 8004c60:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvInitialiseTaskLists+0x7c>)
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200008e4 	.word	0x200008e4
 8004c78:	20000d44 	.word	0x20000d44
 8004c7c:	20000d58 	.word	0x20000d58
 8004c80:	20000d74 	.word	0x20000d74
 8004c84:	20000d88 	.word	0x20000d88
 8004c88:	20000da0 	.word	0x20000da0
 8004c8c:	20000d6c 	.word	0x20000d6c
 8004c90:	20000d70 	.word	0x20000d70

08004c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c9a:	e019      	b.n	8004cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c9c:	f000 fed2 	bl	8005a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <prvCheckTasksWaitingTermination+0x50>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fbb7 	bl	8003420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <prvCheckTasksWaitingTermination+0x58>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <prvCheckTasksWaitingTermination+0x58>)
 8004cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cc6:	f000 feed 	bl	8005aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f810 	bl	8004cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <prvCheckTasksWaitingTermination+0x58>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e1      	bne.n	8004c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000d88 	.word	0x20000d88
 8004ce8:	20000db4 	.word	0x20000db4
 8004cec:	20000d9c 	.word	0x20000d9c

08004cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3354      	adds	r3, #84	; 0x54
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fa91 	bl	8006224 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d108      	bne.n	8004d1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 f885 	bl	8005e20 <vPortFree>
				vPortFree( pxTCB );
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 f882 	bl	8005e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d1c:	e018      	b.n	8004d50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d103      	bne.n	8004d30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f001 f879 	bl	8005e20 <vPortFree>
	}
 8004d2e:	e00f      	b.n	8004d50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d00a      	beq.n	8004d50 <prvDeleteTCB+0x60>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	60fb      	str	r3, [r7, #12]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <prvDeleteTCB+0x5e>
	}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <prvResetNextTaskUnblockTime+0x38>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <prvResetNextTaskUnblockTime+0x3c>)
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d70:	e008      	b.n	8004d84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <prvResetNextTaskUnblockTime+0x38>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <prvResetNextTaskUnblockTime+0x3c>)
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000d6c 	.word	0x20000d6c
 8004d94:	20000dd4 	.word	0x20000dd4

08004d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <xTaskGetSchedulerState+0x34>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004da6:	2301      	movs	r3, #1
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	e008      	b.n	8004dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dac:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <xTaskGetSchedulerState+0x38>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004db4:	2302      	movs	r3, #2
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	e001      	b.n	8004dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dbe:	687b      	ldr	r3, [r7, #4]
	}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000dc0 	.word	0x20000dc0
 8004dd0:	20000ddc 	.word	0x20000ddc

08004dd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d051      	beq.n	8004e8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <xTaskPriorityInherit+0xc4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d241      	bcs.n	8004e7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	db06      	blt.n	8004e0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <xTaskPriorityInherit+0xc4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6959      	ldr	r1, [r3, #20]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <xTaskPriorityInherit+0xc8>)
 8004e20:	4413      	add	r3, r2
 8004e22:	4299      	cmp	r1, r3
 8004e24:	d122      	bne.n	8004e6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe faf8 	bl	8003420 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <xTaskPriorityInherit+0xc4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <xTaskPriorityInherit+0xcc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d903      	bls.n	8004e4e <xTaskPriorityInherit+0x7a>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <xTaskPriorityInherit+0xcc>)
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4a10      	ldr	r2, [pc, #64]	; (8004e9c <xTaskPriorityInherit+0xc8>)
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f7fe fa7e 	bl	8003366 <vListInsertEnd>
 8004e6a:	e004      	b.n	8004e76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <xTaskPriorityInherit+0xc4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e76:	2301      	movs	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e008      	b.n	8004e8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <xTaskPriorityInherit+0xc4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d201      	bcs.n	8004e8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200008e0 	.word	0x200008e0
 8004e9c:	200008e4 	.word	0x200008e4
 8004ea0:	20000dbc 	.word	0x20000dbc

08004ea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d056      	beq.n	8004f68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <xTaskPriorityDisinherit+0xd0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d00a      	beq.n	8004eda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60fb      	str	r3, [r7, #12]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60bb      	str	r3, [r7, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d02c      	beq.n	8004f68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d128      	bne.n	8004f68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fa80 	bl	8003420 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <xTaskPriorityDisinherit+0xd4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d903      	bls.n	8004f48 <xTaskPriorityDisinherit+0xa4>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <xTaskPriorityDisinherit+0xd4>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <xTaskPriorityDisinherit+0xd8>)
 8004f56:	441a      	add	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fe fa01 	bl	8003366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f68:	697b      	ldr	r3, [r7, #20]
	}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	200008e0 	.word	0x200008e0
 8004f78:	20000dbc 	.word	0x20000dbc
 8004f7c:	200008e4 	.word	0x200008e4

08004f80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d06a      	beq.n	800506e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d902      	bls.n	8004fc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e002      	b.n	8004fcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d04b      	beq.n	800506e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d146      	bne.n	800506e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d10a      	bne.n	8005000 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	60bb      	str	r3, [r7, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db04      	blt.n	800501e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	6959      	ldr	r1, [r3, #20]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800502e:	4413      	add	r3, r2
 8005030:	4299      	cmp	r1, r3
 8005032:	d11c      	bne.n	800506e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	3304      	adds	r3, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe f9f1 	bl	8003420 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005042:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d903      	bls.n	8005052 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	4a0c      	ldr	r2, [pc, #48]	; (8005080 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005060:	441a      	add	r2, r3
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fe f97c 	bl	8003366 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800506e:	bf00      	nop
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	200008e0 	.word	0x200008e0
 800507c:	200008e4 	.word	0x200008e4
 8005080:	20000dbc 	.word	0x20000dbc

08005084 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005096:	3201      	adds	r2, #1
 8005098:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800509a:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800509c:	681b      	ldr	r3, [r3, #0]
	}
 800509e:	4618      	mov	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	200008e0 	.word	0x200008e0

080050ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <prvAddCurrentTaskToDelayedList+0x90>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <prvAddCurrentTaskToDelayedList+0x94>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe f9ac 	bl	8003420 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d10a      	bne.n	80050e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4819      	ldr	r0, [pc, #100]	; (8005144 <prvAddCurrentTaskToDelayedList+0x98>)
 80050e0:	f7fe f941 	bl	8003366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050e4:	e026      	b.n	8005134 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4413      	add	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d209      	bcs.n	8005112 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <prvAddCurrentTaskToDelayedList+0x94>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7fe f94f 	bl	80033ae <vListInsert>
}
 8005110:	e010      	b.n	8005134 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <prvAddCurrentTaskToDelayedList+0x94>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f7fe f945 	bl	80033ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	d202      	bcs.n	8005134 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6013      	str	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000db8 	.word	0x20000db8
 8005140:	200008e0 	.word	0x200008e0
 8005144:	20000da0 	.word	0x20000da0
 8005148:	20000d70 	.word	0x20000d70
 800514c:	20000d6c 	.word	0x20000d6c
 8005150:	20000dd4 	.word	0x20000dd4

08005154 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800515e:	f000 fb07 	bl	8005770 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <xTimerCreateTimerTask+0x80>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d021      	beq.n	80051ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005172:	1d3a      	adds	r2, r7, #4
 8005174:	f107 0108 	add.w	r1, r7, #8
 8005178:	f107 030c 	add.w	r3, r7, #12
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe f8ab 	bl	80032d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	9202      	str	r2, [sp, #8]
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	2302      	movs	r3, #2
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2300      	movs	r3, #0
 8005192:	460a      	mov	r2, r1
 8005194:	4910      	ldr	r1, [pc, #64]	; (80051d8 <xTimerCreateTimerTask+0x84>)
 8005196:	4811      	ldr	r0, [pc, #68]	; (80051dc <xTimerCreateTimerTask+0x88>)
 8005198:	f7fe ffb6 	bl	8004108 <xTaskCreateStatic>
 800519c:	4603      	mov	r3, r0
 800519e:	4a10      	ldr	r2, [pc, #64]	; (80051e0 <xTimerCreateTimerTask+0x8c>)
 80051a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <xTimerCreateTimerTask+0x8c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051aa:	2301      	movs	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	613b      	str	r3, [r7, #16]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051ca:	697b      	ldr	r3, [r7, #20]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000e10 	.word	0x20000e10
 80051d8:	08006b14 	.word	0x08006b14
 80051dc:	08005319 	.word	0x08005319
 80051e0:	20000e14 	.word	0x20000e14

080051e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xTimerGenericCommand+0x2e>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	623b      	str	r3, [r7, #32]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <xTimerGenericCommand+0x98>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02a      	beq.n	8005270 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b05      	cmp	r3, #5
 800522a:	dc18      	bgt.n	800525e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800522c:	f7ff fdb4 	bl	8004d98 <xTaskGetSchedulerState>
 8005230:	4603      	mov	r3, r0
 8005232:	2b02      	cmp	r3, #2
 8005234:	d109      	bne.n	800524a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <xTimerGenericCommand+0x98>)
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f107 0110 	add.w	r1, r7, #16
 800523e:	2300      	movs	r3, #0
 8005240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005242:	f7fe fa55 	bl	80036f0 <xQueueGenericSend>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24
 8005248:	e012      	b.n	8005270 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <xTimerGenericCommand+0x98>)
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	f107 0110 	add.w	r1, r7, #16
 8005252:	2300      	movs	r3, #0
 8005254:	2200      	movs	r2, #0
 8005256:	f7fe fa4b 	bl	80036f0 <xQueueGenericSend>
 800525a:	6278      	str	r0, [r7, #36]	; 0x24
 800525c:	e008      	b.n	8005270 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <xTimerGenericCommand+0x98>)
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	f107 0110 	add.w	r1, r7, #16
 8005266:	2300      	movs	r3, #0
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	f7fe fb3f 	bl	80038ec <xQueueGenericSendFromISR>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005272:	4618      	mov	r0, r3
 8005274:	3728      	adds	r7, #40	; 0x28
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000e10 	.word	0x20000e10

08005280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800528a:	4b22      	ldr	r3, [pc, #136]	; (8005314 <prvProcessExpiredTimer+0x94>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe f8c1 	bl	8003420 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d022      	beq.n	80052f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	18d1      	adds	r1, r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	6978      	ldr	r0, [r7, #20]
 80052ba:	f000 f8d1 	bl	8005460 <prvInsertTimerInActiveList>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01f      	beq.n	8005304 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052c4:	2300      	movs	r3, #0
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	2100      	movs	r1, #0
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f7ff ff88 	bl	80051e4 <xTimerGenericCommand>
 80052d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d113      	bne.n	8005304 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	60fb      	str	r3, [r7, #12]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	6978      	ldr	r0, [r7, #20]
 800530a:	4798      	blx	r3
}
 800530c:	bf00      	nop
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000e08 	.word	0x20000e08

08005318 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4618      	mov	r0, r3
 8005326:	f000 f857 	bl	80053d8 <prvGetNextExpireTime>
 800532a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4619      	mov	r1, r3
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f803 	bl	800533c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005336:	f000 f8d5 	bl	80054e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800533a:	e7f1      	b.n	8005320 <prvTimerTask+0x8>

0800533c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005346:	f7ff f93b 	bl	80045c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f866 	bl	8005420 <prvSampleTimeNow>
 8005354:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d130      	bne.n	80053be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10a      	bne.n	8005378 <prvProcessTimerOrBlockTask+0x3c>
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	429a      	cmp	r2, r3
 8005368:	d806      	bhi.n	8005378 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800536a:	f7ff f937 	bl	80045dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff ff85 	bl	8005280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005376:	e024      	b.n	80053c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <prvProcessTimerOrBlockTask+0x90>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <prvProcessTimerOrBlockTask+0x50>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <prvProcessTimerOrBlockTask+0x52>
 800538c:	2300      	movs	r3, #0
 800538e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <prvProcessTimerOrBlockTask+0x94>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	f7fe fe7f 	bl	80040a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053a2:	f7ff f91b 	bl	80045dc <xTaskResumeAll>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <prvProcessTimerOrBlockTask+0x98>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
}
 80053bc:	e001      	b.n	80053c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053be:	f7ff f90d 	bl	80045dc <xTaskResumeAll>
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000e0c 	.word	0x20000e0c
 80053d0:	20000e10 	.word	0x20000e10
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053e0:	4b0e      	ldr	r3, [pc, #56]	; (800541c <prvGetNextExpireTime+0x44>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <prvGetNextExpireTime+0x16>
 80053ea:	2201      	movs	r2, #1
 80053ec:	e000      	b.n	80053f0 <prvGetNextExpireTime+0x18>
 80053ee:	2200      	movs	r2, #0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <prvGetNextExpireTime+0x44>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e001      	b.n	800540c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800540c:	68fb      	ldr	r3, [r7, #12]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000e08 	.word	0x20000e08

08005420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005428:	f7ff f976 	bl	8004718 <xTaskGetTickCount>
 800542c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <prvSampleTimeNow+0x3c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d205      	bcs.n	8005444 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005438:	f000 f936 	bl	80056a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e002      	b.n	800544a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800544a:	4a04      	ldr	r2, [pc, #16]	; (800545c <prvSampleTimeNow+0x3c>)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000e18 	.word	0x20000e18

08005460 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d812      	bhi.n	80054ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e01b      	b.n	80054d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <prvInsertTimerInActiveList+0x7c>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fd ff82 	bl	80033ae <vListInsert>
 80054aa:	e012      	b.n	80054d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d206      	bcs.n	80054c2 <prvInsertTimerInActiveList+0x62>
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054bc:	2301      	movs	r3, #1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e007      	b.n	80054d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054c2:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <prvInsertTimerInActiveList+0x80>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f7fd ff6e 	bl	80033ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054d2:	697b      	ldr	r3, [r7, #20]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000e0c 	.word	0x20000e0c
 80054e0:	20000e08 	.word	0x20000e08

080054e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	; 0x38
 80054e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054ea:	e0ca      	b.n	8005682 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da18      	bge.n	8005524 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	3304      	adds	r3, #4
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	61fb      	str	r3, [r7, #28]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551a:	6850      	ldr	r0, [r2, #4]
 800551c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551e:	6892      	ldr	r2, [r2, #8]
 8005520:	4611      	mov	r1, r2
 8005522:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f2c0 80aa 	blt.w	8005680 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	3304      	adds	r3, #4
 800553c:	4618      	mov	r0, r3
 800553e:	f7fd ff6f 	bl	8003420 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005542:	463b      	mov	r3, r7
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff ff6b 	bl	8005420 <prvSampleTimeNow>
 800554a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b09      	cmp	r3, #9
 8005550:	f200 8097 	bhi.w	8005682 <prvProcessReceivedCommands+0x19e>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <prvProcessReceivedCommands+0x78>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005585 	.word	0x08005585
 8005560:	08005585 	.word	0x08005585
 8005564:	08005585 	.word	0x08005585
 8005568:	080055f9 	.word	0x080055f9
 800556c:	0800560d 	.word	0x0800560d
 8005570:	08005657 	.word	0x08005657
 8005574:	08005585 	.word	0x08005585
 8005578:	08005585 	.word	0x08005585
 800557c:	080055f9 	.word	0x080055f9
 8005580:	0800560d 	.word	0x0800560d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	18d1      	adds	r1, r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055a4:	f7ff ff5c 	bl	8005460 <prvInsertTimerInActiveList>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d069      	beq.n	8005682 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05e      	beq.n	8005682 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	441a      	add	r2, r3
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	2100      	movs	r1, #0
 80055d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d6:	f7ff fe05 	bl	80051e4 <xTimerGenericCommand>
 80055da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d14f      	bne.n	8005682 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61bb      	str	r3, [r7, #24]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800560a:	e03a      	b.n	8005682 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	b2da      	uxtb	r2, r3
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	617b      	str	r3, [r7, #20]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	18d1      	adds	r1, r2, r3
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005650:	f7ff ff06 	bl	8005460 <prvInsertTimerInActiveList>
					break;
 8005654:	e015      	b.n	8005682 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d103      	bne.n	800566c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005666:	f000 fbdb 	bl	8005e20 <vPortFree>
 800566a:	e00a      	b.n	8005682 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800567e:	e000      	b.n	8005682 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005680:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <prvProcessReceivedCommands+0x1c0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	1d39      	adds	r1, r7, #4
 8005688:	2200      	movs	r2, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe f9ca 	bl	8003a24 <xQueueReceive>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	f47f af2a 	bne.w	80054ec <prvProcessReceivedCommands+0x8>
	}
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	3730      	adds	r7, #48	; 0x30
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000e10 	.word	0x20000e10

080056a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ae:	e048      	b.n	8005742 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056b0:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <prvSwitchTimerLists+0xc0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ba:	4b2b      	ldr	r3, [pc, #172]	; (8005768 <prvSwitchTimerLists+0xc0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd fea9 	bl	8003420 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02e      	beq.n	8005742 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d90e      	bls.n	8005714 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005702:	4b19      	ldr	r3, [pc, #100]	; (8005768 <prvSwitchTimerLists+0xc0>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fd fe4e 	bl	80033ae <vListInsert>
 8005712:	e016      	b.n	8005742 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005714:	2300      	movs	r3, #0
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2300      	movs	r3, #0
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	2100      	movs	r1, #0
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff fd60 	bl	80051e4 <xTimerGenericCommand>
 8005724:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	603b      	str	r3, [r7, #0]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <prvSwitchTimerLists+0xc0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1b1      	bne.n	80056b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <prvSwitchTimerLists+0xc0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <prvSwitchTimerLists+0xc4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a04      	ldr	r2, [pc, #16]	; (8005768 <prvSwitchTimerLists+0xc0>)
 8005758:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800575a:	4a04      	ldr	r2, [pc, #16]	; (800576c <prvSwitchTimerLists+0xc4>)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	bf00      	nop
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000e08 	.word	0x20000e08
 800576c:	20000e0c 	.word	0x20000e0c

08005770 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005776:	f000 f965 	bl	8005a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <prvCheckForValidListAndQueue+0x60>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d120      	bne.n	80057c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005782:	4814      	ldr	r0, [pc, #80]	; (80057d4 <prvCheckForValidListAndQueue+0x64>)
 8005784:	f7fd fdc2 	bl	800330c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005788:	4813      	ldr	r0, [pc, #76]	; (80057d8 <prvCheckForValidListAndQueue+0x68>)
 800578a:	f7fd fdbf 	bl	800330c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <prvCheckForValidListAndQueue+0x6c>)
 8005790:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <prvCheckForValidListAndQueue+0x64>)
 8005792:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005794:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <prvCheckForValidListAndQueue+0x70>)
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <prvCheckForValidListAndQueue+0x68>)
 8005798:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800579a:	2300      	movs	r3, #0
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <prvCheckForValidListAndQueue+0x74>)
 80057a0:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <prvCheckForValidListAndQueue+0x78>)
 80057a2:	2110      	movs	r1, #16
 80057a4:	200a      	movs	r0, #10
 80057a6:	f7fd fecd 	bl	8003544 <xQueueGenericCreateStatic>
 80057aa:	4603      	mov	r3, r0
 80057ac:	4a08      	ldr	r2, [pc, #32]	; (80057d0 <prvCheckForValidListAndQueue+0x60>)
 80057ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <prvCheckForValidListAndQueue+0x60>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <prvCheckForValidListAndQueue+0x60>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	490b      	ldr	r1, [pc, #44]	; (80057ec <prvCheckForValidListAndQueue+0x7c>)
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fc44 	bl	800404c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057c4:	f000 f96e 	bl	8005aa4 <vPortExitCritical>
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000e10 	.word	0x20000e10
 80057d4:	20000de0 	.word	0x20000de0
 80057d8:	20000df4 	.word	0x20000df4
 80057dc:	20000e08 	.word	0x20000e08
 80057e0:	20000e0c 	.word	0x20000e0c
 80057e4:	20000ebc 	.word	0x20000ebc
 80057e8:	20000e1c 	.word	0x20000e1c
 80057ec:	08006b1c 	.word	0x08006b1c

080057f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b04      	subs	r3, #4
 8005800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b04      	subs	r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 0201 	bic.w	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b04      	subs	r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005820:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <pxPortInitialiseStack+0x64>)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3b14      	subs	r3, #20
 800582a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3b04      	subs	r3, #4
 8005836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f06f 0202 	mvn.w	r2, #2
 800583e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3b20      	subs	r3, #32
 8005844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005846:	68fb      	ldr	r3, [r7, #12]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	08005859 	.word	0x08005859

08005858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <prvTaskExitError+0x54>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d00a      	beq.n	8005882 <prvTaskExitError+0x2a>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60fb      	str	r3, [r7, #12]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <prvTaskExitError+0x28>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	60bb      	str	r3, [r7, #8]
}
 8005894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005896:	bf00      	nop
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0fc      	beq.n	8005898 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	2000000c 	.word	0x2000000c

080058b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <pxCurrentTCBConst2>)
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	f380 8809 	msr	PSP, r0
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8811 	msr	BASEPRI, r0
 80058ca:	4770      	bx	lr
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst2>:
 80058d0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058d8:	4808      	ldr	r0, [pc, #32]	; (80058fc <prvPortStartFirstTask+0x24>)
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	6800      	ldr	r0, [r0, #0]
 80058de:	f380 8808 	msr	MSP, r0
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8814 	msr	CONTROL, r0
 80058ea:	b662      	cpsie	i
 80058ec:	b661      	cpsie	f
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	df00      	svc	0
 80058f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058fa:	bf00      	nop
 80058fc:	e000ed08 	.word	0xe000ed08

08005900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005906:	4b46      	ldr	r3, [pc, #280]	; (8005a20 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a46      	ldr	r2, [pc, #280]	; (8005a24 <xPortStartScheduler+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x26>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005926:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <xPortStartScheduler+0x120>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3f      	ldr	r2, [pc, #252]	; (8005a28 <xPortStartScheduler+0x128>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d10a      	bne.n	8005946 <xPortStartScheduler+0x46>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005946:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <xPortStartScheduler+0x12c>)
 8005948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005968:	b2da      	uxtb	r2, r3
 800596a:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <xPortStartScheduler+0x130>)
 800596c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800596e:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <xPortStartScheduler+0x134>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005974:	e009      	b.n	800598a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005976:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3b01      	subs	r3, #1
 800597c:	4a2d      	ldr	r2, [pc, #180]	; (8005a34 <xPortStartScheduler+0x134>)
 800597e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d0ef      	beq.n	8005976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <xPortStartScheduler+0x134>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f1c3 0307 	rsb	r3, r3, #7
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d00a      	beq.n	80059b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60bb      	str	r3, [r7, #8]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059b8:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <xPortStartScheduler+0x134>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <xPortStartScheduler+0x134>)
 80059c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <xPortStartScheduler+0x134>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ca:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <xPortStartScheduler+0x134>)
 80059cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059d6:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <xPortStartScheduler+0x138>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <xPortStartScheduler+0x138>)
 80059dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <xPortStartScheduler+0x138>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <xPortStartScheduler+0x138>)
 80059e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ee:	f000 f8dd 	bl	8005bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <xPortStartScheduler+0x13c>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059f8:	f000 f8fc 	bl	8005bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <xPortStartScheduler+0x140>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <xPortStartScheduler+0x140>)
 8005a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a08:	f7ff ff66 	bl	80058d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a0c:	f7fe ff4e 	bl	80048ac <vTaskSwitchContext>
	prvTaskExitError();
 8005a10:	f7ff ff22 	bl	8005858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	e000ed00 	.word	0xe000ed00
 8005a24:	410fc271 	.word	0x410fc271
 8005a28:	410fc270 	.word	0x410fc270
 8005a2c:	e000e400 	.word	0xe000e400
 8005a30:	20000f0c 	.word	0x20000f0c
 8005a34:	20000f10 	.word	0x20000f10
 8005a38:	e000ed20 	.word	0xe000ed20
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	e000ef34 	.word	0xe000ef34

08005a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	607b      	str	r3, [r7, #4]
}
 8005a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <vPortEnterCritical+0x58>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <vPortEnterCritical+0x58>)
 8005a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <vPortEnterCritical+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10f      	bne.n	8005a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <vPortEnterCritical+0x5c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	603b      	str	r3, [r7, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	e7fe      	b.n	8005a8e <vPortEnterCritical+0x4a>
	}
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aaa:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <vPortExitCritical+0x50>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <vPortExitCritical+0x24>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	607b      	str	r3, [r7, #4]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <vPortExitCritical+0x50>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <vPortExitCritical+0x50>)
 8005ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <vPortExitCritical+0x50>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <vPortExitCritical+0x42>
 8005ada:	2300      	movs	r3, #0
 8005adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	f383 8811 	msr	BASEPRI, r3
}
 8005ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000000c 	.word	0x2000000c
	...

08005b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b00:	f3ef 8009 	mrs	r0, PSP
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <pxCurrentTCBConst>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f01e 0f10 	tst.w	lr, #16
 8005b10:	bf08      	it	eq
 8005b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b24:	f380 8811 	msr	BASEPRI, r0
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f7fe febc 	bl	80048ac <vTaskSwitchContext>
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f380 8811 	msr	BASEPRI, r0
 8005b3c:	bc09      	pop	{r0, r3}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b46:	f01e 0f10 	tst.w	lr, #16
 8005b4a:	bf08      	it	eq
 8005b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b50:	f380 8809 	msr	PSP, r0
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst>:
 8005b60:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b82:	f7fe fdd9 	bl	8004738 <xTaskIncrementTick>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <xPortSysTickHandler+0x40>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
}
 8005b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <vPortSetupTimerInterrupt+0x38>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <vPortSetupTimerInterrupt+0x3c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <vPortSetupTimerInterrupt+0x40>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <vPortSetupTimerInterrupt+0x44>)
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bce:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000e010 	.word	0xe000e010
 8005be4:	e000e018 	.word	0xe000e018
 8005be8:	20000000 	.word	0x20000000
 8005bec:	10624dd3 	.word	0x10624dd3
 8005bf0:	e000e014 	.word	0xe000e014

08005bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c04 <vPortEnableVFP+0x10>
 8005bf8:	6801      	ldr	r1, [r0, #0]
 8005bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bfe:	6001      	str	r1, [r0, #0]
 8005c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c02:	bf00      	nop
 8005c04:	e000ed88 	.word	0xe000ed88

08005c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c0e:	f3ef 8305 	mrs	r3, IPSR
 8005c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d914      	bls.n	8005c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <vPortValidateInterruptPriority+0x70>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c24:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <vPortValidateInterruptPriority+0x74>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	7afa      	ldrb	r2, [r7, #11]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d20a      	bcs.n	8005c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	607b      	str	r3, [r7, #4]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <vPortValidateInterruptPriority+0x78>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <vPortValidateInterruptPriority+0x7c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d90a      	bls.n	8005c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	603b      	str	r3, [r7, #0]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <vPortValidateInterruptPriority+0x60>
	}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	e000e3f0 	.word	0xe000e3f0
 8005c7c:	20000f0c 	.word	0x20000f0c
 8005c80:	e000ed0c 	.word	0xe000ed0c
 8005c84:	20000f10 	.word	0x20000f10

08005c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c94:	f7fe fc94 	bl	80045c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c98:	4b5b      	ldr	r3, [pc, #364]	; (8005e08 <pvPortMalloc+0x180>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ca0:	f000 f920 	bl	8005ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ca4:	4b59      	ldr	r3, [pc, #356]	; (8005e0c <pvPortMalloc+0x184>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f040 8093 	bne.w	8005dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01d      	beq.n	8005cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005cb8:	2208      	movs	r2, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d014      	beq.n	8005cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f023 0307 	bic.w	r3, r3, #7
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	617b      	str	r3, [r7, #20]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d06e      	beq.n	8005dd8 <pvPortMalloc+0x150>
 8005cfa:	4b45      	ldr	r3, [pc, #276]	; (8005e10 <pvPortMalloc+0x188>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d869      	bhi.n	8005dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d04:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <pvPortMalloc+0x18c>)
 8005d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <pvPortMalloc+0x18c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d0e:	e004      	b.n	8005d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d903      	bls.n	8005d2c <pvPortMalloc+0xa4>
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f1      	bne.n	8005d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <pvPortMalloc+0x180>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d050      	beq.n	8005dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	2308      	movs	r3, #8
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d91f      	bls.n	8005d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <pvPortMalloc+0xf8>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	613b      	str	r3, [r7, #16]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d92:	69b8      	ldr	r0, [r7, #24]
 8005d94:	f000 f908 	bl	8005fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d98:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <pvPortMalloc+0x188>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <pvPortMalloc+0x188>)
 8005da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005da6:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <pvPortMalloc+0x188>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <pvPortMalloc+0x190>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d203      	bcs.n	8005dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <pvPortMalloc+0x188>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <pvPortMalloc+0x190>)
 8005db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <pvPortMalloc+0x184>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <pvPortMalloc+0x194>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <pvPortMalloc+0x194>)
 8005dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dd8:	f7fe fc00 	bl	80045dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <pvPortMalloc+0x174>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60fb      	str	r3, [r7, #12]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <pvPortMalloc+0x172>
	return pvReturn;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3728      	adds	r7, #40	; 0x28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20004b1c 	.word	0x20004b1c
 8005e0c:	20004b30 	.word	0x20004b30
 8005e10:	20004b20 	.word	0x20004b20
 8005e14:	20004b14 	.word	0x20004b14
 8005e18:	20004b24 	.word	0x20004b24
 8005e1c:	20004b28 	.word	0x20004b28

08005e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d04d      	beq.n	8005ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e32:	2308      	movs	r3, #8
 8005e34:	425b      	negs	r3, r3
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <vPortFree+0xb8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <vPortFree+0x44>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	60fb      	str	r3, [r7, #12]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <vPortFree+0x62>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60bb      	str	r3, [r7, #8]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <vPortFree+0xb8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01e      	beq.n	8005ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11a      	bne.n	8005ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <vPortFree+0xb8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ea8:	f7fe fb8a 	bl	80045c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <vPortFree+0xbc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4a09      	ldr	r2, [pc, #36]	; (8005edc <vPortFree+0xbc>)
 8005eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eba:	6938      	ldr	r0, [r7, #16]
 8005ebc:	f000 f874 	bl	8005fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <vPortFree+0xc0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4a06      	ldr	r2, [pc, #24]	; (8005ee0 <vPortFree+0xc0>)
 8005ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eca:	f7fe fb87 	bl	80045dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20004b30 	.word	0x20004b30
 8005edc:	20004b20 	.word	0x20004b20
 8005ee0:	20004b2c 	.word	0x20004b2c

08005ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <prvHeapInit+0xac>)
 8005ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3307      	adds	r3, #7
 8005f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <prvHeapInit+0xac>)
 8005f14:	4413      	add	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <prvHeapInit+0xb0>)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <prvHeapInit+0xb0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f30:	2208      	movs	r2, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <prvHeapInit+0xb4>)
 8005f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f46:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <prvHeapInit+0xb4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <prvHeapInit+0xb4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <prvHeapInit+0xb4>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <prvHeapInit+0xb8>)
 8005f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <prvHeapInit+0xbc>)
 8005f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <prvHeapInit+0xc0>)
 8005f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000f14 	.word	0x20000f14
 8005f94:	20004b14 	.word	0x20004b14
 8005f98:	20004b1c 	.word	0x20004b1c
 8005f9c:	20004b24 	.word	0x20004b24
 8005fa0:	20004b20 	.word	0x20004b20
 8005fa4:	20004b30 	.word	0x20004b30

08005fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fb0:	4b28      	ldr	r3, [pc, #160]	; (8006054 <prvInsertBlockIntoFreeList+0xac>)
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e002      	b.n	8005fbc <prvInsertBlockIntoFreeList+0x14>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d8f7      	bhi.n	8005fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d108      	bne.n	8005fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d118      	bne.n	8006030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <prvInsertBlockIntoFreeList+0xb0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d00d      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e008      	b.n	8006038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <prvInsertBlockIntoFreeList+0xb0>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e003      	b.n	8006038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d002      	beq.n	8006046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20004b14 	.word	0x20004b14
 8006058:	20004b1c 	.word	0x20004b1c

0800605c <__errno>:
 800605c:	4b01      	ldr	r3, [pc, #4]	; (8006064 <__errno+0x8>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000010 	.word	0x20000010

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d0d      	ldr	r5, [pc, #52]	; (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	; (80060a4 <__libc_init_array+0x3c>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2600      	movs	r6, #0
 8006074:	42a6      	cmp	r6, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4d0b      	ldr	r5, [pc, #44]	; (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	; (80060ac <__libc_init_array+0x44>)
 800607c:	f000 fcf8 	bl	8006a70 <_init>
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2600      	movs	r6, #0
 8006086:	42a6      	cmp	r6, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006090:	4798      	blx	r3
 8006092:	3601      	adds	r6, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f855 3b04 	ldr.w	r3, [r5], #4
 800609a:	4798      	blx	r3
 800609c:	3601      	adds	r6, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08006bd8 	.word	0x08006bd8
 80060a4:	08006bd8 	.word	0x08006bd8
 80060a8:	08006bd8 	.word	0x08006bd8
 80060ac:	08006bdc 	.word	0x08006bdc

080060b0 <__retarget_lock_acquire_recursive>:
 80060b0:	4770      	bx	lr

080060b2 <__retarget_lock_release_recursive>:
 80060b2:	4770      	bx	lr

080060b4 <memcpy>:
 80060b4:	440a      	add	r2, r1
 80060b6:	4291      	cmp	r1, r2
 80060b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060bc:	d100      	bne.n	80060c0 <memcpy+0xc>
 80060be:	4770      	bx	lr
 80060c0:	b510      	push	{r4, lr}
 80060c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ca:	4291      	cmp	r1, r2
 80060cc:	d1f9      	bne.n	80060c2 <memcpy+0xe>
 80060ce:	bd10      	pop	{r4, pc}

080060d0 <memset>:
 80060d0:	4402      	add	r2, r0
 80060d2:	4603      	mov	r3, r0
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d100      	bne.n	80060da <memset+0xa>
 80060d8:	4770      	bx	lr
 80060da:	f803 1b01 	strb.w	r1, [r3], #1
 80060de:	e7f9      	b.n	80060d4 <memset+0x4>

080060e0 <sbrk_aligned>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	4e0e      	ldr	r6, [pc, #56]	; (800611c <sbrk_aligned+0x3c>)
 80060e4:	460c      	mov	r4, r1
 80060e6:	6831      	ldr	r1, [r6, #0]
 80060e8:	4605      	mov	r5, r0
 80060ea:	b911      	cbnz	r1, 80060f2 <sbrk_aligned+0x12>
 80060ec:	f000 f8f6 	bl	80062dc <_sbrk_r>
 80060f0:	6030      	str	r0, [r6, #0]
 80060f2:	4621      	mov	r1, r4
 80060f4:	4628      	mov	r0, r5
 80060f6:	f000 f8f1 	bl	80062dc <_sbrk_r>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d00a      	beq.n	8006114 <sbrk_aligned+0x34>
 80060fe:	1cc4      	adds	r4, r0, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	42a0      	cmp	r0, r4
 8006106:	d007      	beq.n	8006118 <sbrk_aligned+0x38>
 8006108:	1a21      	subs	r1, r4, r0
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f8e6 	bl	80062dc <_sbrk_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d101      	bne.n	8006118 <sbrk_aligned+0x38>
 8006114:	f04f 34ff 	mov.w	r4, #4294967295
 8006118:	4620      	mov	r0, r4
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	20004b3c 	.word	0x20004b3c

08006120 <_malloc_r>:
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006124:	1ccd      	adds	r5, r1, #3
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	2d00      	cmp	r5, #0
 8006134:	4607      	mov	r7, r0
 8006136:	db01      	blt.n	800613c <_malloc_r+0x1c>
 8006138:	42a9      	cmp	r1, r5
 800613a:	d905      	bls.n	8006148 <_malloc_r+0x28>
 800613c:	230c      	movs	r3, #12
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	2600      	movs	r6, #0
 8006142:	4630      	mov	r0, r6
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006148:	4e2e      	ldr	r6, [pc, #184]	; (8006204 <_malloc_r+0xe4>)
 800614a:	f000 f8f7 	bl	800633c <__malloc_lock>
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	461c      	mov	r4, r3
 8006152:	bb34      	cbnz	r4, 80061a2 <_malloc_r+0x82>
 8006154:	4629      	mov	r1, r5
 8006156:	4638      	mov	r0, r7
 8006158:	f7ff ffc2 	bl	80060e0 <sbrk_aligned>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	4604      	mov	r4, r0
 8006160:	d14d      	bne.n	80061fe <_malloc_r+0xde>
 8006162:	6834      	ldr	r4, [r6, #0]
 8006164:	4626      	mov	r6, r4
 8006166:	2e00      	cmp	r6, #0
 8006168:	d140      	bne.n	80061ec <_malloc_r+0xcc>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	4631      	mov	r1, r6
 800616e:	4638      	mov	r0, r7
 8006170:	eb04 0803 	add.w	r8, r4, r3
 8006174:	f000 f8b2 	bl	80062dc <_sbrk_r>
 8006178:	4580      	cmp	r8, r0
 800617a:	d13a      	bne.n	80061f2 <_malloc_r+0xd2>
 800617c:	6821      	ldr	r1, [r4, #0]
 800617e:	3503      	adds	r5, #3
 8006180:	1a6d      	subs	r5, r5, r1
 8006182:	f025 0503 	bic.w	r5, r5, #3
 8006186:	3508      	adds	r5, #8
 8006188:	2d0c      	cmp	r5, #12
 800618a:	bf38      	it	cc
 800618c:	250c      	movcc	r5, #12
 800618e:	4629      	mov	r1, r5
 8006190:	4638      	mov	r0, r7
 8006192:	f7ff ffa5 	bl	80060e0 <sbrk_aligned>
 8006196:	3001      	adds	r0, #1
 8006198:	d02b      	beq.n	80061f2 <_malloc_r+0xd2>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	442b      	add	r3, r5
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	e00e      	b.n	80061c0 <_malloc_r+0xa0>
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	1b52      	subs	r2, r2, r5
 80061a6:	d41e      	bmi.n	80061e6 <_malloc_r+0xc6>
 80061a8:	2a0b      	cmp	r2, #11
 80061aa:	d916      	bls.n	80061da <_malloc_r+0xba>
 80061ac:	1961      	adds	r1, r4, r5
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	6025      	str	r5, [r4, #0]
 80061b2:	bf18      	it	ne
 80061b4:	6059      	strne	r1, [r3, #4]
 80061b6:	6863      	ldr	r3, [r4, #4]
 80061b8:	bf08      	it	eq
 80061ba:	6031      	streq	r1, [r6, #0]
 80061bc:	5162      	str	r2, [r4, r5]
 80061be:	604b      	str	r3, [r1, #4]
 80061c0:	4638      	mov	r0, r7
 80061c2:	f104 060b 	add.w	r6, r4, #11
 80061c6:	f000 f8bf 	bl	8006348 <__malloc_unlock>
 80061ca:	f026 0607 	bic.w	r6, r6, #7
 80061ce:	1d23      	adds	r3, r4, #4
 80061d0:	1af2      	subs	r2, r6, r3
 80061d2:	d0b6      	beq.n	8006142 <_malloc_r+0x22>
 80061d4:	1b9b      	subs	r3, r3, r6
 80061d6:	50a3      	str	r3, [r4, r2]
 80061d8:	e7b3      	b.n	8006142 <_malloc_r+0x22>
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	42a3      	cmp	r3, r4
 80061de:	bf0c      	ite	eq
 80061e0:	6032      	streq	r2, [r6, #0]
 80061e2:	605a      	strne	r2, [r3, #4]
 80061e4:	e7ec      	b.n	80061c0 <_malloc_r+0xa0>
 80061e6:	4623      	mov	r3, r4
 80061e8:	6864      	ldr	r4, [r4, #4]
 80061ea:	e7b2      	b.n	8006152 <_malloc_r+0x32>
 80061ec:	4634      	mov	r4, r6
 80061ee:	6876      	ldr	r6, [r6, #4]
 80061f0:	e7b9      	b.n	8006166 <_malloc_r+0x46>
 80061f2:	230c      	movs	r3, #12
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	4638      	mov	r0, r7
 80061f8:	f000 f8a6 	bl	8006348 <__malloc_unlock>
 80061fc:	e7a1      	b.n	8006142 <_malloc_r+0x22>
 80061fe:	6025      	str	r5, [r4, #0]
 8006200:	e7de      	b.n	80061c0 <_malloc_r+0xa0>
 8006202:	bf00      	nop
 8006204:	20004b38 	.word	0x20004b38

08006208 <cleanup_glue>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	460c      	mov	r4, r1
 800620c:	6809      	ldr	r1, [r1, #0]
 800620e:	4605      	mov	r5, r0
 8006210:	b109      	cbz	r1, 8006216 <cleanup_glue+0xe>
 8006212:	f7ff fff9 	bl	8006208 <cleanup_glue>
 8006216:	4621      	mov	r1, r4
 8006218:	4628      	mov	r0, r5
 800621a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800621e:	f000 b899 	b.w	8006354 <_free_r>
	...

08006224 <_reclaim_reent>:
 8006224:	4b2c      	ldr	r3, [pc, #176]	; (80062d8 <_reclaim_reent+0xb4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4283      	cmp	r3, r0
 800622a:	b570      	push	{r4, r5, r6, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	d051      	beq.n	80062d4 <_reclaim_reent+0xb0>
 8006230:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006232:	b143      	cbz	r3, 8006246 <_reclaim_reent+0x22>
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d14a      	bne.n	80062d0 <_reclaim_reent+0xac>
 800623a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	b111      	cbz	r1, 8006246 <_reclaim_reent+0x22>
 8006240:	4620      	mov	r0, r4
 8006242:	f000 f887 	bl	8006354 <_free_r>
 8006246:	6961      	ldr	r1, [r4, #20]
 8006248:	b111      	cbz	r1, 8006250 <_reclaim_reent+0x2c>
 800624a:	4620      	mov	r0, r4
 800624c:	f000 f882 	bl	8006354 <_free_r>
 8006250:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006252:	b111      	cbz	r1, 800625a <_reclaim_reent+0x36>
 8006254:	4620      	mov	r0, r4
 8006256:	f000 f87d 	bl	8006354 <_free_r>
 800625a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800625c:	b111      	cbz	r1, 8006264 <_reclaim_reent+0x40>
 800625e:	4620      	mov	r0, r4
 8006260:	f000 f878 	bl	8006354 <_free_r>
 8006264:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006266:	b111      	cbz	r1, 800626e <_reclaim_reent+0x4a>
 8006268:	4620      	mov	r0, r4
 800626a:	f000 f873 	bl	8006354 <_free_r>
 800626e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006270:	b111      	cbz	r1, 8006278 <_reclaim_reent+0x54>
 8006272:	4620      	mov	r0, r4
 8006274:	f000 f86e 	bl	8006354 <_free_r>
 8006278:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800627a:	b111      	cbz	r1, 8006282 <_reclaim_reent+0x5e>
 800627c:	4620      	mov	r0, r4
 800627e:	f000 f869 	bl	8006354 <_free_r>
 8006282:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006284:	b111      	cbz	r1, 800628c <_reclaim_reent+0x68>
 8006286:	4620      	mov	r0, r4
 8006288:	f000 f864 	bl	8006354 <_free_r>
 800628c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628e:	b111      	cbz	r1, 8006296 <_reclaim_reent+0x72>
 8006290:	4620      	mov	r0, r4
 8006292:	f000 f85f 	bl	8006354 <_free_r>
 8006296:	69a3      	ldr	r3, [r4, #24]
 8006298:	b1e3      	cbz	r3, 80062d4 <_reclaim_reent+0xb0>
 800629a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800629c:	4620      	mov	r0, r4
 800629e:	4798      	blx	r3
 80062a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062a2:	b1b9      	cbz	r1, 80062d4 <_reclaim_reent+0xb0>
 80062a4:	4620      	mov	r0, r4
 80062a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062aa:	f7ff bfad 	b.w	8006208 <cleanup_glue>
 80062ae:	5949      	ldr	r1, [r1, r5]
 80062b0:	b941      	cbnz	r1, 80062c4 <_reclaim_reent+0xa0>
 80062b2:	3504      	adds	r5, #4
 80062b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b6:	2d80      	cmp	r5, #128	; 0x80
 80062b8:	68d9      	ldr	r1, [r3, #12]
 80062ba:	d1f8      	bne.n	80062ae <_reclaim_reent+0x8a>
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 f849 	bl	8006354 <_free_r>
 80062c2:	e7ba      	b.n	800623a <_reclaim_reent+0x16>
 80062c4:	680e      	ldr	r6, [r1, #0]
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f844 	bl	8006354 <_free_r>
 80062cc:	4631      	mov	r1, r6
 80062ce:	e7ef      	b.n	80062b0 <_reclaim_reent+0x8c>
 80062d0:	2500      	movs	r5, #0
 80062d2:	e7ef      	b.n	80062b4 <_reclaim_reent+0x90>
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	bf00      	nop
 80062d8:	20000010 	.word	0x20000010

080062dc <_sbrk_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_sbrk_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fa fc30 	bl	8000b4c <_sbrk>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_sbrk_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_sbrk_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20004b40 	.word	0x20004b40

080062fc <siprintf>:
 80062fc:	b40e      	push	{r1, r2, r3}
 80062fe:	b500      	push	{lr}
 8006300:	b09c      	sub	sp, #112	; 0x70
 8006302:	ab1d      	add	r3, sp, #116	; 0x74
 8006304:	9002      	str	r0, [sp, #8]
 8006306:	9006      	str	r0, [sp, #24]
 8006308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800630c:	4809      	ldr	r0, [pc, #36]	; (8006334 <siprintf+0x38>)
 800630e:	9107      	str	r1, [sp, #28]
 8006310:	9104      	str	r1, [sp, #16]
 8006312:	4909      	ldr	r1, [pc, #36]	; (8006338 <siprintf+0x3c>)
 8006314:	f853 2b04 	ldr.w	r2, [r3], #4
 8006318:	9105      	str	r1, [sp, #20]
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	a902      	add	r1, sp, #8
 8006320:	f000 f8c0 	bl	80064a4 <_svfiprintf_r>
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	b01c      	add	sp, #112	; 0x70
 800632c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006330:	b003      	add	sp, #12
 8006332:	4770      	bx	lr
 8006334:	20000010 	.word	0x20000010
 8006338:	ffff0208 	.word	0xffff0208

0800633c <__malloc_lock>:
 800633c:	4801      	ldr	r0, [pc, #4]	; (8006344 <__malloc_lock+0x8>)
 800633e:	f7ff beb7 	b.w	80060b0 <__retarget_lock_acquire_recursive>
 8006342:	bf00      	nop
 8006344:	20004b34 	.word	0x20004b34

08006348 <__malloc_unlock>:
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <__malloc_unlock+0x8>)
 800634a:	f7ff beb2 	b.w	80060b2 <__retarget_lock_release_recursive>
 800634e:	bf00      	nop
 8006350:	20004b34 	.word	0x20004b34

08006354 <_free_r>:
 8006354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006356:	2900      	cmp	r1, #0
 8006358:	d044      	beq.n	80063e4 <_free_r+0x90>
 800635a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635e:	9001      	str	r0, [sp, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f1a1 0404 	sub.w	r4, r1, #4
 8006366:	bfb8      	it	lt
 8006368:	18e4      	addlt	r4, r4, r3
 800636a:	f7ff ffe7 	bl	800633c <__malloc_lock>
 800636e:	4a1e      	ldr	r2, [pc, #120]	; (80063e8 <_free_r+0x94>)
 8006370:	9801      	ldr	r0, [sp, #4]
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	b933      	cbnz	r3, 8006384 <_free_r+0x30>
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	6014      	str	r4, [r2, #0]
 800637a:	b003      	add	sp, #12
 800637c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006380:	f7ff bfe2 	b.w	8006348 <__malloc_unlock>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d908      	bls.n	800639a <_free_r+0x46>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	1961      	adds	r1, r4, r5
 800638c:	428b      	cmp	r3, r1
 800638e:	bf01      	itttt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	1949      	addeq	r1, r1, r5
 8006396:	6021      	streq	r1, [r4, #0]
 8006398:	e7ed      	b.n	8006376 <_free_r+0x22>
 800639a:	461a      	mov	r2, r3
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b10b      	cbz	r3, 80063a4 <_free_r+0x50>
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d9fa      	bls.n	800639a <_free_r+0x46>
 80063a4:	6811      	ldr	r1, [r2, #0]
 80063a6:	1855      	adds	r5, r2, r1
 80063a8:	42a5      	cmp	r5, r4
 80063aa:	d10b      	bne.n	80063c4 <_free_r+0x70>
 80063ac:	6824      	ldr	r4, [r4, #0]
 80063ae:	4421      	add	r1, r4
 80063b0:	1854      	adds	r4, r2, r1
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	d1e0      	bne.n	800637a <_free_r+0x26>
 80063b8:	681c      	ldr	r4, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	6053      	str	r3, [r2, #4]
 80063be:	4421      	add	r1, r4
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	e7da      	b.n	800637a <_free_r+0x26>
 80063c4:	d902      	bls.n	80063cc <_free_r+0x78>
 80063c6:	230c      	movs	r3, #12
 80063c8:	6003      	str	r3, [r0, #0]
 80063ca:	e7d6      	b.n	800637a <_free_r+0x26>
 80063cc:	6825      	ldr	r5, [r4, #0]
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf04      	itt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	bf04      	itt	eq
 80063dc:	1949      	addeq	r1, r1, r5
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	6054      	str	r4, [r2, #4]
 80063e2:	e7ca      	b.n	800637a <_free_r+0x26>
 80063e4:	b003      	add	sp, #12
 80063e6:	bd30      	pop	{r4, r5, pc}
 80063e8:	20004b38 	.word	0x20004b38

080063ec <__ssputs_r>:
 80063ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	688e      	ldr	r6, [r1, #8]
 80063f2:	429e      	cmp	r6, r3
 80063f4:	4682      	mov	sl, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	4690      	mov	r8, r2
 80063fa:	461f      	mov	r7, r3
 80063fc:	d838      	bhi.n	8006470 <__ssputs_r+0x84>
 80063fe:	898a      	ldrh	r2, [r1, #12]
 8006400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006404:	d032      	beq.n	800646c <__ssputs_r+0x80>
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	6909      	ldr	r1, [r1, #16]
 800640a:	eba5 0901 	sub.w	r9, r5, r1
 800640e:	6965      	ldr	r5, [r4, #20]
 8006410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006418:	3301      	adds	r3, #1
 800641a:	444b      	add	r3, r9
 800641c:	106d      	asrs	r5, r5, #1
 800641e:	429d      	cmp	r5, r3
 8006420:	bf38      	it	cc
 8006422:	461d      	movcc	r5, r3
 8006424:	0553      	lsls	r3, r2, #21
 8006426:	d531      	bpl.n	800648c <__ssputs_r+0xa0>
 8006428:	4629      	mov	r1, r5
 800642a:	f7ff fe79 	bl	8006120 <_malloc_r>
 800642e:	4606      	mov	r6, r0
 8006430:	b950      	cbnz	r0, 8006448 <__ssputs_r+0x5c>
 8006432:	230c      	movs	r3, #12
 8006434:	f8ca 3000 	str.w	r3, [sl]
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	6921      	ldr	r1, [r4, #16]
 800644a:	464a      	mov	r2, r9
 800644c:	f7ff fe32 	bl	80060b4 <memcpy>
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	6126      	str	r6, [r4, #16]
 800645e:	6165      	str	r5, [r4, #20]
 8006460:	444e      	add	r6, r9
 8006462:	eba5 0509 	sub.w	r5, r5, r9
 8006466:	6026      	str	r6, [r4, #0]
 8006468:	60a5      	str	r5, [r4, #8]
 800646a:	463e      	mov	r6, r7
 800646c:	42be      	cmp	r6, r7
 800646e:	d900      	bls.n	8006472 <__ssputs_r+0x86>
 8006470:	463e      	mov	r6, r7
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	4632      	mov	r2, r6
 8006476:	4641      	mov	r1, r8
 8006478:	f000 faa8 	bl	80069cc <memmove>
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	1b9b      	subs	r3, r3, r6
 8006480:	60a3      	str	r3, [r4, #8]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4433      	add	r3, r6
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	2000      	movs	r0, #0
 800648a:	e7db      	b.n	8006444 <__ssputs_r+0x58>
 800648c:	462a      	mov	r2, r5
 800648e:	f000 fab7 	bl	8006a00 <_realloc_r>
 8006492:	4606      	mov	r6, r0
 8006494:	2800      	cmp	r0, #0
 8006496:	d1e1      	bne.n	800645c <__ssputs_r+0x70>
 8006498:	6921      	ldr	r1, [r4, #16]
 800649a:	4650      	mov	r0, sl
 800649c:	f7ff ff5a 	bl	8006354 <_free_r>
 80064a0:	e7c7      	b.n	8006432 <__ssputs_r+0x46>
	...

080064a4 <_svfiprintf_r>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	4698      	mov	r8, r3
 80064aa:	898b      	ldrh	r3, [r1, #12]
 80064ac:	061b      	lsls	r3, r3, #24
 80064ae:	b09d      	sub	sp, #116	; 0x74
 80064b0:	4607      	mov	r7, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	d50e      	bpl.n	80064d6 <_svfiprintf_r+0x32>
 80064b8:	690b      	ldr	r3, [r1, #16]
 80064ba:	b963      	cbnz	r3, 80064d6 <_svfiprintf_r+0x32>
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	f7ff fe2f 	bl	8006120 <_malloc_r>
 80064c2:	6028      	str	r0, [r5, #0]
 80064c4:	6128      	str	r0, [r5, #16]
 80064c6:	b920      	cbnz	r0, 80064d2 <_svfiprintf_r+0x2e>
 80064c8:	230c      	movs	r3, #12
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e0d1      	b.n	8006676 <_svfiprintf_r+0x1d2>
 80064d2:	2340      	movs	r3, #64	; 0x40
 80064d4:	616b      	str	r3, [r5, #20]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9309      	str	r3, [sp, #36]	; 0x24
 80064da:	2320      	movs	r3, #32
 80064dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e4:	2330      	movs	r3, #48	; 0x30
 80064e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006690 <_svfiprintf_r+0x1ec>
 80064ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ee:	f04f 0901 	mov.w	r9, #1
 80064f2:	4623      	mov	r3, r4
 80064f4:	469a      	mov	sl, r3
 80064f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fa:	b10a      	cbz	r2, 8006500 <_svfiprintf_r+0x5c>
 80064fc:	2a25      	cmp	r2, #37	; 0x25
 80064fe:	d1f9      	bne.n	80064f4 <_svfiprintf_r+0x50>
 8006500:	ebba 0b04 	subs.w	fp, sl, r4
 8006504:	d00b      	beq.n	800651e <_svfiprintf_r+0x7a>
 8006506:	465b      	mov	r3, fp
 8006508:	4622      	mov	r2, r4
 800650a:	4629      	mov	r1, r5
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff ff6d 	bl	80063ec <__ssputs_r>
 8006512:	3001      	adds	r0, #1
 8006514:	f000 80aa 	beq.w	800666c <_svfiprintf_r+0x1c8>
 8006518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800651a:	445a      	add	r2, fp
 800651c:	9209      	str	r2, [sp, #36]	; 0x24
 800651e:	f89a 3000 	ldrb.w	r3, [sl]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80a2 	beq.w	800666c <_svfiprintf_r+0x1c8>
 8006528:	2300      	movs	r3, #0
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006532:	f10a 0a01 	add.w	sl, sl, #1
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800653e:	931a      	str	r3, [sp, #104]	; 0x68
 8006540:	4654      	mov	r4, sl
 8006542:	2205      	movs	r2, #5
 8006544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006548:	4851      	ldr	r0, [pc, #324]	; (8006690 <_svfiprintf_r+0x1ec>)
 800654a:	f7f9 fe41 	bl	80001d0 <memchr>
 800654e:	9a04      	ldr	r2, [sp, #16]
 8006550:	b9d8      	cbnz	r0, 800658a <_svfiprintf_r+0xe6>
 8006552:	06d0      	lsls	r0, r2, #27
 8006554:	bf44      	itt	mi
 8006556:	2320      	movmi	r3, #32
 8006558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655c:	0711      	lsls	r1, r2, #28
 800655e:	bf44      	itt	mi
 8006560:	232b      	movmi	r3, #43	; 0x2b
 8006562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006566:	f89a 3000 	ldrb.w	r3, [sl]
 800656a:	2b2a      	cmp	r3, #42	; 0x2a
 800656c:	d015      	beq.n	800659a <_svfiprintf_r+0xf6>
 800656e:	9a07      	ldr	r2, [sp, #28]
 8006570:	4654      	mov	r4, sl
 8006572:	2000      	movs	r0, #0
 8006574:	f04f 0c0a 	mov.w	ip, #10
 8006578:	4621      	mov	r1, r4
 800657a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657e:	3b30      	subs	r3, #48	; 0x30
 8006580:	2b09      	cmp	r3, #9
 8006582:	d94e      	bls.n	8006622 <_svfiprintf_r+0x17e>
 8006584:	b1b0      	cbz	r0, 80065b4 <_svfiprintf_r+0x110>
 8006586:	9207      	str	r2, [sp, #28]
 8006588:	e014      	b.n	80065b4 <_svfiprintf_r+0x110>
 800658a:	eba0 0308 	sub.w	r3, r0, r8
 800658e:	fa09 f303 	lsl.w	r3, r9, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	46a2      	mov	sl, r4
 8006598:	e7d2      	b.n	8006540 <_svfiprintf_r+0x9c>
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	1d19      	adds	r1, r3, #4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	9103      	str	r1, [sp, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bfbb      	ittet	lt
 80065a6:	425b      	neglt	r3, r3
 80065a8:	f042 0202 	orrlt.w	r2, r2, #2
 80065ac:	9307      	strge	r3, [sp, #28]
 80065ae:	9307      	strlt	r3, [sp, #28]
 80065b0:	bfb8      	it	lt
 80065b2:	9204      	strlt	r2, [sp, #16]
 80065b4:	7823      	ldrb	r3, [r4, #0]
 80065b6:	2b2e      	cmp	r3, #46	; 0x2e
 80065b8:	d10c      	bne.n	80065d4 <_svfiprintf_r+0x130>
 80065ba:	7863      	ldrb	r3, [r4, #1]
 80065bc:	2b2a      	cmp	r3, #42	; 0x2a
 80065be:	d135      	bne.n	800662c <_svfiprintf_r+0x188>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	1d1a      	adds	r2, r3, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	9203      	str	r2, [sp, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfb8      	it	lt
 80065cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80065d0:	3402      	adds	r4, #2
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066a0 <_svfiprintf_r+0x1fc>
 80065d8:	7821      	ldrb	r1, [r4, #0]
 80065da:	2203      	movs	r2, #3
 80065dc:	4650      	mov	r0, sl
 80065de:	f7f9 fdf7 	bl	80001d0 <memchr>
 80065e2:	b140      	cbz	r0, 80065f6 <_svfiprintf_r+0x152>
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	eba0 000a 	sub.w	r0, r0, sl
 80065ea:	fa03 f000 	lsl.w	r0, r3, r0
 80065ee:	9b04      	ldr	r3, [sp, #16]
 80065f0:	4303      	orrs	r3, r0
 80065f2:	3401      	adds	r4, #1
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fa:	4826      	ldr	r0, [pc, #152]	; (8006694 <_svfiprintf_r+0x1f0>)
 80065fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006600:	2206      	movs	r2, #6
 8006602:	f7f9 fde5 	bl	80001d0 <memchr>
 8006606:	2800      	cmp	r0, #0
 8006608:	d038      	beq.n	800667c <_svfiprintf_r+0x1d8>
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <_svfiprintf_r+0x1f4>)
 800660c:	bb1b      	cbnz	r3, 8006656 <_svfiprintf_r+0x1b2>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	3307      	adds	r3, #7
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	3308      	adds	r3, #8
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661c:	4433      	add	r3, r6
 800661e:	9309      	str	r3, [sp, #36]	; 0x24
 8006620:	e767      	b.n	80064f2 <_svfiprintf_r+0x4e>
 8006622:	fb0c 3202 	mla	r2, ip, r2, r3
 8006626:	460c      	mov	r4, r1
 8006628:	2001      	movs	r0, #1
 800662a:	e7a5      	b.n	8006578 <_svfiprintf_r+0xd4>
 800662c:	2300      	movs	r3, #0
 800662e:	3401      	adds	r4, #1
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	4619      	mov	r1, r3
 8006634:	f04f 0c0a 	mov.w	ip, #10
 8006638:	4620      	mov	r0, r4
 800663a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663e:	3a30      	subs	r2, #48	; 0x30
 8006640:	2a09      	cmp	r2, #9
 8006642:	d903      	bls.n	800664c <_svfiprintf_r+0x1a8>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0c5      	beq.n	80065d4 <_svfiprintf_r+0x130>
 8006648:	9105      	str	r1, [sp, #20]
 800664a:	e7c3      	b.n	80065d4 <_svfiprintf_r+0x130>
 800664c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006650:	4604      	mov	r4, r0
 8006652:	2301      	movs	r3, #1
 8006654:	e7f0      	b.n	8006638 <_svfiprintf_r+0x194>
 8006656:	ab03      	add	r3, sp, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	462a      	mov	r2, r5
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <_svfiprintf_r+0x1f8>)
 800665e:	a904      	add	r1, sp, #16
 8006660:	4638      	mov	r0, r7
 8006662:	f3af 8000 	nop.w
 8006666:	1c42      	adds	r2, r0, #1
 8006668:	4606      	mov	r6, r0
 800666a:	d1d6      	bne.n	800661a <_svfiprintf_r+0x176>
 800666c:	89ab      	ldrh	r3, [r5, #12]
 800666e:	065b      	lsls	r3, r3, #25
 8006670:	f53f af2c 	bmi.w	80064cc <_svfiprintf_r+0x28>
 8006674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006676:	b01d      	add	sp, #116	; 0x74
 8006678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667c:	ab03      	add	r3, sp, #12
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	462a      	mov	r2, r5
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <_svfiprintf_r+0x1f8>)
 8006684:	a904      	add	r1, sp, #16
 8006686:	4638      	mov	r0, r7
 8006688:	f000 f87a 	bl	8006780 <_printf_i>
 800668c:	e7eb      	b.n	8006666 <_svfiprintf_r+0x1c2>
 800668e:	bf00      	nop
 8006690:	08006b9c 	.word	0x08006b9c
 8006694:	08006ba6 	.word	0x08006ba6
 8006698:	00000000 	.word	0x00000000
 800669c:	080063ed 	.word	0x080063ed
 80066a0:	08006ba2 	.word	0x08006ba2

080066a4 <_printf_common>:
 80066a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	4616      	mov	r6, r2
 80066aa:	4699      	mov	r9, r3
 80066ac:	688a      	ldr	r2, [r1, #8]
 80066ae:	690b      	ldr	r3, [r1, #16]
 80066b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfb8      	it	lt
 80066b8:	4613      	movlt	r3, r2
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b10a      	cbz	r2, 80066ca <_printf_common+0x26>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	0699      	lsls	r1, r3, #26
 80066ce:	bf42      	ittt	mi
 80066d0:	6833      	ldrmi	r3, [r6, #0]
 80066d2:	3302      	addmi	r3, #2
 80066d4:	6033      	strmi	r3, [r6, #0]
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	f015 0506 	ands.w	r5, r5, #6
 80066dc:	d106      	bne.n	80066ec <_printf_common+0x48>
 80066de:	f104 0a19 	add.w	sl, r4, #25
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	6832      	ldr	r2, [r6, #0]
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	dc26      	bgt.n	800673a <_printf_common+0x96>
 80066ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f0:	1e13      	subs	r3, r2, #0
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	0692      	lsls	r2, r2, #26
 80066fa:	d42b      	bmi.n	8006754 <_printf_common+0xb0>
 80066fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006700:	4649      	mov	r1, r9
 8006702:	4638      	mov	r0, r7
 8006704:	47c0      	blx	r8
 8006706:	3001      	adds	r0, #1
 8006708:	d01e      	beq.n	8006748 <_printf_common+0xa4>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	68e5      	ldr	r5, [r4, #12]
 800670e:	6832      	ldr	r2, [r6, #0]
 8006710:	f003 0306 	and.w	r3, r3, #6
 8006714:	2b04      	cmp	r3, #4
 8006716:	bf08      	it	eq
 8006718:	1aad      	subeq	r5, r5, r2
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	bf0c      	ite	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	2500      	movne	r5, #0
 8006726:	4293      	cmp	r3, r2
 8006728:	bfc4      	itt	gt
 800672a:	1a9b      	subgt	r3, r3, r2
 800672c:	18ed      	addgt	r5, r5, r3
 800672e:	2600      	movs	r6, #0
 8006730:	341a      	adds	r4, #26
 8006732:	42b5      	cmp	r5, r6
 8006734:	d11a      	bne.n	800676c <_printf_common+0xc8>
 8006736:	2000      	movs	r0, #0
 8006738:	e008      	b.n	800674c <_printf_common+0xa8>
 800673a:	2301      	movs	r3, #1
 800673c:	4652      	mov	r2, sl
 800673e:	4649      	mov	r1, r9
 8006740:	4638      	mov	r0, r7
 8006742:	47c0      	blx	r8
 8006744:	3001      	adds	r0, #1
 8006746:	d103      	bne.n	8006750 <_printf_common+0xac>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	3501      	adds	r5, #1
 8006752:	e7c6      	b.n	80066e2 <_printf_common+0x3e>
 8006754:	18e1      	adds	r1, r4, r3
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	2030      	movs	r0, #48	; 0x30
 800675a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800675e:	4422      	add	r2, r4
 8006760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006768:	3302      	adds	r3, #2
 800676a:	e7c7      	b.n	80066fc <_printf_common+0x58>
 800676c:	2301      	movs	r3, #1
 800676e:	4622      	mov	r2, r4
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d0e6      	beq.n	8006748 <_printf_common+0xa4>
 800677a:	3601      	adds	r6, #1
 800677c:	e7d9      	b.n	8006732 <_printf_common+0x8e>
	...

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006788:	2f78      	cmp	r7, #120	; 0x78
 800678a:	4691      	mov	r9, r2
 800678c:	4680      	mov	r8, r0
 800678e:	460c      	mov	r4, r1
 8006790:	469a      	mov	sl, r3
 8006792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	; 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d8 	beq.w	8006952 <_printf_i+0x1d2>
 80067a2:	2f58      	cmp	r7, #88	; 0x58
 80067a4:	f000 80a3 	beq.w	80068ee <_printf_i+0x16e>
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	; (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	08006939 	.word	0x08006939
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800691b 	.word	0x0800691b
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	0800695b 	.word	0x0800695b
 8006804:	080067a9 	.word	0x080067a9
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	08006923 	.word	0x08006923
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e0a3      	b.n	8006974 <_printf_i+0x1f4>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	6829      	ldr	r1, [r5, #0]
 8006830:	0606      	lsls	r6, r0, #24
 8006832:	f101 0304 	add.w	r3, r1, #4
 8006836:	d50a      	bpl.n	800684e <_printf_i+0xce>
 8006838:	680e      	ldr	r6, [r1, #0]
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	2e00      	cmp	r6, #0
 800683e:	da03      	bge.n	8006848 <_printf_i+0xc8>
 8006840:	232d      	movs	r3, #45	; 0x2d
 8006842:	4276      	negs	r6, r6
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	485e      	ldr	r0, [pc, #376]	; (80069c4 <_printf_i+0x244>)
 800684a:	230a      	movs	r3, #10
 800684c:	e019      	b.n	8006882 <_printf_i+0x102>
 800684e:	680e      	ldr	r6, [r1, #0]
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006856:	bf18      	it	ne
 8006858:	b236      	sxthne	r6, r6
 800685a:	e7ef      	b.n	800683c <_printf_i+0xbc>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	6029      	str	r1, [r5, #0]
 8006864:	0601      	lsls	r1, r0, #24
 8006866:	d501      	bpl.n	800686c <_printf_i+0xec>
 8006868:	681e      	ldr	r6, [r3, #0]
 800686a:	e002      	b.n	8006872 <_printf_i+0xf2>
 800686c:	0646      	lsls	r6, r0, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0xe8>
 8006870:	881e      	ldrh	r6, [r3, #0]
 8006872:	4854      	ldr	r0, [pc, #336]	; (80069c4 <_printf_i+0x244>)
 8006874:	2f6f      	cmp	r7, #111	; 0x6f
 8006876:	bf0c      	ite	eq
 8006878:	2308      	moveq	r3, #8
 800687a:	230a      	movne	r3, #10
 800687c:	2100      	movs	r1, #0
 800687e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006882:	6865      	ldr	r5, [r4, #4]
 8006884:	60a5      	str	r5, [r4, #8]
 8006886:	2d00      	cmp	r5, #0
 8006888:	bfa2      	ittt	ge
 800688a:	6821      	ldrge	r1, [r4, #0]
 800688c:	f021 0104 	bicge.w	r1, r1, #4
 8006890:	6021      	strge	r1, [r4, #0]
 8006892:	b90e      	cbnz	r6, 8006898 <_printf_i+0x118>
 8006894:	2d00      	cmp	r5, #0
 8006896:	d04d      	beq.n	8006934 <_printf_i+0x1b4>
 8006898:	4615      	mov	r5, r2
 800689a:	fbb6 f1f3 	udiv	r1, r6, r3
 800689e:	fb03 6711 	mls	r7, r3, r1, r6
 80068a2:	5dc7      	ldrb	r7, [r0, r7]
 80068a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068a8:	4637      	mov	r7, r6
 80068aa:	42bb      	cmp	r3, r7
 80068ac:	460e      	mov	r6, r1
 80068ae:	d9f4      	bls.n	800689a <_printf_i+0x11a>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d10b      	bne.n	80068cc <_printf_i+0x14c>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07de      	lsls	r6, r3, #31
 80068b8:	d508      	bpl.n	80068cc <_printf_i+0x14c>
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	6861      	ldr	r1, [r4, #4]
 80068be:	4299      	cmp	r1, r3
 80068c0:	bfde      	ittt	le
 80068c2:	2330      	movle	r3, #48	; 0x30
 80068c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068cc:	1b52      	subs	r2, r2, r5
 80068ce:	6122      	str	r2, [r4, #16]
 80068d0:	f8cd a000 	str.w	sl, [sp]
 80068d4:	464b      	mov	r3, r9
 80068d6:	aa03      	add	r2, sp, #12
 80068d8:	4621      	mov	r1, r4
 80068da:	4640      	mov	r0, r8
 80068dc:	f7ff fee2 	bl	80066a4 <_printf_common>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d14c      	bne.n	800697e <_printf_i+0x1fe>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b004      	add	sp, #16
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	4835      	ldr	r0, [pc, #212]	; (80069c4 <_printf_i+0x244>)
 80068f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f4:	6829      	ldr	r1, [r5, #0]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068fc:	6029      	str	r1, [r5, #0]
 80068fe:	061d      	lsls	r5, r3, #24
 8006900:	d514      	bpl.n	800692c <_printf_i+0x1ac>
 8006902:	07df      	lsls	r7, r3, #31
 8006904:	bf44      	itt	mi
 8006906:	f043 0320 	orrmi.w	r3, r3, #32
 800690a:	6023      	strmi	r3, [r4, #0]
 800690c:	b91e      	cbnz	r6, 8006916 <_printf_i+0x196>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f023 0320 	bic.w	r3, r3, #32
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	2310      	movs	r3, #16
 8006918:	e7b0      	b.n	800687c <_printf_i+0xfc>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f043 0320 	orr.w	r3, r3, #32
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	2378      	movs	r3, #120	; 0x78
 8006924:	4828      	ldr	r0, [pc, #160]	; (80069c8 <_printf_i+0x248>)
 8006926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800692a:	e7e3      	b.n	80068f4 <_printf_i+0x174>
 800692c:	0659      	lsls	r1, r3, #25
 800692e:	bf48      	it	mi
 8006930:	b2b6      	uxthmi	r6, r6
 8006932:	e7e6      	b.n	8006902 <_printf_i+0x182>
 8006934:	4615      	mov	r5, r2
 8006936:	e7bb      	b.n	80068b0 <_printf_i+0x130>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	6826      	ldr	r6, [r4, #0]
 800693c:	6961      	ldr	r1, [r4, #20]
 800693e:	1d18      	adds	r0, r3, #4
 8006940:	6028      	str	r0, [r5, #0]
 8006942:	0635      	lsls	r5, r6, #24
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	d501      	bpl.n	800694c <_printf_i+0x1cc>
 8006948:	6019      	str	r1, [r3, #0]
 800694a:	e002      	b.n	8006952 <_printf_i+0x1d2>
 800694c:	0670      	lsls	r0, r6, #25
 800694e:	d5fb      	bpl.n	8006948 <_printf_i+0x1c8>
 8006950:	8019      	strh	r1, [r3, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	4615      	mov	r5, r2
 8006958:	e7ba      	b.n	80068d0 <_printf_i+0x150>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	2100      	movs	r1, #0
 8006966:	4628      	mov	r0, r5
 8006968:	f7f9 fc32 	bl	80001d0 <memchr>
 800696c:	b108      	cbz	r0, 8006972 <_printf_i+0x1f2>
 800696e:	1b40      	subs	r0, r0, r5
 8006970:	6060      	str	r0, [r4, #4]
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	2300      	movs	r3, #0
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	e7a8      	b.n	80068d0 <_printf_i+0x150>
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	462a      	mov	r2, r5
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d0ab      	beq.n	80068e4 <_printf_i+0x164>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	079b      	lsls	r3, r3, #30
 8006990:	d413      	bmi.n	80069ba <_printf_i+0x23a>
 8006992:	68e0      	ldr	r0, [r4, #12]
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	4298      	cmp	r0, r3
 8006998:	bfb8      	it	lt
 800699a:	4618      	movlt	r0, r3
 800699c:	e7a4      	b.n	80068e8 <_printf_i+0x168>
 800699e:	2301      	movs	r3, #1
 80069a0:	4632      	mov	r2, r6
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d09b      	beq.n	80068e4 <_printf_i+0x164>
 80069ac:	3501      	adds	r5, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	9903      	ldr	r1, [sp, #12]
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	42ab      	cmp	r3, r5
 80069b6:	dcf2      	bgt.n	800699e <_printf_i+0x21e>
 80069b8:	e7eb      	b.n	8006992 <_printf_i+0x212>
 80069ba:	2500      	movs	r5, #0
 80069bc:	f104 0619 	add.w	r6, r4, #25
 80069c0:	e7f5      	b.n	80069ae <_printf_i+0x22e>
 80069c2:	bf00      	nop
 80069c4:	08006bad 	.word	0x08006bad
 80069c8:	08006bbe 	.word	0x08006bbe

080069cc <memmove>:
 80069cc:	4288      	cmp	r0, r1
 80069ce:	b510      	push	{r4, lr}
 80069d0:	eb01 0402 	add.w	r4, r1, r2
 80069d4:	d902      	bls.n	80069dc <memmove+0x10>
 80069d6:	4284      	cmp	r4, r0
 80069d8:	4623      	mov	r3, r4
 80069da:	d807      	bhi.n	80069ec <memmove+0x20>
 80069dc:	1e43      	subs	r3, r0, #1
 80069de:	42a1      	cmp	r1, r4
 80069e0:	d008      	beq.n	80069f4 <memmove+0x28>
 80069e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ea:	e7f8      	b.n	80069de <memmove+0x12>
 80069ec:	4402      	add	r2, r0
 80069ee:	4601      	mov	r1, r0
 80069f0:	428a      	cmp	r2, r1
 80069f2:	d100      	bne.n	80069f6 <memmove+0x2a>
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069fe:	e7f7      	b.n	80069f0 <memmove+0x24>

08006a00 <_realloc_r>:
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	4680      	mov	r8, r0
 8006a06:	4614      	mov	r4, r2
 8006a08:	460e      	mov	r6, r1
 8006a0a:	b921      	cbnz	r1, 8006a16 <_realloc_r+0x16>
 8006a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	4611      	mov	r1, r2
 8006a12:	f7ff bb85 	b.w	8006120 <_malloc_r>
 8006a16:	b92a      	cbnz	r2, 8006a24 <_realloc_r+0x24>
 8006a18:	f7ff fc9c 	bl	8006354 <_free_r>
 8006a1c:	4625      	mov	r5, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	f000 f81b 	bl	8006a5e <_malloc_usable_size_r>
 8006a28:	4284      	cmp	r4, r0
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	d802      	bhi.n	8006a34 <_realloc_r+0x34>
 8006a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a32:	d812      	bhi.n	8006a5a <_realloc_r+0x5a>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fb72 	bl	8006120 <_malloc_r>
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d0ed      	beq.n	8006a1e <_realloc_r+0x1e>
 8006a42:	42bc      	cmp	r4, r7
 8006a44:	4622      	mov	r2, r4
 8006a46:	4631      	mov	r1, r6
 8006a48:	bf28      	it	cs
 8006a4a:	463a      	movcs	r2, r7
 8006a4c:	f7ff fb32 	bl	80060b4 <memcpy>
 8006a50:	4631      	mov	r1, r6
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff fc7e 	bl	8006354 <_free_r>
 8006a58:	e7e1      	b.n	8006a1e <_realloc_r+0x1e>
 8006a5a:	4635      	mov	r5, r6
 8006a5c:	e7df      	b.n	8006a1e <_realloc_r+0x1e>

08006a5e <_malloc_usable_size_r>:
 8006a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a62:	1f18      	subs	r0, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bfbc      	itt	lt
 8006a68:	580b      	ldrlt	r3, [r1, r0]
 8006a6a:	18c0      	addlt	r0, r0, r3
 8006a6c:	4770      	bx	lr
	...

08006a70 <_init>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr

08006a7c <_fini>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	bf00      	nop
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr
