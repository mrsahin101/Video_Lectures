
017_FreeRTOS_BINARY_SEMAPHORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ac8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b3c  20004b3c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018749  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003021  00000000  00000000  000387ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0003b810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003751  00000000  00000000  0003de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015158  00000000  00000000  00041599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5787  00000000  00000000  000566f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012be78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000562c  00000000  00000000  0012bec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005758 	.word	0x08005758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005758 	.word	0x08005758

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vHandlerTask>:
		xSemaphoreGiveFromISR(xBinarySemaphore, &xHigherPriorityTaskWoken);
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
static void vHandlerTask(void *pvParameters)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <vHandlerTask+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f04f 31ff 	mov.w	r1, #4294967295
 80004e4:	4618      	mov	r0, r3
 80004e6:	f002 fdfb 	bl	80030e0 <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart2,  (uint8_t *)"Handler Task - Processing event\r\n", 60, HAL_MAX_DELAY);
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	223c      	movs	r2, #60	; 0x3c
 80004f0:	4903      	ldr	r1, [pc, #12]	; (8000500 <vHandlerTask+0x2c>)
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <vHandlerTask+0x30>)
 80004f4:	f001 fd61 	bl	8001fba <HAL_UART_Transmit>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80004f8:	e7f0      	b.n	80004dc <vHandlerTask+0x8>
 80004fa:	bf00      	nop
 80004fc:	200000d4 	.word	0x200000d4
 8000500:	080057d8 	.word	0x080057d8
 8000504:	20000090 	.word	0x20000090

08000508 <vPeriodicTask>:
	}
}
static void vPeriodicTask(void *pvParameters)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay500ms = pdMS_TO_TICKS(500UL);
 8000510:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000514:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		vTaskDelay(xDelay500ms);
 8000516:	68f8      	ldr	r0, [r7, #12]
 8000518:	f003 fa2c 	bl	8003974 <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *) "Periodic task - About to generate an interrupt.\r\n", 60, HAL_MAX_DELAY);
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	223c      	movs	r2, #60	; 0x3c
 8000522:	4906      	ldr	r1, [pc, #24]	; (800053c <vPeriodicTask+0x34>)
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <vPeriodicTask+0x38>)
 8000526:	f001 fd48 	bl	8001fba <HAL_UART_Transmit>
		//vPortGenerateSimulatedInterrupt(mainINTERRUPT_NUMBER);
		HAL_UART_Transmit(&huart2, (uint8_t *) "Periodic task - Interrupt generated\r\n\r\n\r\n", 60, HAL_MAX_DELAY);
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	223c      	movs	r2, #60	; 0x3c
 8000530:	4904      	ldr	r1, [pc, #16]	; (8000544 <vPeriodicTask+0x3c>)
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <vPeriodicTask+0x38>)
 8000534:	f001 fd41 	bl	8001fba <HAL_UART_Transmit>
		vTaskDelay(xDelay500ms);
 8000538:	e7ed      	b.n	8000516 <vPeriodicTask+0xe>
 800053a:	bf00      	nop
 800053c:	080057fc 	.word	0x080057fc
 8000540:	20000090 	.word	0x20000090
 8000544:	08005830 	.word	0x08005830

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fa95 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f83b 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8cd 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f8a1 	bl	80006a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xBinarySemaphore = xSemaphoreCreateBinary();
 800055e:	2203      	movs	r2, #3
 8000560:	2100      	movs	r1, #0
 8000562:	2001      	movs	r0, #1
 8000564:	f002 fae4 	bl	8002b30 <xQueueGenericCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <main+0x68>)
 800056c:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&huart2, &byte, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	4910      	ldr	r1, [pc, #64]	; (80005b4 <main+0x6c>)
 8000572:	4811      	ldr	r0, [pc, #68]	; (80005b8 <main+0x70>)
 8000574:	f001 fdb3 	bl	80020de <HAL_UART_Receive_IT>
  if(xBinarySemaphore != NULL)
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <main+0x68>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d015      	beq.n	80005ac <main+0x64>
  {
	  xTaskCreate(vHandlerTask, "Handler", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000580:	2300      	movs	r3, #0
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2303      	movs	r3, #3
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	490b      	ldr	r1, [pc, #44]	; (80005bc <main+0x74>)
 800058e:	480c      	ldr	r0, [pc, #48]	; (80005c0 <main+0x78>)
 8000590:	f003 f895 	bl	80036be <xTaskCreate>

	  xTaskCreate(vPeriodicTask, "Periodic", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000594:	2300      	movs	r3, #0
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2301      	movs	r3, #1
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	4908      	ldr	r1, [pc, #32]	; (80005c4 <main+0x7c>)
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <main+0x80>)
 80005a4:	f003 f88b 	bl	80036be <xTaskCreate>

	  //vPortSetInterruptHandler(mainINTERRUPT_NUMBER, ulExampleInterruptHandler);


	  vTaskStartScheduler();
 80005a8:	f003 fa18 	bl	80039dc <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x64>
 80005ae:	bf00      	nop
 80005b0:	200000d4 	.word	0x200000d4
 80005b4:	200000d8 	.word	0x200000d8
 80005b8:	20000090 	.word	0x20000090
 80005bc:	0800585c 	.word	0x0800585c
 80005c0:	080004d5 	.word	0x080004d5
 80005c4:	08005864 	.word	0x08005864
 80005c8:	08000509 	.word	0x08000509

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fff2 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fcec 	bl	8001030 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f8bb 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2105      	movs	r1, #5
 8000680:	4618      	mov	r0, r3
 8000682:	f000 ff4d 	bl	8001520 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800068c:	f000 f8a4 	bl	80007d8 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 fc22 	bl	8001f20 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f879 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000090 	.word	0x20000090
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <MX_GPIO_Init+0xb8>)
 8000766:	f000 fc49 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800076a:	2301      	movs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_GPIO_Init+0xbc>)
 800077e:	f000 faa1 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000782:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0xb8>)
 800079c:	f000 fa92 	bl	8000cc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40020000 	.word	0x40020000

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c6:	f000 f97b 	bl	8000ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40002000 	.word	0x40002000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <HAL_MspInit+0x54>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x54>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_MspInit+0x54>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x54>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 fa21 	bl	8000c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <HAL_UART_MspInit+0x84>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d12b      	bne.n	80008b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_UART_MspInit+0x88>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0x88>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_UART_MspInit+0x88>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_UART_MspInit+0x88>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_UART_MspInit+0x88>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_UART_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000896:	230c      	movs	r3, #12
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a6:	2307      	movs	r3, #7
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <HAL_UART_MspInit+0x8c>)
 80008b2:	f000 fa07 	bl	8000cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40004400 	.word	0x40004400
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000

080008cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <HAL_InitTick+0xe4>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <HAL_InitTick+0xe4>)
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <HAL_InitTick+0xe4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f82c 	bl	8001960 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000912:	f000 fffd 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8000916:	6378      	str	r0, [r7, #52]	; 0x34
 8000918:	e004      	b.n	8000924 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091a:	f000 fff9 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 800091e:	4603      	mov	r3, r0
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <HAL_InitTick+0xe8>)
 8000928:	fba2 2303 	umull	r2, r3, r2, r3
 800092c:	0c9b      	lsrs	r3, r3, #18
 800092e:	3b01      	subs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <HAL_InitTick+0xec>)
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_InitTick+0xf0>)
 8000936:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <HAL_InitTick+0xec>)
 800093a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <HAL_InitTick+0xec>)
 8000942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000944:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_InitTick+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_InitTick+0xec>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_InitTick+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000958:	4817      	ldr	r0, [pc, #92]	; (80009b8 <HAL_InitTick+0xec>)
 800095a:	f001 f833 	bl	80019c4 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11b      	bne.n	80009a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800096c:	4812      	ldr	r0, [pc, #72]	; (80009b8 <HAL_InitTick+0xec>)
 800096e:	f001 f883 	bl	8001a78 <HAL_TIM_Base_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000978:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000980:	202d      	movs	r0, #45	; 0x2d
 8000982:	f000 f991 	bl	8000ca8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d808      	bhi.n	800099e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	202d      	movs	r0, #45	; 0x2d
 8000992:	f000 f96d 	bl	8000c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_InitTick+0xf4>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e002      	b.n	80009a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3738      	adds	r7, #56	; 0x38
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	200000dc 	.word	0x200000dc
 80009bc:	40002000 	.word	0x40002000
 80009c0:	20000004 	.word	0x20000004

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009f6:	f001 f8af 	bl	8001b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000dc 	.word	0x200000dc

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a52:	f7ff ffd7 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f004 fd81 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd75 	bl	8000548 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a6c:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8000a70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a74:	20004b3c 	.word	0x20004b3c

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_Init+0x40>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_Init+0x40>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x40>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f8d8 	bl	8000c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f7ff ff0e 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fe98 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000124 	.word	0x20000124

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000124 	.word	0x20000124

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff4c 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c82:	f7ff ff61 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	6978      	ldr	r0, [r7, #20]
 8000c8e:	f7ff ffb1 	bl	8000bf4 <NVIC_EncodePriority>
 8000c92:	4602      	mov	r2, r0
 8000c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff80 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff54 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	e16b      	b.n	8000fb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	f040 815a 	bne.w	8000fb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d005      	beq.n	8000d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d130      	bne.n	8000d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	f003 0201 	and.w	r2, r3, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d017      	beq.n	8000db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d123      	bne.n	8000e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0203 	and.w	r2, r3, #3
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80b4 	beq.w	8000fb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b60      	ldr	r3, [pc, #384]	; (8000fd0 <HAL_GPIO_Init+0x30c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a5f      	ldr	r2, [pc, #380]	; (8000fd0 <HAL_GPIO_Init+0x30c>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <HAL_GPIO_Init+0x30c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e66:	4a5b      	ldr	r2, [pc, #364]	; (8000fd4 <HAL_GPIO_Init+0x310>)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a52      	ldr	r2, [pc, #328]	; (8000fd8 <HAL_GPIO_Init+0x314>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d02b      	beq.n	8000eea <HAL_GPIO_Init+0x226>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a51      	ldr	r2, [pc, #324]	; (8000fdc <HAL_GPIO_Init+0x318>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d025      	beq.n	8000ee6 <HAL_GPIO_Init+0x222>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a50      	ldr	r2, [pc, #320]	; (8000fe0 <HAL_GPIO_Init+0x31c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01f      	beq.n	8000ee2 <HAL_GPIO_Init+0x21e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <HAL_GPIO_Init+0x320>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d019      	beq.n	8000ede <HAL_GPIO_Init+0x21a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4e      	ldr	r2, [pc, #312]	; (8000fe8 <HAL_GPIO_Init+0x324>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x216>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4d      	ldr	r2, [pc, #308]	; (8000fec <HAL_GPIO_Init+0x328>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x212>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_GPIO_Init+0x32c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x20e>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4b      	ldr	r2, [pc, #300]	; (8000ff4 <HAL_GPIO_Init+0x330>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x20a>
 8000eca:	2307      	movs	r3, #7
 8000ecc:	e00e      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ece:	2308      	movs	r3, #8
 8000ed0:	e00c      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	e00a      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e008      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000eea:	2300      	movs	r3, #0
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	f002 0203 	and.w	r2, r2, #3
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efc:	4935      	ldr	r1, [pc, #212]	; (8000fd4 <HAL_GPIO_Init+0x310>)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2e:	4a32      	ldr	r2, [pc, #200]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	f67f ae90 	bls.w	8000ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020c00 	.word	0x40020c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40021400 	.word	0x40021400
 8000ff0:	40021800 	.word	0x40021800
 8000ff4:	40021c00 	.word	0x40021c00
 8000ff8:	40013c00 	.word	0x40013c00

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e267      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d075      	beq.n	800113a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104e:	4b88      	ldr	r3, [pc, #544]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b04      	cmp	r3, #4
 8001058:	d00c      	beq.n	8001074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	2b08      	cmp	r3, #8
 8001064:	d112      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001066:	4b82      	ldr	r3, [pc, #520]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001072:	d10b      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	4b7e      	ldr	r3, [pc, #504]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d05b      	beq.n	8001138 <HAL_RCC_OscConfig+0x108>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d157      	bne.n	8001138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e242      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d106      	bne.n	80010a4 <HAL_RCC_OscConfig+0x74>
 8001096:	4b76      	ldr	r3, [pc, #472]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a75      	ldr	r2, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x98>
 80010ae:	4b70      	ldr	r3, [pc, #448]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a6f      	ldr	r2, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b6d      	ldr	r3, [pc, #436]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a6c      	ldr	r2, [pc, #432]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010c8:	4b69      	ldr	r3, [pc, #420]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a68      	ldr	r2, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b66      	ldr	r3, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a65      	ldr	r2, [pc, #404]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fcfe 	bl	8000ae8 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fcfa 	bl	8000ae8 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e207      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b5b      	ldr	r3, [pc, #364]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xc0>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fcea 	bl	8000ae8 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fce6 	bl	8000ae8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1f3      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	4b51      	ldr	r3, [pc, #324]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0xe8>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d063      	beq.n	800120e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001146:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11c      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115e:	4b44      	ldr	r3, [pc, #272]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1c7      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4937      	ldr	r1, [pc, #220]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e03a      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_RCC_OscConfig+0x244>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc9f 	bl	8000ae8 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fc9b 	bl	8000ae8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e1a8      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4925      	ldr	r1, [pc, #148]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x244>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc7e 	bl	8000ae8 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc7a 	bl	8000ae8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e187      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d036      	beq.n	8001288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d016      	beq.n	8001250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_RCC_OscConfig+0x248>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001228:	f7ff fc5e 	bl	8000ae8 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fc5a 	bl	8000ae8 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e167      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x200>
 800124e:	e01b      	b.n	8001288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_RCC_OscConfig+0x248>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fc47 	bl	8000ae8 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	e00e      	b.n	800127c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fc43 	bl	8000ae8 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d907      	bls.n	800127c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e150      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
 8001270:	40023800 	.word	0x40023800
 8001274:	42470000 	.word	0x42470000
 8001278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ea      	bne.n	800125e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 8097 	beq.w	80013c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a7c      	ldr	r2, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b77      	ldr	r3, [pc, #476]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d118      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b74      	ldr	r3, [pc, #464]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a73      	ldr	r2, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fc03 	bl	8000ae8 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff fbff 	bl	8000ae8 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e10c      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x2ea>
 800130c:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	4a63      	ldr	r2, [pc, #396]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6713      	str	r3, [r2, #112]	; 0x70
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x324>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x30c>
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	4a5e      	ldr	r2, [pc, #376]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6713      	str	r3, [r2, #112]	; 0x70
 800132e:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001332:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6713      	str	r3, [r2, #112]	; 0x70
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0x324>
 800133c:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	4a57      	ldr	r2, [pc, #348]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	; 0x70
 8001348:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	4a54      	ldr	r2, [pc, #336]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d015      	beq.n	8001388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fbc4 	bl	8000ae8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fbc0 	bl	8000ae8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0cb      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0ee      	beq.n	8001364 <HAL_RCC_OscConfig+0x334>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fbae 	bl	8000ae8 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff fbaa 	bl	8000ae8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	; 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0b5      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ee      	bne.n	8001390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d105      	bne.n	80013c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a1 	beq.w	8001510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d05c      	beq.n	8001494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d141      	bne.n	8001466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_RCC_OscConfig+0x478>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb7e 	bl	8000ae8 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb7a 	bl	8000ae8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e087      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	3b01      	subs	r3, #1
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	491b      	ldr	r1, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x478>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fb53 	bl	8000ae8 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff fb4f 	bl	8000ae8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e05c      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x416>
 8001464:	e054      	b.n	8001510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_RCC_OscConfig+0x478>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fb3c 	bl	8000ae8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fb38 	bl	8000ae8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e045      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x444>
 8001492:	e03d      	b.n	8001510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e038      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000
 80014a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x4ec>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d028      	beq.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d121      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d11a      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d111      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	3b01      	subs	r3, #1
 80014f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0cc      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d90c      	bls.n	800155c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b8      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800157e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	494d      	ldr	r1, [pc, #308]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d044      	beq.n	8001640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d119      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e07f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d003      	beq.n	80015de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e06f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e067      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 0203 	bic.w	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4934      	ldr	r1, [pc, #208]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff fa6a 	bl	8000ae8 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	e00a      	b.n	800162e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001618:	f7ff fa66 	bl	8000ae8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e04f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 020c 	and.w	r2, r3, #12
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	429a      	cmp	r2, r3
 800163e:	d1eb      	bne.n	8001618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d20c      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e032      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4916      	ldr	r1, [pc, #88]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	490e      	ldr	r1, [pc, #56]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a6:	f000 f821 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	490a      	ldr	r1, [pc, #40]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	5ccb      	ldrb	r3, [r1, r3]
 80016ba:	fa22 f303 	lsr.w	r3, r2, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f900 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023c00 	.word	0x40023c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	08005888 	.word	0x08005888
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f0:	b094      	sub	sp, #80	; 0x50
 80016f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
 80016f8:	2300      	movs	r3, #0
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016fc:	2300      	movs	r3, #0
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001704:	4b79      	ldr	r3, [pc, #484]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d00d      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x40>
 8001710:	2b08      	cmp	r3, #8
 8001712:	f200 80e1 	bhi.w	80018d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x34>
 800171a:	2b04      	cmp	r3, #4
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x3a>
 800171e:	e0db      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001724:	e0db      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800172a:	e0d8      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172c:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001734:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001736:	4b6d      	ldr	r3, [pc, #436]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d063      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001742:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	2200      	movs	r2, #0
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
 800174c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800174e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
 800175a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800175e:	4622      	mov	r2, r4
 8001760:	462b      	mov	r3, r5
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4621      	mov	r1, r4
 8001778:	1a51      	subs	r1, r2, r1
 800177a:	6139      	str	r1, [r7, #16]
 800177c:	4629      	mov	r1, r5
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001790:	4659      	mov	r1, fp
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	4651      	mov	r1, sl
 8001796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179a:	4651      	mov	r1, sl
 800179c:	018a      	lsls	r2, r1, #6
 800179e:	4651      	mov	r1, sl
 80017a0:	ebb2 0801 	subs.w	r8, r2, r1
 80017a4:	4659      	mov	r1, fp
 80017a6:	eb63 0901 	sbc.w	r9, r3, r1
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017be:	4690      	mov	r8, r2
 80017c0:	4699      	mov	r9, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	eb18 0303 	adds.w	r3, r8, r3
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	462b      	mov	r3, r5
 80017cc:	eb49 0303 	adc.w	r3, r9, r3
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017de:	4629      	mov	r1, r5
 80017e0:	024b      	lsls	r3, r1, #9
 80017e2:	4621      	mov	r1, r4
 80017e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017e8:	4621      	mov	r1, r4
 80017ea:	024a      	lsls	r2, r1, #9
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f2:	2200      	movs	r2, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017fc:	f7fe fce8 	bl	80001d0 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001808:	e058      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	2200      	movs	r2, #0
 8001812:	4618      	mov	r0, r3
 8001814:	4611      	mov	r1, r2
 8001816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
 8001820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001824:	4642      	mov	r2, r8
 8001826:	464b      	mov	r3, r9
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	0159      	lsls	r1, r3, #5
 8001832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001836:	0150      	lsls	r0, r2, #5
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4641      	mov	r1, r8
 800183e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001842:	4649      	mov	r1, r9
 8001844:	eb63 0b01 	sbc.w	fp, r3, r1
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800185c:	ebb2 040a 	subs.w	r4, r2, sl
 8001860:	eb63 050b 	sbc.w	r5, r3, fp
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	00eb      	lsls	r3, r5, #3
 800186e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	4643      	mov	r3, r8
 800187a:	18e3      	adds	r3, r4, r3
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	464b      	mov	r3, r9
 8001880:	eb45 0303 	adc.w	r3, r5, r3
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001892:	4629      	mov	r1, r5
 8001894:	028b      	lsls	r3, r1, #10
 8001896:	4621      	mov	r1, r4
 8001898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800189c:	4621      	mov	r1, r4
 800189e:	028a      	lsls	r2, r1, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a6:	2200      	movs	r2, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	61fa      	str	r2, [r7, #28]
 80018ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b0:	f7fe fc8e 	bl	80001d0 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0c1b      	lsrs	r3, r3, #16
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3750      	adds	r7, #80	; 0x50
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	007a1200 	.word	0x007a1200

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08005898 	.word	0x08005898

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffdc 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08005898 	.word	0x08005898

08001960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	220f      	movs	r2, #15
 800196e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_RCC_GetClockConfig+0x60>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0207 	and.w	r2, r3, #7
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e041      	b.n	8001a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f839 	bl	8001a62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3304      	adds	r3, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f000 f9d8 	bl	8001db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d001      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e04e      	b.n	8001b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d022      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x80>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aba:	d01d      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x80>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d018      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x80>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x80>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00e      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x80>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d009      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x80>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x80>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d111      	bne.n	8001b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d010      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0201 	orr.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1a:	e007      	b.n	8001b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40000400 	.word	0x40000400
 8001b44:	40000800 	.word	0x40000800
 8001b48:	40000c00 	.word	0x40000c00
 8001b4c:	40010400 	.word	0x40010400
 8001b50:	40014000 	.word	0x40014000
 8001b54:	40001800 	.word	0x40001800

08001b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d122      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0202 	mvn.w	r2, #2
 8001b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8ee 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8e0 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8f1 	bl	8001d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0204 	mvn.w	r2, #4
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8c4 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8b6 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8c7 	bl	8001d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0208 	mvn.w	r2, #8
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f89a 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f88c 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f89d 	bl	8001d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0210 	mvn.w	r2, #16
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2208      	movs	r2, #8
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f870 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f862 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f873 	bl	8001d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0201 	mvn.w	r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fd6c 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b80      	cmp	r3, #128	; 0x80
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f902 	bl	8001f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f838 	bl	8001da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d10e      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d107      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0220 	mvn.w	r2, #32
 8001d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8cc 	bl	8001ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <TIM_Base_SetConfig+0x114>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <TIM_Base_SetConfig+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd6:	d00f      	beq.n	8001df8 <TIM_Base_SetConfig+0x40>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3d      	ldr	r2, [pc, #244]	; (8001ed0 <TIM_Base_SetConfig+0x118>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00b      	beq.n	8001df8 <TIM_Base_SetConfig+0x40>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <TIM_Base_SetConfig+0x11c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d007      	beq.n	8001df8 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3b      	ldr	r2, [pc, #236]	; (8001ed8 <TIM_Base_SetConfig+0x120>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d003      	beq.n	8001df8 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3a      	ldr	r2, [pc, #232]	; (8001edc <TIM_Base_SetConfig+0x124>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d108      	bne.n	8001e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ecc <TIM_Base_SetConfig+0x114>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d02b      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e18:	d027      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <TIM_Base_SetConfig+0x118>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d023      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2b      	ldr	r2, [pc, #172]	; (8001ed4 <TIM_Base_SetConfig+0x11c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01f      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <TIM_Base_SetConfig+0x120>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01b      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <TIM_Base_SetConfig+0x124>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d017      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <TIM_Base_SetConfig+0x128>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <TIM_Base_SetConfig+0x12c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00f      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <TIM_Base_SetConfig+0x130>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a25      	ldr	r2, [pc, #148]	; (8001eec <TIM_Base_SetConfig+0x134>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <TIM_Base_SetConfig+0x138>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <TIM_Base_SetConfig+0x13c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d108      	bne.n	8001e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <TIM_Base_SetConfig+0x114>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d003      	beq.n	8001eb0 <TIM_Base_SetConfig+0xf8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <TIM_Base_SetConfig+0x124>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d103      	bne.n	8001eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	615a      	str	r2, [r3, #20]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40010400 	.word	0x40010400
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40014400 	.word	0x40014400
 8001ee8:	40014800 	.word	0x40014800
 8001eec:	40001800 	.word	0x40001800
 8001ef0:	40001c00 	.word	0x40001c00
 8001ef4:	40002000 	.word	0x40002000

08001ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e03f      	b.n	8001fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fc78 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f997 	bl	8002298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b08a      	sub	sp, #40	; 0x28
 8001fbe:	af02      	add	r7, sp, #8
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d17c      	bne.n	80020d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_UART_Transmit+0x2c>
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e075      	b.n	80020d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_UART_Transmit+0x3e>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e06e      	b.n	80020d6 <HAL_UART_Transmit+0x11c>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2221      	movs	r2, #33	; 0x21
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800200e:	f7fe fd6b 	bl	8000ae8 <HAL_GetTick>
 8002012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	d108      	bne.n	800203c <HAL_UART_Transmit+0x82>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d104      	bne.n	800203c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	e003      	b.n	8002044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800204c:	e02a      	b.n	80020a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f870 	bl	800213e <UART_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e036      	b.n	80020d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10b      	bne.n	8002086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800207c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3302      	adds	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	e007      	b.n	8002096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1cf      	bne.n	800204e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2140      	movs	r1, #64	; 0x40
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f840 	bl	800213e <UART_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e006      	b.n	80020d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d11d      	bne.n	8002134 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_UART_Receive_IT+0x26>
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e016      	b.n	8002136 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_UART_Receive_IT+0x38>
 8002112:	2302      	movs	r3, #2
 8002114:	e00f      	b.n	8002136 <HAL_UART_Receive_IT+0x58>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	461a      	mov	r2, r3
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f875 	bl	800221a <UART_Start_Receive_IT>
 8002130:	4603      	mov	r3, r0
 8002132:	e000      	b.n	8002136 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
  }
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b090      	sub	sp, #64	; 0x40
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800214e:	e050      	b.n	80021f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d04c      	beq.n	80021f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <UART_WaitOnFlagUntilTimeout+0x30>
 800215e:	f7fe fcc3 	bl	8000ae8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800216a:	429a      	cmp	r2, r3
 800216c:	d241      	bcs.n	80021f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	330c      	adds	r3, #12
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	e853 3f00 	ldrex	r3, [r3]
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800218e:	637a      	str	r2, [r7, #52]	; 0x34
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002196:	e841 2300 	strex	r3, r2, [r1]
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1e5      	bne.n	800216e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3314      	adds	r3, #20
 80021a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	e853 3f00 	ldrex	r3, [r3]
 80021b0:	613b      	str	r3, [r7, #16]
   return(result);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3314      	adds	r3, #20
 80021c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c2:	623a      	str	r2, [r7, #32]
 80021c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c6:	69f9      	ldr	r1, [r7, #28]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	e841 2300 	strex	r3, r2, [r1]
 80021ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e5      	bne.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e00f      	b.n	8002212 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4013      	ands	r3, r2
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	429a      	cmp	r2, r3
 800220e:	d09f      	beq.n	8002150 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3740      	adds	r7, #64	; 0x40
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	4613      	mov	r3, r2
 8002226:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	88fa      	ldrh	r2, [r7, #6]
 8002238:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2222      	movs	r2, #34	; 0x22
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002266:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0220 	orr.w	r2, r2, #32
 8002286:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b0c0      	sub	sp, #256	; 0x100
 800229e:	af00      	add	r7, sp, #0
 80022a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	68d9      	ldr	r1, [r3, #12]
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	ea40 0301 	orr.w	r3, r0, r1
 80022c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022f0:	f021 010c 	bic.w	r1, r1, #12
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022fe:	430b      	orrs	r3, r1
 8002300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002312:	6999      	ldr	r1, [r3, #24]
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	ea40 0301 	orr.w	r3, r0, r1
 800231e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <UART_SetConfig+0x2cc>)
 8002328:	429a      	cmp	r2, r3
 800232a:	d005      	beq.n	8002338 <UART_SetConfig+0xa0>
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b8d      	ldr	r3, [pc, #564]	; (8002568 <UART_SetConfig+0x2d0>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d104      	bne.n	8002342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002338:	f7ff fafe 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 800233c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002340:	e003      	b.n	800234a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002342:	f7ff fae5 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8002346:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800234a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002354:	f040 810c 	bne.w	8002570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235c:	2200      	movs	r2, #0
 800235e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002362:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	1891      	adds	r1, r2, r2
 8002370:	65b9      	str	r1, [r7, #88]	; 0x58
 8002372:	415b      	adcs	r3, r3
 8002374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800237a:	4621      	mov	r1, r4
 800237c:	eb12 0801 	adds.w	r8, r2, r1
 8002380:	4629      	mov	r1, r5
 8002382:	eb43 0901 	adc.w	r9, r3, r1
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800239a:	4690      	mov	r8, r2
 800239c:	4699      	mov	r9, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	eb18 0303 	adds.w	r3, r8, r3
 80023a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023a8:	462b      	mov	r3, r5
 80023aa:	eb49 0303 	adc.w	r3, r9, r3
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023c6:	460b      	mov	r3, r1
 80023c8:	18db      	adds	r3, r3, r3
 80023ca:	653b      	str	r3, [r7, #80]	; 0x50
 80023cc:	4613      	mov	r3, r2
 80023ce:	eb42 0303 	adc.w	r3, r2, r3
 80023d2:	657b      	str	r3, [r7, #84]	; 0x54
 80023d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80023dc:	f7fd fef8 	bl	80001d0 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <UART_SetConfig+0x2d4>)
 80023e6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	011c      	lsls	r4, r3, #4
 80023ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	1891      	adds	r1, r2, r2
 8002406:	64b9      	str	r1, [r7, #72]	; 0x48
 8002408:	415b      	adcs	r3, r3
 800240a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800240c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002410:	4641      	mov	r1, r8
 8002412:	eb12 0a01 	adds.w	sl, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb43 0b01 	adc.w	fp, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800242c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002430:	4692      	mov	sl, r2
 8002432:	469b      	mov	fp, r3
 8002434:	4643      	mov	r3, r8
 8002436:	eb1a 0303 	adds.w	r3, sl, r3
 800243a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800243e:	464b      	mov	r3, r9
 8002440:	eb4b 0303 	adc.w	r3, fp, r3
 8002444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002454:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800245c:	460b      	mov	r3, r1
 800245e:	18db      	adds	r3, r3, r3
 8002460:	643b      	str	r3, [r7, #64]	; 0x40
 8002462:	4613      	mov	r3, r2
 8002464:	eb42 0303 	adc.w	r3, r2, r3
 8002468:	647b      	str	r3, [r7, #68]	; 0x44
 800246a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800246e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002472:	f7fd fead 	bl	80001d0 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4611      	mov	r1, r2
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <UART_SetConfig+0x2d4>)
 800247e:	fba3 2301 	umull	r2, r3, r3, r1
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2264      	movs	r2, #100	; 0x64
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <UART_SetConfig+0x2d4>)
 8002494:	fba3 2302 	umull	r2, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024a0:	441c      	add	r4, r3
 80024a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80024bc:	415b      	adcs	r3, r3
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024c4:	4641      	mov	r1, r8
 80024c6:	1851      	adds	r1, r2, r1
 80024c8:	6339      	str	r1, [r7, #48]	; 0x30
 80024ca:	4649      	mov	r1, r9
 80024cc:	414b      	adcs	r3, r1
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80024dc:	4659      	mov	r1, fp
 80024de:	00cb      	lsls	r3, r1, #3
 80024e0:	4651      	mov	r1, sl
 80024e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024e6:	4651      	mov	r1, sl
 80024e8:	00ca      	lsls	r2, r1, #3
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	4642      	mov	r2, r8
 80024f2:	189b      	adds	r3, r3, r2
 80024f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024f8:	464b      	mov	r3, r9
 80024fa:	460a      	mov	r2, r1
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002510:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002518:	460b      	mov	r3, r1
 800251a:	18db      	adds	r3, r3, r3
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
 800251e:	4613      	mov	r3, r2
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800252a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800252e:	f7fd fe4f 	bl	80001d0 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <UART_SetConfig+0x2d4>)
 8002538:	fba3 1302 	umull	r1, r3, r3, r2
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	2164      	movs	r1, #100	; 0x64
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	3332      	adds	r3, #50	; 0x32
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <UART_SetConfig+0x2d4>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	f003 0207 	and.w	r2, r3, #7
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4422      	add	r2, r4
 800255e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002560:	e105      	b.n	800276e <UART_SetConfig+0x4d6>
 8002562:	bf00      	nop
 8002564:	40011000 	.word	0x40011000
 8002568:	40011400 	.word	0x40011400
 800256c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800257a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800257e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002582:	4642      	mov	r2, r8
 8002584:	464b      	mov	r3, r9
 8002586:	1891      	adds	r1, r2, r2
 8002588:	6239      	str	r1, [r7, #32]
 800258a:	415b      	adcs	r3, r3
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002592:	4641      	mov	r1, r8
 8002594:	1854      	adds	r4, r2, r1
 8002596:	4649      	mov	r1, r9
 8002598:	eb43 0501 	adc.w	r5, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	00eb      	lsls	r3, r5, #3
 80025a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025aa:	00e2      	lsls	r2, r4, #3
 80025ac:	4614      	mov	r4, r2
 80025ae:	461d      	mov	r5, r3
 80025b0:	4643      	mov	r3, r8
 80025b2:	18e3      	adds	r3, r4, r3
 80025b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b8:	464b      	mov	r3, r9
 80025ba:	eb45 0303 	adc.w	r3, r5, r3
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025de:	4629      	mov	r1, r5
 80025e0:	008b      	lsls	r3, r1, #2
 80025e2:	4621      	mov	r1, r4
 80025e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025e8:	4621      	mov	r1, r4
 80025ea:	008a      	lsls	r2, r1, #2
 80025ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025f0:	f7fd fdee 	bl	80001d0 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4b60      	ldr	r3, [pc, #384]	; (800277c <UART_SetConfig+0x4e4>)
 80025fa:	fba3 2302 	umull	r2, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	011c      	lsls	r4, r3, #4
 8002602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800260c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	1891      	adds	r1, r2, r2
 800261a:	61b9      	str	r1, [r7, #24]
 800261c:	415b      	adcs	r3, r3
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002624:	4641      	mov	r1, r8
 8002626:	1851      	adds	r1, r2, r1
 8002628:	6139      	str	r1, [r7, #16]
 800262a:	4649      	mov	r1, r9
 800262c:	414b      	adcs	r3, r1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800263c:	4659      	mov	r1, fp
 800263e:	00cb      	lsls	r3, r1, #3
 8002640:	4651      	mov	r1, sl
 8002642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002646:	4651      	mov	r1, sl
 8002648:	00ca      	lsls	r2, r1, #3
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4603      	mov	r3, r0
 8002650:	4642      	mov	r2, r8
 8002652:	189b      	adds	r3, r3, r2
 8002654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002658:	464b      	mov	r3, r9
 800265a:	460a      	mov	r2, r1
 800265c:	eb42 0303 	adc.w	r3, r2, r3
 8002660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	67bb      	str	r3, [r7, #120]	; 0x78
 800266e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800267c:	4649      	mov	r1, r9
 800267e:	008b      	lsls	r3, r1, #2
 8002680:	4641      	mov	r1, r8
 8002682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002686:	4641      	mov	r1, r8
 8002688:	008a      	lsls	r2, r1, #2
 800268a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800268e:	f7fd fd9f 	bl	80001d0 <__aeabi_uldivmod>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <UART_SetConfig+0x4e4>)
 8002698:	fba3 1302 	umull	r1, r3, r3, r2
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	2164      	movs	r1, #100	; 0x64
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	3332      	adds	r3, #50	; 0x32
 80026aa:	4a34      	ldr	r2, [pc, #208]	; (800277c <UART_SetConfig+0x4e4>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b6:	441c      	add	r4, r3
 80026b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026bc:	2200      	movs	r2, #0
 80026be:	673b      	str	r3, [r7, #112]	; 0x70
 80026c0:	677a      	str	r2, [r7, #116]	; 0x74
 80026c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026c6:	4642      	mov	r2, r8
 80026c8:	464b      	mov	r3, r9
 80026ca:	1891      	adds	r1, r2, r2
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	415b      	adcs	r3, r3
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d6:	4641      	mov	r1, r8
 80026d8:	1851      	adds	r1, r2, r1
 80026da:	6039      	str	r1, [r7, #0]
 80026dc:	4649      	mov	r1, r9
 80026de:	414b      	adcs	r3, r1
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026ee:	4659      	mov	r1, fp
 80026f0:	00cb      	lsls	r3, r1, #3
 80026f2:	4651      	mov	r1, sl
 80026f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f8:	4651      	mov	r1, sl
 80026fa:	00ca      	lsls	r2, r1, #3
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	4603      	mov	r3, r0
 8002702:	4642      	mov	r2, r8
 8002704:	189b      	adds	r3, r3, r2
 8002706:	66bb      	str	r3, [r7, #104]	; 0x68
 8002708:	464b      	mov	r3, r9
 800270a:	460a      	mov	r2, r1
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	663b      	str	r3, [r7, #96]	; 0x60
 800271c:	667a      	str	r2, [r7, #100]	; 0x64
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800272a:	4649      	mov	r1, r9
 800272c:	008b      	lsls	r3, r1, #2
 800272e:	4641      	mov	r1, r8
 8002730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002734:	4641      	mov	r1, r8
 8002736:	008a      	lsls	r2, r1, #2
 8002738:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800273c:	f7fd fd48 	bl	80001d0 <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <UART_SetConfig+0x4e4>)
 8002746:	fba3 1302 	umull	r1, r3, r3, r2
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2164      	movs	r1, #100	; 0x64
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	3332      	adds	r3, #50	; 0x32
 8002758:	4a08      	ldr	r2, [pc, #32]	; (800277c <UART_SetConfig+0x4e4>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4422      	add	r2, r4
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	bf00      	nop
 8002770:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277a:	bf00      	nop
 800277c:	51eb851f 	.word	0x51eb851f

08002780 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Handler+0x1c>)
 8002786:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002788:	f001 fd84 	bl	8004294 <xTaskGetSchedulerState>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d001      	beq.n	8002796 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002792:	f002 fc69 	bl	8005068 <xPortSysTickHandler>
  }
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <vApplicationGetIdleTaskMemory+0x2c>)
 80027b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <vApplicationGetIdleTaskMemory+0x30>)
 80027b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	601a      	str	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000128 	.word	0x20000128
 80027d0:	200001e4 	.word	0x200001e4

080027d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <vApplicationGetTimerTaskMemory+0x2c>)
 80027e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4a06      	ldr	r2, [pc, #24]	; (8002804 <vApplicationGetTimerTaskMemory+0x30>)
 80027ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f2:	601a      	str	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	200003e4 	.word	0x200003e4
 8002804:	200004a0 	.word	0x200004a0

08002808 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f103 0208 	add.w	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f103 0208 	add.w	r2, r3, #8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 0208 	add.w	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d103      	bne.n	80028ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	e00c      	b.n	80028e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3308      	adds	r3, #8
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e002      	b.n	80028d8 <vListInsert+0x2e>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d2f6      	bcs.n	80028d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	601a      	str	r2, [r3, #0]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6852      	ldr	r2, [r2, #4]
 800293c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d103      	bne.n	8002950 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800299a:	f002 fad3 	bl	8004f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	3b01      	subs	r3, #1
 80029cc:	68f9      	ldr	r1, [r7, #12]
 80029ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	441a      	add	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d114      	bne.n	8002a1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01a      	beq.n	8002a2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3310      	adds	r3, #16
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fa87 	bl	8003f10 <xTaskRemoveFromEventList>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d012      	beq.n	8002a2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <xQueueGenericReset+0xcc>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	e009      	b.n	8002a2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3310      	adds	r3, #16
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fef2 	bl	8002808 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff feed 	bl	8002808 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a2e:	f002 fab9 	bl	8004fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <xQueueGenericCreateStatic+0x52>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <xQueueGenericCreateStatic+0x56>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <xQueueGenericCreateStatic+0x58>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	623b      	str	r3, [r7, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	e7fe      	b.n	8002ab0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <xQueueGenericCreateStatic+0x7e>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <xQueueGenericCreateStatic+0x82>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <xQueueGenericCreateStatic+0x84>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61fb      	str	r3, [r7, #28]
}
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ade:	2350      	movs	r3, #80	; 0x50
 8002ae0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b50      	cmp	r3, #80	; 0x50
 8002ae6:	d00a      	beq.n	8002afe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	61bb      	str	r3, [r7, #24]
}
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002afe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f83f 	bl	8002ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3730      	adds	r7, #48	; 0x30
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	613b      	str	r3, [r7, #16]
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3350      	adds	r3, #80	; 0x50
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fb0d 	bl	8005188 <pvPortMalloc>
 8002b6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d011      	beq.n	8002b9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3350      	adds	r3, #80	; 0x50
 8002b7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b88:	79fa      	ldrb	r2, [r7, #7]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f805 	bl	8002ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e002      	b.n	8002bc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	69b8      	ldr	r0, [r7, #24]
 8002bd6:	f7ff fecb 	bl	8002970 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	; 0x38
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <xQueueGenericSend+0x32>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c1a:	bf00      	nop
 8002c1c:	e7fe      	b.n	8002c1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <xQueueGenericSend+0x40>
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <xQueueGenericSend+0x44>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <xQueueGenericSend+0x46>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <xQueueGenericSend+0x60>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d103      	bne.n	8002c5a <xQueueGenericSend+0x6e>
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <xQueueGenericSend+0x72>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <xQueueGenericSend+0x74>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <xQueueGenericSend+0x8e>
	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	623b      	str	r3, [r7, #32]
}
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c7a:	f001 fb0b 	bl	8004294 <xTaskGetSchedulerState>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <xQueueGenericSend+0x9e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <xQueueGenericSend+0xa2>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <xQueueGenericSend+0xa4>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <xQueueGenericSend+0xbe>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	61fb      	str	r3, [r7, #28]
}
 8002ca6:	bf00      	nop
 8002ca8:	e7fe      	b.n	8002ca8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002caa:	f002 f94b 	bl	8004f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <xQueueGenericSend+0xd4>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d129      	bne.n	8002d14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc6:	f000 fb2f 	bl	8003328 <prvCopyDataToQueue>
 8002cca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	3324      	adds	r3, #36	; 0x24
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 f919 	bl	8003f10 <xTaskRemoveFromEventList>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <xQueueGenericSend+0x1f8>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	e00a      	b.n	8002d0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cfc:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <xQueueGenericSend+0x1f8>)
 8002cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d0c:	f002 f94a 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e063      	b.n	8002ddc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d1a:	f002 f943 	bl	8004fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e05c      	b.n	8002ddc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 f953 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d32:	2301      	movs	r3, #1
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d36:	f002 f935 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d3a:	f000 febf 	bl	8003abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d3e:	f002 f901 	bl	8004f44 <vPortEnterCritical>
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d103      	bne.n	8002d58 <xQueueGenericSend+0x16c>
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d103      	bne.n	8002d6e <xQueueGenericSend+0x182>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d6e:	f002 f919 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d72:	1d3a      	adds	r2, r7, #4
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f942 	bl	8004004 <xTaskCheckForTimeOut>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d124      	bne.n	8002dd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d88:	f000 fbc6 	bl	8003518 <prvIsQueueFull>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d018      	beq.n	8002dc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	3310      	adds	r3, #16
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f868 	bl	8003e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da2:	f000 fb51 	bl	8003448 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002da6:	f000 fe97 	bl	8003ad8 <xTaskResumeAll>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f af7c 	bne.w	8002caa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <xQueueGenericSend+0x1f8>)
 8002db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	e772      	b.n	8002caa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc6:	f000 fb3f 	bl	8003448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dca:	f000 fe85 	bl	8003ad8 <xTaskResumeAll>
 8002dce:	e76c      	b.n	8002caa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd2:	f000 fb39 	bl	8003448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dd6:	f000 fe7f 	bl	8003ad8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3738      	adds	r7, #56	; 0x38
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	e000ed04 	.word	0xe000ed04

08002de8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b090      	sub	sp, #64	; 0x40
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <xQueueGenericSendFromISR+0x3c>
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <xQueueGenericSendFromISR+0x40>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <xQueueGenericSendFromISR+0x42>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSendFromISR+0x6a>
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <xQueueGenericSendFromISR+0x6e>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueGenericSendFromISR+0x70>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	623b      	str	r3, [r7, #32]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e72:	f002 f949 	bl	8005108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e76:	f3ef 8211 	mrs	r2, BASEPRI
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	61fa      	str	r2, [r7, #28]
 8002e8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <xQueueGenericSendFromISR+0xbc>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d12f      	bne.n	8002f04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eba:	f000 fa35 	bl	8003328 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ebe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d112      	bne.n	8002eee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d016      	beq.n	8002efe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	3324      	adds	r3, #36	; 0x24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 f81b 	bl	8003f10 <xTaskRemoveFromEventList>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e007      	b.n	8002efe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	b25a      	sxtb	r2, r3
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002efe:	2301      	movs	r3, #1
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f02:	e001      	b.n	8002f08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3740      	adds	r7, #64	; 0x40
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <xQueueReceive+0x30>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	623b      	str	r3, [r7, #32]
}
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueReceive+0x3e>
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueReceive+0x42>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueReceive+0x44>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueReceive+0x5e>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61fb      	str	r3, [r7, #28]
}
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f7e:	f001 f989 	bl	8004294 <xTaskGetSchedulerState>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <xQueueReceive+0x6e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <xQueueReceive+0x72>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueReceive+0x74>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <xQueueReceive+0x8e>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	61bb      	str	r3, [r7, #24]
}
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fae:	f001 ffc9 	bl	8004f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01f      	beq.n	8002ffe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc2:	f000 fa1b 	bl	80033fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00f      	beq.n	8002ff6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	3310      	adds	r3, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 ff98 	bl	8003f10 <xTaskRemoveFromEventList>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <xQueueReceive+0x1bc>)
 8002fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ff6:	f001 ffd5 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e069      	b.n	80030d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003004:	f001 ffce 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003008:	2300      	movs	r3, #0
 800300a:	e062      	b.n	80030d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	4618      	mov	r0, r3
 8003018:	f000 ffde 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003020:	f001 ffc0 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003024:	f000 fd4a 	bl	8003abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003028:	f001 ff8c 	bl	8004f44 <vPortEnterCritical>
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003032:	b25b      	sxtb	r3, r3
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d103      	bne.n	8003042 <xQueueReceive+0x122>
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003048:	b25b      	sxtb	r3, r3
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d103      	bne.n	8003058 <xQueueReceive+0x138>
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003058:	f001 ffa4 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800305c:	1d3a      	adds	r2, r7, #4
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 ffcd 	bl	8004004 <xTaskCheckForTimeOut>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d123      	bne.n	80030b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003072:	f000 fa3b 	bl	80034ec <prvIsQueueEmpty>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d017      	beq.n	80030ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	3324      	adds	r3, #36	; 0x24
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fef3 	bl	8003e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800308a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308c:	f000 f9dc 	bl	8003448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003090:	f000 fd22 	bl	8003ad8 <xTaskResumeAll>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d189      	bne.n	8002fae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <xQueueReceive+0x1bc>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	e780      	b.n	8002fae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ae:	f000 f9cb 	bl	8003448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030b2:	f000 fd11 	bl	8003ad8 <xTaskResumeAll>
 80030b6:	e77a      	b.n	8002fae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ba:	f000 f9c5 	bl	8003448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030be:	f000 fd0b 	bl	8003ad8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c4:	f000 fa12 	bl	80034ec <prvIsQueueEmpty>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f43f af6f 	beq.w	8002fae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3730      	adds	r7, #48	; 0x30
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	; 0x38
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	623b      	str	r3, [r7, #32]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	61fb      	str	r3, [r7, #28]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003130:	f001 f8b0 	bl	8004294 <xTaskGetSchedulerState>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <xQueueSemaphoreTake+0x60>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <xQueueSemaphoreTake+0x64>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <xQueueSemaphoreTake+0x66>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	61bb      	str	r3, [r7, #24]
}
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003160:	f001 fef0 	bl	8004f44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	d024      	beq.n	80031ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003180:	f001 f9fe 	bl	8004580 <pvTaskIncrementMutexHeldCount>
 8003184:	4602      	mov	r2, r0
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00f      	beq.n	80031b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	3310      	adds	r3, #16
 8003196:	4618      	mov	r0, r3
 8003198:	f000 feba 	bl	8003f10 <xTaskRemoveFromEventList>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031a2:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <xQueueSemaphoreTake+0x214>)
 80031a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031b2:	f001 fef7 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e097      	b.n	80032ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	617b      	str	r3, [r7, #20]
}
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031dc:	f001 fee2 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e082      	b.n	80032ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fef2 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f8:	f001 fed4 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031fc:	f000 fc5e 	bl	8003abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003200:	f001 fea0 	bl	8004f44 <vPortEnterCritical>
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800320a:	b25b      	sxtb	r3, r3
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d103      	bne.n	800321a <xQueueSemaphoreTake+0x13a>
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003220:	b25b      	sxtb	r3, r3
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d103      	bne.n	8003230 <xQueueSemaphoreTake+0x150>
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003230:	f001 feb8 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003234:	463a      	mov	r2, r7
 8003236:	f107 030c 	add.w	r3, r7, #12
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fee1 	bl	8004004 <xTaskCheckForTimeOut>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d132      	bne.n	80032ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800324a:	f000 f94f 	bl	80034ec <prvIsQueueEmpty>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d026      	beq.n	80032a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800325c:	f001 fe72 	bl	8004f44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f001 f833 	bl	80042d0 <xTaskPriorityInherit>
 800326a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800326c:	f001 fe9a 	bl	8004fa4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	3324      	adds	r3, #36	; 0x24
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fdf9 	bl	8003e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800327e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003280:	f000 f8e2 	bl	8003448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003284:	f000 fc28 	bl	8003ad8 <xTaskResumeAll>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f af68 	bne.w	8003160 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <xQueueSemaphoreTake+0x214>)
 8003292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	e75e      	b.n	8003160 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032a4:	f000 f8d0 	bl	8003448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032a8:	f000 fc16 	bl	8003ad8 <xTaskResumeAll>
 80032ac:	e758      	b.n	8003160 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032b0:	f000 f8ca 	bl	8003448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032b4:	f000 fc10 	bl	8003ad8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ba:	f000 f917 	bl	80034ec <prvIsQueueEmpty>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f43f af4d 	beq.w	8003160 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032cc:	f001 fe3a 	bl	8004f44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032d2:	f000 f811 	bl	80032f8 <prvGetDisinheritPriorityAfterTimeout>
 80032d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 f8cc 	bl	800447c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032e4:	f001 fe5e 	bl	8004fa4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3738      	adds	r7, #56	; 0x38
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e001      	b.n	800331a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800331a:	68fb      	ldr	r3, [r7, #12]
	}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10d      	bne.n	8003362 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d14d      	bne.n	80033ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f824 	bl	80043a0 <xTaskPriorityDisinherit>
 8003358:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	e043      	b.n	80033ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d119      	bne.n	800339c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6858      	ldr	r0, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	461a      	mov	r2, r3
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	f002 f918 	bl	80055a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	441a      	add	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d32b      	bcc.n	80033ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	e026      	b.n	80033ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68d8      	ldr	r0, [r3, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	461a      	mov	r2, r3
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	f002 f8fe 	bl	80055a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	425b      	negs	r3, r3
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	425b      	negs	r3, r3
 80033d2:	441a      	add	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d105      	bne.n	80033ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033f2:	697b      	ldr	r3, [r7, #20]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d018      	beq.n	8003440 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	441a      	add	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d303      	bcc.n	8003430 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68d9      	ldr	r1, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	461a      	mov	r2, r3
 800343a:	6838      	ldr	r0, [r7, #0]
 800343c:	f002 f8b4 	bl	80055a8 <memcpy>
	}
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003450:	f001 fd78 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800345a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800345c:	e011      	b.n	8003482 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3324      	adds	r3, #36	; 0x24
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fd50 	bl	8003f10 <xTaskRemoveFromEventList>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003476:	f000 fe27 	bl	80040c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	3b01      	subs	r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	dce9      	bgt.n	800345e <prvUnlockQueue+0x16>
 800348a:	e000      	b.n	800348e <prvUnlockQueue+0x46>
					break;
 800348c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	22ff      	movs	r2, #255	; 0xff
 8003492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003496:	f001 fd85 	bl	8004fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800349a:	f001 fd53 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034a6:	e011      	b.n	80034cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3310      	adds	r3, #16
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fd2b 	bl	8003f10 <xTaskRemoveFromEventList>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034c0:	f000 fe02 	bl	80040c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	dce9      	bgt.n	80034a8 <prvUnlockQueue+0x60>
 80034d4:	e000      	b.n	80034d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	22ff      	movs	r2, #255	; 0xff
 80034dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034e0:	f001 fd60 	bl	8004fa4 <vPortExitCritical>
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034f4:	f001 fd26 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e001      	b.n	800350a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800350a:	f001 fd4b 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003520:	f001 fd10 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	429a      	cmp	r2, r3
 800352e:	d102      	bne.n	8003536 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003530:	2301      	movs	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e001      	b.n	800353a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800353a:	f001 fd33 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e014      	b.n	8003582 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003558:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <vQueueAddToRegistry+0x50>)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10b      	bne.n	800357c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003564:	490c      	ldr	r1, [pc, #48]	; (8003598 <vQueueAddToRegistry+0x50>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <vQueueAddToRegistry+0x50>)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800357a:	e006      	b.n	800358a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3301      	adds	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b07      	cmp	r3, #7
 8003586:	d9e7      	bls.n	8003558 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	200008a0 	.word	0x200008a0

0800359c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035ac:	f001 fcca 	bl	8004f44 <vPortEnterCritical>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d103      	bne.n	80035c6 <vQueueWaitForMessageRestricted+0x2a>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d103      	bne.n	80035dc <vQueueWaitForMessageRestricted+0x40>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035dc:	f001 fce2 	bl	8004fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fc61 	bl	8003eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7ff ff26 	bl	8003448 <prvUnlockQueue>
	}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08e      	sub	sp, #56	; 0x38
 8003608:	af04      	add	r7, sp, #16
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	623b      	str	r3, [r7, #32]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xTaskCreateStatic+0x46>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	61fb      	str	r3, [r7, #28]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800364a:	23bc      	movs	r3, #188	; 0xbc
 800364c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2bbc      	cmp	r3, #188	; 0xbc
 8003652:	d00a      	beq.n	800366a <xTaskCreateStatic+0x66>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61bb      	str	r3, [r7, #24]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800366a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01e      	beq.n	80036b0 <xTaskCreateStatic+0xac>
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01b      	beq.n	80036b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003680:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	2202      	movs	r2, #2
 8003686:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800368a:	2300      	movs	r3, #0
 800368c:	9303      	str	r3, [sp, #12]
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	9302      	str	r3, [sp, #8]
 8003692:	f107 0314 	add.w	r3, r7, #20
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f850 	bl	8003748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036aa:	f000 f8f3 	bl	8003894 <prvAddNewTaskToReadyList>
 80036ae:	e001      	b.n	80036b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036b4:	697b      	ldr	r3, [r7, #20]
	}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3728      	adds	r7, #40	; 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08c      	sub	sp, #48	; 0x30
 80036c2:	af04      	add	r7, sp, #16
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 fd58 	bl	8005188 <pvPortMalloc>
 80036d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036e0:	20bc      	movs	r0, #188	; 0xbc
 80036e2:	f001 fd51 	bl	8005188 <pvPortMalloc>
 80036e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
 80036f4:	e005      	b.n	8003702 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f001 fe12 	bl	8005320 <vPortFree>
 80036fc:	e001      	b.n	8003702 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d017      	beq.n	8003738 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	2300      	movs	r3, #0
 8003714:	9303      	str	r3, [sp, #12]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	9302      	str	r3, [sp, #8]
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f80e 	bl	8003748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372c:	69f8      	ldr	r0, [r7, #28]
 800372e:	f000 f8b1 	bl	8003894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e002      	b.n	800373e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800373e:	69bb      	ldr	r3, [r7, #24]
	}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	461a      	mov	r2, r3
 8003760:	21a5      	movs	r1, #165	; 0xa5
 8003762:	f001 ff2f 	bl	80055c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003770:	3b01      	subs	r3, #1
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f023 0307 	bic.w	r3, r3, #7
 800377e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	617b      	str	r3, [r7, #20]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01f      	beq.n	80037e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e012      	b.n	80037d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	7819      	ldrb	r1, [r3, #0]
 80037b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	3334      	adds	r3, #52	; 0x34
 80037bc:	460a      	mov	r2, r1
 80037be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d006      	beq.n	80037da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	3301      	adds	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	2b0f      	cmp	r3, #15
 80037d6:	d9e9      	bls.n	80037ac <prvInitialiseNewTask+0x64>
 80037d8:	e000      	b.n	80037dc <prvInitialiseNewTask+0x94>
			{
				break;
 80037da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e4:	e003      	b.n	80037ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	2b37      	cmp	r3, #55	; 0x37
 80037f2:	d901      	bls.n	80037f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037f4:	2337      	movs	r3, #55	; 0x37
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003802:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	3304      	adds	r3, #4
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f81a 	bl	8002848 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	3318      	adds	r3, #24
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff f815 	bl	8002848 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003822:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	2200      	movs	r2, #0
 8003840:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	3354      	adds	r3, #84	; 0x54
 8003848:	2260      	movs	r2, #96	; 0x60
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 feb9 	bl	80055c4 <memset>
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <prvInitialiseNewTask+0x140>)
 8003856:	659a      	str	r2, [r3, #88]	; 0x58
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	4a0c      	ldr	r2, [pc, #48]	; (800388c <prvInitialiseNewTask+0x144>)
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <prvInitialiseNewTask+0x148>)
 8003862:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	69b8      	ldr	r0, [r7, #24]
 800386a:	f001 fa3f 	bl	8004cec <pxPortInitialiseStack>
 800386e:	4602      	mov	r2, r0
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003880:	bf00      	nop
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	080058c0 	.word	0x080058c0
 800388c:	080058e0 	.word	0x080058e0
 8003890:	080058a0 	.word	0x080058a0

08003894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800389c:	f001 fb52 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038a0:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <prvAddNewTaskToReadyList+0xc4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	4a2c      	ldr	r2, [pc, #176]	; (8003958 <prvAddNewTaskToReadyList+0xc4>)
 80038a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038aa:	4b2c      	ldr	r3, [pc, #176]	; (800395c <prvAddNewTaskToReadyList+0xc8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038b2:	4a2a      	ldr	r2, [pc, #168]	; (800395c <prvAddNewTaskToReadyList+0xc8>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <prvAddNewTaskToReadyList+0xc4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d110      	bne.n	80038e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038c0:	f000 fc26 	bl	8004110 <prvInitialiseTaskLists>
 80038c4:	e00d      	b.n	80038e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <prvAddNewTaskToReadyList+0xcc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ce:	4b23      	ldr	r3, [pc, #140]	; (800395c <prvAddNewTaskToReadyList+0xc8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d802      	bhi.n	80038e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038dc:	4a1f      	ldr	r2, [pc, #124]	; (800395c <prvAddNewTaskToReadyList+0xc8>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <prvAddNewTaskToReadyList+0xd0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <prvAddNewTaskToReadyList+0xd0>)
 80038ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <prvAddNewTaskToReadyList+0xd0>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <prvAddNewTaskToReadyList+0xd4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d903      	bls.n	8003908 <prvAddNewTaskToReadyList+0x74>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <prvAddNewTaskToReadyList+0xd4>)
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <prvAddNewTaskToReadyList+0xd8>)
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f7fe ff9f 	bl	8002862 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003924:	f001 fb3e 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <prvAddNewTaskToReadyList+0xcc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <prvAddNewTaskToReadyList+0xc8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	429a      	cmp	r2, r3
 800393c:	d207      	bcs.n	800394e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <prvAddNewTaskToReadyList+0xdc>)
 8003940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000db4 	.word	0x20000db4
 800395c:	200008e0 	.word	0x200008e0
 8003960:	20000dc0 	.word	0x20000dc0
 8003964:	20000dd0 	.word	0x20000dd0
 8003968:	20000dbc 	.word	0x20000dbc
 800396c:	200008e4 	.word	0x200008e4
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <vTaskDelay+0x60>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <vTaskDelay+0x30>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	60bb      	str	r3, [r7, #8]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039a4:	f000 f88a 	bl	8003abc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a8:	2100      	movs	r1, #0
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fdfc 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039b0:	f000 f892 	bl	8003ad8 <xTaskResumeAll>
 80039b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <vTaskDelay+0x64>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000ddc 	.word	0x20000ddc
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ea:	463a      	mov	r2, r7
 80039ec:	1d39      	adds	r1, r7, #4
 80039ee:	f107 0308 	add.w	r3, r7, #8
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fed4 	bl	80027a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	9202      	str	r2, [sp, #8]
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	460a      	mov	r2, r1
 8003a0a:	4924      	ldr	r1, [pc, #144]	; (8003a9c <vTaskStartScheduler+0xc0>)
 8003a0c:	4824      	ldr	r0, [pc, #144]	; (8003aa0 <vTaskStartScheduler+0xc4>)
 8003a0e:	f7ff fdf9 	bl	8003604 <xTaskCreateStatic>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <vTaskStartScheduler+0xc8>)
 8003a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a18:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <vTaskStartScheduler+0xc8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e001      	b.n	8003a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a30:	f000 fe0e 	bl	8004650 <xTimerCreateTimerTask>
 8003a34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11b      	bne.n	8003a74 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	613b      	str	r3, [r7, #16]
}
 8003a4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a50:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <vTaskStartScheduler+0xcc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3354      	adds	r3, #84	; 0x54
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <vTaskStartScheduler+0xd0>)
 8003a58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <vTaskStartScheduler+0xd4>)
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <vTaskStartScheduler+0xd8>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <vTaskStartScheduler+0xdc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a6e:	f001 f9c7 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a72:	e00e      	b.n	8003a92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d10a      	bne.n	8003a92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	60fb      	str	r3, [r7, #12]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <vTaskStartScheduler+0xb4>
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08005870 	.word	0x08005870
 8003aa0:	080040e1 	.word	0x080040e1
 8003aa4:	20000dd8 	.word	0x20000dd8
 8003aa8:	200008e0 	.word	0x200008e0
 8003aac:	20000010 	.word	0x20000010
 8003ab0:	20000dd4 	.word	0x20000dd4
 8003ab4:	20000dc0 	.word	0x20000dc0
 8003ab8:	20000db8 	.word	0x20000db8

08003abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <vTaskSuspendAll+0x18>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <vTaskSuspendAll+0x18>)
 8003ac8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	20000ddc 	.word	0x20000ddc

08003ad8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ae6:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <xTaskResumeAll+0x2c>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	603b      	str	r3, [r7, #0]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b04:	f001 fa1e 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	4a38      	ldr	r2, [pc, #224]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003b10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <xTaskResumeAll+0x118>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d162      	bne.n	8003be0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <xTaskResumeAll+0x11c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d05e      	beq.n	8003be0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b22:	e02f      	b.n	8003b84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fef3 	bl	800291c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe feee 	bl	800291c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <xTaskResumeAll+0x124>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d903      	bls.n	8003b54 <xTaskResumeAll+0x7c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <xTaskResumeAll+0x124>)
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <xTaskResumeAll+0x128>)
 8003b62:	441a      	add	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f7fe fe79 	bl	8002862 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <xTaskResumeAll+0x12c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <xTaskResumeAll+0x130>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b84:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <xTaskResumeAll+0x120>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1cb      	bne.n	8003b24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b92:	f000 fb5f 	bl	8004254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <xTaskResumeAll+0x134>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ba2:	f000 f847 	bl	8003c34 <xTaskIncrementTick>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <xTaskResumeAll+0x130>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f1      	bne.n	8003ba2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <xTaskResumeAll+0x134>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <xTaskResumeAll+0x130>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <xTaskResumeAll+0x138>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003be0:	f001 f9e0 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8003be4:	68bb      	ldr	r3, [r7, #8]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000ddc 	.word	0x20000ddc
 8003bf4:	20000db4 	.word	0x20000db4
 8003bf8:	20000d74 	.word	0x20000d74
 8003bfc:	20000dbc 	.word	0x20000dbc
 8003c00:	200008e4 	.word	0x200008e4
 8003c04:	200008e0 	.word	0x200008e0
 8003c08:	20000dc8 	.word	0x20000dc8
 8003c0c:	20000dc4 	.word	0x20000dc4
 8003c10:	e000ed04 	.word	0xe000ed04

08003c14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <xTaskGetTickCount+0x1c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c20:	687b      	ldr	r3, [r7, #4]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000db8 	.word	0x20000db8

08003c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3e:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <xTaskIncrementTick+0x148>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 808f 	bne.w	8003d66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c48:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c50:	4a4b      	ldr	r2, [pc, #300]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d120      	bne.n	8003c9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c5c:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <xTaskIncrementTick+0x48>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	603b      	str	r3, [r7, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xTaskIncrementTick+0x46>
 8003c7c:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <xTaskIncrementTick+0x154>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3f      	ldr	r2, [pc, #252]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4a3f      	ldr	r2, [pc, #252]	; (8003d88 <xTaskIncrementTick+0x154>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <xTaskIncrementTick+0x158>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a3d      	ldr	r2, [pc, #244]	; (8003d8c <xTaskIncrementTick+0x158>)
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	f000 fadb 	bl	8004254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c9e:	4b3c      	ldr	r3, [pc, #240]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d349      	bcc.n	8003d3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca8:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	601a      	str	r2, [r3, #0]
					break;
 8003cba:	e03f      	b.n	8003d3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cbc:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d203      	bcs.n	8003cdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cd4:	4a2e      	ldr	r2, [pc, #184]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cda:	e02f      	b.n	8003d3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe fe1b 	bl	800291c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fe12 	bl	800291c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <xTaskIncrementTick+0x160>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d903      	bls.n	8003d0c <xTaskIncrementTick+0xd8>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4a22      	ldr	r2, [pc, #136]	; (8003d94 <xTaskIncrementTick+0x160>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <xTaskIncrementTick+0x164>)
 8003d1a:	441a      	add	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7fe fd9d 	bl	8002862 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <xTaskIncrementTick+0x168>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d3b8      	bcc.n	8003ca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3a:	e7b5      	b.n	8003ca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d3c:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <xTaskIncrementTick+0x168>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	4915      	ldr	r1, [pc, #84]	; (8003d98 <xTaskIncrementTick+0x164>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d901      	bls.n	8003d58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <xTaskIncrementTick+0x16c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e004      	b.n	8003d70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <xTaskIncrementTick+0x170>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <xTaskIncrementTick+0x170>)
 8003d6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d70:	697b      	ldr	r3, [r7, #20]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000ddc 	.word	0x20000ddc
 8003d80:	20000db8 	.word	0x20000db8
 8003d84:	20000d6c 	.word	0x20000d6c
 8003d88:	20000d70 	.word	0x20000d70
 8003d8c:	20000dcc 	.word	0x20000dcc
 8003d90:	20000dd4 	.word	0x20000dd4
 8003d94:	20000dbc 	.word	0x20000dbc
 8003d98:	200008e4 	.word	0x200008e4
 8003d9c:	200008e0 	.word	0x200008e0
 8003da0:	20000dc8 	.word	0x20000dc8
 8003da4:	20000dc4 	.word	0x20000dc4

08003da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dae:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <vTaskSwitchContext+0xb0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <vTaskSwitchContext+0xb4>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dbc:	e046      	b.n	8003e4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003dbe:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <vTaskSwitchContext+0xb4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc4:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <vTaskSwitchContext+0xb8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e010      	b.n	8003dee <vTaskSwitchContext+0x46>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	607b      	str	r3, [r7, #4]
}
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <vTaskSwitchContext+0x3e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	491d      	ldr	r1, [pc, #116]	; (8003e64 <vTaskSwitchContext+0xbc>)
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0e4      	beq.n	8003dcc <vTaskSwitchContext+0x24>
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <vTaskSwitchContext+0xbc>)
 8003e0e:	4413      	add	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3308      	adds	r3, #8
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d104      	bne.n	8003e32 <vTaskSwitchContext+0x8a>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <vTaskSwitchContext+0xc0>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4a08      	ldr	r2, [pc, #32]	; (8003e60 <vTaskSwitchContext+0xb8>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <vTaskSwitchContext+0xc0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3354      	adds	r3, #84	; 0x54
 8003e48:	4a08      	ldr	r2, [pc, #32]	; (8003e6c <vTaskSwitchContext+0xc4>)
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000ddc 	.word	0x20000ddc
 8003e5c:	20000dc8 	.word	0x20000dc8
 8003e60:	20000dbc 	.word	0x20000dbc
 8003e64:	200008e4 	.word	0x200008e4
 8003e68:	200008e0 	.word	0x200008e0
 8003e6c:	20000010 	.word	0x20000010

08003e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60fb      	str	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <vTaskPlaceOnEventList+0x44>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe fd03 	bl	80028aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	f000 fb7e 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	200008e0 	.word	0x200008e0

08003eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	617b      	str	r3, [r7, #20]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3318      	adds	r3, #24
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7fe fcba 	bl	8002862 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f000 fb53 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
	}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200008e0 	.word	0x200008e0

08003f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe fceb 	bl	800291c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f46:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <xTaskRemoveFromEventList+0xb0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11d      	bne.n	8003f8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fce2 	bl	800291c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <xTaskRemoveFromEventList+0xb4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d903      	bls.n	8003f6c <xTaskRemoveFromEventList+0x5c>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <xTaskRemoveFromEventList+0xb4>)
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <xTaskRemoveFromEventList+0xb8>)
 8003f7a:	441a      	add	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f7fe fc6d 	bl	8002862 <vListInsertEnd>
 8003f88:	e005      	b.n	8003f96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3318      	adds	r3, #24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	480e      	ldr	r0, [pc, #56]	; (8003fcc <xTaskRemoveFromEventList+0xbc>)
 8003f92:	f7fe fc66 	bl	8002862 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <xTaskRemoveFromEventList+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d905      	bls.n	8003fb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <xTaskRemoveFromEventList+0xc4>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e001      	b.n	8003fb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fb4:	697b      	ldr	r3, [r7, #20]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000ddc 	.word	0x20000ddc
 8003fc4:	20000dbc 	.word	0x20000dbc
 8003fc8:	200008e4 	.word	0x200008e4
 8003fcc:	20000d74 	.word	0x20000d74
 8003fd0:	200008e0 	.word	0x200008e0
 8003fd4:	20000dc8 	.word	0x20000dc8

08003fd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <vTaskInternalSetTimeOutState+0x24>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <vTaskInternalSetTimeOutState+0x28>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	20000dcc 	.word	0x20000dcc
 8004000:	20000db8 	.word	0x20000db8

08004004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	613b      	str	r3, [r7, #16]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004046:	f000 ff7d 	bl	8004f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <xTaskCheckForTimeOut+0xbc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d102      	bne.n	800406a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	e023      	b.n	80040b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <xTaskCheckForTimeOut+0xc0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d007      	beq.n	8004086 <xTaskCheckForTimeOut+0x82>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	429a      	cmp	r2, r3
 800407e:	d302      	bcc.n	8004086 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e015      	b.n	80040b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	d20b      	bcs.n	80040a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	1ad2      	subs	r2, r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff9b 	bl	8003fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e004      	b.n	80040b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f000 ff77 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 80040b6:	69fb      	ldr	r3, [r7, #28]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000db8 	.word	0x20000db8
 80040c4:	20000dcc 	.word	0x20000dcc

080040c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <vTaskMissedYield+0x14>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	20000dc8 	.word	0x20000dc8

080040e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040e8:	f000 f852 	bl	8004190 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <prvIdleTask+0x28>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d9f9      	bls.n	80040e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <prvIdleTask+0x2c>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004104:	e7f0      	b.n	80040e8 <prvIdleTask+0x8>
 8004106:	bf00      	nop
 8004108:	200008e4 	.word	0x200008e4
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	e00c      	b.n	8004136 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <prvInitialiseTaskLists+0x60>)
 8004128:	4413      	add	r3, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fb6c 	bl	8002808 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3301      	adds	r3, #1
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b37      	cmp	r3, #55	; 0x37
 800413a:	d9ef      	bls.n	800411c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800413c:	480d      	ldr	r0, [pc, #52]	; (8004174 <prvInitialiseTaskLists+0x64>)
 800413e:	f7fe fb63 	bl	8002808 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004142:	480d      	ldr	r0, [pc, #52]	; (8004178 <prvInitialiseTaskLists+0x68>)
 8004144:	f7fe fb60 	bl	8002808 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004148:	480c      	ldr	r0, [pc, #48]	; (800417c <prvInitialiseTaskLists+0x6c>)
 800414a:	f7fe fb5d 	bl	8002808 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800414e:	480c      	ldr	r0, [pc, #48]	; (8004180 <prvInitialiseTaskLists+0x70>)
 8004150:	f7fe fb5a 	bl	8002808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004154:	480b      	ldr	r0, [pc, #44]	; (8004184 <prvInitialiseTaskLists+0x74>)
 8004156:	f7fe fb57 	bl	8002808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <prvInitialiseTaskLists+0x78>)
 800415c:	4a05      	ldr	r2, [pc, #20]	; (8004174 <prvInitialiseTaskLists+0x64>)
 800415e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <prvInitialiseTaskLists+0x7c>)
 8004162:	4a05      	ldr	r2, [pc, #20]	; (8004178 <prvInitialiseTaskLists+0x68>)
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200008e4 	.word	0x200008e4
 8004174:	20000d44 	.word	0x20000d44
 8004178:	20000d58 	.word	0x20000d58
 800417c:	20000d74 	.word	0x20000d74
 8004180:	20000d88 	.word	0x20000d88
 8004184:	20000da0 	.word	0x20000da0
 8004188:	20000d6c 	.word	0x20000d6c
 800418c:	20000d70 	.word	0x20000d70

08004190 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004196:	e019      	b.n	80041cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004198:	f000 fed4 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <prvCheckTasksWaitingTermination+0x50>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fbb7 	bl	800291c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <prvCheckTasksWaitingTermination+0x54>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	4a0b      	ldr	r2, [pc, #44]	; (80041e4 <prvCheckTasksWaitingTermination+0x54>)
 80041b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <prvCheckTasksWaitingTermination+0x58>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3b01      	subs	r3, #1
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <prvCheckTasksWaitingTermination+0x58>)
 80041c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041c2:	f000 feef 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f810 	bl	80041ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <prvCheckTasksWaitingTermination+0x58>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e1      	bne.n	8004198 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000d88 	.word	0x20000d88
 80041e4:	20000db4 	.word	0x20000db4
 80041e8:	20000d9c 	.word	0x20000d9c

080041ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3354      	adds	r3, #84	; 0x54
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 f9f9 	bl	80055f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f887 	bl	8005320 <vPortFree>
				vPortFree( pxTCB );
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f001 f884 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004218:	e018      	b.n	800424c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004220:	2b01      	cmp	r3, #1
 8004222:	d103      	bne.n	800422c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f001 f87b 	bl	8005320 <vPortFree>
	}
 800422a:	e00f      	b.n	800424c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004232:	2b02      	cmp	r3, #2
 8004234:	d00a      	beq.n	800424c <prvDeleteTCB+0x60>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60fb      	str	r3, [r7, #12]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <prvDeleteTCB+0x5e>
	}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <prvResetNextTaskUnblockTime+0x38>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <prvResetNextTaskUnblockTime+0x3c>)
 8004266:	f04f 32ff 	mov.w	r2, #4294967295
 800426a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800426c:	e008      	b.n	8004280 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <prvResetNextTaskUnblockTime+0x38>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <prvResetNextTaskUnblockTime+0x3c>)
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	20000d6c 	.word	0x20000d6c
 8004290:	20000dd4 	.word	0x20000dd4

08004294 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <xTaskGetSchedulerState+0x34>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042a2:	2301      	movs	r3, #1
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	e008      	b.n	80042ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <xTaskGetSchedulerState+0x38>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042b0:	2302      	movs	r3, #2
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	e001      	b.n	80042ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ba:	687b      	ldr	r3, [r7, #4]
	}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000dc0 	.word	0x20000dc0
 80042cc:	20000ddc 	.word	0x20000ddc

080042d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d051      	beq.n	800438a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <xTaskPriorityInherit+0xc4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d241      	bcs.n	8004378 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db06      	blt.n	800430a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <xTaskPriorityInherit+0xc4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6959      	ldr	r1, [r3, #20]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <xTaskPriorityInherit+0xc8>)
 800431c:	4413      	add	r3, r2
 800431e:	4299      	cmp	r1, r3
 8004320:	d122      	bne.n	8004368 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3304      	adds	r3, #4
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe faf8 	bl	800291c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <xTaskPriorityInherit+0xc4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433a:	4b18      	ldr	r3, [pc, #96]	; (800439c <xTaskPriorityInherit+0xcc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d903      	bls.n	800434a <xTaskPriorityInherit+0x7a>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <xTaskPriorityInherit+0xcc>)
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <xTaskPriorityInherit+0xc8>)
 8004358:	441a      	add	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe fa7e 	bl	8002862 <vListInsertEnd>
 8004366:	e004      	b.n	8004372 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <xTaskPriorityInherit+0xc4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004372:	2301      	movs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e008      	b.n	800438a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <xTaskPriorityInherit+0xc4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	429a      	cmp	r2, r3
 8004384:	d201      	bcs.n	800438a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800438a:	68fb      	ldr	r3, [r7, #12]
	}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200008e0 	.word	0x200008e0
 8004398:	200008e4 	.word	0x200008e4
 800439c:	20000dbc 	.word	0x20000dbc

080043a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d056      	beq.n	8004464 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043b6:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <xTaskPriorityDisinherit+0xd0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d00a      	beq.n	80043d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	60fb      	str	r3, [r7, #12]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	60bb      	str	r3, [r7, #8]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	429a      	cmp	r2, r3
 8004408:	d02c      	beq.n	8004464 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440e:	2b00      	cmp	r3, #0
 8004410:	d128      	bne.n	8004464 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fa80 	bl	800291c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <xTaskPriorityDisinherit+0xd4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d903      	bls.n	8004444 <xTaskPriorityDisinherit+0xa4>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <xTaskPriorityDisinherit+0xd4>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a09      	ldr	r2, [pc, #36]	; (8004478 <xTaskPriorityDisinherit+0xd8>)
 8004452:	441a      	add	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7fe fa01 	bl	8002862 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004464:	697b      	ldr	r3, [r7, #20]
	}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200008e0 	.word	0x200008e0
 8004474:	20000dbc 	.word	0x20000dbc
 8004478:	200008e4 	.word	0x200008e4

0800447c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d06a      	beq.n	800456a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60fb      	str	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d902      	bls.n	80044c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e002      	b.n	80044c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d04b      	beq.n	800456a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d146      	bne.n	800456a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d10a      	bne.n	80044fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60bb      	str	r3, [r7, #8]
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	db04      	blt.n	800451a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6959      	ldr	r1, [r3, #20]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800452a:	4413      	add	r3, r2
 800452c:	4299      	cmp	r1, r3
 800452e:	d11c      	bne.n	800456a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	3304      	adds	r3, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe f9f1 	bl	800291c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d903      	bls.n	800454e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800455c:	441a      	add	r2, r3
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe f97c 	bl	8002862 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800456a:	bf00      	nop
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200008e0 	.word	0x200008e0
 8004578:	200008e4 	.word	0x200008e4
 800457c:	20000dbc 	.word	0x20000dbc

08004580 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004592:	3201      	adds	r2, #1
 8004594:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004596:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004598:	681b      	ldr	r3, [r3, #0]
	}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	200008e0 	.word	0x200008e0

080045a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <prvAddCurrentTaskToDelayedList+0x90>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b8:	4b20      	ldr	r3, [pc, #128]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe f9ac 	bl	800291c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d10a      	bne.n	80045e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4819      	ldr	r0, [pc, #100]	; (8004640 <prvAddCurrentTaskToDelayedList+0x98>)
 80045dc:	f7fe f941 	bl	8002862 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045e0:	e026      	b.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d209      	bcs.n	800460e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f7fe f94f 	bl	80028aa <vListInsert>
}
 800460c:	e010      	b.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7fe f945 	bl	80028aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d202      	bcs.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <prvAddCurrentTaskToDelayedList+0xa4>)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000db8 	.word	0x20000db8
 800463c:	200008e0 	.word	0x200008e0
 8004640:	20000da0 	.word	0x20000da0
 8004644:	20000d70 	.word	0x20000d70
 8004648:	20000d6c 	.word	0x20000d6c
 800464c:	20000dd4 	.word	0x20000dd4

08004650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800465a:	f000 fb07 	bl	8004c6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <xTimerCreateTimerTask+0x80>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d021      	beq.n	80046aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800466e:	1d3a      	adds	r2, r7, #4
 8004670:	f107 0108 	add.w	r1, r7, #8
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe f8ab 	bl	80027d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	9202      	str	r2, [sp, #8]
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2302      	movs	r3, #2
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	460a      	mov	r2, r1
 8004690:	4910      	ldr	r1, [pc, #64]	; (80046d4 <xTimerCreateTimerTask+0x84>)
 8004692:	4811      	ldr	r0, [pc, #68]	; (80046d8 <xTimerCreateTimerTask+0x88>)
 8004694:	f7fe ffb6 	bl	8003604 <xTaskCreateStatic>
 8004698:	4603      	mov	r3, r0
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <xTimerCreateTimerTask+0x8c>)
 800469c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTimerCreateTimerTask+0x8c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	613b      	str	r3, [r7, #16]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046c6:	697b      	ldr	r3, [r7, #20]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000e10 	.word	0x20000e10
 80046d4:	08005878 	.word	0x08005878
 80046d8:	08004815 	.word	0x08004815
 80046dc:	20000e14 	.word	0x20000e14

080046e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xTimerGenericCommand+0x2e>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <xTimerGenericCommand+0x98>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02a      	beq.n	800476c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b05      	cmp	r3, #5
 8004726:	dc18      	bgt.n	800475a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004728:	f7ff fdb4 	bl	8004294 <xTaskGetSchedulerState>
 800472c:	4603      	mov	r3, r0
 800472e:	2b02      	cmp	r3, #2
 8004730:	d109      	bne.n	8004746 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <xTimerGenericCommand+0x98>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f107 0110 	add.w	r1, r7, #16
 800473a:	2300      	movs	r3, #0
 800473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473e:	f7fe fa55 	bl	8002bec <xQueueGenericSend>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24
 8004744:	e012      	b.n	800476c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <xTimerGenericCommand+0x98>)
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	f107 0110 	add.w	r1, r7, #16
 800474e:	2300      	movs	r3, #0
 8004750:	2200      	movs	r2, #0
 8004752:	f7fe fa4b 	bl	8002bec <xQueueGenericSend>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24
 8004758:	e008      	b.n	800476c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <xTimerGenericCommand+0x98>)
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	f107 0110 	add.w	r1, r7, #16
 8004762:	2300      	movs	r3, #0
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	f7fe fb3f 	bl	8002de8 <xQueueGenericSendFromISR>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800476e:	4618      	mov	r0, r3
 8004770:	3728      	adds	r7, #40	; 0x28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000e10 	.word	0x20000e10

0800477c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <prvProcessExpiredTimer+0x94>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe f8c1 	bl	800291c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d022      	beq.n	80047ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	18d1      	adds	r1, r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f000 f8d1 	bl	800495c <prvInsertTimerInActiveList>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01f      	beq.n	8004800 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047c0:	2300      	movs	r3, #0
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	2100      	movs	r1, #0
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f7ff ff88 	bl	80046e0 <xTimerGenericCommand>
 80047d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d113      	bne.n	8004800 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	6978      	ldr	r0, [r7, #20]
 8004806:	4798      	blx	r3
}
 8004808:	bf00      	nop
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000e08 	.word	0x20000e08

08004814 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f857 	bl	80048d4 <prvGetNextExpireTime>
 8004826:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f803 	bl	8004838 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004832:	f000 f8d5 	bl	80049e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004836:	e7f1      	b.n	800481c <prvTimerTask+0x8>

08004838 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004842:	f7ff f93b 	bl	8003abc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004846:	f107 0308 	add.w	r3, r7, #8
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f866 	bl	800491c <prvSampleTimeNow>
 8004850:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d130      	bne.n	80048ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <prvProcessTimerOrBlockTask+0x3c>
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	429a      	cmp	r2, r3
 8004864:	d806      	bhi.n	8004874 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004866:	f7ff f937 	bl	8003ad8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ff85 	bl	800477c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004872:	e024      	b.n	80048be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <prvProcessTimerOrBlockTask+0x90>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <prvProcessTimerOrBlockTask+0x50>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <prvProcessTimerOrBlockTask+0x52>
 8004888:	2300      	movs	r3, #0
 800488a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <prvProcessTimerOrBlockTask+0x94>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	4619      	mov	r1, r3
 800489a:	f7fe fe7f 	bl	800359c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800489e:	f7ff f91b 	bl	8003ad8 <xTaskResumeAll>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048a8:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <prvProcessTimerOrBlockTask+0x98>)
 80048aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	f3bf 8f6f 	isb	sy
}
 80048b8:	e001      	b.n	80048be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048ba:	f7ff f90d 	bl	8003ad8 <xTaskResumeAll>
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000e0c 	.word	0x20000e0c
 80048cc:	20000e10 	.word	0x20000e10
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <prvGetNextExpireTime+0x44>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <prvGetNextExpireTime+0x16>
 80048e6:	2201      	movs	r2, #1
 80048e8:	e000      	b.n	80048ec <prvGetNextExpireTime+0x18>
 80048ea:	2200      	movs	r2, #0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <prvGetNextExpireTime+0x44>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e001      	b.n	8004908 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000e08 	.word	0x20000e08

0800491c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004924:	f7ff f976 	bl	8003c14 <xTaskGetTickCount>
 8004928:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <prvSampleTimeNow+0x3c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	429a      	cmp	r2, r3
 8004932:	d205      	bcs.n	8004940 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004934:	f000 f936 	bl	8004ba4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e002      	b.n	8004946 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <prvSampleTimeNow+0x3c>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800494c:	68fb      	ldr	r3, [r7, #12]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000e18 	.word	0x20000e18

0800495c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d812      	bhi.n	80049a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e01b      	b.n	80049ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <prvInsertTimerInActiveList+0x7c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f7fd ff82 	bl	80028aa <vListInsert>
 80049a6:	e012      	b.n	80049ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d206      	bcs.n	80049be <prvInsertTimerInActiveList+0x62>
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e007      	b.n	80049ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <prvInsertTimerInActiveList+0x80>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7fd ff6e 	bl	80028aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049ce:	697b      	ldr	r3, [r7, #20]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000e0c 	.word	0x20000e0c
 80049dc:	20000e08 	.word	0x20000e08

080049e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049e6:	e0ca      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da18      	bge.n	8004a20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	3304      	adds	r3, #4
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	61fb      	str	r3, [r7, #28]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a16:	6850      	ldr	r0, [r2, #4]
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f2c0 80aa 	blt.w	8004b7c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd ff6f 	bl	800291c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a3e:	463b      	mov	r3, r7
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff6b 	bl	800491c <prvSampleTimeNow>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b09      	cmp	r3, #9
 8004a4c:	f200 8097 	bhi.w	8004b7e <prvProcessReceivedCommands+0x19e>
 8004a50:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <prvProcessReceivedCommands+0x78>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a81 	.word	0x08004a81
 8004a64:	08004af5 	.word	0x08004af5
 8004a68:	08004b09 	.word	0x08004b09
 8004a6c:	08004b53 	.word	0x08004b53
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a81 	.word	0x08004a81
 8004a78:	08004af5 	.word	0x08004af5
 8004a7c:	08004b09 	.word	0x08004b09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	18d1      	adds	r1, r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa0:	f7ff ff5c 	bl	800495c <prvInsertTimerInActiveList>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d069      	beq.n	8004b7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d05e      	beq.n	8004b7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad2:	f7ff fe05 	bl	80046e0 <xTimerGenericCommand>
 8004ad6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d14f      	bne.n	8004b7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	61bb      	str	r3, [r7, #24]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b06:	e03a      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	617b      	str	r3, [r7, #20]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	18d1      	adds	r1, r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4c:	f7ff ff06 	bl	800495c <prvInsertTimerInActiveList>
					break;
 8004b50:	e015      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b62:	f000 fbdd 	bl	8005320 <vPortFree>
 8004b66:	e00a      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b7a:	e000      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <prvProcessReceivedCommands+0x1c0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1d39      	adds	r1, r7, #4
 8004b84:	2200      	movs	r2, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe f9ca 	bl	8002f20 <xQueueReceive>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f47f af2a 	bne.w	80049e8 <prvProcessReceivedCommands+0x8>
	}
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	3730      	adds	r7, #48	; 0x30
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000e10 	.word	0x20000e10

08004ba4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004baa:	e048      	b.n	8004c3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bac:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb6:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd fea9 	bl	800291c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02e      	beq.n	8004c3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d90e      	bls.n	8004c10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bfe:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fd fe4e 	bl	80028aa <vListInsert>
 8004c0e:	e016      	b.n	8004c3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c10:	2300      	movs	r3, #0
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	2100      	movs	r1, #0
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff fd60 	bl	80046e0 <xTimerGenericCommand>
 8004c20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	603b      	str	r3, [r7, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1b1      	bne.n	8004bac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <prvSwitchTimerLists+0xc4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c56:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <prvSwitchTimerLists+0xc4>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	6013      	str	r3, [r2, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000e08 	.word	0x20000e08
 8004c68:	20000e0c 	.word	0x20000e0c

08004c6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c72:	f000 f967 	bl	8004f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d120      	bne.n	8004cc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c7e:	4814      	ldr	r0, [pc, #80]	; (8004cd0 <prvCheckForValidListAndQueue+0x64>)
 8004c80:	f7fd fdc2 	bl	8002808 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c84:	4813      	ldr	r0, [pc, #76]	; (8004cd4 <prvCheckForValidListAndQueue+0x68>)
 8004c86:	f7fd fdbf 	bl	8002808 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <prvCheckForValidListAndQueue+0x6c>)
 8004c8c:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <prvCheckForValidListAndQueue+0x64>)
 8004c8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <prvCheckForValidListAndQueue+0x70>)
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <prvCheckForValidListAndQueue+0x68>)
 8004c94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <prvCheckForValidListAndQueue+0x74>)
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <prvCheckForValidListAndQueue+0x78>)
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	200a      	movs	r0, #10
 8004ca2:	f7fd fecd 	bl	8002a40 <xQueueGenericCreateStatic>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004caa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	490b      	ldr	r1, [pc, #44]	; (8004ce8 <prvCheckForValidListAndQueue+0x7c>)
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fc44 	bl	8003548 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cc0:	f000 f970 	bl	8004fa4 <vPortExitCritical>
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000e10 	.word	0x20000e10
 8004cd0:	20000de0 	.word	0x20000de0
 8004cd4:	20000df4 	.word	0x20000df4
 8004cd8:	20000e08 	.word	0x20000e08
 8004cdc:	20000e0c 	.word	0x20000e0c
 8004ce0:	20000ebc 	.word	0x20000ebc
 8004ce4:	20000e1c 	.word	0x20000e1c
 8004ce8:	08005880 	.word	0x08005880

08004cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <pxPortInitialiseStack+0x64>)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b14      	subs	r3, #20
 8004d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b04      	subs	r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f06f 0202 	mvn.w	r2, #2
 8004d3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3b20      	subs	r3, #32
 8004d40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	08004d55 	.word	0x08004d55

08004d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <prvTaskExitError+0x54>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d00a      	beq.n	8004d7e <prvTaskExitError+0x2a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <prvTaskExitError+0x28>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
}
 8004d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d92:	bf00      	nop
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0fc      	beq.n	8004d94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	2000000c 	.word	0x2000000c
 8004dac:	00000000 	.word	0x00000000

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7fe ff4c 	bl	8003da8 <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff20 	bl	8004d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	20000f0c 	.word	0x20000f0c
 8004f34:	20000f10 	.word	0x20000f10
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe feba 	bl	8003da8 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7fe fdd7 	bl	8003c34 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <xPortSysTickHandler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	20000f0c 	.word	0x20000f0c
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	20000f10 	.word	0x20000f10

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7fe fc92 	bl	8003abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f920 	bl	80053e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f908 	bl	80054a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7fe fbfe 	bl	8003ad8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20004b1c 	.word	0x20004b1c
 800530c:	20004b30 	.word	0x20004b30
 8005310:	20004b20 	.word	0x20004b20
 8005314:	20004b14 	.word	0x20004b14
 8005318:	20004b24 	.word	0x20004b24
 800531c:	20004b28 	.word	0x20004b28

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fb88 	bl	8003abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f874 	bl	80054a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe fb85 	bl	8003ad8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20004b30 	.word	0x20004b30
 80053dc:	20004b20 	.word	0x20004b20
 80053e0:	20004b2c 	.word	0x20004b2c

080053e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvHeapInit+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3307      	adds	r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <prvHeapInit+0xac>)
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvHeapInit+0xb0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvHeapInit+0xb0>)
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005430:	2208      	movs	r2, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvHeapInit+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvHeapInit+0xb4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <prvHeapInit+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvHeapInit+0xbc>)
 800547a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <prvHeapInit+0xc0>)
 800547e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000f14 	.word	0x20000f14
 8005494:	20004b14 	.word	0x20004b14
 8005498:	20004b1c 	.word	0x20004b1c
 800549c:	20004b24 	.word	0x20004b24
 80054a0:	20004b20 	.word	0x20004b20
 80054a4:	20004b30 	.word	0x20004b30

080054a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <prvInsertBlockIntoFreeList+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <prvInsertBlockIntoFreeList+0x14>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d8f7      	bhi.n	80054b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d108      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d118      	bne.n	8005530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00d      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d002      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20004b14 	.word	0x20004b14
 8005558:	20004b1c 	.word	0x20004b1c

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	; (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	; (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <__libc_init_array+0x44>)
 8005570:	f000 f8f2 	bl	8005758 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08005908 	.word	0x08005908
 8005598:	08005908 	.word	0x08005908
 800559c:	08005908 	.word	0x08005908
 80055a0:	0800590c 	.word	0x0800590c

080055a4 <__retarget_lock_acquire_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_release_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <memcpy>:
 80055a8:	440a      	add	r2, r1
 80055aa:	4291      	cmp	r1, r2
 80055ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b0:	d100      	bne.n	80055b4 <memcpy+0xc>
 80055b2:	4770      	bx	lr
 80055b4:	b510      	push	{r4, lr}
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055be:	4291      	cmp	r1, r2
 80055c0:	d1f9      	bne.n	80055b6 <memcpy+0xe>
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <memset>:
 80055c4:	4402      	add	r2, r0
 80055c6:	4603      	mov	r3, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <cleanup_glue>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	460c      	mov	r4, r1
 80055d8:	6809      	ldr	r1, [r1, #0]
 80055da:	4605      	mov	r5, r0
 80055dc:	b109      	cbz	r1, 80055e2 <cleanup_glue+0xe>
 80055de:	f7ff fff9 	bl	80055d4 <cleanup_glue>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ea:	f000 b869 	b.w	80056c0 <_free_r>
	...

080055f0 <_reclaim_reent>:
 80055f0:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <_reclaim_reent+0xb4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4283      	cmp	r3, r0
 80055f6:	b570      	push	{r4, r5, r6, lr}
 80055f8:	4604      	mov	r4, r0
 80055fa:	d051      	beq.n	80056a0 <_reclaim_reent+0xb0>
 80055fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055fe:	b143      	cbz	r3, 8005612 <_reclaim_reent+0x22>
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d14a      	bne.n	800569c <_reclaim_reent+0xac>
 8005606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	b111      	cbz	r1, 8005612 <_reclaim_reent+0x22>
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f857 	bl	80056c0 <_free_r>
 8005612:	6961      	ldr	r1, [r4, #20]
 8005614:	b111      	cbz	r1, 800561c <_reclaim_reent+0x2c>
 8005616:	4620      	mov	r0, r4
 8005618:	f000 f852 	bl	80056c0 <_free_r>
 800561c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800561e:	b111      	cbz	r1, 8005626 <_reclaim_reent+0x36>
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f84d 	bl	80056c0 <_free_r>
 8005626:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005628:	b111      	cbz	r1, 8005630 <_reclaim_reent+0x40>
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f848 	bl	80056c0 <_free_r>
 8005630:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005632:	b111      	cbz	r1, 800563a <_reclaim_reent+0x4a>
 8005634:	4620      	mov	r0, r4
 8005636:	f000 f843 	bl	80056c0 <_free_r>
 800563a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800563c:	b111      	cbz	r1, 8005644 <_reclaim_reent+0x54>
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f83e 	bl	80056c0 <_free_r>
 8005644:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005646:	b111      	cbz	r1, 800564e <_reclaim_reent+0x5e>
 8005648:	4620      	mov	r0, r4
 800564a:	f000 f839 	bl	80056c0 <_free_r>
 800564e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005650:	b111      	cbz	r1, 8005658 <_reclaim_reent+0x68>
 8005652:	4620      	mov	r0, r4
 8005654:	f000 f834 	bl	80056c0 <_free_r>
 8005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565a:	b111      	cbz	r1, 8005662 <_reclaim_reent+0x72>
 800565c:	4620      	mov	r0, r4
 800565e:	f000 f82f 	bl	80056c0 <_free_r>
 8005662:	69a3      	ldr	r3, [r4, #24]
 8005664:	b1e3      	cbz	r3, 80056a0 <_reclaim_reent+0xb0>
 8005666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005668:	4620      	mov	r0, r4
 800566a:	4798      	blx	r3
 800566c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800566e:	b1b9      	cbz	r1, 80056a0 <_reclaim_reent+0xb0>
 8005670:	4620      	mov	r0, r4
 8005672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005676:	f7ff bfad 	b.w	80055d4 <cleanup_glue>
 800567a:	5949      	ldr	r1, [r1, r5]
 800567c:	b941      	cbnz	r1, 8005690 <_reclaim_reent+0xa0>
 800567e:	3504      	adds	r5, #4
 8005680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005682:	2d80      	cmp	r5, #128	; 0x80
 8005684:	68d9      	ldr	r1, [r3, #12]
 8005686:	d1f8      	bne.n	800567a <_reclaim_reent+0x8a>
 8005688:	4620      	mov	r0, r4
 800568a:	f000 f819 	bl	80056c0 <_free_r>
 800568e:	e7ba      	b.n	8005606 <_reclaim_reent+0x16>
 8005690:	680e      	ldr	r6, [r1, #0]
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f814 	bl	80056c0 <_free_r>
 8005698:	4631      	mov	r1, r6
 800569a:	e7ef      	b.n	800567c <_reclaim_reent+0x8c>
 800569c:	2500      	movs	r5, #0
 800569e:	e7ef      	b.n	8005680 <_reclaim_reent+0x90>
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	bf00      	nop
 80056a4:	20000010 	.word	0x20000010

080056a8 <__malloc_lock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	; (80056b0 <__malloc_lock+0x8>)
 80056aa:	f7ff bf7b 	b.w	80055a4 <__retarget_lock_acquire_recursive>
 80056ae:	bf00      	nop
 80056b0:	20004b34 	.word	0x20004b34

080056b4 <__malloc_unlock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__malloc_unlock+0x8>)
 80056b6:	f7ff bf76 	b.w	80055a6 <__retarget_lock_release_recursive>
 80056ba:	bf00      	nop
 80056bc:	20004b34 	.word	0x20004b34

080056c0 <_free_r>:
 80056c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d044      	beq.n	8005750 <_free_r+0x90>
 80056c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ca:	9001      	str	r0, [sp, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f1a1 0404 	sub.w	r4, r1, #4
 80056d2:	bfb8      	it	lt
 80056d4:	18e4      	addlt	r4, r4, r3
 80056d6:	f7ff ffe7 	bl	80056a8 <__malloc_lock>
 80056da:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <_free_r+0x94>)
 80056dc:	9801      	ldr	r0, [sp, #4]
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	b933      	cbnz	r3, 80056f0 <_free_r+0x30>
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	6014      	str	r4, [r2, #0]
 80056e6:	b003      	add	sp, #12
 80056e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ec:	f7ff bfe2 	b.w	80056b4 <__malloc_unlock>
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	d908      	bls.n	8005706 <_free_r+0x46>
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	1961      	adds	r1, r4, r5
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf01      	itttt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	1949      	addeq	r1, r1, r5
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	e7ed      	b.n	80056e2 <_free_r+0x22>
 8005706:	461a      	mov	r2, r3
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b10b      	cbz	r3, 8005710 <_free_r+0x50>
 800570c:	42a3      	cmp	r3, r4
 800570e:	d9fa      	bls.n	8005706 <_free_r+0x46>
 8005710:	6811      	ldr	r1, [r2, #0]
 8005712:	1855      	adds	r5, r2, r1
 8005714:	42a5      	cmp	r5, r4
 8005716:	d10b      	bne.n	8005730 <_free_r+0x70>
 8005718:	6824      	ldr	r4, [r4, #0]
 800571a:	4421      	add	r1, r4
 800571c:	1854      	adds	r4, r2, r1
 800571e:	42a3      	cmp	r3, r4
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	d1e0      	bne.n	80056e6 <_free_r+0x26>
 8005724:	681c      	ldr	r4, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	6053      	str	r3, [r2, #4]
 800572a:	4421      	add	r1, r4
 800572c:	6011      	str	r1, [r2, #0]
 800572e:	e7da      	b.n	80056e6 <_free_r+0x26>
 8005730:	d902      	bls.n	8005738 <_free_r+0x78>
 8005732:	230c      	movs	r3, #12
 8005734:	6003      	str	r3, [r0, #0]
 8005736:	e7d6      	b.n	80056e6 <_free_r+0x26>
 8005738:	6825      	ldr	r5, [r4, #0]
 800573a:	1961      	adds	r1, r4, r5
 800573c:	428b      	cmp	r3, r1
 800573e:	bf04      	itt	eq
 8005740:	6819      	ldreq	r1, [r3, #0]
 8005742:	685b      	ldreq	r3, [r3, #4]
 8005744:	6063      	str	r3, [r4, #4]
 8005746:	bf04      	itt	eq
 8005748:	1949      	addeq	r1, r1, r5
 800574a:	6021      	streq	r1, [r4, #0]
 800574c:	6054      	str	r4, [r2, #4]
 800574e:	e7ca      	b.n	80056e6 <_free_r+0x26>
 8005750:	b003      	add	sp, #12
 8005752:	bd30      	pop	{r4, r5, pc}
 8005754:	20004b38 	.word	0x20004b38

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
