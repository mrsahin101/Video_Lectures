
017_FreeRTOS_BINARY_SEMAPHORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c0  080067c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c8  080067c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ae4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b58  20004b58  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001966a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032aa  00000000  00000000  0003970e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003925  00000000  00000000  0003f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160a9  00000000  00000000  00042a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5a9c  00000000  00000000  00058aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e58a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058b8  00000000  00000000  0012e5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065e8 	.word	0x080065e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080065e8 	.word	0x080065e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d4:	b5b0      	push	{r4, r5, r7, lr}
 80004d6:	b09e      	sub	sp, #120	; 0x78
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80004dc:	2300      	movs	r3, #0
 80004de:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_UART_Receive_IT(&huart2, &byte, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	4938      	ldr	r1, [pc, #224]	; (80005c4 <HAL_UART_RxCpltCallback+0xf0>)
 80004e4:	4838      	ldr	r0, [pc, #224]	; (80005c8 <HAL_UART_RxCpltCallback+0xf4>)
 80004e6:	f001 ff40 	bl	800236a <HAL_UART_Receive_IT>
	cmd_buffer[cmd_len++] = byte & 0xFF;
 80004ea:	4b38      	ldr	r3, [pc, #224]	; (80005cc <HAL_UART_RxCpltCallback+0xf8>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	b2d1      	uxtb	r1, r2
 80004f2:	4a36      	ldr	r2, [pc, #216]	; (80005cc <HAL_UART_RxCpltCallback+0xf8>)
 80004f4:	7011      	strb	r1, [r2, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <HAL_UART_RxCpltCallback+0xf0>)
 80004fa:	7819      	ldrb	r1, [r3, #0]
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <HAL_UART_RxCpltCallback+0xfc>)
 80004fe:	5499      	strb	r1, [r3, r2]
	if(byte == '\r')
 8000500:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <HAL_UART_RxCpltCallback+0xf0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b0d      	cmp	r3, #13
 8000506:	d14e      	bne.n	80005a6 <HAL_UART_RxCpltCallback+0xd2>
	{
		char msg[50] = "\r\nYour command is : \"";
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <HAL_UART_RxCpltCallback+0x100>)
 800050a:	f107 040c 	add.w	r4, r7, #12
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000518:	6020      	str	r0, [r4, #0]
 800051a:	3404      	adds	r4, #4
 800051c:	8021      	strh	r1, [r4, #0]
 800051e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	619a      	str	r2, [r3, #24]
		HAL_UART_Transmit(&huart2, (uint8_t *)&msg, sizeof(msg), 100);
 8000532:	f107 010c 	add.w	r1, r7, #12
 8000536:	2364      	movs	r3, #100	; 0x64
 8000538:	2232      	movs	r2, #50	; 0x32
 800053a:	4823      	ldr	r0, [pc, #140]	; (80005c8 <HAL_UART_RxCpltCallback+0xf4>)
 800053c:	f001 fe83 	bl	8002246 <HAL_UART_Transmit>
		if(cmd_buffer[0] == '\n')
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <HAL_UART_RxCpltCallback+0xfc>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b0a      	cmp	r3, #10
 8000546:	d103      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x7c>
		{
			cmd_buffer[0] = cmd_buffer[1];
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <HAL_UART_RxCpltCallback+0xfc>)
 800054a:	785a      	ldrb	r2, [r3, #1]
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <HAL_UART_RxCpltCallback+0xfc>)
 800054e:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart2, (uint8_t *) &cmd_buffer, cmd_len - 1, 100);
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <HAL_UART_RxCpltCallback+0xf8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b29b      	uxth	r3, r3
 8000556:	3b01      	subs	r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	491c      	ldr	r1, [pc, #112]	; (80005d0 <HAL_UART_RxCpltCallback+0xfc>)
 800055e:	481a      	ldr	r0, [pc, #104]	; (80005c8 <HAL_UART_RxCpltCallback+0xf4>)
 8000560:	f001 fe71 	bl	8002246 <HAL_UART_Transmit>
		char msg1[50] = "\".\r\n";
 8000564:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <HAL_UART_RxCpltCallback+0x104>)
 8000566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800056a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056e:	6018      	str	r0, [r3, #0]
 8000570:	3304      	adds	r3, #4
 8000572:	7019      	strb	r1, [r3, #0]
 8000574:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8000578:	222d      	movs	r2, #45	; 0x2d
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f005 ff69 	bl	8006454 <memset>
		HAL_UART_Transmit(&huart2, (uint8_t *) &msg1, sizeof(msg1), 100);
 8000582:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000586:	2364      	movs	r3, #100	; 0x64
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <HAL_UART_RxCpltCallback+0xf4>)
 800058c:	f001 fe5b 	bl	8002246 <HAL_UART_Transmit>
		cmd_len = 0;
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_UART_RxCpltCallback+0xf8>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]

		//xTaskNotifyFromISR(menuDisplayTaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
		//xTaskNotifyFromISR(cmdHandlingTaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
		xSemaphoreGiveFromISR(xBinarySemaphore, &xHigherPriorityTaskWoken);
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <HAL_UART_RxCpltCallback+0x108>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fb76 	bl	8003c92 <xQueueGiveFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80005a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d007      	beq.n	80005bc <HAL_UART_RxCpltCallback+0xe8>
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_UART_RxCpltCallback+0x10c>)
 80005ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	f3bf 8f4f 	dsb	sy
 80005b8:	f3bf 8f6f 	isb	sy
}
 80005bc:	bf00      	nop
 80005be:	3778      	adds	r7, #120	; 0x78
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	200000f1 	.word	0x200000f1
 80005c8:	20000090 	.word	0x20000090
 80005cc:	200000f0 	.word	0x200000f0
 80005d0:	200000dc 	.word	0x200000dc
 80005d4:	0800660c 	.word	0x0800660c
 80005d8:	08006640 	.word	0x08006640
 80005dc:	200000d8 	.word	0x200000d8
 80005e0:	e000ed04 	.word	0xe000ed04

080005e4 <vHandlerTask>:
static void vHandlerTask(void *pvParameters)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <vHandlerTask+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fcb9 	bl	8003f6c <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart2,  (uint8_t *)"Handler Task - Processing event\r\n", 60, HAL_MAX_DELAY);
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	223c      	movs	r2, #60	; 0x3c
 8000600:	4903      	ldr	r1, [pc, #12]	; (8000610 <vHandlerTask+0x2c>)
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <vHandlerTask+0x30>)
 8000604:	f001 fe1f 	bl	8002246 <HAL_UART_Transmit>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000608:	e7f0      	b.n	80005ec <vHandlerTask+0x8>
 800060a:	bf00      	nop
 800060c:	200000d8 	.word	0x200000d8
 8000610:	08006674 	.word	0x08006674
 8000614:	20000090 	.word	0x20000090

08000618 <vPeriodicTask>:
	}
}
static void vPeriodicTask(void *pvParameters)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay500ms = pdMS_TO_TICKS(500UL);
 8000620:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000624:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		vTaskDelay(xDelay500ms);
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f004 f8ea 	bl	8004800 <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *) "Periodic task - About to generate an interrupt.\r\n", 60, HAL_MAX_DELAY);
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	223c      	movs	r2, #60	; 0x3c
 8000632:	4906      	ldr	r1, [pc, #24]	; (800064c <vPeriodicTask+0x34>)
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <vPeriodicTask+0x38>)
 8000636:	f001 fe06 	bl	8002246 <HAL_UART_Transmit>
		//vPortGenerateSimulatedInterrupt(mainINTERRUPT_NUMBER);
		HAL_UART_Transmit(&huart2, (uint8_t *) "Periodic task - Interrupt generated\r\n\r\n\r\n", 60, HAL_MAX_DELAY);
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	223c      	movs	r2, #60	; 0x3c
 8000640:	4904      	ldr	r1, [pc, #16]	; (8000654 <vPeriodicTask+0x3c>)
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <vPeriodicTask+0x38>)
 8000644:	f001 fdff 	bl	8002246 <HAL_UART_Transmit>
		vTaskDelay(xDelay500ms);
 8000648:	e7ed      	b.n	8000626 <vPeriodicTask+0xe>
 800064a:	bf00      	nop
 800064c:	08006698 	.word	0x08006698
 8000650:	20000090 	.word	0x20000090
 8000654:	080066cc 	.word	0x080066cc

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fac1 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f84d 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f8df 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066a:	f000 f8b3 	bl	80007d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xBinarySemaphore = xSemaphoreCreateBinary();
 800066e:	2203      	movs	r2, #3
 8000670:	2100      	movs	r1, #0
 8000672:	2001      	movs	r0, #1
 8000674:	f003 f916 	bl	80038a4 <xQueueGenericCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <main+0x80>)
 800067c:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&huart2, &byte, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	4916      	ldr	r1, [pc, #88]	; (80006dc <main+0x84>)
 8000682:	4817      	ldr	r0, [pc, #92]	; (80006e0 <main+0x88>)
 8000684:	f001 fe71 	bl	800236a <HAL_UART_Receive_IT>
  if(xBinarySemaphore != NULL)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <main+0x80>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d015      	beq.n	80006bc <main+0x64>
  {
	  xTaskCreate(vHandlerTask, "Handler", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2303      	movs	r3, #3
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	4911      	ldr	r1, [pc, #68]	; (80006e4 <main+0x8c>)
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0x90>)
 80006a0:	f003 ff53 	bl	800454a <xTaskCreate>

	  xTaskCreate(vPeriodicTask, "Periodic", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80006a4:	2300      	movs	r3, #0
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	2301      	movs	r3, #1
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2300      	movs	r3, #0
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	490e      	ldr	r1, [pc, #56]	; (80006ec <main+0x94>)
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <main+0x98>)
 80006b4:	f003 ff49 	bl	800454a <xTaskCreate>

	  //vPortSetInterruptHandler(mainINTERRUPT_NUMBER, ulExampleInterruptHandler);


	  vTaskStartScheduler();
 80006b8:	f004 f8d6 	bl	8004868 <vTaskStartScheduler>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006bc:	f002 fe32 	bl	8003324 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <main+0x9c>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <main+0xa0>)
 80006c6:	f002 fe77 	bl	80033b8 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <main+0xa4>)
 80006ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006d0:	f002 fe4c 	bl	800336c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x7c>
 80006d6:	bf00      	nop
 80006d8:	200000d8 	.word	0x200000d8
 80006dc:	200000f1 	.word	0x200000f1
 80006e0:	20000090 	.word	0x20000090
 80006e4:	080066f8 	.word	0x080066f8
 80006e8:	080005e5 	.word	0x080005e5
 80006ec:	08006700 	.word	0x08006700
 80006f0:	08000619 	.word	0x08000619
 80006f4:	08006724 	.word	0x08006724
 80006f8:	080008e9 	.word	0x080008e9
 80006fc:	200000d4 	.word	0x200000d4

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f005 fea0 	bl	8006454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <SystemClock_Config+0xcc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd0>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800077e:	2307      	movs	r3, #7
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fd98 	bl	80012bc <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000792:	f000 f8c3 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2105      	movs	r1, #5
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fff9 	bl	80017ac <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c0:	f000 f8ac 	bl	800091c <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f001 fcce 	bl	80021ac <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f881 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000090 	.word	0x20000090
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0xb4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a25      	ldr	r2, [pc, #148]	; (80008dc <MX_GPIO_Init+0xb4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_GPIO_Init+0xb4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xb4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1e      	ldr	r2, [pc, #120]	; (80008dc <MX_GPIO_Init+0xb4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_GPIO_Init+0xb4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_GPIO_Init+0xb4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <MX_GPIO_Init+0xb4>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_GPIO_Init+0xb4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_GPIO_Init+0xb8>)
 800089a:	f000 fcf5 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089e:	2301      	movs	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_GPIO_Init+0xbc>)
 80008b2:	f000 fb4d 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0xb8>)
 80008d0:	f000 fb3e 	bl	8000f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40020000 	.word	0x40020000

080008e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f002 fdf3 	bl	80034dc <osDelay>
 80008f6:	e7fb      	b.n	80008f0 <StartDefaultTask+0x8>

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 f98d 	bl	8000c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40002000 	.word	0x40002000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <HAL_MspInit+0x54>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x54>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_MspInit+0x54>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_MspInit+0x54>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	f06f 0001 	mvn.w	r0, #1
 800096e:	f000 fa33 	bl	8000dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_UART_MspInit+0x94>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d133      	bne.n	8000a0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_UART_MspInit+0x98>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <HAL_UART_MspInit+0x98>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0x98>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_MspInit+0x98>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <HAL_UART_MspInit+0x98>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_UART_MspInit+0x98>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009da:	230c      	movs	r3, #12
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ea:	2307      	movs	r3, #7
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_UART_MspInit+0x9c>)
 80009f6:	f000 faab 	bl	8000f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2105      	movs	r1, #5
 80009fe:	2026      	movs	r0, #38	; 0x26
 8000a00:	f000 f9ea 	bl	8000dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a04:	2026      	movs	r0, #38	; 0x26
 8000a06:	f000 fa03 	bl	8000e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	; 0x38
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <HAL_InitTick+0xe4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a32      	ldr	r2, [pc, #200]	; (8000b04 <HAL_InitTick+0xe4>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <HAL_InitTick+0xe4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4c:	f107 0210 	add.w	r2, r7, #16
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f8c8 	bl	8001bec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d103      	bne.n	8000a6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a66:	f001 f899 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000a6a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a6c:	e004      	b.n	8000a78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a6e:	f001 f895 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000a72:	4603      	mov	r3, r0
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <HAL_InitTick+0xe8>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	0c9b      	lsrs	r3, r3, #18
 8000a82:	3b01      	subs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_InitTick+0xec>)
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <HAL_InitTick+0xf0>)
 8000a8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <HAL_InitTick+0xec>)
 8000a8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a92:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a94:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <HAL_InitTick+0xec>)
 8000a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a98:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_InitTick+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_InitTick+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_InitTick+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000aac:	4817      	ldr	r0, [pc, #92]	; (8000b0c <HAL_InitTick+0xec>)
 8000aae:	f001 f8cf 	bl	8001c50 <HAL_TIM_Base_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d11b      	bne.n	8000af8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000ac0:	4812      	ldr	r0, [pc, #72]	; (8000b0c <HAL_InitTick+0xec>)
 8000ac2:	f001 f91f 	bl	8001d04 <HAL_TIM_Base_Start_IT>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d111      	bne.n	8000af8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ad4:	202d      	movs	r0, #45	; 0x2d
 8000ad6:	f000 f99b 	bl	8000e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d808      	bhi.n	8000af2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	202d      	movs	r0, #45	; 0x2d
 8000ae6:	f000 f977 	bl	8000dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_InitTick+0xf4>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	e002      	b.n	8000af8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3738      	adds	r7, #56	; 0x38
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	431bde83 	.word	0x431bde83
 8000b0c:	200000f4 	.word	0x200000f4
 8000b10:	40002000 	.word	0x40002000
 8000b14:	20000004 	.word	0x20000004

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <USART2_IRQHandler+0x10>)
 8000b4a:	f001 fc3f 	bl	80023cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000090 	.word	0x20000090

08000b58 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b5e:	f001 f941 	bl	8001de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000f4 	.word	0x200000f4

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bac:	4c0b      	ldr	r4, [pc, #44]	; (8000bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bba:	f7ff ffd7 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f005 fc15 	bl	80063ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fd49 	bl	8000658 <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bd4:	080067d0 	.word	0x080067d0
  ldr r2, =_sbss
 8000bd8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bdc:	20004b58 	.word	0x20004b58

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f8d8 	bl	8000dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff ff04 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe86 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	2000013c 	.word	0x2000013c

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	2000013c 	.word	0x2000013c

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff4c 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dea:	f7ff ff61 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff ffb1 	bl	8000d5c <NVIC_EncodePriority>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff80 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff54 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e3a:	f7ff ff09 	bl	8000c50 <HAL_GetTick>
 8000e3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d008      	beq.n	8000e5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e052      	b.n	8000f04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0216 	bic.w	r2, r2, #22
 8000e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	695a      	ldr	r2, [r3, #20]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <HAL_DMA_Abort+0x62>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0208 	bic.w	r2, r2, #8
 8000e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0201 	bic.w	r2, r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eae:	e013      	b.n	8000ed8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eb0:	f7ff fece 	bl	8000c50 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d90c      	bls.n	8000ed8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e015      	b.n	8000f04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1e4      	bne.n	8000eb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eea:	223f      	movs	r2, #63	; 0x3f
 8000eec:	409a      	lsls	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d004      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00c      	b.n	8000f44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2205      	movs	r2, #5
 8000f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0201 	bic.w	r2, r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e16b      	b.n	8001244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 815a 	bne.w	800123e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d017      	beq.n	8001040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80b4 	beq.w	800123e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b60      	ldr	r3, [pc, #384]	; (800125c <HAL_GPIO_Init+0x30c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a5f      	ldr	r2, [pc, #380]	; (800125c <HAL_GPIO_Init+0x30c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b5d      	ldr	r3, [pc, #372]	; (800125c <HAL_GPIO_Init+0x30c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a5b      	ldr	r2, [pc, #364]	; (8001260 <HAL_GPIO_Init+0x310>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_GPIO_Init+0x314>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02b      	beq.n	8001176 <HAL_GPIO_Init+0x226>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_GPIO_Init+0x318>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x222>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a50      	ldr	r2, [pc, #320]	; (800126c <HAL_GPIO_Init+0x31c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x21e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x320>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x21a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x324>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x216>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x328>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x212>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x32c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x20e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x20a>
 8001156:	2307      	movs	r3, #7
 8001158:	e00e      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800115a:	2308      	movs	r3, #8
 800115c:	e00c      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800115e:	2306      	movs	r3, #6
 8001160:	e00a      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001162:	2305      	movs	r3, #5
 8001164:	e008      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001166:	2304      	movs	r3, #4
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800116a:	2303      	movs	r3, #3
 800116c:	e004      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800116e:	2302      	movs	r3, #2
 8001170:	e002      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001176:	2300      	movs	r3, #0
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f002 0203 	and.w	r2, r2, #3
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	4093      	lsls	r3, r2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001188:	4935      	ldr	r1, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x310>)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_GPIO_Init+0x334>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ba:	4a32      	ldr	r2, [pc, #200]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e4:	4a27      	ldr	r2, [pc, #156]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_GPIO_Init+0x334>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_GPIO_Init+0x334>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_GPIO_Init+0x334>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	f67f ae90 	bls.w	8000f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40013800 	.word	0x40013800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40021000 	.word	0x40021000
 8001278:	40021400 	.word	0x40021400
 800127c:	40021800 	.word	0x40021800
 8001280:	40021c00 	.word	0x40021c00
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e267      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b85      	ldr	r3, [pc, #532]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b82      	ldr	r3, [pc, #520]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b7e      	ldr	r3, [pc, #504]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e242      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a75      	ldr	r2, [pc, #468]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b70      	ldr	r3, [pc, #448]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a68      	ldr	r2, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc6c 	bl	8000c50 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fc68 	bl	8000c50 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e207      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc58 	bl	8000c50 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc54 	bl	8000c50 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f3      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c7      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4937      	ldr	r1, [pc, #220]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_RCC_OscConfig+0x244>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fc0d 	bl	8000c50 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fc09 	bl	8000c50 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a8      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4925      	ldr	r1, [pc, #148]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_RCC_OscConfig+0x244>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fbec 	bl	8000c50 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fbe8 	bl	8000c50 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e187      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d036      	beq.n	8001514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_RCC_OscConfig+0x248>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fbcc 	bl	8000c50 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fbc8 	bl	8000c50 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e167      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_OscConfig+0x248>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fbb5 	bl	8000c50 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e00e      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fbb1 	bl	8000c50 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d907      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e150      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b88      	ldr	r3, [pc, #544]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ea      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8097 	beq.w	8001650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b81      	ldr	r3, [pc, #516]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b7d      	ldr	r3, [pc, #500]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a7c      	ldr	r2, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b7a      	ldr	r3, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b77      	ldr	r3, [pc, #476]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b74      	ldr	r3, [pc, #464]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a73      	ldr	r2, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff fb71 	bl	8000c50 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fb6d 	bl	8000c50 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e10c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2ea>
 8001598:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a63      	ldr	r2, [pc, #396]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x30c>
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a5e      	ldr	r2, [pc, #376]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5b      	ldr	r2, [pc, #364]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	4b55      	ldr	r3, [pc, #340]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a54      	ldr	r2, [pc, #336]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d015      	beq.n	8001614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fb32 	bl	8000c50 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb2e 	bl	8000c50 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0cb      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	4b49      	ldr	r3, [pc, #292]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ee      	beq.n	80015f0 <HAL_RCC_OscConfig+0x334>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fb1c 	bl	8000c50 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fb18 	bl	8000c50 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0b5      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	4b3e      	ldr	r3, [pc, #248]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ee      	bne.n	800161c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a1 	beq.w	800179c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d05c      	beq.n	8001720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d141      	bne.n	80016f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff faec 	bl	8000c50 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fae8 	bl	8000c50 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e087      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	491b      	ldr	r1, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x478>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fac1 	bl	8000c50 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fabd 	bl	8000c50 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e05c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x416>
 80016f0:	e054      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff faaa 	bl	8000c50 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff faa6 	bl	8000c50 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e045      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
 800171e:	e03d      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e038      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d121      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800176e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d90c      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4934      	ldr	r1, [pc, #208]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff f9d8 	bl	8000c50 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff f9d4 	bl	8000c50 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f864 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	08006748 	.word	0x08006748
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b094      	sub	sp, #80	; 0x50
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
 8001984:	2300      	movs	r3, #0
 8001986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001988:	2300      	movs	r3, #0
 800198a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b79      	ldr	r3, [pc, #484]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 800199c:	2b08      	cmp	r3, #8
 800199e:	f200 80e1 	bhi.w	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019aa:	e0db      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019b0:	e0db      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b73      	ldr	r3, [pc, #460]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80019b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019b6:	e0d8      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	2200      	movs	r2, #0
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
 80019e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019ea:	4622      	mov	r2, r4
 80019ec:	462b      	mov	r3, r5
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	0159      	lsls	r1, r3, #5
 80019f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019fc:	0150      	lsls	r0, r2, #5
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4621      	mov	r1, r4
 8001a04:	1a51      	subs	r1, r2, r1
 8001a06:	6139      	str	r1, [r7, #16]
 8001a08:	4629      	mov	r1, r5
 8001a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	018b      	lsls	r3, r1, #6
 8001a20:	4651      	mov	r1, sl
 8001a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a26:	4651      	mov	r1, sl
 8001a28:	018a      	lsls	r2, r1, #6
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a30:	4659      	mov	r1, fp
 8001a32:	eb63 0901 	sbc.w	r9, r3, r1
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	eb18 0303 	adds.w	r3, r8, r3
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	462b      	mov	r3, r5
 8001a58:	eb49 0303 	adc.w	r3, r9, r3
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	024b      	lsls	r3, r1, #9
 8001a6e:	4621      	mov	r1, r4
 8001a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a74:	4621      	mov	r1, r4
 8001a76:	024a      	lsls	r2, r1, #9
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a88:	f7fe fba2 	bl	80001d0 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a94:	e058      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab0:	4642      	mov	r2, r8
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	0159      	lsls	r1, r3, #5
 8001abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac2:	0150      	lsls	r0, r2, #5
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ace:	4649      	mov	r1, r9
 8001ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8001aec:	eb63 050b 	sbc.w	r5, r3, fp
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	00eb      	lsls	r3, r5, #3
 8001afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afe:	00e2      	lsls	r2, r4, #3
 8001b00:	4614      	mov	r4, r2
 8001b02:	461d      	mov	r5, r3
 8001b04:	4643      	mov	r3, r8
 8001b06:	18e3      	adds	r3, r4, r3
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	eb45 0303 	adc.w	r3, r5, r3
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	028b      	lsls	r3, r1, #10
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b28:	4621      	mov	r1, r4
 8001b2a:	028a      	lsls	r2, r1, #10
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b32:	2200      	movs	r2, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	61fa      	str	r2, [r7, #28]
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	f7fe fb48 	bl	80001d0 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3750      	adds	r7, #80	; 0x50
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08006758 	.word	0x08006758

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc8:	f7ff ffdc 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0b5b      	lsrs	r3, r3, #13
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	08006758 	.word	0x08006758

08001bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_RCC_GetClockConfig+0x60>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0207 	and.w	r2, r3, #7
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e041      	b.n	8001ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f839 	bl	8001cee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 f9d8 	bl	8002044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d001      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e04e      	b.n	8001dba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d022      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d46:	d01d      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d018      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d013      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00e      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d111      	bne.n	8001da8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d010      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da6:	e007      	b.n	8001db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40010400 	.word	0x40010400
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40001800 	.word	0x40001800

08001de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d122      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d11b      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0202 	mvn.w	r2, #2
 8001e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8ee 	bl	8002008 <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8e0 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8f1 	bl	800201c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d122      	bne.n	8001e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d11b      	bne.n	8001e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0204 	mvn.w	r2, #4
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8c4 	bl	8002008 <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8b6 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8c7 	bl	800201c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d122      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d11b      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0208 	mvn.w	r2, #8
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f89a 	bl	8002008 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f88c 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f89d 	bl	800201c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d122      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b10      	cmp	r3, #16
 8001f02:	d11b      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0210 	mvn.w	r2, #16
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2208      	movs	r2, #8
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f870 	bl	8002008 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f862 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f873 	bl	800201c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0201 	mvn.w	r2, #1
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fcc8 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b80      	cmp	r3, #128	; 0x80
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f902 	bl	8002198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f838 	bl	8002030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d107      	bne.n	8001fec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0220 	mvn.w	r2, #32
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8cc 	bl	8002184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a40      	ldr	r2, [pc, #256]	; (8002158 <TIM_Base_SetConfig+0x114>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d00f      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3d      	ldr	r2, [pc, #244]	; (800215c <TIM_Base_SetConfig+0x118>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00b      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3c      	ldr	r2, [pc, #240]	; (8002160 <TIM_Base_SetConfig+0x11c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3b      	ldr	r2, [pc, #236]	; (8002164 <TIM_Base_SetConfig+0x120>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3a      	ldr	r2, [pc, #232]	; (8002168 <TIM_Base_SetConfig+0x124>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <TIM_Base_SetConfig+0x114>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02b      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d027      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2c      	ldr	r2, [pc, #176]	; (800215c <TIM_Base_SetConfig+0x118>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d023      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <TIM_Base_SetConfig+0x11c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <TIM_Base_SetConfig+0x120>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01b      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a29      	ldr	r2, [pc, #164]	; (8002168 <TIM_Base_SetConfig+0x124>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d017      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <TIM_Base_SetConfig+0x128>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a27      	ldr	r2, [pc, #156]	; (8002170 <TIM_Base_SetConfig+0x12c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00f      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <TIM_Base_SetConfig+0x130>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00b      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a25      	ldr	r2, [pc, #148]	; (8002178 <TIM_Base_SetConfig+0x134>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a24      	ldr	r2, [pc, #144]	; (800217c <TIM_Base_SetConfig+0x138>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a23      	ldr	r2, [pc, #140]	; (8002180 <TIM_Base_SetConfig+0x13c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <TIM_Base_SetConfig+0x114>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d003      	beq.n	800213c <TIM_Base_SetConfig+0xf8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <TIM_Base_SetConfig+0x124>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d103      	bne.n	8002144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	615a      	str	r2, [r3, #20]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40010400 	.word	0x40010400
 800216c:	40014000 	.word	0x40014000
 8002170:	40014400 	.word	0x40014400
 8002174:	40014800 	.word	0x40014800
 8002178:	40001800 	.word	0x40001800
 800217c:	40001c00 	.word	0x40001c00
 8002180:	40002000 	.word	0x40002000

08002184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e03f      	b.n	800223e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fbd4 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fddf 	bl	8002db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b08a      	sub	sp, #40	; 0x28
 800224a:	af02      	add	r7, sp, #8
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	d17c      	bne.n	8002360 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_UART_Transmit+0x2c>
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e075      	b.n	8002362 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_UART_Transmit+0x3e>
 8002280:	2302      	movs	r3, #2
 8002282:	e06e      	b.n	8002362 <HAL_UART_Transmit+0x11c>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2221      	movs	r2, #33	; 0x21
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800229a:	f7fe fcd9 	bl	8000c50 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b4:	d108      	bne.n	80022c8 <HAL_UART_Transmit+0x82>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	e003      	b.n	80022d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022d8:	e02a      	b.n	8002330 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2200      	movs	r2, #0
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fb1f 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e036      	b.n	8002362 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	3302      	adds	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	e007      	b.n	8002322 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3301      	adds	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1cf      	bne.n	80022da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2200      	movs	r2, #0
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 faef 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e006      	b.n	8002362 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b20      	cmp	r3, #32
 8002382:	d11d      	bne.n	80023c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_UART_Receive_IT+0x26>
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e016      	b.n	80023c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Receive_IT+0x38>
 800239e:	2302      	movs	r3, #2
 80023a0:	e00f      	b.n	80023c2 <HAL_UART_Receive_IT+0x58>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fb24 	bl	8002a04 <UART_Start_Receive_IT>
 80023bc:	4603      	mov	r3, r0
 80023be:	e000      	b.n	80023c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0ba      	sub	sp, #232	; 0xe8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800240a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_UART_IRQHandler+0x66>
 800241e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fc07 	bl	8002c3e <UART_Receive_IT>
      return;
 8002430:	e256      	b.n	80028e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80de 	beq.w	80025f8 <HAL_UART_IRQHandler+0x22c>
 800243c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80d1 	beq.w	80025f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_UART_IRQHandler+0xae>
 8002462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_UART_IRQHandler+0xd2>
 8002486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800249e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_UART_IRQHandler+0xf6>
 80024aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f043 0204 	orr.w	r2, r3, #4
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d011      	beq.n	80024f2 <HAL_UART_IRQHandler+0x126>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0208 	orr.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 81ed 	beq.w	80028d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_UART_IRQHandler+0x14e>
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fb92 	bl	8002c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_UART_IRQHandler+0x17a>
 800253e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d04f      	beq.n	80025e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa9a 	bl	8002a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d141      	bne.n	80025de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3314      	adds	r3, #20
 8002560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002568:	e853 3f00 	ldrex	r3, [r3]
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3314      	adds	r3, #20
 8002582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800258a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002596:	e841 2300 	strex	r3, r2, [r1]
 800259a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800259e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1d9      	bne.n	800255a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	4a7d      	ldr	r2, [pc, #500]	; (80027a8 <HAL_UART_IRQHandler+0x3dc>)
 80025b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fca6 	bl	8000f0c <HAL_DMA_Abort_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d0:	4610      	mov	r0, r2
 80025d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	e00e      	b.n	80025f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f990 	bl	80028fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025dc:	e00a      	b.n	80025f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f98c 	bl	80028fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	e006      	b.n	80025f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f988 	bl	80028fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025f2:	e170      	b.n	80028d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	bf00      	nop
    return;
 80025f6:	e16e      	b.n	80028d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	f040 814a 	bne.w	8002896 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8143 	beq.w	8002896 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 813c 	beq.w	8002896 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	f040 80b4 	bne.w	80027ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8140 	beq.w	80028da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800265e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002662:	429a      	cmp	r2, r3
 8002664:	f080 8139 	bcs.w	80028da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800266e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267a:	f000 8088 	beq.w	800278e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	330c      	adds	r3, #12
 8002684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800269c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1d9      	bne.n	800267e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3314      	adds	r3, #20
 80026d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3314      	adds	r3, #20
 80026ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e1      	bne.n	80026ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3314      	adds	r3, #20
 800270c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800271c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3314      	adds	r3, #20
 8002726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800272a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800272c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002730:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e3      	bne.n	8002706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275e:	f023 0310 	bic.w	r3, r3, #16
 8002762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002770:	65ba      	str	r2, [r7, #88]	; 0x58
 8002772:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002778:	e841 2300 	strex	r3, r2, [r1]
 800277c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e3      	bne.n	800274c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fb4f 	bl	8000e2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002796:	b29b      	uxth	r3, r3
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	b29b      	uxth	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f8b6 	bl	8002910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027a4:	e099      	b.n	80028da <HAL_UART_IRQHandler+0x50e>
 80027a6:	bf00      	nop
 80027a8:	08002b47 	.word	0x08002b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 808b 	beq.w	80028de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80027c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8086 	beq.w	80028de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027f6:	647a      	str	r2, [r7, #68]	; 0x44
 80027f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e3      	bne.n	80027d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	623b      	str	r3, [r7, #32]
   return(result);
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3314      	adds	r3, #20
 800282a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800282e:	633a      	str	r2, [r7, #48]	; 0x30
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e3      	bne.n	800280a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0310 	bic.w	r3, r3, #16
 8002866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002874:	61fa      	str	r2, [r7, #28]
 8002876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	69b9      	ldr	r1, [r7, #24]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	617b      	str	r3, [r7, #20]
   return(result);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e3      	bne.n	8002850 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f83e 	bl	8002910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002894:	e023      	b.n	80028de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_UART_IRQHandler+0x4ea>
 80028a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f95d 	bl	8002b6e <UART_Transmit_IT>
    return;
 80028b4:	e014      	b.n	80028e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00e      	beq.n	80028e0 <HAL_UART_IRQHandler+0x514>
 80028c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f99d 	bl	8002c0e <UART_EndTransmit_IT>
    return;
 80028d4:	e004      	b.n	80028e0 <HAL_UART_IRQHandler+0x514>
    return;
 80028d6:	bf00      	nop
 80028d8:	e002      	b.n	80028e0 <HAL_UART_IRQHandler+0x514>
      return;
 80028da:	bf00      	nop
 80028dc:	e000      	b.n	80028e0 <HAL_UART_IRQHandler+0x514>
      return;
 80028de:	bf00      	nop
  }
}
 80028e0:	37e8      	adds	r7, #232	; 0xe8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop

080028e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b090      	sub	sp, #64	; 0x40
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002938:	e050      	b.n	80029dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d04c      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <UART_WaitOnFlagUntilTimeout+0x30>
 8002948:	f7fe f982 	bl	8000c50 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002954:	429a      	cmp	r2, r3
 8002956:	d241      	bcs.n	80029dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800296e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002978:	637a      	str	r2, [r7, #52]	; 0x34
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800297e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	613b      	str	r3, [r7, #16]
   return(result);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ac:	623a      	str	r2, [r7, #32]
 80029ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	69f9      	ldr	r1, [r7, #28]
 80029b2:	6a3a      	ldr	r2, [r7, #32]
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e5      	bne.n	800298c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e00f      	b.n	80029fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d09f      	beq.n	800293a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3740      	adds	r7, #64	; 0x40
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2222      	movs	r2, #34	; 0x22
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0220 	orr.w	r2, r2, #32
 8002a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b095      	sub	sp, #84	; 0x54
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aa8:	643a      	str	r2, [r7, #64]	; 0x40
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e5      	bne.n	8002a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3314      	adds	r3, #20
 8002ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae4:	e841 2300 	strex	r3, r2, [r1]
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e5      	bne.n	8002abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d119      	bne.n	8002b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f023 0310 	bic.w	r3, r3, #16
 8002b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b18:	61ba      	str	r2, [r7, #24]
 8002b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	613b      	str	r3, [r7, #16]
   return(result);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e5      	bne.n	8002af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b3a:	bf00      	nop
 8002b3c:	3754      	adds	r7, #84	; 0x54
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7ff fecb 	bl	80028fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b21      	cmp	r3, #33	; 0x21
 8002b80:	d13e      	bne.n	8002c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d114      	bne.n	8002bb6 <UART_Transmit_IT+0x48>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d110      	bne.n	8002bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	e008      	b.n	8002bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6211      	str	r1, [r2, #32]
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10f      	bne.n	8002bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fe5a 	bl	80028e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b08c      	sub	sp, #48	; 0x30
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b22      	cmp	r3, #34	; 0x22
 8002c50:	f040 80ab 	bne.w	8002daa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d117      	bne.n	8002c8e <UART_Receive_IT+0x50>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d113      	bne.n	8002c8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	1c9a      	adds	r2, r3, #2
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c8c:	e026      	b.n	8002cdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d007      	beq.n	8002cb2 <UART_Receive_IT+0x74>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <UART_Receive_IT+0x82>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e008      	b.n	8002cd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d15a      	bne.n	8002da6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0220 	bic.w	r2, r2, #32
 8002cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d135      	bne.n	8002d9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	613b      	str	r3, [r7, #16]
   return(result);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f023 0310 	bic.w	r3, r3, #16
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	623a      	str	r2, [r7, #32]
 8002d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	69f9      	ldr	r1, [r7, #28]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e5      	bne.n	8002d36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d10a      	bne.n	8002d8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fdbb 	bl	8002910 <HAL_UARTEx_RxEventCallback>
 8002d9a:	e002      	b.n	8002da2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fd fb99 	bl	80004d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e002      	b.n	8002dac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3730      	adds	r7, #48	; 0x30
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db8:	b0c0      	sub	sp, #256	; 0x100
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	68d9      	ldr	r1, [r3, #12]
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	ea40 0301 	orr.w	r3, r0, r1
 8002ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e0c:	f021 010c 	bic.w	r1, r1, #12
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	6999      	ldr	r1, [r3, #24]
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	ea40 0301 	orr.w	r3, r0, r1
 8002e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <UART_SetConfig+0x2cc>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d005      	beq.n	8002e54 <UART_SetConfig+0xa0>
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <UART_SetConfig+0x2d0>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d104      	bne.n	8002e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7fe feb6 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002e58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e5c:	e003      	b.n	8002e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e5e:	f7fe fe9d 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8002e62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	f040 810c 	bne.w	800308c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e86:	4622      	mov	r2, r4
 8002e88:	462b      	mov	r3, r5
 8002e8a:	1891      	adds	r1, r2, r2
 8002e8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e8e:	415b      	adcs	r3, r3
 8002e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e96:	4621      	mov	r1, r4
 8002e98:	eb12 0801 	adds.w	r8, r2, r1
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb43 0901 	adc.w	r9, r3, r1
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb6:	4690      	mov	r8, r2
 8002eb8:	4699      	mov	r9, r3
 8002eba:	4623      	mov	r3, r4
 8002ebc:	eb18 0303 	adds.w	r3, r8, r3
 8002ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	eb49 0303 	adc.w	r3, r9, r3
 8002eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	18db      	adds	r3, r3, r3
 8002ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee8:	4613      	mov	r3, r2
 8002eea:	eb42 0303 	adc.w	r3, r2, r3
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ef8:	f7fd f96a 	bl	80001d0 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <UART_SetConfig+0x2d4>)
 8002f02:	fba3 2302 	umull	r2, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	011c      	lsls	r4, r3, #4
 8002f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f24:	415b      	adcs	r3, r3
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb43 0b01 	adc.w	fp, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f4c:	4692      	mov	sl, r2
 8002f4e:	469b      	mov	fp, r3
 8002f50:	4643      	mov	r3, r8
 8002f52:	eb1a 0303 	adds.w	r3, sl, r3
 8002f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	18db      	adds	r3, r3, r3
 8002f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f7e:	4613      	mov	r3, r2
 8002f80:	eb42 0303 	adc.w	r3, r2, r3
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
 8002f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f8e:	f7fd f91f 	bl	80001d0 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <UART_SetConfig+0x2d4>)
 8002f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2264      	movs	r2, #100	; 0x64
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	1acb      	subs	r3, r1, r3
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <UART_SetConfig+0x2d4>)
 8002fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fbc:	441c      	add	r4, r3
 8002fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	1891      	adds	r1, r2, r2
 8002fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd8:	415b      	adcs	r3, r3
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	1851      	adds	r1, r2, r1
 8002fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	414b      	adcs	r3, r1
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	00cb      	lsls	r3, r1, #3
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003002:	4651      	mov	r1, sl
 8003004:	00ca      	lsls	r2, r1, #3
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	4603      	mov	r3, r0
 800300c:	4642      	mov	r2, r8
 800300e:	189b      	adds	r3, r3, r2
 8003010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003014:	464b      	mov	r3, r9
 8003016:	460a      	mov	r2, r1
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800302c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003034:	460b      	mov	r3, r1
 8003036:	18db      	adds	r3, r3, r3
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
 800303a:	4613      	mov	r3, r2
 800303c:	eb42 0303 	adc.w	r3, r2, r3
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800304a:	f7fd f8c1 	bl	80001d0 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <UART_SetConfig+0x2d4>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	; 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	3332      	adds	r3, #50	; 0x32
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <UART_SetConfig+0x2d4>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	f003 0207 	and.w	r2, r3, #7
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4422      	add	r2, r4
 800307a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800307c:	e105      	b.n	800328a <UART_SetConfig+0x4d6>
 800307e:	bf00      	nop
 8003080:	40011000 	.word	0x40011000
 8003084:	40011400 	.word	0x40011400
 8003088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800308c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003096:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800309a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800309e:	4642      	mov	r2, r8
 80030a0:	464b      	mov	r3, r9
 80030a2:	1891      	adds	r1, r2, r2
 80030a4:	6239      	str	r1, [r7, #32]
 80030a6:	415b      	adcs	r3, r3
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ae:	4641      	mov	r1, r8
 80030b0:	1854      	adds	r4, r2, r1
 80030b2:	4649      	mov	r1, r9
 80030b4:	eb43 0501 	adc.w	r5, r3, r1
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	00eb      	lsls	r3, r5, #3
 80030c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c6:	00e2      	lsls	r2, r4, #3
 80030c8:	4614      	mov	r4, r2
 80030ca:	461d      	mov	r5, r3
 80030cc:	4643      	mov	r3, r8
 80030ce:	18e3      	adds	r3, r4, r3
 80030d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030d4:	464b      	mov	r3, r9
 80030d6:	eb45 0303 	adc.w	r3, r5, r3
 80030da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030fa:	4629      	mov	r1, r5
 80030fc:	008b      	lsls	r3, r1, #2
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003104:	4621      	mov	r1, r4
 8003106:	008a      	lsls	r2, r1, #2
 8003108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800310c:	f7fd f860 	bl	80001d0 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4b60      	ldr	r3, [pc, #384]	; (8003298 <UART_SetConfig+0x4e4>)
 8003116:	fba3 2302 	umull	r2, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011c      	lsls	r4, r3, #4
 800311e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800312c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	1891      	adds	r1, r2, r2
 8003136:	61b9      	str	r1, [r7, #24]
 8003138:	415b      	adcs	r3, r3
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003140:	4641      	mov	r1, r8
 8003142:	1851      	adds	r1, r2, r1
 8003144:	6139      	str	r1, [r7, #16]
 8003146:	4649      	mov	r1, r9
 8003148:	414b      	adcs	r3, r1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003158:	4659      	mov	r1, fp
 800315a:	00cb      	lsls	r3, r1, #3
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003162:	4651      	mov	r1, sl
 8003164:	00ca      	lsls	r2, r1, #3
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	4603      	mov	r3, r0
 800316c:	4642      	mov	r2, r8
 800316e:	189b      	adds	r3, r3, r2
 8003170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003174:	464b      	mov	r3, r9
 8003176:	460a      	mov	r2, r1
 8003178:	eb42 0303 	adc.w	r3, r2, r3
 800317c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	67bb      	str	r3, [r7, #120]	; 0x78
 800318a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003198:	4649      	mov	r1, r9
 800319a:	008b      	lsls	r3, r1, #2
 800319c:	4641      	mov	r1, r8
 800319e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a2:	4641      	mov	r1, r8
 80031a4:	008a      	lsls	r2, r1, #2
 80031a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031aa:	f7fd f811 	bl	80001d0 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <UART_SetConfig+0x4e4>)
 80031b4:	fba3 1302 	umull	r1, r3, r3, r2
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	2164      	movs	r1, #100	; 0x64
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	3332      	adds	r3, #50	; 0x32
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <UART_SetConfig+0x4e4>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d2:	441c      	add	r4, r3
 80031d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d8:	2200      	movs	r2, #0
 80031da:	673b      	str	r3, [r7, #112]	; 0x70
 80031dc:	677a      	str	r2, [r7, #116]	; 0x74
 80031de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031e2:	4642      	mov	r2, r8
 80031e4:	464b      	mov	r3, r9
 80031e6:	1891      	adds	r1, r2, r2
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	415b      	adcs	r3, r3
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031f2:	4641      	mov	r1, r8
 80031f4:	1851      	adds	r1, r2, r1
 80031f6:	6039      	str	r1, [r7, #0]
 80031f8:	4649      	mov	r1, r9
 80031fa:	414b      	adcs	r3, r1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800320a:	4659      	mov	r1, fp
 800320c:	00cb      	lsls	r3, r1, #3
 800320e:	4651      	mov	r1, sl
 8003210:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003214:	4651      	mov	r1, sl
 8003216:	00ca      	lsls	r2, r1, #3
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	4603      	mov	r3, r0
 800321e:	4642      	mov	r2, r8
 8003220:	189b      	adds	r3, r3, r2
 8003222:	66bb      	str	r3, [r7, #104]	; 0x68
 8003224:	464b      	mov	r3, r9
 8003226:	460a      	mov	r2, r1
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	663b      	str	r3, [r7, #96]	; 0x60
 8003238:	667a      	str	r2, [r7, #100]	; 0x64
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003246:	4649      	mov	r1, r9
 8003248:	008b      	lsls	r3, r1, #2
 800324a:	4641      	mov	r1, r8
 800324c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003250:	4641      	mov	r1, r8
 8003252:	008a      	lsls	r2, r1, #2
 8003254:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003258:	f7fc ffba 	bl	80001d0 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <UART_SetConfig+0x4e4>)
 8003262:	fba3 1302 	umull	r1, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2164      	movs	r1, #100	; 0x64
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a08      	ldr	r2, [pc, #32]	; (8003298 <UART_SetConfig+0x4e4>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4422      	add	r2, r4
 8003288:	609a      	str	r2, [r3, #8]
}
 800328a:	bf00      	nop
 800328c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003290:	46bd      	mov	sp, r7
 8003292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003296:	bf00      	nop
 8003298:	51eb851f 	.word	0x51eb851f

0800329c <__NVIC_SetPriority>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db0a      	blt.n	80032c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	490c      	ldr	r1, [pc, #48]	; (80032e8 <__NVIC_SetPriority+0x4c>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	440b      	add	r3, r1
 80032c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032c4:	e00a      	b.n	80032dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4908      	ldr	r1, [pc, #32]	; (80032ec <__NVIC_SetPriority+0x50>)
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	3b04      	subs	r3, #4
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	440b      	add	r3, r1
 80032da:	761a      	strb	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <SysTick_Handler+0x1c>)
 80032f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80032f8:	f001 ff12 	bl	8005120 <xTaskGetSchedulerState>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003302:	f002 fdf9 	bl	8005ef8 <xPortSysTickHandler>
  }
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010

08003310 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003314:	2100      	movs	r1, #0
 8003316:	f06f 0004 	mvn.w	r0, #4
 800331a:	f7ff ffbf 	bl	800329c <__NVIC_SetPriority>
#endif
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800332a:	f3ef 8305 	mrs	r3, IPSR
 800332e:	603b      	str	r3, [r7, #0]
  return(result);
 8003330:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003336:	f06f 0305 	mvn.w	r3, #5
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e00c      	b.n	8003358 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <osKernelInitialize+0x44>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <osKernelInitialize+0x44>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800334c:	2300      	movs	r3, #0
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	e002      	b.n	8003358 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000140 	.word	0x20000140

0800336c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003372:	f3ef 8305 	mrs	r3, IPSR
 8003376:	603b      	str	r3, [r7, #0]
  return(result);
 8003378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <osKernelStart+0x1a>
    stat = osErrorISR;
 800337e:	f06f 0305 	mvn.w	r3, #5
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	e010      	b.n	80033a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <osKernelStart+0x48>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d109      	bne.n	80033a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800338e:	f7ff ffbf 	bl	8003310 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <osKernelStart+0x48>)
 8003394:	2202      	movs	r2, #2
 8003396:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003398:	f001 fa66 	bl	8004868 <vTaskStartScheduler>
      stat = osOK;
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	e002      	b.n	80033a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000140 	.word	0x20000140

080033b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	; 0x38
 80033bc:	af04      	add	r7, sp, #16
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c8:	f3ef 8305 	mrs	r3, IPSR
 80033cc:	617b      	str	r3, [r7, #20]
  return(result);
 80033ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d17e      	bne.n	80034d2 <osThreadNew+0x11a>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07b      	beq.n	80034d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033de:	2318      	movs	r3, #24
 80033e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d045      	beq.n	800347e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <osThreadNew+0x48>
        name = attr->name;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <osThreadNew+0x6e>
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b38      	cmp	r3, #56	; 0x38
 8003418:	d805      	bhi.n	8003426 <osThreadNew+0x6e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <osThreadNew+0x72>
        return (NULL);
 8003426:	2300      	movs	r3, #0
 8003428:	e054      	b.n	80034d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <osThreadNew+0xa8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2bbb      	cmp	r3, #187	; 0xbb
 8003448:	d90a      	bls.n	8003460 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <osThreadNew+0xa8>
        mem = 1;
 800345a:	2301      	movs	r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e010      	b.n	8003482 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10c      	bne.n	8003482 <osThreadNew+0xca>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d108      	bne.n	8003482 <osThreadNew+0xca>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <osThreadNew+0xca>
          mem = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e001      	b.n	8003482 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d110      	bne.n	80034aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003490:	9202      	str	r2, [sp, #8]
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	6a3a      	ldr	r2, [r7, #32]
 800349c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fff6 	bl	8004490 <xTaskCreateStatic>
 80034a4:	4603      	mov	r3, r0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e013      	b.n	80034d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d110      	bne.n	80034d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	f107 0310 	add.w	r3, r7, #16
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f001 f841 	bl	800454a <xTaskCreate>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <osThreadNew+0x11a>
            hTask = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034d2:	693b      	ldr	r3, [r7, #16]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e4:	f3ef 8305 	mrs	r3, IPSR
 80034e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <osDelay+0x1c>
    stat = osErrorISR;
 80034f0:	f06f 0305 	mvn.w	r3, #5
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e007      	b.n	8003508 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f001 f97c 	bl	8004800 <vTaskDelay>
    }
  }

  return (stat);
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <vApplicationGetIdleTaskMemory+0x2c>)
 8003524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4a06      	ldr	r2, [pc, #24]	; (8003544 <vApplicationGetIdleTaskMemory+0x30>)
 800352a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000144 	.word	0x20000144
 8003544:	20000200 	.word	0x20000200

08003548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a07      	ldr	r2, [pc, #28]	; (8003574 <vApplicationGetTimerTaskMemory+0x2c>)
 8003558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4a06      	ldr	r2, [pc, #24]	; (8003578 <vApplicationGetTimerTaskMemory+0x30>)
 800355e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000400 	.word	0x20000400
 8003578:	200004bc 	.word	0x200004bc

0800357c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f103 0208 	add.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f103 0208 	add.w	r2, r3, #8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f103 0208 	add.w	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d103      	bne.n	800363e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e00c      	b.n	8003658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3308      	adds	r3, #8
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e002      	b.n	800364c <vListInsert+0x2e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d2f6      	bcs.n	8003646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d103      	bne.n	80036c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800370e:	f002 fb61 	bl	8005dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	441a      	add	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	3b01      	subs	r3, #1
 8003740:	68f9      	ldr	r1, [r7, #12]
 8003742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	441a      	add	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	22ff      	movs	r2, #255	; 0xff
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d114      	bne.n	800378e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01a      	beq.n	80037a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3310      	adds	r3, #16
 8003770:	4618      	mov	r0, r3
 8003772:	f001 fb13 	bl	8004d9c <xTaskRemoveFromEventList>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <xQueueGenericReset+0xcc>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	e009      	b.n	80037a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3310      	adds	r3, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fef2 	bl	800357c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff feed 	bl	800357c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037a2:	f002 fb47 	bl	8005e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08e      	sub	sp, #56	; 0x38
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037da:	bf00      	nop
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <xQueueGenericCreateStatic+0x52>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <xQueueGenericCreateStatic+0x56>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <xQueueGenericCreateStatic+0x58>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	623b      	str	r3, [r7, #32]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <xQueueGenericCreateStatic+0x7e>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <xQueueGenericCreateStatic+0x82>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <xQueueGenericCreateStatic+0x84>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	61fb      	str	r3, [r7, #28]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003852:	2350      	movs	r3, #80	; 0x50
 8003854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b50      	cmp	r3, #80	; 0x50
 800385a:	d00a      	beq.n	8003872 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	61bb      	str	r3, [r7, #24]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003872:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003886:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f83f 	bl	8003918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800389c:	4618      	mov	r0, r3
 800389e:	3730      	adds	r7, #48	; 0x30
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	613b      	str	r3, [r7, #16]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3350      	adds	r3, #80	; 0x50
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fb9b 	bl	8006018 <pvPortMalloc>
 80038e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3350      	adds	r3, #80	; 0x50
 80038f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038fc:	79fa      	ldrb	r2, [r7, #7]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f805 	bl	8003918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800390e:	69bb      	ldr	r3, [r7, #24]
	}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e002      	b.n	800393a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003946:	2101      	movs	r1, #1
 8003948:	69b8      	ldr	r0, [r7, #24]
 800394a:	f7ff fecb 	bl	80036e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	; 0x38
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800396e:	2300      	movs	r3, #0
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xQueueGenericSend+0x32>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <xQueueGenericSend+0x40>
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <xQueueGenericSend+0x44>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <xQueueGenericSend+0x46>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <xQueueGenericSend+0x60>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d103      	bne.n	80039ce <xQueueGenericSend+0x6e>
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <xQueueGenericSend+0x72>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <xQueueGenericSend+0x74>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueGenericSend+0x8e>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	623b      	str	r3, [r7, #32]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ee:	f001 fb97 	bl	8005120 <xTaskGetSchedulerState>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <xQueueGenericSend+0x9e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <xQueueGenericSend+0xa2>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <xQueueGenericSend+0xa4>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xQueueGenericSend+0xbe>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	61fb      	str	r3, [r7, #28]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a1e:	f002 f9d9 	bl	8005dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <xQueueGenericSend+0xd4>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d129      	bne.n	8003a88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a3a:	f000 fbbb 	bl	80041b4 <prvCopyDataToQueue>
 8003a3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	3324      	adds	r3, #36	; 0x24
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f001 f9a5 	bl	8004d9c <xTaskRemoveFromEventList>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <xQueueGenericSend+0x1f8>)
 8003a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	e00a      	b.n	8003a80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a70:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <xQueueGenericSend+0x1f8>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a80:	f002 f9d8 	bl	8005e34 <vPortExitCritical>
				return pdPASS;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e063      	b.n	8003b50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a8e:	f002 f9d1 	bl	8005e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e05c      	b.n	8003b50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f9df 	bl	8004e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aaa:	f002 f9c3 	bl	8005e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aae:	f000 ff4b 	bl	8004948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ab2:	f002 f98f 	bl	8005dd4 <vPortEnterCritical>
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003abc:	b25b      	sxtb	r3, r3
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d103      	bne.n	8003acc <xQueueGenericSend+0x16c>
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSend+0x182>
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae2:	f002 f9a7 	bl	8005e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ae6:	1d3a      	adds	r2, r7, #4
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f9ce 	bl	8004e90 <xTaskCheckForTimeOut>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d124      	bne.n	8003b44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afc:	f000 fc52 	bl	80043a4 <prvIsQueueFull>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d018      	beq.n	8003b38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	3310      	adds	r3, #16
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f8f4 	bl	8004cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b16:	f000 fbdd 	bl	80042d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b1a:	f000 ff23 	bl	8004964 <xTaskResumeAll>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f af7c 	bne.w	8003a1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <xQueueGenericSend+0x1f8>)
 8003b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	e772      	b.n	8003a1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3a:	f000 fbcb 	bl	80042d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b3e:	f000 ff11 	bl	8004964 <xTaskResumeAll>
 8003b42:	e76c      	b.n	8003a1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b46:	f000 fbc5 	bl	80042d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b4a:	f000 ff0b 	bl	8004964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3738      	adds	r7, #56	; 0x38
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b090      	sub	sp, #64	; 0x40
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <xQueueGenericSendFromISR+0x3c>
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <xQueueGenericSendFromISR+0x40>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <xQueueGenericSendFromISR+0x42>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d103      	bne.n	8003bc6 <xQueueGenericSendFromISR+0x6a>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <xQueueGenericSendFromISR+0x6e>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <xQueueGenericSendFromISR+0x70>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	623b      	str	r3, [r7, #32]
}
 8003be2:	bf00      	nop
 8003be4:	e7fe      	b.n	8003be4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003be6:	f002 f9d7 	bl	8005f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bea:	f3ef 8211 	mrs	r2, BASEPRI
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	61fa      	str	r2, [r7, #28]
 8003c00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <xQueueGenericSendFromISR+0xbc>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d12f      	bne.n	8003c78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c2e:	f000 fac1 	bl	80041b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d112      	bne.n	8003c62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d016      	beq.n	8003c72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 f8a7 	bl	8004d9c <xTaskRemoveFromEventList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e007      	b.n	8003c72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c66:	3301      	adds	r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	b25a      	sxtb	r2, r3
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c72:	2301      	movs	r3, #1
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c76:	e001      	b.n	8003c7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3740      	adds	r7, #64	; 0x40
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b08e      	sub	sp, #56	; 0x38
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	623b      	str	r3, [r7, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <xQueueGiveFromISR+0x48>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	61fb      	str	r3, [r7, #28]
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <xQueueGiveFromISR+0x58>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <xQueueGiveFromISR+0x5c>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <xQueueGiveFromISR+0x5e>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	61bb      	str	r3, [r7, #24]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d0a:	f002 f945 	bl	8005f98 <vPortValidateInterruptPriority>
	__asm volatile
 8003d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	617a      	str	r2, [r7, #20]
 8003d24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003d26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d22b      	bcs.n	8003d92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d112      	bne.n	8003d7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	3324      	adds	r3, #36	; 0x24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 f81a 	bl	8004d9c <xTaskRemoveFromEventList>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e007      	b.n	8003d8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d90:	e001      	b.n	8003d96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f383 8811 	msr	BASEPRI, r3
}
 8003da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3738      	adds	r7, #56	; 0x38
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <xQueueReceive+0x30>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	623b      	str	r3, [r7, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <xQueueReceive+0x3e>
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <xQueueReceive+0x42>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <xQueueReceive+0x44>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <xQueueReceive+0x5e>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	61fb      	str	r3, [r7, #28]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0a:	f001 f989 	bl	8005120 <xTaskGetSchedulerState>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueReceive+0x6e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <xQueueReceive+0x72>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueReceive+0x74>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueReceive+0x8e>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61bb      	str	r3, [r7, #24]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3a:	f001 ffcb 	bl	8005dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01f      	beq.n	8003e8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4e:	f000 fa1b 	bl	8004288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	3310      	adds	r3, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 ff98 	bl	8004d9c <xTaskRemoveFromEventList>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <xQueueReceive+0x1bc>)
 8003e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e82:	f001 ffd7 	bl	8005e34 <vPortExitCritical>
				return pdPASS;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e069      	b.n	8003f5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e90:	f001 ffd0 	bl	8005e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e062      	b.n	8003f5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e9e:	f107 0310 	add.w	r3, r7, #16
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 ffde 	bl	8004e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eac:	f001 ffc2 	bl	8005e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eb0:	f000 fd4a 	bl	8004948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb4:	f001 ff8e 	bl	8005dd4 <vPortEnterCritical>
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <xQueueReceive+0x122>
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <xQueueReceive+0x138>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee4:	f001 ffa6 	bl	8005e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee8:	1d3a      	adds	r2, r7, #4
 8003eea:	f107 0310 	add.w	r3, r7, #16
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 ffcd 	bl	8004e90 <xTaskCheckForTimeOut>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d123      	bne.n	8003f44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efe:	f000 fa3b 	bl	8004378 <prvIsQueueEmpty>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d017      	beq.n	8003f38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	3324      	adds	r3, #36	; 0x24
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fef3 	bl	8004cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f18:	f000 f9dc 	bl	80042d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f1c:	f000 fd22 	bl	8004964 <xTaskResumeAll>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d189      	bne.n	8003e3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <xQueueReceive+0x1bc>)
 8003f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	e780      	b.n	8003e3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3a:	f000 f9cb 	bl	80042d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3e:	f000 fd11 	bl	8004964 <xTaskResumeAll>
 8003f42:	e77a      	b.n	8003e3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f46:	f000 f9c5 	bl	80042d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f4a:	f000 fd0b 	bl	8004964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 fa12 	bl	8004378 <prvIsQueueEmpty>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f43f af6f 	beq.w	8003e3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3730      	adds	r7, #48	; 0x30
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08e      	sub	sp, #56	; 0x38
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	623b      	str	r3, [r7, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	61fb      	str	r3, [r7, #28]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fbc:	f001 f8b0 	bl	8005120 <xTaskGetSchedulerState>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <xQueueSemaphoreTake+0x60>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <xQueueSemaphoreTake+0x64>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <xQueueSemaphoreTake+0x66>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	61bb      	str	r3, [r7, #24]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fec:	f001 fef2 	bl	8005dd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d024      	beq.n	8004046 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	1e5a      	subs	r2, r3, #1
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800400c:	f001 f9fe 	bl	800540c <pvTaskIncrementMutexHeldCount>
 8004010:	4602      	mov	r2, r0
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00f      	beq.n	800403e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	3310      	adds	r3, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f000 feba 	bl	8004d9c <xTaskRemoveFromEventList>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800402e:	4b54      	ldr	r3, [pc, #336]	; (8004180 <xQueueSemaphoreTake+0x214>)
 8004030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800403e:	f001 fef9 	bl	8005e34 <vPortExitCritical>
				return pdPASS;
 8004042:	2301      	movs	r3, #1
 8004044:	e097      	b.n	8004176 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	617b      	str	r3, [r7, #20]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004068:	f001 fee4 	bl	8005e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800406c:	2300      	movs	r3, #0
 800406e:	e082      	b.n	8004176 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fef2 	bl	8004e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004084:	f001 fed6 	bl	8005e34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004088:	f000 fc5e 	bl	8004948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800408c:	f001 fea2 	bl	8005dd4 <vPortEnterCritical>
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004096:	b25b      	sxtb	r3, r3
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d103      	bne.n	80040a6 <xQueueSemaphoreTake+0x13a>
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d103      	bne.n	80040bc <xQueueSemaphoreTake+0x150>
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040bc:	f001 feba 	bl	8005e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040c0:	463a      	mov	r2, r7
 80040c2:	f107 030c 	add.w	r3, r7, #12
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fee1 	bl	8004e90 <xTaskCheckForTimeOut>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d132      	bne.n	800413a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040d6:	f000 f94f 	bl	8004378 <prvIsQueueEmpty>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d026      	beq.n	800412e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80040e8:	f001 fe74 	bl	8005dd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 f833 	bl	800515c <xTaskPriorityInherit>
 80040f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80040f8:	f001 fe9c 	bl	8005e34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fdf9 	bl	8004cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800410a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800410c:	f000 f8e2 	bl	80042d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004110:	f000 fc28 	bl	8004964 <xTaskResumeAll>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f47f af68 	bne.w	8003fec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800411c:	4b18      	ldr	r3, [pc, #96]	; (8004180 <xQueueSemaphoreTake+0x214>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	e75e      	b.n	8003fec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800412e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004130:	f000 f8d0 	bl	80042d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004134:	f000 fc16 	bl	8004964 <xTaskResumeAll>
 8004138:	e758      	b.n	8003fec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800413a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800413c:	f000 f8ca 	bl	80042d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004140:	f000 fc10 	bl	8004964 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004146:	f000 f917 	bl	8004378 <prvIsQueueEmpty>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	f43f af4d 	beq.w	8003fec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004158:	f001 fe3c 	bl	8005dd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800415c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800415e:	f000 f811 	bl	8004184 <prvGetDisinheritPriorityAfterTimeout>
 8004162:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f8cc 	bl	8005308 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004170:	f001 fe60 	bl	8005e34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004176:	4618      	mov	r0, r3
 8004178:	3738      	adds	r7, #56	; 0x38
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2b00      	cmp	r3, #0
 8004192:	d006      	beq.n	80041a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e001      	b.n	80041a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80041a6:	68fb      	ldr	r3, [r7, #12]
	}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d14d      	bne.n	8004276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f824 	bl	800522c <xTaskPriorityDisinherit>
 80041e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	e043      	b.n	8004276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d119      	bne.n	8004228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6858      	ldr	r0, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	461a      	mov	r2, r3
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	f002 f91a 	bl	8006438 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	441a      	add	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d32b      	bcc.n	8004276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	e026      	b.n	8004276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68d8      	ldr	r0, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	461a      	mov	r2, r3
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	f002 f900 	bl	8006438 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	425b      	negs	r3, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d207      	bcs.n	8004264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	425b      	negs	r3, r3
 800425e:	441a      	add	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d105      	bne.n	8004276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3b01      	subs	r3, #1
 8004274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800427e:	697b      	ldr	r3, [r7, #20]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d018      	beq.n	80042cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	441a      	add	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d303      	bcc.n	80042bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68d9      	ldr	r1, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	461a      	mov	r2, r3
 80042c6:	6838      	ldr	r0, [r7, #0]
 80042c8:	f002 f8b6 	bl	8006438 <memcpy>
	}
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042dc:	f001 fd7a 	bl	8005dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042e8:	e011      	b.n	800430e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3324      	adds	r3, #36	; 0x24
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fd50 	bl	8004d9c <xTaskRemoveFromEventList>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004302:	f000 fe27 	bl	8004f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	3b01      	subs	r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800430e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	dce9      	bgt.n	80042ea <prvUnlockQueue+0x16>
 8004316:	e000      	b.n	800431a <prvUnlockQueue+0x46>
					break;
 8004318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	22ff      	movs	r2, #255	; 0xff
 800431e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004322:	f001 fd87 	bl	8005e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004326:	f001 fd55 	bl	8005dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004332:	e011      	b.n	8004358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3310      	adds	r3, #16
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd2b 	bl	8004d9c <xTaskRemoveFromEventList>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800434c:	f000 fe02 	bl	8004f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	3b01      	subs	r3, #1
 8004354:	b2db      	uxtb	r3, r3
 8004356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800435c:	2b00      	cmp	r3, #0
 800435e:	dce9      	bgt.n	8004334 <prvUnlockQueue+0x60>
 8004360:	e000      	b.n	8004364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	22ff      	movs	r2, #255	; 0xff
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800436c:	f001 fd62 	bl	8005e34 <vPortExitCritical>
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004380:	f001 fd28 	bl	8005dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e001      	b.n	8004396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004396:	f001 fd4d 	bl	8005e34 <vPortExitCritical>

	return xReturn;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043ac:	f001 fd12 	bl	8005dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d102      	bne.n	80043c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e001      	b.n	80043c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043c6:	f001 fd35 	bl	8005e34 <vPortExitCritical>

	return xReturn;
 80043ca:	68fb      	ldr	r3, [r7, #12]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e014      	b.n	800440e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043f0:	490c      	ldr	r1, [pc, #48]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004406:	e006      	b.n	8004416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b07      	cmp	r3, #7
 8004412:	d9e7      	bls.n	80043e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	200008bc 	.word	0x200008bc

08004428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004438:	f001 fccc 	bl	8005dd4 <vPortEnterCritical>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004442:	b25b      	sxtb	r3, r3
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d103      	bne.n	8004452 <vQueueWaitForMessageRestricted+0x2a>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004458:	b25b      	sxtb	r3, r3
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d103      	bne.n	8004468 <vQueueWaitForMessageRestricted+0x40>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004468:	f001 fce4 	bl	8005e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3324      	adds	r3, #36	; 0x24
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fc61 	bl	8004d44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff26 	bl	80042d4 <prvUnlockQueue>
	}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	; 0x38
 8004494:	af04      	add	r7, sp, #16
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	623b      	str	r3, [r7, #32]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	61fb      	str	r3, [r7, #28]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d6:	23bc      	movs	r3, #188	; 0xbc
 80044d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2bbc      	cmp	r3, #188	; 0xbc
 80044de:	d00a      	beq.n	80044f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61bb      	str	r3, [r7, #24]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01e      	beq.n	800453c <xTaskCreateStatic+0xac>
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800450c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2202      	movs	r2, #2
 8004512:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004516:	2300      	movs	r3, #0
 8004518:	9303      	str	r3, [sp, #12]
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	9302      	str	r3, [sp, #8]
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f850 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004536:	f000 f8f3 	bl	8004720 <prvAddNewTaskToReadyList>
 800453a:	e001      	b.n	8004540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004540:	697b      	ldr	r3, [r7, #20]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	3728      	adds	r7, #40	; 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800454a:	b580      	push	{r7, lr}
 800454c:	b08c      	sub	sp, #48	; 0x30
 800454e:	af04      	add	r7, sp, #16
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f001 fd5a 	bl	8006018 <pvPortMalloc>
 8004564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00e      	beq.n	800458a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800456c:	20bc      	movs	r0, #188	; 0xbc
 800456e:	f001 fd53 	bl	8006018 <pvPortMalloc>
 8004572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
 8004580:	e005      	b.n	800458e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004582:	6978      	ldr	r0, [r7, #20]
 8004584:	f001 fe14 	bl	80061b0 <vPortFree>
 8004588:	e001      	b.n	800458e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d017      	beq.n	80045c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	2300      	movs	r3, #0
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f80e 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b8:	69f8      	ldr	r0, [r7, #28]
 80045ba:	f000 f8b1 	bl	8004720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045be:	2301      	movs	r3, #1
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e002      	b.n	80045ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295
 80045c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045ca:	69bb      	ldr	r3, [r7, #24]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	461a      	mov	r2, r3
 80045ec:	21a5      	movs	r1, #165	; 0xa5
 80045ee:	f001 ff31 	bl	8006454 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045fc:	3b01      	subs	r3, #1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	617b      	str	r3, [r7, #20]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01f      	beq.n	8004672 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e012      	b.n	800465e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	7819      	ldrb	r1, [r3, #0]
 8004640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	3334      	adds	r3, #52	; 0x34
 8004648:	460a      	mov	r2, r1
 800464a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b0f      	cmp	r3, #15
 8004662:	d9e9      	bls.n	8004638 <prvInitialiseNewTask+0x64>
 8004664:	e000      	b.n	8004668 <prvInitialiseNewTask+0x94>
			{
				break;
 8004666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004670:	e003      	b.n	800467a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	2b37      	cmp	r3, #55	; 0x37
 800467e:	d901      	bls.n	8004684 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004680:	2337      	movs	r3, #55	; 0x37
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2200      	movs	r2, #0
 8004694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	3304      	adds	r3, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe ff8e 	bl	80035bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	3318      	adds	r3, #24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe ff89 	bl	80035bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	3354      	adds	r3, #84	; 0x54
 80046d4:	2260      	movs	r2, #96	; 0x60
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 febb 	bl	8006454 <memset>
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <prvInitialiseNewTask+0x140>)
 80046e2:	659a      	str	r2, [r3, #88]	; 0x58
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <prvInitialiseNewTask+0x144>)
 80046e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	4a0b      	ldr	r2, [pc, #44]	; (800471c <prvInitialiseNewTask+0x148>)
 80046ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	69b8      	ldr	r0, [r7, #24]
 80046f6:	f001 fa3f 	bl	8005b78 <pxPortInitialiseStack>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800470c:	bf00      	nop
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08006780 	.word	0x08006780
 8004718:	080067a0 	.word	0x080067a0
 800471c:	08006760 	.word	0x08006760

08004720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004728:	f001 fb54 	bl	8005dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800472c:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <prvAddNewTaskToReadyList+0xc4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a2c      	ldr	r2, [pc, #176]	; (80047e4 <prvAddNewTaskToReadyList+0xc4>)
 8004734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800473e:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <prvAddNewTaskToReadyList+0xc4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d110      	bne.n	800476e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800474c:	f000 fc26 	bl	8004f9c <prvInitialiseTaskLists>
 8004750:	e00d      	b.n	800476e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <prvAddNewTaskToReadyList+0xcc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	429a      	cmp	r2, r3
 8004766:	d802      	bhi.n	800476e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004768:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <prvAddNewTaskToReadyList+0xd0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <prvAddNewTaskToReadyList+0xd0>)
 8004776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <prvAddNewTaskToReadyList+0xd0>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <prvAddNewTaskToReadyList+0xd4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d903      	bls.n	8004794 <prvAddNewTaskToReadyList+0x74>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <prvAddNewTaskToReadyList+0xd4>)
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <prvAddNewTaskToReadyList+0xd8>)
 80047a2:	441a      	add	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f7fe ff13 	bl	80035d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047b0:	f001 fb40 	bl	8005e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <prvAddNewTaskToReadyList+0xcc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00e      	beq.n	80047da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d207      	bcs.n	80047da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <prvAddNewTaskToReadyList+0xdc>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000dd0 	.word	0x20000dd0
 80047e8:	200008fc 	.word	0x200008fc
 80047ec:	20000ddc 	.word	0x20000ddc
 80047f0:	20000dec 	.word	0x20000dec
 80047f4:	20000dd8 	.word	0x20000dd8
 80047f8:	20000900 	.word	0x20000900
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d017      	beq.n	8004842 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <vTaskDelay+0x60>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <vTaskDelay+0x30>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	60bb      	str	r3, [r7, #8]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004830:	f000 f88a 	bl	8004948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004834:	2100      	movs	r1, #0
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fdfc 	bl	8005434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800483c:	f000 f892 	bl	8004964 <xTaskResumeAll>
 8004840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d107      	bne.n	8004858 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <vTaskDelay+0x64>)
 800484a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000df8 	.word	0x20000df8
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004876:	463a      	mov	r2, r7
 8004878:	1d39      	adds	r1, r7, #4
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fe48 	bl	8003514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	9202      	str	r2, [sp, #8]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	460a      	mov	r2, r1
 8004896:	4924      	ldr	r1, [pc, #144]	; (8004928 <vTaskStartScheduler+0xc0>)
 8004898:	4824      	ldr	r0, [pc, #144]	; (800492c <vTaskStartScheduler+0xc4>)
 800489a:	f7ff fdf9 	bl	8004490 <xTaskCreateStatic>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a23      	ldr	r2, [pc, #140]	; (8004930 <vTaskStartScheduler+0xc8>)
 80048a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <vTaskStartScheduler+0xc8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048ac:	2301      	movs	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e001      	b.n	80048b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d102      	bne.n	80048c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80048bc:	f000 fe0e 	bl	80054dc <xTimerCreateTimerTask>
 80048c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11b      	bne.n	8004900 <vTaskStartScheduler+0x98>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	613b      	str	r3, [r7, #16]
}
 80048da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048dc:	4b15      	ldr	r3, [pc, #84]	; (8004934 <vTaskStartScheduler+0xcc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3354      	adds	r3, #84	; 0x54
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <vTaskStartScheduler+0xd0>)
 80048e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <vTaskStartScheduler+0xd4>)
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <vTaskStartScheduler+0xd8>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <vTaskStartScheduler+0xdc>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048fa:	f001 f9c9 	bl	8005c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048fe:	e00e      	b.n	800491e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d10a      	bne.n	800491e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vTaskStartScheduler+0xb4>
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	0800670c 	.word	0x0800670c
 800492c:	08004f6d 	.word	0x08004f6d
 8004930:	20000df4 	.word	0x20000df4
 8004934:	200008fc 	.word	0x200008fc
 8004938:	20000010 	.word	0x20000010
 800493c:	20000df0 	.word	0x20000df0
 8004940:	20000ddc 	.word	0x20000ddc
 8004944:	20000dd4 	.word	0x20000dd4

08004948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vTaskSuspendAll+0x18>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a03      	ldr	r2, [pc, #12]	; (8004960 <vTaskSuspendAll+0x18>)
 8004954:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	20000df8 	.word	0x20000df8

08004964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004972:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <xTaskResumeAll+0x118>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <xTaskResumeAll+0x2c>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	603b      	str	r3, [r7, #0]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004990:	f001 fa20 	bl	8005dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004994:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <xTaskResumeAll+0x118>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	4a38      	ldr	r2, [pc, #224]	; (8004a7c <xTaskResumeAll+0x118>)
 800499c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <xTaskResumeAll+0x118>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d162      	bne.n	8004a6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049a6:	4b36      	ldr	r3, [pc, #216]	; (8004a80 <xTaskResumeAll+0x11c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d05e      	beq.n	8004a6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ae:	e02f      	b.n	8004a10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b0:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <xTaskResumeAll+0x120>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fe67 	bl	8003690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fe62 	bl	8003690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <xTaskResumeAll+0x124>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d903      	bls.n	80049e0 <xTaskResumeAll+0x7c>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	4a2a      	ldr	r2, [pc, #168]	; (8004a88 <xTaskResumeAll+0x124>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <xTaskResumeAll+0x128>)
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7fe fded 	bl	80035d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <xTaskResumeAll+0x12c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a0a:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a10:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <xTaskResumeAll+0x120>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1cb      	bne.n	80049b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a1e:	f000 fb5f 	bl	80050e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <xTaskResumeAll+0x134>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d010      	beq.n	8004a50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a2e:	f000 f847 	bl	8004ac0 <xTaskIncrementTick>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a38:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f1      	bne.n	8004a2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <xTaskResumeAll+0x134>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <xTaskResumeAll+0x138>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a6c:	f001 f9e2 	bl	8005e34 <vPortExitCritical>

	return xAlreadyYielded;
 8004a70:	68bb      	ldr	r3, [r7, #8]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000df8 	.word	0x20000df8
 8004a80:	20000dd0 	.word	0x20000dd0
 8004a84:	20000d90 	.word	0x20000d90
 8004a88:	20000dd8 	.word	0x20000dd8
 8004a8c:	20000900 	.word	0x20000900
 8004a90:	200008fc 	.word	0x200008fc
 8004a94:	20000de4 	.word	0x20000de4
 8004a98:	20000de0 	.word	0x20000de0
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <xTaskGetTickCount+0x1c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004aac:	687b      	ldr	r3, [r7, #4]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000dd4 	.word	0x20000dd4

08004ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aca:	4b4f      	ldr	r3, [pc, #316]	; (8004c08 <xTaskIncrementTick+0x148>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 808f 	bne.w	8004bf2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ad4:	4b4d      	ldr	r3, [pc, #308]	; (8004c0c <xTaskIncrementTick+0x14c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004adc:	4a4b      	ldr	r2, [pc, #300]	; (8004c0c <xTaskIncrementTick+0x14c>)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d120      	bne.n	8004b2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ae8:	4b49      	ldr	r3, [pc, #292]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <xTaskIncrementTick+0x48>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	603b      	str	r3, [r7, #0]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xTaskIncrementTick+0x46>
 8004b08:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b41      	ldr	r3, [pc, #260]	; (8004c14 <xTaskIncrementTick+0x154>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3f      	ldr	r2, [pc, #252]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4a3f      	ldr	r2, [pc, #252]	; (8004c14 <xTaskIncrementTick+0x154>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <xTaskIncrementTick+0x158>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	4a3d      	ldr	r2, [pc, #244]	; (8004c18 <xTaskIncrementTick+0x158>)
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	f000 fadb 	bl	80050e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b2a:	4b3c      	ldr	r3, [pc, #240]	; (8004c1c <xTaskIncrementTick+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d349      	bcc.n	8004bc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b34:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <xTaskIncrementTick+0x15c>)
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	601a      	str	r2, [r3, #0]
					break;
 8004b46:	e03f      	b.n	8004bc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b48:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d203      	bcs.n	8004b68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b60:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <xTaskIncrementTick+0x15c>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b66:	e02f      	b.n	8004bc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fd8f 	bl	8003690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fd86 	bl	8003690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <xTaskIncrementTick+0x160>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d903      	bls.n	8004b98 <xTaskIncrementTick+0xd8>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <xTaskIncrementTick+0x160>)
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <xTaskIncrementTick+0x164>)
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fe fd11 	bl	80035d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <xTaskIncrementTick+0x168>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d3b8      	bcc.n	8004b34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bc6:	e7b5      	b.n	8004b34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bc8:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <xTaskIncrementTick+0x168>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4915      	ldr	r1, [pc, #84]	; (8004c24 <xTaskIncrementTick+0x164>)
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d901      	bls.n	8004be4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004be4:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <xTaskIncrementTick+0x16c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e004      	b.n	8004bfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bf2:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <xTaskIncrementTick+0x170>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <xTaskIncrementTick+0x170>)
 8004bfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bfc:	697b      	ldr	r3, [r7, #20]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000df8 	.word	0x20000df8
 8004c0c:	20000dd4 	.word	0x20000dd4
 8004c10:	20000d88 	.word	0x20000d88
 8004c14:	20000d8c 	.word	0x20000d8c
 8004c18:	20000de8 	.word	0x20000de8
 8004c1c:	20000df0 	.word	0x20000df0
 8004c20:	20000dd8 	.word	0x20000dd8
 8004c24:	20000900 	.word	0x20000900
 8004c28:	200008fc 	.word	0x200008fc
 8004c2c:	20000de4 	.word	0x20000de4
 8004c30:	20000de0 	.word	0x20000de0

08004c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <vTaskSwitchContext+0xb0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <vTaskSwitchContext+0xb4>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c48:	e046      	b.n	8004cd8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <vTaskSwitchContext+0xb4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c50:	4b26      	ldr	r3, [pc, #152]	; (8004cec <vTaskSwitchContext+0xb8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e010      	b.n	8004c7a <vTaskSwitchContext+0x46>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <vTaskSwitchContext+0x40>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	607b      	str	r3, [r7, #4]
}
 8004c70:	bf00      	nop
 8004c72:	e7fe      	b.n	8004c72 <vTaskSwitchContext+0x3e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	491d      	ldr	r1, [pc, #116]	; (8004cf0 <vTaskSwitchContext+0xbc>)
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0e4      	beq.n	8004c58 <vTaskSwitchContext+0x24>
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <vTaskSwitchContext+0xbc>)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d104      	bne.n	8004cbe <vTaskSwitchContext+0x8a>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <vTaskSwitchContext+0xc0>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <vTaskSwitchContext+0xb8>)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <vTaskSwitchContext+0xc0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3354      	adds	r3, #84	; 0x54
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <vTaskSwitchContext+0xc4>)
 8004cd6:	6013      	str	r3, [r2, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000df8 	.word	0x20000df8
 8004ce8:	20000de4 	.word	0x20000de4
 8004cec:	20000dd8 	.word	0x20000dd8
 8004cf0:	20000900 	.word	0x20000900
 8004cf4:	200008fc 	.word	0x200008fc
 8004cf8:	20000010 	.word	0x20000010

08004cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60fb      	str	r3, [r7, #12]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <vTaskPlaceOnEventList+0x44>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3318      	adds	r3, #24
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fe fc77 	bl	800361e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d30:	2101      	movs	r1, #1
 8004d32:	6838      	ldr	r0, [r7, #0]
 8004d34:	f000 fb7e 	bl	8005434 <prvAddCurrentTaskToDelayedList>
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200008fc 	.word	0x200008fc

08004d44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	617b      	str	r3, [r7, #20]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3318      	adds	r3, #24
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7fe fc2e 	bl	80035d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
 8004d84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	68b8      	ldr	r0, [r7, #8]
 8004d8a:	f000 fb53 	bl	8005434 <prvAddCurrentTaskToDelayedList>
	}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200008fc 	.word	0x200008fc

08004d9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60fb      	str	r3, [r7, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3318      	adds	r3, #24
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fc5f 	bl	8003690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <xTaskRemoveFromEventList+0xb0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d11d      	bne.n	8004e16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fc56 	bl	8003690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <xTaskRemoveFromEventList+0xb4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d903      	bls.n	8004df8 <xTaskRemoveFromEventList+0x5c>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <xTaskRemoveFromEventList+0xb4>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <xTaskRemoveFromEventList+0xb8>)
 8004e06:	441a      	add	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fe fbe1 	bl	80035d6 <vListInsertEnd>
 8004e14:	e005      	b.n	8004e22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3318      	adds	r3, #24
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	480e      	ldr	r0, [pc, #56]	; (8004e58 <xTaskRemoveFromEventList+0xbc>)
 8004e1e:	f7fe fbda 	bl	80035d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <xTaskRemoveFromEventList+0xc0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d905      	bls.n	8004e3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <xTaskRemoveFromEventList+0xc4>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e001      	b.n	8004e40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e40:	697b      	ldr	r3, [r7, #20]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000df8 	.word	0x20000df8
 8004e50:	20000dd8 	.word	0x20000dd8
 8004e54:	20000900 	.word	0x20000900
 8004e58:	20000d90 	.word	0x20000d90
 8004e5c:	200008fc 	.word	0x200008fc
 8004e60:	20000de4 	.word	0x20000de4

08004e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <vTaskInternalSetTimeOutState+0x24>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <vTaskInternalSetTimeOutState+0x28>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	605a      	str	r2, [r3, #4]
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	20000de8 	.word	0x20000de8
 8004e8c:	20000dd4 	.word	0x20000dd4

08004e90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	60fb      	str	r3, [r7, #12]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ed2:	f000 ff7f 	bl	8005dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <xTaskCheckForTimeOut+0xbc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d102      	bne.n	8004ef6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e023      	b.n	8004f3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <xTaskCheckForTimeOut+0xc0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d007      	beq.n	8004f12 <xTaskCheckForTimeOut+0x82>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e015      	b.n	8004f3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d20b      	bcs.n	8004f34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ff9b 	bl	8004e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e004      	b.n	8004f3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f3e:	f000 ff79 	bl	8005e34 <vPortExitCritical>

	return xReturn;
 8004f42:	69fb      	ldr	r3, [r7, #28]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000dd4 	.word	0x20000dd4
 8004f50:	20000de8 	.word	0x20000de8

08004f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <vTaskMissedYield+0x14>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000de4 	.word	0x20000de4

08004f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f74:	f000 f852 	bl	800501c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <prvIdleTask+0x28>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d9f9      	bls.n	8004f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <prvIdleTask+0x2c>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f90:	e7f0      	b.n	8004f74 <prvIdleTask+0x8>
 8004f92:	bf00      	nop
 8004f94:	20000900 	.word	0x20000900
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	e00c      	b.n	8004fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <prvInitialiseTaskLists+0x60>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fae0 	bl	800357c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b37      	cmp	r3, #55	; 0x37
 8004fc6:	d9ef      	bls.n	8004fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fc8:	480d      	ldr	r0, [pc, #52]	; (8005000 <prvInitialiseTaskLists+0x64>)
 8004fca:	f7fe fad7 	bl	800357c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fce:	480d      	ldr	r0, [pc, #52]	; (8005004 <prvInitialiseTaskLists+0x68>)
 8004fd0:	f7fe fad4 	bl	800357c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fd4:	480c      	ldr	r0, [pc, #48]	; (8005008 <prvInitialiseTaskLists+0x6c>)
 8004fd6:	f7fe fad1 	bl	800357c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fda:	480c      	ldr	r0, [pc, #48]	; (800500c <prvInitialiseTaskLists+0x70>)
 8004fdc:	f7fe face 	bl	800357c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fe0:	480b      	ldr	r0, [pc, #44]	; (8005010 <prvInitialiseTaskLists+0x74>)
 8004fe2:	f7fe facb 	bl	800357c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <prvInitialiseTaskLists+0x78>)
 8004fe8:	4a05      	ldr	r2, [pc, #20]	; (8005000 <prvInitialiseTaskLists+0x64>)
 8004fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <prvInitialiseTaskLists+0x7c>)
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <prvInitialiseTaskLists+0x68>)
 8004ff0:	601a      	str	r2, [r3, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000900 	.word	0x20000900
 8005000:	20000d60 	.word	0x20000d60
 8005004:	20000d74 	.word	0x20000d74
 8005008:	20000d90 	.word	0x20000d90
 800500c:	20000da4 	.word	0x20000da4
 8005010:	20000dbc 	.word	0x20000dbc
 8005014:	20000d88 	.word	0x20000d88
 8005018:	20000d8c 	.word	0x20000d8c

0800501c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005022:	e019      	b.n	8005058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005024:	f000 fed6 	bl	8005dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <prvCheckTasksWaitingTermination+0x50>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fb2b 	bl	8003690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <prvCheckTasksWaitingTermination+0x54>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <prvCheckTasksWaitingTermination+0x54>)
 8005042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <prvCheckTasksWaitingTermination+0x58>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3b01      	subs	r3, #1
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <prvCheckTasksWaitingTermination+0x58>)
 800504c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800504e:	f000 fef1 	bl	8005e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f810 	bl	8005078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <prvCheckTasksWaitingTermination+0x58>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e1      	bne.n	8005024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000da4 	.word	0x20000da4
 8005070:	20000dd0 	.word	0x20000dd0
 8005074:	20000db8 	.word	0x20000db8

08005078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3354      	adds	r3, #84	; 0x54
 8005084:	4618      	mov	r0, r3
 8005086:	f001 f9fb 	bl	8006480 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005090:	2b00      	cmp	r3, #0
 8005092:	d108      	bne.n	80050a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4618      	mov	r0, r3
 800509a:	f001 f889 	bl	80061b0 <vPortFree>
				vPortFree( pxTCB );
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 f886 	bl	80061b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050a4:	e018      	b.n	80050d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d103      	bne.n	80050b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 f87d 	bl	80061b0 <vPortFree>
	}
 80050b6:	e00f      	b.n	80050d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d00a      	beq.n	80050d8 <prvDeleteTCB+0x60>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60fb      	str	r3, [r7, #12]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <prvDeleteTCB+0x5e>
	}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <prvResetNextTaskUnblockTime+0x38>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <prvResetNextTaskUnblockTime+0x3c>)
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295
 80050f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050f8:	e008      	b.n	800510c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <prvResetNextTaskUnblockTime+0x38>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a04      	ldr	r2, [pc, #16]	; (800511c <prvResetNextTaskUnblockTime+0x3c>)
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	20000d88 	.word	0x20000d88
 800511c:	20000df0 	.word	0x20000df0

08005120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <xTaskGetSchedulerState+0x34>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d102      	bne.n	8005134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800512e:	2301      	movs	r3, #1
 8005130:	607b      	str	r3, [r7, #4]
 8005132:	e008      	b.n	8005146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <xTaskGetSchedulerState+0x38>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d102      	bne.n	8005142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800513c:	2302      	movs	r3, #2
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	e001      	b.n	8005146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005146:	687b      	ldr	r3, [r7, #4]
	}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	20000ddc 	.word	0x20000ddc
 8005158:	20000df8 	.word	0x20000df8

0800515c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d051      	beq.n	8005216 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <xTaskPriorityInherit+0xc4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	429a      	cmp	r2, r3
 800517e:	d241      	bcs.n	8005204 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	db06      	blt.n	8005196 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <xTaskPriorityInherit+0xc4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6959      	ldr	r1, [r3, #20]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <xTaskPriorityInherit+0xc8>)
 80051a8:	4413      	add	r3, r2
 80051aa:	4299      	cmp	r1, r3
 80051ac:	d122      	bne.n	80051f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fa6c 	bl	8003690 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <xTaskPriorityInherit+0xc4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <xTaskPriorityInherit+0xcc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <xTaskPriorityInherit+0x7a>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <xTaskPriorityInherit+0xcc>)
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <xTaskPriorityInherit+0xc8>)
 80051e4:	441a      	add	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f7fe f9f2 	bl	80035d6 <vListInsertEnd>
 80051f2:	e004      	b.n	80051fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <xTaskPriorityInherit+0xc4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051fe:	2301      	movs	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e008      	b.n	8005216 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <xTaskPriorityInherit+0xc4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	429a      	cmp	r2, r3
 8005210:	d201      	bcs.n	8005216 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005212:	2301      	movs	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005216:	68fb      	ldr	r3, [r7, #12]
	}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	200008fc 	.word	0x200008fc
 8005224:	20000900 	.word	0x20000900
 8005228:	20000dd8 	.word	0x20000dd8

0800522c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d056      	beq.n	80052f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005242:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <xTaskPriorityDisinherit+0xd0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d00a      	beq.n	8005262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60fb      	str	r3, [r7, #12]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	60bb      	str	r3, [r7, #8]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005284:	1e5a      	subs	r2, r3, #1
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	429a      	cmp	r2, r3
 8005294:	d02c      	beq.n	80052f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529a:	2b00      	cmp	r3, #0
 800529c:	d128      	bne.n	80052f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe f9f4 	bl	8003690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <xTaskPriorityDisinherit+0xd4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d903      	bls.n	80052d0 <xTaskPriorityDisinherit+0xa4>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	4a0c      	ldr	r2, [pc, #48]	; (8005300 <xTaskPriorityDisinherit+0xd4>)
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <xTaskPriorityDisinherit+0xd8>)
 80052de:	441a      	add	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f7fe f975 	bl	80035d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052f0:	697b      	ldr	r3, [r7, #20]
	}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200008fc 	.word	0x200008fc
 8005300:	20000dd8 	.word	0x20000dd8
 8005304:	20000900 	.word	0x20000900

08005308 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005316:	2301      	movs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d06a      	beq.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d902      	bls.n	800534e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e002      	b.n	8005354 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005352:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	429a      	cmp	r2, r3
 800535c:	d04b      	beq.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	429a      	cmp	r2, r3
 8005366:	d146      	bne.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005368:	4b25      	ldr	r3, [pc, #148]	; (8005400 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	429a      	cmp	r2, r3
 8005370:	d10a      	bne.n	8005388 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	60bb      	str	r3, [r7, #8]
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	db04      	blt.n	80053a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	6959      	ldr	r1, [r3, #20]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4a13      	ldr	r2, [pc, #76]	; (8005404 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80053b6:	4413      	add	r3, r2
 80053b8:	4299      	cmp	r1, r3
 80053ba:	d11c      	bne.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	3304      	adds	r3, #4
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fe f965 	bl	8003690 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ca:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d903      	bls.n	80053da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a07      	ldr	r2, [pc, #28]	; (8005404 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80053e8:	441a      	add	r2, r3
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7fe f8f0 	bl	80035d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053f6:	bf00      	nop
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200008fc 	.word	0x200008fc
 8005404:	20000900 	.word	0x20000900
 8005408:	20000dd8 	.word	0x20000dd8

0800540c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <pvTaskIncrementMutexHeldCount+0x24>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <pvTaskIncrementMutexHeldCount+0x24>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800541e:	3201      	adds	r2, #1
 8005420:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005422:	4b03      	ldr	r3, [pc, #12]	; (8005430 <pvTaskIncrementMutexHeldCount+0x24>)
 8005424:	681b      	ldr	r3, [r3, #0]
	}
 8005426:	4618      	mov	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	200008fc 	.word	0x200008fc

08005434 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005444:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3304      	adds	r3, #4
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe f920 	bl	8003690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d10a      	bne.n	800546e <prvAddCurrentTaskToDelayedList+0x3a>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545e:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4819      	ldr	r0, [pc, #100]	; (80054cc <prvAddCurrentTaskToDelayedList+0x98>)
 8005468:	f7fe f8b5 	bl	80035d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800546c:	e026      	b.n	80054bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	d209      	bcs.n	800549a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005486:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f7fe f8c3 	bl	800361e <vListInsert>
}
 8005498:	e010      	b.n	80054bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7fe f8b9 	bl	800361e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d202      	bcs.n	80054bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054b6:	4a08      	ldr	r2, [pc, #32]	; (80054d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000dd4 	.word	0x20000dd4
 80054c8:	200008fc 	.word	0x200008fc
 80054cc:	20000dbc 	.word	0x20000dbc
 80054d0:	20000d8c 	.word	0x20000d8c
 80054d4:	20000d88 	.word	0x20000d88
 80054d8:	20000df0 	.word	0x20000df0

080054dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054e6:	f000 fb07 	bl	8005af8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054ea:	4b1c      	ldr	r3, [pc, #112]	; (800555c <xTimerCreateTimerTask+0x80>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d021      	beq.n	8005536 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054fa:	1d3a      	adds	r2, r7, #4
 80054fc:	f107 0108 	add.w	r1, r7, #8
 8005500:	f107 030c 	add.w	r3, r7, #12
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe f81f 	bl	8003548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	9202      	str	r2, [sp, #8]
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	2302      	movs	r3, #2
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	2300      	movs	r3, #0
 800551a:	460a      	mov	r2, r1
 800551c:	4910      	ldr	r1, [pc, #64]	; (8005560 <xTimerCreateTimerTask+0x84>)
 800551e:	4811      	ldr	r0, [pc, #68]	; (8005564 <xTimerCreateTimerTask+0x88>)
 8005520:	f7fe ffb6 	bl	8004490 <xTaskCreateStatic>
 8005524:	4603      	mov	r3, r0
 8005526:	4a10      	ldr	r2, [pc, #64]	; (8005568 <xTimerCreateTimerTask+0x8c>)
 8005528:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800552a:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <xTimerCreateTimerTask+0x8c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005532:	2301      	movs	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	613b      	str	r3, [r7, #16]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005552:	697b      	ldr	r3, [r7, #20]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000e2c 	.word	0x20000e2c
 8005560:	08006714 	.word	0x08006714
 8005564:	080056a1 	.word	0x080056a1
 8005568:	20000e30 	.word	0x20000e30

0800556c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	623b      	str	r3, [r7, #32]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <xTimerGenericCommand+0x98>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d02a      	beq.n	80055f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b05      	cmp	r3, #5
 80055b2:	dc18      	bgt.n	80055e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055b4:	f7ff fdb4 	bl	8005120 <xTaskGetSchedulerState>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d109      	bne.n	80055d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055be:	4b11      	ldr	r3, [pc, #68]	; (8005604 <xTimerGenericCommand+0x98>)
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	f107 0110 	add.w	r1, r7, #16
 80055c6:	2300      	movs	r3, #0
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	f7fe f9c9 	bl	8003960 <xQueueGenericSend>
 80055ce:	6278      	str	r0, [r7, #36]	; 0x24
 80055d0:	e012      	b.n	80055f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <xTimerGenericCommand+0x98>)
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f107 0110 	add.w	r1, r7, #16
 80055da:	2300      	movs	r3, #0
 80055dc:	2200      	movs	r2, #0
 80055de:	f7fe f9bf 	bl	8003960 <xQueueGenericSend>
 80055e2:	6278      	str	r0, [r7, #36]	; 0x24
 80055e4:	e008      	b.n	80055f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <xTimerGenericCommand+0x98>)
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	f107 0110 	add.w	r1, r7, #16
 80055ee:	2300      	movs	r3, #0
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	f7fe fab3 	bl	8003b5c <xQueueGenericSendFromISR>
 80055f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000e2c 	.word	0x20000e2c

08005608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005612:	4b22      	ldr	r3, [pc, #136]	; (800569c <prvProcessExpiredTimer+0x94>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3304      	adds	r3, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe f835 	bl	8003690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d022      	beq.n	800567a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	18d1      	adds	r1, r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	6978      	ldr	r0, [r7, #20]
 8005642:	f000 f8d1 	bl	80057e8 <prvInsertTimerInActiveList>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01f      	beq.n	800568c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800564c:	2300      	movs	r3, #0
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	2300      	movs	r3, #0
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	2100      	movs	r1, #0
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f7ff ff88 	bl	800556c <xTimerGenericCommand>
 800565c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d113      	bne.n	800568c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	60fb      	str	r3, [r7, #12]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	b2da      	uxtb	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	6978      	ldr	r0, [r7, #20]
 8005692:	4798      	blx	r3
}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000e24 	.word	0x20000e24

080056a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f857 	bl	8005760 <prvGetNextExpireTime>
 80056b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f803 	bl	80056c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056be:	f000 f8d5 	bl	800586c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056c2:	e7f1      	b.n	80056a8 <prvTimerTask+0x8>

080056c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056ce:	f7ff f93b 	bl	8004948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056d2:	f107 0308 	add.w	r3, r7, #8
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f866 	bl	80057a8 <prvSampleTimeNow>
 80056dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d130      	bne.n	8005746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <prvProcessTimerOrBlockTask+0x3c>
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d806      	bhi.n	8005700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056f2:	f7ff f937 	bl	8004964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ff85 	bl	8005608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056fe:	e024      	b.n	800574a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d008      	beq.n	8005718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005706:	4b13      	ldr	r3, [pc, #76]	; (8005754 <prvProcessTimerOrBlockTask+0x90>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <prvProcessTimerOrBlockTask+0x50>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <prvProcessTimerOrBlockTask+0x52>
 8005714:	2300      	movs	r3, #0
 8005716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005718:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <prvProcessTimerOrBlockTask+0x94>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	f7fe fe7f 	bl	8004428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800572a:	f7ff f91b 	bl	8004964 <xTaskResumeAll>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <prvProcessTimerOrBlockTask+0x98>)
 8005736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	f3bf 8f6f 	isb	sy
}
 8005744:	e001      	b.n	800574a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005746:	f7ff f90d 	bl	8004964 <xTaskResumeAll>
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000e28 	.word	0x20000e28
 8005758:	20000e2c 	.word	0x20000e2c
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <prvGetNextExpireTime+0x44>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <prvGetNextExpireTime+0x16>
 8005772:	2201      	movs	r2, #1
 8005774:	e000      	b.n	8005778 <prvGetNextExpireTime+0x18>
 8005776:	2200      	movs	r2, #0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <prvGetNextExpireTime+0x44>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e001      	b.n	8005794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000e24 	.word	0x20000e24

080057a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057b0:	f7ff f976 	bl	8004aa0 <xTaskGetTickCount>
 80057b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <prvSampleTimeNow+0x3c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d205      	bcs.n	80057cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057c0:	f000 f936 	bl	8005a30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057d2:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <prvSampleTimeNow+0x3c>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000e34 	.word	0x20000e34

080057e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d812      	bhi.n	8005834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800581c:	2301      	movs	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e01b      	b.n	800585a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <prvInsertTimerInActiveList+0x7c>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fd fef6 	bl	800361e <vListInsert>
 8005832:	e012      	b.n	800585a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d206      	bcs.n	800584a <prvInsertTimerInActiveList+0x62>
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e007      	b.n	800585a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <prvInsertTimerInActiveList+0x80>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f7fd fee2 	bl	800361e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800585a:	697b      	ldr	r3, [r7, #20]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000e28 	.word	0x20000e28
 8005868:	20000e24 	.word	0x20000e24

0800586c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005872:	e0ca      	b.n	8005a0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	da18      	bge.n	80058ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	3304      	adds	r3, #4
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	61fb      	str	r3, [r7, #28]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a2:	6850      	ldr	r0, [r2, #4]
 80058a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a6:	6892      	ldr	r2, [r2, #8]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f2c0 80aa 	blt.w	8005a08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fd fee3 	bl	8003690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ca:	463b      	mov	r3, r7
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff6b 	bl	80057a8 <prvSampleTimeNow>
 80058d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b09      	cmp	r3, #9
 80058d8:	f200 8097 	bhi.w	8005a0a <prvProcessReceivedCommands+0x19e>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <prvProcessReceivedCommands+0x78>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	0800590d 	.word	0x0800590d
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	0800590d 	.word	0x0800590d
 80058f0:	08005981 	.word	0x08005981
 80058f4:	08005995 	.word	0x08005995
 80058f8:	080059df 	.word	0x080059df
 80058fc:	0800590d 	.word	0x0800590d
 8005900:	0800590d 	.word	0x0800590d
 8005904:	08005981 	.word	0x08005981
 8005908:	08005995 	.word	0x08005995
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	18d1      	adds	r1, r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800592c:	f7ff ff5c 	bl	80057e8 <prvInsertTimerInActiveList>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d069      	beq.n	8005a0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05e      	beq.n	8005a0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	441a      	add	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2300      	movs	r3, #0
 800595a:	2100      	movs	r1, #0
 800595c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800595e:	f7ff fe05 	bl	800556c <xTimerGenericCommand>
 8005962:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d14f      	bne.n	8005a0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	61bb      	str	r3, [r7, #24]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	b2da      	uxtb	r2, r3
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005992:	e03a      	b.n	8005a0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	617b      	str	r3, [r7, #20]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	18d1      	adds	r1, r2, r3
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d8:	f7ff ff06 	bl	80057e8 <prvInsertTimerInActiveList>
					break;
 80059dc:	e015      	b.n	8005a0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80059ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ee:	f000 fbdf 	bl	80061b0 <vPortFree>
 80059f2:	e00a      	b.n	8005a0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a06:	e000      	b.n	8005a0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <prvProcessReceivedCommands+0x1c0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	1d39      	adds	r1, r7, #4
 8005a10:	2200      	movs	r2, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe f9ca 	bl	8003dac <xQueueReceive>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f47f af2a 	bne.w	8005874 <prvProcessReceivedCommands+0x8>
	}
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3730      	adds	r7, #48	; 0x30
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000e2c 	.word	0x20000e2c

08005a30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a36:	e048      	b.n	8005aca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a42:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fd fe1d 	bl	8003690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02e      	beq.n	8005aca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d90e      	bls.n	8005a9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a8a:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fd fdc2 	bl	800361e <vListInsert>
 8005a9a:	e016      	b.n	8005aca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fd60 	bl	800556c <xTimerGenericCommand>
 8005aac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	603b      	str	r3, [r7, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1b1      	bne.n	8005a38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <prvSwitchTimerLists+0xc4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a04      	ldr	r2, [pc, #16]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005ae0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ae2:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <prvSwitchTimerLists+0xc4>)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	6013      	str	r3, [r2, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000e24 	.word	0x20000e24
 8005af4:	20000e28 	.word	0x20000e28

08005af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005afe:	f000 f969 	bl	8005dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b02:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <prvCheckForValidListAndQueue+0x60>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d120      	bne.n	8005b4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b0a:	4814      	ldr	r0, [pc, #80]	; (8005b5c <prvCheckForValidListAndQueue+0x64>)
 8005b0c:	f7fd fd36 	bl	800357c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b10:	4813      	ldr	r0, [pc, #76]	; (8005b60 <prvCheckForValidListAndQueue+0x68>)
 8005b12:	f7fd fd33 	bl	800357c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b16:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <prvCheckForValidListAndQueue+0x6c>)
 8005b18:	4a10      	ldr	r2, [pc, #64]	; (8005b5c <prvCheckForValidListAndQueue+0x64>)
 8005b1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b1c:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <prvCheckForValidListAndQueue+0x70>)
 8005b1e:	4a10      	ldr	r2, [pc, #64]	; (8005b60 <prvCheckForValidListAndQueue+0x68>)
 8005b20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b22:	2300      	movs	r3, #0
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <prvCheckForValidListAndQueue+0x74>)
 8005b28:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <prvCheckForValidListAndQueue+0x78>)
 8005b2a:	2110      	movs	r1, #16
 8005b2c:	200a      	movs	r0, #10
 8005b2e:	f7fd fe41 	bl	80037b4 <xQueueGenericCreateStatic>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <prvCheckForValidListAndQueue+0x60>)
 8005b36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <prvCheckForValidListAndQueue+0x60>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <prvCheckForValidListAndQueue+0x60>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	490b      	ldr	r1, [pc, #44]	; (8005b74 <prvCheckForValidListAndQueue+0x7c>)
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fc44 	bl	80043d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b4c:	f000 f972 	bl	8005e34 <vPortExitCritical>
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000e2c 	.word	0x20000e2c
 8005b5c:	20000dfc 	.word	0x20000dfc
 8005b60:	20000e10 	.word	0x20000e10
 8005b64:	20000e24 	.word	0x20000e24
 8005b68:	20000e28 	.word	0x20000e28
 8005b6c:	20000ed8 	.word	0x20000ed8
 8005b70:	20000e38 	.word	0x20000e38
 8005b74:	0800671c 	.word	0x0800671c

08005b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3b04      	subs	r3, #4
 8005b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b04      	subs	r3, #4
 8005b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f023 0201 	bic.w	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3b04      	subs	r3, #4
 8005ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ba8:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <pxPortInitialiseStack+0x64>)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3b14      	subs	r3, #20
 8005bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3b04      	subs	r3, #4
 8005bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f06f 0202 	mvn.w	r2, #2
 8005bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3b20      	subs	r3, #32
 8005bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	08005be1 	.word	0x08005be1

08005be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bea:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <prvTaskExitError+0x54>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d00a      	beq.n	8005c0a <prvTaskExitError+0x2a>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	60fb      	str	r3, [r7, #12]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <prvTaskExitError+0x28>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	60bb      	str	r3, [r7, #8]
}
 8005c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c1e:	bf00      	nop
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0fc      	beq.n	8005c20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	2000000c 	.word	0x2000000c
	...

08005c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <pxCurrentTCBConst2>)
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6808      	ldr	r0, [r1, #0]
 8005c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	f380 8809 	msr	PSP, r0
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8811 	msr	BASEPRI, r0
 8005c5a:	4770      	bx	lr
 8005c5c:	f3af 8000 	nop.w

08005c60 <pxCurrentTCBConst2>:
 8005c60:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop

08005c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c68:	4808      	ldr	r0, [pc, #32]	; (8005c8c <prvPortStartFirstTask+0x24>)
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	6800      	ldr	r0, [r0, #0]
 8005c6e:	f380 8808 	msr	MSP, r0
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f380 8814 	msr	CONTROL, r0
 8005c7a:	b662      	cpsie	i
 8005c7c:	b661      	cpsie	f
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	df00      	svc	0
 8005c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c8a:	bf00      	nop
 8005c8c:	e000ed08 	.word	0xe000ed08

08005c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c96:	4b46      	ldr	r3, [pc, #280]	; (8005db0 <xPortStartScheduler+0x120>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a46      	ldr	r2, [pc, #280]	; (8005db4 <xPortStartScheduler+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10a      	bne.n	8005cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <xPortStartScheduler+0x120>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a3f      	ldr	r2, [pc, #252]	; (8005db8 <xPortStartScheduler+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10a      	bne.n	8005cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cd6:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	22ff      	movs	r2, #255	; 0xff
 8005ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	4b31      	ldr	r3, [pc, #196]	; (8005dc0 <xPortStartScheduler+0x130>)
 8005cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cfe:	4b31      	ldr	r3, [pc, #196]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d04:	e009      	b.n	8005d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b80      	cmp	r3, #128	; 0x80
 8005d24:	d0ef      	beq.n	8005d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d26:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1c3 0307 	rsb	r3, r3, #7
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d00a      	beq.n	8005d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	60bb      	str	r3, [r7, #8]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d48:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d52:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d5a:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d66:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a14      	ldr	r2, [pc, #80]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d7e:	f000 f8dd 	bl	8005f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <xPortStartScheduler+0x13c>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d88:	f000 f8fc 	bl	8005f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d8c:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <xPortStartScheduler+0x140>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <xPortStartScheduler+0x140>)
 8005d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d98:	f7ff ff66 	bl	8005c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d9c:	f7fe ff4a 	bl	8004c34 <vTaskSwitchContext>
	prvTaskExitError();
 8005da0:	f7ff ff1e 	bl	8005be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	e000ed00 	.word	0xe000ed00
 8005db4:	410fc271 	.word	0x410fc271
 8005db8:	410fc270 	.word	0x410fc270
 8005dbc:	e000e400 	.word	0xe000e400
 8005dc0:	20000f28 	.word	0x20000f28
 8005dc4:	20000f2c 	.word	0x20000f2c
 8005dc8:	e000ed20 	.word	0xe000ed20
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	e000ef34 	.word	0xe000ef34

08005dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	607b      	str	r3, [r7, #4]
}
 8005dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dee:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <vPortEnterCritical+0x58>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <vPortEnterCritical+0x58>)
 8005df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <vPortEnterCritical+0x58>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d10f      	bne.n	8005e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <vPortEnterCritical+0x5c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	603b      	str	r3, [r7, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <vPortEnterCritical+0x4a>
	}
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	2000000c 	.word	0x2000000c
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <vPortExitCritical+0x50>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <vPortExitCritical+0x24>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	607b      	str	r3, [r7, #4]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <vPortExitCritical+0x50>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <vPortExitCritical+0x50>)
 8005e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e62:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <vPortExitCritical+0x50>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <vPortExitCritical+0x42>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f383 8811 	msr	BASEPRI, r3
}
 8005e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	2000000c 	.word	0x2000000c
	...

08005e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e90:	f3ef 8009 	mrs	r0, PSP
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <pxCurrentTCBConst>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f01e 0f10 	tst.w	lr, #16
 8005ea0:	bf08      	it	eq
 8005ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eaa:	6010      	str	r0, [r2, #0]
 8005eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005eb4:	f380 8811 	msr	BASEPRI, r0
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f7fe feb8 	bl	8004c34 <vTaskSwitchContext>
 8005ec4:	f04f 0000 	mov.w	r0, #0
 8005ec8:	f380 8811 	msr	BASEPRI, r0
 8005ecc:	bc09      	pop	{r0, r3}
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	6808      	ldr	r0, [r1, #0]
 8005ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed6:	f01e 0f10 	tst.w	lr, #16
 8005eda:	bf08      	it	eq
 8005edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ee0:	f380 8809 	msr	PSP, r0
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	f3af 8000 	nop.w

08005ef0 <pxCurrentTCBConst>:
 8005ef0:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop

08005ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	607b      	str	r3, [r7, #4]
}
 8005f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f12:	f7fe fdd5 	bl	8004ac0 <xTaskIncrementTick>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <xPortSysTickHandler+0x40>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	2300      	movs	r3, #0
 8005f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f383 8811 	msr	BASEPRI, r3
}
 8005f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <vPortSetupTimerInterrupt+0x34>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <vPortSetupTimerInterrupt+0x38>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <vPortSetupTimerInterrupt+0x3c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <vPortSetupTimerInterrupt+0x40>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	099b      	lsrs	r3, r3, #6
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <vPortSetupTimerInterrupt+0x44>)
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <vPortSetupTimerInterrupt+0x34>)
 8005f60:	2207      	movs	r2, #7
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	e000e010 	.word	0xe000e010
 8005f74:	e000e018 	.word	0xe000e018
 8005f78:	20000000 	.word	0x20000000
 8005f7c:	10624dd3 	.word	0x10624dd3
 8005f80:	e000e014 	.word	0xe000e014

08005f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f94 <vPortEnableVFP+0x10>
 8005f88:	6801      	ldr	r1, [r0, #0]
 8005f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f8e:	6001      	str	r1, [r0, #0]
 8005f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f92:	bf00      	nop
 8005f94:	e000ed88 	.word	0xe000ed88

08005f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f9e:	f3ef 8305 	mrs	r3, IPSR
 8005fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b0f      	cmp	r3, #15
 8005fa8:	d914      	bls.n	8005fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <vPortValidateInterruptPriority+0x70>)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fb4:	4b15      	ldr	r3, [pc, #84]	; (800600c <vPortValidateInterruptPriority+0x74>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	7afa      	ldrb	r2, [r7, #11]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d20a      	bcs.n	8005fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fd4:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <vPortValidateInterruptPriority+0x78>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <vPortValidateInterruptPriority+0x7c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d90a      	bls.n	8005ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	603b      	str	r3, [r7, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <vPortValidateInterruptPriority+0x60>
	}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	e000e3f0 	.word	0xe000e3f0
 800600c:	20000f28 	.word	0x20000f28
 8006010:	e000ed0c 	.word	0xe000ed0c
 8006014:	20000f2c 	.word	0x20000f2c

08006018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006024:	f7fe fc90 	bl	8004948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006028:	4b5b      	ldr	r3, [pc, #364]	; (8006198 <pvPortMalloc+0x180>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006030:	f000 f920 	bl	8006274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006034:	4b59      	ldr	r3, [pc, #356]	; (800619c <pvPortMalloc+0x184>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 8093 	bne.w	8006168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01d      	beq.n	8006084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006048:	2208      	movs	r2, #8
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b00      	cmp	r3, #0
 8006058:	d014      	beq.n	8006084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f023 0307 	bic.w	r3, r3, #7
 8006060:	3308      	adds	r3, #8
 8006062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <pvPortMalloc+0x6c>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	617b      	str	r3, [r7, #20]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d06e      	beq.n	8006168 <pvPortMalloc+0x150>
 800608a:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <pvPortMalloc+0x188>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d869      	bhi.n	8006168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006094:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <pvPortMalloc+0x18c>)
 8006096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006098:	4b42      	ldr	r3, [pc, #264]	; (80061a4 <pvPortMalloc+0x18c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800609e:	e004      	b.n	80060aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d903      	bls.n	80060bc <pvPortMalloc+0xa4>
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f1      	bne.n	80060a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060bc:	4b36      	ldr	r3, [pc, #216]	; (8006198 <pvPortMalloc+0x180>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d050      	beq.n	8006168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2208      	movs	r2, #8
 80060cc:	4413      	add	r3, r2
 80060ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	2308      	movs	r3, #8
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d91f      	bls.n	8006128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <pvPortMalloc+0xf8>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	613b      	str	r3, [r7, #16]
}
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006122:	69b8      	ldr	r0, [r7, #24]
 8006124:	f000 f908 	bl	8006338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <pvPortMalloc+0x188>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <pvPortMalloc+0x188>)
 8006134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <pvPortMalloc+0x188>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <pvPortMalloc+0x190>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d203      	bcs.n	800614a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <pvPortMalloc+0x188>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <pvPortMalloc+0x190>)
 8006148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	4b13      	ldr	r3, [pc, #76]	; (800619c <pvPortMalloc+0x184>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	431a      	orrs	r2, r3
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800615e:	4b13      	ldr	r3, [pc, #76]	; (80061ac <pvPortMalloc+0x194>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	4a11      	ldr	r2, [pc, #68]	; (80061ac <pvPortMalloc+0x194>)
 8006166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006168:	f7fe fbfc 	bl	8004964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <pvPortMalloc+0x174>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	60fb      	str	r3, [r7, #12]
}
 8006188:	bf00      	nop
 800618a:	e7fe      	b.n	800618a <pvPortMalloc+0x172>
	return pvReturn;
 800618c:	69fb      	ldr	r3, [r7, #28]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3728      	adds	r7, #40	; 0x28
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20004b38 	.word	0x20004b38
 800619c:	20004b4c 	.word	0x20004b4c
 80061a0:	20004b3c 	.word	0x20004b3c
 80061a4:	20004b30 	.word	0x20004b30
 80061a8:	20004b40 	.word	0x20004b40
 80061ac:	20004b44 	.word	0x20004b44

080061b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d04d      	beq.n	800625e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061c2:	2308      	movs	r3, #8
 80061c4:	425b      	negs	r3, r3
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	4b24      	ldr	r3, [pc, #144]	; (8006268 <vPortFree+0xb8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4013      	ands	r3, r2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <vPortFree+0x44>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60fb      	str	r3, [r7, #12]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <vPortFree+0x62>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60bb      	str	r3, [r7, #8]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <vPortFree+0xb8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01e      	beq.n	800625e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d11a      	bne.n	800625e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <vPortFree+0xb8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006238:	f7fe fb86 	bl	8004948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <vPortFree+0xbc>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4413      	add	r3, r2
 8006246:	4a09      	ldr	r2, [pc, #36]	; (800626c <vPortFree+0xbc>)
 8006248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800624a:	6938      	ldr	r0, [r7, #16]
 800624c:	f000 f874 	bl	8006338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <vPortFree+0xc0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	4a06      	ldr	r2, [pc, #24]	; (8006270 <vPortFree+0xc0>)
 8006258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800625a:	f7fe fb83 	bl	8004964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800625e:	bf00      	nop
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20004b4c 	.word	0x20004b4c
 800626c:	20004b3c 	.word	0x20004b3c
 8006270:	20004b48 	.word	0x20004b48

08006274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800627a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800627e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006280:	4b27      	ldr	r3, [pc, #156]	; (8006320 <prvHeapInit+0xac>)
 8006282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3307      	adds	r3, #7
 8006292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0307 	bic.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <prvHeapInit+0xac>)
 80062a4:	4413      	add	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062ac:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <prvHeapInit+0xb0>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <prvHeapInit+0xb0>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062c0:	2208      	movs	r2, #8
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a15      	ldr	r2, [pc, #84]	; (8006328 <prvHeapInit+0xb4>)
 80062d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <prvHeapInit+0xb4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <prvHeapInit+0xb4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062f4:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <prvHeapInit+0xb4>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4a0a      	ldr	r2, [pc, #40]	; (800632c <prvHeapInit+0xb8>)
 8006302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4a09      	ldr	r2, [pc, #36]	; (8006330 <prvHeapInit+0xbc>)
 800630a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <prvHeapInit+0xc0>)
 800630e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006312:	601a      	str	r2, [r3, #0]
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000f30 	.word	0x20000f30
 8006324:	20004b30 	.word	0x20004b30
 8006328:	20004b38 	.word	0x20004b38
 800632c:	20004b40 	.word	0x20004b40
 8006330:	20004b3c 	.word	0x20004b3c
 8006334:	20004b4c 	.word	0x20004b4c

08006338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006340:	4b28      	ldr	r3, [pc, #160]	; (80063e4 <prvInsertBlockIntoFreeList+0xac>)
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	e002      	b.n	800634c <prvInsertBlockIntoFreeList+0x14>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	429a      	cmp	r2, r3
 8006354:	d8f7      	bhi.n	8006346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4413      	add	r3, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d108      	bne.n	800637a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	441a      	add	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	441a      	add	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d118      	bne.n	80063c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d00d      	beq.n	80063b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e008      	b.n	80063c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063b6:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <prvInsertBlockIntoFreeList+0xb0>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e003      	b.n	80063c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d002      	beq.n	80063d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20004b30 	.word	0x20004b30
 80063e8:	20004b38 	.word	0x20004b38

080063ec <__libc_init_array>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4d0d      	ldr	r5, [pc, #52]	; (8006424 <__libc_init_array+0x38>)
 80063f0:	4c0d      	ldr	r4, [pc, #52]	; (8006428 <__libc_init_array+0x3c>)
 80063f2:	1b64      	subs	r4, r4, r5
 80063f4:	10a4      	asrs	r4, r4, #2
 80063f6:	2600      	movs	r6, #0
 80063f8:	42a6      	cmp	r6, r4
 80063fa:	d109      	bne.n	8006410 <__libc_init_array+0x24>
 80063fc:	4d0b      	ldr	r5, [pc, #44]	; (800642c <__libc_init_array+0x40>)
 80063fe:	4c0c      	ldr	r4, [pc, #48]	; (8006430 <__libc_init_array+0x44>)
 8006400:	f000 f8f2 	bl	80065e8 <_init>
 8006404:	1b64      	subs	r4, r4, r5
 8006406:	10a4      	asrs	r4, r4, #2
 8006408:	2600      	movs	r6, #0
 800640a:	42a6      	cmp	r6, r4
 800640c:	d105      	bne.n	800641a <__libc_init_array+0x2e>
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	f855 3b04 	ldr.w	r3, [r5], #4
 8006414:	4798      	blx	r3
 8006416:	3601      	adds	r6, #1
 8006418:	e7ee      	b.n	80063f8 <__libc_init_array+0xc>
 800641a:	f855 3b04 	ldr.w	r3, [r5], #4
 800641e:	4798      	blx	r3
 8006420:	3601      	adds	r6, #1
 8006422:	e7f2      	b.n	800640a <__libc_init_array+0x1e>
 8006424:	080067c8 	.word	0x080067c8
 8006428:	080067c8 	.word	0x080067c8
 800642c:	080067c8 	.word	0x080067c8
 8006430:	080067cc 	.word	0x080067cc

08006434 <__retarget_lock_acquire_recursive>:
 8006434:	4770      	bx	lr

08006436 <__retarget_lock_release_recursive>:
 8006436:	4770      	bx	lr

08006438 <memcpy>:
 8006438:	440a      	add	r2, r1
 800643a:	4291      	cmp	r1, r2
 800643c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006440:	d100      	bne.n	8006444 <memcpy+0xc>
 8006442:	4770      	bx	lr
 8006444:	b510      	push	{r4, lr}
 8006446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800644a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800644e:	4291      	cmp	r1, r2
 8006450:	d1f9      	bne.n	8006446 <memcpy+0xe>
 8006452:	bd10      	pop	{r4, pc}

08006454 <memset>:
 8006454:	4402      	add	r2, r0
 8006456:	4603      	mov	r3, r0
 8006458:	4293      	cmp	r3, r2
 800645a:	d100      	bne.n	800645e <memset+0xa>
 800645c:	4770      	bx	lr
 800645e:	f803 1b01 	strb.w	r1, [r3], #1
 8006462:	e7f9      	b.n	8006458 <memset+0x4>

08006464 <cleanup_glue>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	460c      	mov	r4, r1
 8006468:	6809      	ldr	r1, [r1, #0]
 800646a:	4605      	mov	r5, r0
 800646c:	b109      	cbz	r1, 8006472 <cleanup_glue+0xe>
 800646e:	f7ff fff9 	bl	8006464 <cleanup_glue>
 8006472:	4621      	mov	r1, r4
 8006474:	4628      	mov	r0, r5
 8006476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800647a:	f000 b869 	b.w	8006550 <_free_r>
	...

08006480 <_reclaim_reent>:
 8006480:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <_reclaim_reent+0xb4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4283      	cmp	r3, r0
 8006486:	b570      	push	{r4, r5, r6, lr}
 8006488:	4604      	mov	r4, r0
 800648a:	d051      	beq.n	8006530 <_reclaim_reent+0xb0>
 800648c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800648e:	b143      	cbz	r3, 80064a2 <_reclaim_reent+0x22>
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d14a      	bne.n	800652c <_reclaim_reent+0xac>
 8006496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006498:	6819      	ldr	r1, [r3, #0]
 800649a:	b111      	cbz	r1, 80064a2 <_reclaim_reent+0x22>
 800649c:	4620      	mov	r0, r4
 800649e:	f000 f857 	bl	8006550 <_free_r>
 80064a2:	6961      	ldr	r1, [r4, #20]
 80064a4:	b111      	cbz	r1, 80064ac <_reclaim_reent+0x2c>
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 f852 	bl	8006550 <_free_r>
 80064ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064ae:	b111      	cbz	r1, 80064b6 <_reclaim_reent+0x36>
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f84d 	bl	8006550 <_free_r>
 80064b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064b8:	b111      	cbz	r1, 80064c0 <_reclaim_reent+0x40>
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 f848 	bl	8006550 <_free_r>
 80064c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064c2:	b111      	cbz	r1, 80064ca <_reclaim_reent+0x4a>
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 f843 	bl	8006550 <_free_r>
 80064ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064cc:	b111      	cbz	r1, 80064d4 <_reclaim_reent+0x54>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f83e 	bl	8006550 <_free_r>
 80064d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80064d6:	b111      	cbz	r1, 80064de <_reclaim_reent+0x5e>
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 f839 	bl	8006550 <_free_r>
 80064de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80064e0:	b111      	cbz	r1, 80064e8 <_reclaim_reent+0x68>
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 f834 	bl	8006550 <_free_r>
 80064e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ea:	b111      	cbz	r1, 80064f2 <_reclaim_reent+0x72>
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 f82f 	bl	8006550 <_free_r>
 80064f2:	69a3      	ldr	r3, [r4, #24]
 80064f4:	b1e3      	cbz	r3, 8006530 <_reclaim_reent+0xb0>
 80064f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064f8:	4620      	mov	r0, r4
 80064fa:	4798      	blx	r3
 80064fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064fe:	b1b9      	cbz	r1, 8006530 <_reclaim_reent+0xb0>
 8006500:	4620      	mov	r0, r4
 8006502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006506:	f7ff bfad 	b.w	8006464 <cleanup_glue>
 800650a:	5949      	ldr	r1, [r1, r5]
 800650c:	b941      	cbnz	r1, 8006520 <_reclaim_reent+0xa0>
 800650e:	3504      	adds	r5, #4
 8006510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006512:	2d80      	cmp	r5, #128	; 0x80
 8006514:	68d9      	ldr	r1, [r3, #12]
 8006516:	d1f8      	bne.n	800650a <_reclaim_reent+0x8a>
 8006518:	4620      	mov	r0, r4
 800651a:	f000 f819 	bl	8006550 <_free_r>
 800651e:	e7ba      	b.n	8006496 <_reclaim_reent+0x16>
 8006520:	680e      	ldr	r6, [r1, #0]
 8006522:	4620      	mov	r0, r4
 8006524:	f000 f814 	bl	8006550 <_free_r>
 8006528:	4631      	mov	r1, r6
 800652a:	e7ef      	b.n	800650c <_reclaim_reent+0x8c>
 800652c:	2500      	movs	r5, #0
 800652e:	e7ef      	b.n	8006510 <_reclaim_reent+0x90>
 8006530:	bd70      	pop	{r4, r5, r6, pc}
 8006532:	bf00      	nop
 8006534:	20000010 	.word	0x20000010

08006538 <__malloc_lock>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__malloc_lock+0x8>)
 800653a:	f7ff bf7b 	b.w	8006434 <__retarget_lock_acquire_recursive>
 800653e:	bf00      	nop
 8006540:	20004b50 	.word	0x20004b50

08006544 <__malloc_unlock>:
 8006544:	4801      	ldr	r0, [pc, #4]	; (800654c <__malloc_unlock+0x8>)
 8006546:	f7ff bf76 	b.w	8006436 <__retarget_lock_release_recursive>
 800654a:	bf00      	nop
 800654c:	20004b50 	.word	0x20004b50

08006550 <_free_r>:
 8006550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006552:	2900      	cmp	r1, #0
 8006554:	d044      	beq.n	80065e0 <_free_r+0x90>
 8006556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800655a:	9001      	str	r0, [sp, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f1a1 0404 	sub.w	r4, r1, #4
 8006562:	bfb8      	it	lt
 8006564:	18e4      	addlt	r4, r4, r3
 8006566:	f7ff ffe7 	bl	8006538 <__malloc_lock>
 800656a:	4a1e      	ldr	r2, [pc, #120]	; (80065e4 <_free_r+0x94>)
 800656c:	9801      	ldr	r0, [sp, #4]
 800656e:	6813      	ldr	r3, [r2, #0]
 8006570:	b933      	cbnz	r3, 8006580 <_free_r+0x30>
 8006572:	6063      	str	r3, [r4, #4]
 8006574:	6014      	str	r4, [r2, #0]
 8006576:	b003      	add	sp, #12
 8006578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800657c:	f7ff bfe2 	b.w	8006544 <__malloc_unlock>
 8006580:	42a3      	cmp	r3, r4
 8006582:	d908      	bls.n	8006596 <_free_r+0x46>
 8006584:	6825      	ldr	r5, [r4, #0]
 8006586:	1961      	adds	r1, r4, r5
 8006588:	428b      	cmp	r3, r1
 800658a:	bf01      	itttt	eq
 800658c:	6819      	ldreq	r1, [r3, #0]
 800658e:	685b      	ldreq	r3, [r3, #4]
 8006590:	1949      	addeq	r1, r1, r5
 8006592:	6021      	streq	r1, [r4, #0]
 8006594:	e7ed      	b.n	8006572 <_free_r+0x22>
 8006596:	461a      	mov	r2, r3
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	b10b      	cbz	r3, 80065a0 <_free_r+0x50>
 800659c:	42a3      	cmp	r3, r4
 800659e:	d9fa      	bls.n	8006596 <_free_r+0x46>
 80065a0:	6811      	ldr	r1, [r2, #0]
 80065a2:	1855      	adds	r5, r2, r1
 80065a4:	42a5      	cmp	r5, r4
 80065a6:	d10b      	bne.n	80065c0 <_free_r+0x70>
 80065a8:	6824      	ldr	r4, [r4, #0]
 80065aa:	4421      	add	r1, r4
 80065ac:	1854      	adds	r4, r2, r1
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	d1e0      	bne.n	8006576 <_free_r+0x26>
 80065b4:	681c      	ldr	r4, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	6053      	str	r3, [r2, #4]
 80065ba:	4421      	add	r1, r4
 80065bc:	6011      	str	r1, [r2, #0]
 80065be:	e7da      	b.n	8006576 <_free_r+0x26>
 80065c0:	d902      	bls.n	80065c8 <_free_r+0x78>
 80065c2:	230c      	movs	r3, #12
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	e7d6      	b.n	8006576 <_free_r+0x26>
 80065c8:	6825      	ldr	r5, [r4, #0]
 80065ca:	1961      	adds	r1, r4, r5
 80065cc:	428b      	cmp	r3, r1
 80065ce:	bf04      	itt	eq
 80065d0:	6819      	ldreq	r1, [r3, #0]
 80065d2:	685b      	ldreq	r3, [r3, #4]
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	bf04      	itt	eq
 80065d8:	1949      	addeq	r1, r1, r5
 80065da:	6021      	streq	r1, [r4, #0]
 80065dc:	6054      	str	r4, [r2, #4]
 80065de:	e7ca      	b.n	8006576 <_free_r+0x26>
 80065e0:	b003      	add	sp, #12
 80065e2:	bd30      	pop	{r4, r5, pc}
 80065e4:	20004b54 	.word	0x20004b54

080065e8 <_init>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr

080065f4 <_fini>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr
