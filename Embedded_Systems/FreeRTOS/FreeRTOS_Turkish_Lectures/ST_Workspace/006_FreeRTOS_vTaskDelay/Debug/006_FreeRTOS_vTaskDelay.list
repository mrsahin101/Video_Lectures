
006_FreeRTOS_vTaskDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005268  08005268  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005270  08005270  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00004ac0  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b3c  20004b3c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018670  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fee  00000000  00000000  0003871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  0003caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f56  00000000  00000000  0003dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001500f  00000000  00000000  00040c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47b1  00000000  00000000  00055c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a44e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055fc  00000000  00000000  0012a4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005188 	.word	0x08005188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005188 	.word	0x08005188

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vTask2>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTask2(void * pvParameters)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	char *GorevAdi = (char *) pvParameters;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	60fb      	str	r3, [r7, #12]
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
 80004e0:	23fa      	movs	r3, #250	; 0xfa
 80004e2:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 80004e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e8:	2213      	movs	r2, #19
 80004ea:	68f9      	ldr	r1, [r7, #12]
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <vTask2+0x28>)
 80004ee:	f001 fd44 	bl	8001f7a <HAL_UART_Transmit>
		vTaskDelay(xDelay250ms);
 80004f2:	68b8      	ldr	r0, [r7, #8]
 80004f4:	f003 f852 	bl	800359c <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 80004f8:	e7f4      	b.n	80004e4 <vTask2+0x10>
 80004fa:	bf00      	nop
 80004fc:	20000098 	.word	0x20000098

08000500 <vTask1>:
	}
}
void vTask1(void * pvParameters)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	char *GorevAdi = (char *)pvParameters;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
 800050c:	23fa      	movs	r3, #250	; 0xfa
 800050e:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 8000510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000514:	2213      	movs	r2, #19
 8000516:	68f9      	ldr	r1, [r7, #12]
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <vTask1+0x28>)
 800051a:	f001 fd2e 	bl	8001f7a <HAL_UART_Transmit>
		vTaskDelay(xDelay250ms);
 800051e:	68b8      	ldr	r0, [r7, #8]
 8000520:	f003 f83c 	bl	800359c <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 8000524:	e7f4      	b.n	8000510 <vTask1+0x10>
 8000526:	bf00      	nop
 8000528:	20000098 	.word	0x20000098

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fa83 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f829 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f8bb 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053e:	f000 f88f 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTask1, "Task 1", configMINIMAL_STACK_SIZE, (void*)Gorev1Metin, 1, NULL);
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <main+0x48>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	9201      	str	r2, [sp, #4]
 800054a:	2201      	movs	r2, #1
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	4909      	ldr	r1, [pc, #36]	; (8000578 <main+0x4c>)
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <main+0x50>)
 8000554:	f002 fec7 	bl	80032e6 <xTaskCreate>
  xTaskCreate(vTask2, "Task 2", configMINIMAL_STACK_SIZE, (void*)Gorev2Metin, 2, NULL);
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <main+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	9201      	str	r2, [sp, #4]
 8000560:	2202      	movs	r2, #2
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	4907      	ldr	r1, [pc, #28]	; (8000584 <main+0x58>)
 8000568:	4807      	ldr	r0, [pc, #28]	; (8000588 <main+0x5c>)
 800056a:	f002 febc 	bl	80032e6 <xTaskCreate>
  vTaskStartScheduler();
 800056e:	f003 f849 	bl	8003604 <vTaskStartScheduler>
  /* Start scheduler */
  //osKernelStart();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x46>
 8000574:	20000000 	.word	0x20000000
 8000578:	080051a0 	.word	0x080051a0
 800057c:	08000501 	.word	0x08000501
 8000580:	20000004 	.word	0x20000004
 8000584:	080051a8 	.word	0x080051a8
 8000588:	080004d5 	.word	0x080004d5

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 fd2a 	bl	8004ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a27      	ldr	r2, [pc, #156]	; (8000658 <SystemClock_Config+0xcc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fcec 	bl	8000ff0 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061e:	f000 f8bb 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ff4d 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800064c:	f000 f8a4 	bl	8000798 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000698:	f001 fc22 	bl	8001ee0 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f879 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000098 	.word	0x20000098
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_GPIO_Init+0xb4>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_GPIO_Init+0xb8>)
 8000726:	f000 fc49 	bl	8000fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_GPIO_Init+0xbc>)
 800073e:	f000 faa1 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000742:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xb8>)
 800075c:	f000 fa92 	bl	8000c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40020000 	.word	0x40020000

08000774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d101      	bne.n	800078a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000786:	f000 f97b 	bl	8000a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40002000 	.word	0x40002000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_MspInit+0x54>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <HAL_MspInit+0x54>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x54>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <HAL_MspInit+0x54>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_MspInit+0x54>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_MspInit+0x54>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	f06f 0001 	mvn.w	r0, #1
 80007ea:	f000 fa21 	bl	8000c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a19      	ldr	r2, [pc, #100]	; (8000880 <HAL_UART_MspInit+0x84>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d12b      	bne.n	8000876 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_UART_MspInit+0x88>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <HAL_UART_MspInit+0x88>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_UART_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_UART_MspInit+0x88>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <HAL_UART_MspInit+0x88>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_UART_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000856:	230c      	movs	r3, #12
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000866:	2307      	movs	r3, #7
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <HAL_UART_MspInit+0x8c>)
 8000872:	f000 fa07 	bl	8000c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40004400 	.word	0x40004400
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000

0800088c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	4b33      	ldr	r3, [pc, #204]	; (8000970 <HAL_InitTick+0xe4>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a32      	ldr	r2, [pc, #200]	; (8000970 <HAL_InitTick+0xe4>)
 80008a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b30      	ldr	r3, [pc, #192]	; (8000970 <HAL_InitTick+0xe4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b8:	f107 0210 	add.w	r2, r7, #16
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f82c 	bl	8001920 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008c8:	6a3b      	ldr	r3, [r7, #32]
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d103      	bne.n	80008da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008d2:	f000 fffd 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80008d6:	6378      	str	r0, [r7, #52]	; 0x34
 80008d8:	e004      	b.n	80008e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008da:	f000 fff9 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80008de:	4603      	mov	r3, r0
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <HAL_InitTick+0xe8>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	0c9b      	lsrs	r3, r3, #18
 80008ee:	3b01      	subs	r3, #1
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_InitTick+0xec>)
 80008f4:	4a21      	ldr	r2, [pc, #132]	; (800097c <HAL_InitTick+0xf0>)
 80008f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_InitTick+0xec>)
 80008fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fe:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_InitTick+0xec>)
 8000902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000904:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_InitTick+0xec>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_InitTick+0xec>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_InitTick+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <HAL_InitTick+0xec>)
 800091a:	f001 f833 	bl	8001984 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000924:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000928:	2b00      	cmp	r3, #0
 800092a:	d11b      	bne.n	8000964 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <HAL_InitTick+0xec>)
 800092e:	f001 f883 	bl	8001a38 <HAL_TIM_Base_Start_IT>
 8000932:	4603      	mov	r3, r0
 8000934:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000938:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800093c:	2b00      	cmp	r3, #0
 800093e:	d111      	bne.n	8000964 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000940:	202d      	movs	r0, #45	; 0x2d
 8000942:	f000 f991 	bl	8000c68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d808      	bhi.n	800095e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	202d      	movs	r0, #45	; 0x2d
 8000952:	f000 f96d 	bl	8000c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_InitTick+0xf4>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	e002      	b.n	8000964 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000968:	4618      	mov	r0, r3
 800096a:	3738      	adds	r7, #56	; 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	431bde83 	.word	0x431bde83
 8000978:	200000dc 	.word	0x200000dc
 800097c:	40002000 	.word	0x40002000
 8000980:	2000000c 	.word	0x2000000c

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009b6:	f001 f8af 	bl	8001b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000dc 	.word	0x200000dc

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a12:	f7ff ffd7 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f004 fab9 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fd87 	bl	800052c <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a2c:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 8000a30:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a34:	20004b3c 	.word	0x20004b3c

08000a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_Init+0x40>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_Init+0x40>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x40>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f8d8 	bl	8000c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f7ff ff0e 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fe98 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	20000124 	.word	0x20000124

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000124 	.word	0x20000124

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ff4c 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c42:	f7ff ff61 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	6978      	ldr	r0, [r7, #20]
 8000c4e:	f7ff ffb1 	bl	8000bb4 <NVIC_EncodePriority>
 8000c52:	4602      	mov	r2, r0
 8000c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff80 	bl	8000b60 <__NVIC_SetPriority>
}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff54 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	e16b      	b.n	8000f78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	f040 815a 	bne.w	8000f72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d005      	beq.n	8000cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d130      	bne.n	8000d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	f003 0201 	and.w	r2, r3, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d017      	beq.n	8000d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d123      	bne.n	8000dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	69b9      	ldr	r1, [r7, #24]
 8000dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0203 	and.w	r2, r3, #3
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80b4 	beq.w	8000f72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b60      	ldr	r3, [pc, #384]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a5f      	ldr	r2, [pc, #380]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e26:	4a5b      	ldr	r2, [pc, #364]	; (8000f94 <HAL_GPIO_Init+0x310>)
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x314>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d02b      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_GPIO_Init+0x318>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d025      	beq.n	8000ea6 <HAL_GPIO_Init+0x222>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_GPIO_Init+0x31c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01f      	beq.n	8000ea2 <HAL_GPIO_Init+0x21e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_GPIO_Init+0x320>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x21a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <HAL_GPIO_Init+0x324>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x216>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <HAL_GPIO_Init+0x328>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x212>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_GPIO_Init+0x32c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x20e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_GPIO_Init+0x330>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x20a>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e00e      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e8e:	2308      	movs	r3, #8
 8000e90:	e00c      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e92:	2306      	movs	r3, #6
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	; (8000f94 <HAL_GPIO_Init+0x310>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	f67f ae90 	bls.w	8000ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40021400 	.word	0x40021400
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	40021c00 	.word	0x40021c00
 8000fb8:	40013c00 	.word	0x40013c00

08000fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd8:	e003      	b.n	8000fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	041a      	lsls	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	619a      	str	r2, [r3, #24]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e267      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d075      	beq.n	80010fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d00c      	beq.n	8001034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	4b85      	ldr	r3, [pc, #532]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001022:	2b08      	cmp	r3, #8
 8001024:	d112      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001026:	4b82      	ldr	r3, [pc, #520]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001032:	d10b      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	4b7e      	ldr	r3, [pc, #504]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d05b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d157      	bne.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e242      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d106      	bne.n	8001064 <HAL_RCC_OscConfig+0x74>
 8001056:	4b76      	ldr	r3, [pc, #472]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a75      	ldr	r2, [pc, #468]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e01d      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x98>
 800106e:	4b70      	ldr	r3, [pc, #448]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a6f      	ldr	r2, [pc, #444]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6c      	ldr	r2, [pc, #432]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a68      	ldr	r2, [pc, #416]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b66      	ldr	r3, [pc, #408]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a65      	ldr	r2, [pc, #404]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcfe 	bl	8000aa8 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fcfa 	bl	8000aa8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e207      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xc0>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcea 	bl	8000aa8 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fce6 	bl	8000aa8 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1f3      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	4b51      	ldr	r3, [pc, #324]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0xe8>
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d063      	beq.n	80011ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d11c      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d116      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d001      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e1c7      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	e03a      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_RCC_OscConfig+0x244>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fc9f 	bl	8000aa8 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fc9b 	bl	8000aa8 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e1a8      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4925      	ldr	r1, [pc, #148]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_RCC_OscConfig+0x244>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc7e 	bl	8000aa8 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc7a 	bl	8000aa8 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e187      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d036      	beq.n	8001248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d016      	beq.n	8001210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_RCC_OscConfig+0x248>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc5e 	bl	8000aa8 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc5a 	bl	8000aa8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e167      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_OscConfig+0x240>)
 8001204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x200>
 800120e:	e01b      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_RCC_OscConfig+0x248>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fc47 	bl	8000aa8 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	e00e      	b.n	800123c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fc43 	bl	8000aa8 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d907      	bls.n	800123c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e150      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
 8001230:	40023800 	.word	0x40023800
 8001234:	42470000 	.word	0x42470000
 8001238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800123e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ea      	bne.n	800121e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 8097 	beq.w	8001384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125a:	4b81      	ldr	r3, [pc, #516]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10f      	bne.n	8001286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a7c      	ldr	r2, [pc, #496]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b77      	ldr	r3, [pc, #476]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a73      	ldr	r2, [pc, #460]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff fc03 	bl	8000aa8 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fbff 	bl	8000aa8 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e10c      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x474>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x2ea>
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d0:	4a63      	ldr	r2, [pc, #396]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6713      	str	r3, [r2, #112]	; 0x70
 80012d8:	e01c      	b.n	8001314 <HAL_RCC_OscConfig+0x324>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x30c>
 80012e2:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e6:	4a5e      	ldr	r2, [pc, #376]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6713      	str	r3, [r2, #112]	; 0x70
 80012ee:	4b5c      	ldr	r3, [pc, #368]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6713      	str	r3, [r2, #112]	; 0x70
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0x324>
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a57      	ldr	r2, [pc, #348]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800130e:	f023 0304 	bic.w	r3, r3, #4
 8001312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d015      	beq.n	8001348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fbc4 	bl	8000aa8 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff fbc0 	bl	8000aa8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0cb      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133a:	4b49      	ldr	r3, [pc, #292]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0ee      	beq.n	8001324 <HAL_RCC_OscConfig+0x334>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fbae 	bl	8000aa8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134e:	e00a      	b.n	8001366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff fbaa 	bl	8000aa8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	; 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e0b5      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ee      	bne.n	8001350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a38      	ldr	r2, [pc, #224]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a1 	beq.w	80014d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b08      	cmp	r3, #8
 8001398:	d05c      	beq.n	8001454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d141      	bne.n	8001426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_RCC_OscConfig+0x478>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb7e 	bl	8000aa8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fb7a 	bl	8000aa8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e087      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69da      	ldr	r2, [r3, #28]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	019b      	lsls	r3, r3, #6
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	3b01      	subs	r3, #1
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x478>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb53 	bl	8000aa8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fb4f 	bl	8000aa8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e05c      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x416>
 8001424:	e054      	b.n	80014d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_RCC_OscConfig+0x478>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fb3c 	bl	8000aa8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fb38 	bl	8000aa8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e045      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_OscConfig+0x470>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x444>
 8001452:	e03d      	b.n	80014d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d107      	bne.n	800146c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e038      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000
 8001468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x4ec>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d028      	beq.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d121      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d11a      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800149c:	4013      	ands	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d111      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0cc      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d90c      	bls.n	800151c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b8      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a52      	ldr	r2, [pc, #328]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b50      	ldr	r3, [pc, #320]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	494d      	ldr	r1, [pc, #308]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d044      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d119      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e07f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d003      	beq.n	800159e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e06f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e067      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4934      	ldr	r1, [pc, #208]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fa6a 	bl	8000aa8 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff fa66 	bl	8000aa8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e04f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d20c      	bcs.n	8001628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e032      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001666:	f000 f821 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 800166a:	4602      	mov	r2, r0
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	490a      	ldr	r1, [pc, #40]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	5ccb      	ldrb	r3, [r1, r3]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f900 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00
 800169c:	40023800 	.word	0x40023800
 80016a0:	080051f0 	.word	0x080051f0
 80016a4:	20000008 	.word	0x20000008
 80016a8:	2000000c 	.word	0x2000000c

080016ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b0:	b094      	sub	sp, #80	; 0x50
 80016b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	647b      	str	r3, [r7, #68]	; 0x44
 80016b8:	2300      	movs	r3, #0
 80016ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016bc:	2300      	movs	r3, #0
 80016be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c4:	4b79      	ldr	r3, [pc, #484]	; (80018ac <HAL_RCC_GetSysClockFreq+0x200>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d00d      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x40>
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	f200 80e1 	bhi.w	8001898 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x34>
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80016de:	e0db      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e0:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80016e4:	e0db      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80016e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016ea:	e0d8      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ec:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_GetSysClockFreq+0x200>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016f6:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <HAL_RCC_GetSysClockFreq+0x200>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001702:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	2200      	movs	r2, #0
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
 800170c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
 8001716:	2300      	movs	r3, #0
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
 800171a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800171e:	4622      	mov	r2, r4
 8001720:	462b      	mov	r3, r5
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	0159      	lsls	r1, r3, #5
 800172c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001730:	0150      	lsls	r0, r2, #5
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4621      	mov	r1, r4
 8001738:	1a51      	subs	r1, r2, r1
 800173a:	6139      	str	r1, [r7, #16]
 800173c:	4629      	mov	r1, r5
 800173e:	eb63 0301 	sbc.w	r3, r3, r1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001750:	4659      	mov	r1, fp
 8001752:	018b      	lsls	r3, r1, #6
 8001754:	4651      	mov	r1, sl
 8001756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175a:	4651      	mov	r1, sl
 800175c:	018a      	lsls	r2, r1, #6
 800175e:	4651      	mov	r1, sl
 8001760:	ebb2 0801 	subs.w	r8, r2, r1
 8001764:	4659      	mov	r1, fp
 8001766:	eb63 0901 	sbc.w	r9, r3, r1
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800177a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800177e:	4690      	mov	r8, r2
 8001780:	4699      	mov	r9, r3
 8001782:	4623      	mov	r3, r4
 8001784:	eb18 0303 	adds.w	r3, r8, r3
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	462b      	mov	r3, r5
 800178c:	eb49 0303 	adc.w	r3, r9, r3
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800179e:	4629      	mov	r1, r5
 80017a0:	024b      	lsls	r3, r1, #9
 80017a2:	4621      	mov	r1, r4
 80017a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017a8:	4621      	mov	r1, r4
 80017aa:	024a      	lsls	r2, r1, #9
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b2:	2200      	movs	r2, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017bc:	f7fe fd08 	bl	80001d0 <__aeabi_uldivmod>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4613      	mov	r3, r2
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017c8:	e058      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_GetSysClockFreq+0x200>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	099b      	lsrs	r3, r3, #6
 80017d0:	2200      	movs	r2, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	4611      	mov	r1, r2
 80017d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
 80017e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017e4:	4642      	mov	r2, r8
 80017e6:	464b      	mov	r3, r9
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	0159      	lsls	r1, r3, #5
 80017f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f6:	0150      	lsls	r0, r2, #5
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4641      	mov	r1, r8
 80017fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001802:	4649      	mov	r1, r9
 8001804:	eb63 0b01 	sbc.w	fp, r3, r1
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800181c:	ebb2 040a 	subs.w	r4, r2, sl
 8001820:	eb63 050b 	sbc.w	r5, r3, fp
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	00eb      	lsls	r3, r5, #3
 800182e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001832:	00e2      	lsls	r2, r4, #3
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	4643      	mov	r3, r8
 800183a:	18e3      	adds	r3, r4, r3
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	464b      	mov	r3, r9
 8001840:	eb45 0303 	adc.w	r3, r5, r3
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001852:	4629      	mov	r1, r5
 8001854:	028b      	lsls	r3, r1, #10
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800185c:	4621      	mov	r1, r4
 800185e:	028a      	lsls	r2, r1, #10
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001866:	2200      	movs	r2, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	61fa      	str	r2, [r7, #28]
 800186c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001870:	f7fe fcae 	bl	80001d0 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0x200>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	3301      	adds	r3, #1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800188c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800188e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001896:	e002      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800189c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3750      	adds	r7, #80	; 0x50
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	007a1200 	.word	0x007a1200

080018b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_GetHCLKFreq+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0a9b      	lsrs	r3, r3, #10
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4903      	ldr	r1, [pc, #12]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08005200 	.word	0x08005200

080018f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018fc:	f7ff ffdc 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	0b5b      	lsrs	r3, r3, #13
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <HAL_RCC_GetPCLK2Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	08005200 	.word	0x08005200

08001920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	220f      	movs	r2, #15
 800192e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_RCC_GetClockConfig+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_GetClockConfig+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_RCC_GetClockConfig+0x60>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0207 	and.w	r2, r3, #7
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40023c00 	.word	0x40023c00

08001984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e041      	b.n	8001a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f839 	bl	8001a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3304      	adds	r3, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4610      	mov	r0, r2
 80019c4:	f000 f9d8 	bl	8001d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e04e      	b.n	8001aee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_TIM_Base_Start_IT+0xc4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d022      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d018      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00e      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d009      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d004      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d111      	bne.n	8001adc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d010      	beq.n	8001aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ada:	e007      	b.n	8001aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40000400 	.word	0x40000400
 8001b04:	40000800 	.word	0x40000800
 8001b08:	40000c00 	.word	0x40000c00
 8001b0c:	40010400 	.word	0x40010400
 8001b10:	40014000 	.word	0x40014000
 8001b14:	40001800 	.word	0x40001800

08001b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d122      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d11b      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0202 	mvn.w	r2, #2
 8001b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8ee 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8e0 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8f1 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0204 	mvn.w	r2, #4
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8c4 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f8b6 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8c7 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d122      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d11b      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0208 	mvn.w	r2, #8
 8001bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f89a 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f88c 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f89d 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0210 	mvn.w	r2, #16
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2208      	movs	r2, #8
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f870 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f862 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f873 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d10e      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0201 	mvn.w	r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fd6c 	bl	8000774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b80      	cmp	r3, #128	; 0x80
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb4:	2b80      	cmp	r3, #128	; 0x80
 8001cb6:	d107      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f902 	bl	8001ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	2b40      	cmp	r3, #64	; 0x40
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f838 	bl	8001d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d107      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0220 	mvn.w	r2, #32
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8cc 	bl	8001eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d96:	d00f      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3d      	ldr	r2, [pc, #244]	; (8001e90 <TIM_Base_SetConfig+0x118>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00b      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <TIM_Base_SetConfig+0x11c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <TIM_Base_SetConfig+0x120>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d003      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd8:	d027      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <TIM_Base_SetConfig+0x118>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d023      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <TIM_Base_SetConfig+0x11c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <TIM_Base_SetConfig+0x120>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a29      	ldr	r2, [pc, #164]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d017      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <TIM_Base_SetConfig+0x128>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <TIM_Base_SetConfig+0x12c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00f      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <TIM_Base_SetConfig+0x130>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <TIM_Base_SetConfig+0x134>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <TIM_Base_SetConfig+0x138>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <TIM_Base_SetConfig+0x13c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d108      	bne.n	8001e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0xf8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d103      	bne.n	8001e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	615a      	str	r2, [r3, #20]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	40014800 	.word	0x40014800
 8001eac:	40001800 	.word	0x40001800
 8001eb0:	40001c00 	.word	0x40001c00
 8001eb4:	40002000 	.word	0x40002000

08001eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e03f      	b.n	8001f72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fc78 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	; 0x24
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f929 	bl	800217c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b08a      	sub	sp, #40	; 0x28
 8001f7e:	af02      	add	r7, sp, #8
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d17c      	bne.n	8002094 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_UART_Transmit+0x2c>
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e075      	b.n	8002096 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Transmit+0x3e>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e06e      	b.n	8002096 <HAL_UART_Transmit+0x11c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2221      	movs	r2, #33	; 0x21
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fce:	f7fe fd6b 	bl	8000aa8 <HAL_GetTick>
 8001fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	88fa      	ldrh	r2, [r7, #6]
 8001fd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	88fa      	ldrh	r2, [r7, #6]
 8001fde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe8:	d108      	bne.n	8001ffc <HAL_UART_Transmit+0x82>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d104      	bne.n	8001ffc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	e003      	b.n	8002004 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800200c:	e02a      	b.n	8002064 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f840 	bl	800209e <UART_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e036      	b.n	8002096 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10b      	bne.n	8002046 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800203c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	3302      	adds	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e007      	b.n	8002056 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	3301      	adds	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1cf      	bne.n	800200e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f810 	bl	800209e <UART_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e006      	b.n	8002096 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	3720      	adds	r7, #32
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b090      	sub	sp, #64	; 0x40
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	4613      	mov	r3, r2
 80020ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ae:	e050      	b.n	8002152 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d04c      	beq.n	8002152 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <UART_WaitOnFlagUntilTimeout+0x30>
 80020be:	f7fe fcf3 	bl	8000aa8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d241      	bcs.n	8002152 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	330c      	adds	r3, #12
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	e853 3f00 	ldrex	r3, [r3]
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	330c      	adds	r3, #12
 80020ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ee:	637a      	str	r2, [r7, #52]	; 0x34
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f6:	e841 2300 	strex	r3, r2, [r1]
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1e5      	bne.n	80020ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3314      	adds	r3, #20
 8002108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	e853 3f00 	ldrex	r3, [r3]
 8002110:	613b      	str	r3, [r7, #16]
   return(result);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3314      	adds	r3, #20
 8002120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002122:	623a      	str	r2, [r7, #32]
 8002124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002126:	69f9      	ldr	r1, [r7, #28]
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	e841 2300 	strex	r3, r2, [r1]
 800212e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e5      	bne.n	8002102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e00f      	b.n	8002172 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d09f      	beq.n	80020b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3740      	adds	r7, #64	; 0x40
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b0c0      	sub	sp, #256	; 0x100
 8002182:	af00      	add	r7, sp, #0
 8002184:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002198:	68d9      	ldr	r1, [r3, #12]
 800219a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	ea40 0301 	orr.w	r3, r0, r1
 80021a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021d4:	f021 010c 	bic.w	r1, r1, #12
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021e2:	430b      	orrs	r3, r1
 80021e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f6:	6999      	ldr	r1, [r3, #24]
 80021f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	ea40 0301 	orr.w	r3, r0, r1
 8002202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b8f      	ldr	r3, [pc, #572]	; (8002448 <UART_SetConfig+0x2cc>)
 800220c:	429a      	cmp	r2, r3
 800220e:	d005      	beq.n	800221c <UART_SetConfig+0xa0>
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b8d      	ldr	r3, [pc, #564]	; (800244c <UART_SetConfig+0x2d0>)
 8002218:	429a      	cmp	r2, r3
 800221a:	d104      	bne.n	8002226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800221c:	f7ff fb6c 	bl	80018f8 <HAL_RCC_GetPCLK2Freq>
 8002220:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002224:	e003      	b.n	800222e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002226:	f7ff fb53 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 800222a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800222e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002238:	f040 810c 	bne.w	8002454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800223c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002240:	2200      	movs	r2, #0
 8002242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002246:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800224a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800224e:	4622      	mov	r2, r4
 8002250:	462b      	mov	r3, r5
 8002252:	1891      	adds	r1, r2, r2
 8002254:	65b9      	str	r1, [r7, #88]	; 0x58
 8002256:	415b      	adcs	r3, r3
 8002258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800225a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800225e:	4621      	mov	r1, r4
 8002260:	eb12 0801 	adds.w	r8, r2, r1
 8002264:	4629      	mov	r1, r5
 8002266:	eb43 0901 	adc.w	r9, r3, r1
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800227a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227e:	4690      	mov	r8, r2
 8002280:	4699      	mov	r9, r3
 8002282:	4623      	mov	r3, r4
 8002284:	eb18 0303 	adds.w	r3, r8, r3
 8002288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800228c:	462b      	mov	r3, r5
 800228e:	eb49 0303 	adc.w	r3, r9, r3
 8002292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80022a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80022aa:	460b      	mov	r3, r1
 80022ac:	18db      	adds	r3, r3, r3
 80022ae:	653b      	str	r3, [r7, #80]	; 0x50
 80022b0:	4613      	mov	r3, r2
 80022b2:	eb42 0303 	adc.w	r3, r2, r3
 80022b6:	657b      	str	r3, [r7, #84]	; 0x54
 80022b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022c0:	f7fd ff86 	bl	80001d0 <__aeabi_uldivmod>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4b61      	ldr	r3, [pc, #388]	; (8002450 <UART_SetConfig+0x2d4>)
 80022ca:	fba3 2302 	umull	r2, r3, r3, r2
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	011c      	lsls	r4, r3, #4
 80022d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022e4:	4642      	mov	r2, r8
 80022e6:	464b      	mov	r3, r9
 80022e8:	1891      	adds	r1, r2, r2
 80022ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80022ec:	415b      	adcs	r3, r3
 80022ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022f4:	4641      	mov	r1, r8
 80022f6:	eb12 0a01 	adds.w	sl, r2, r1
 80022fa:	4649      	mov	r1, r9
 80022fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800230c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002314:	4692      	mov	sl, r2
 8002316:	469b      	mov	fp, r3
 8002318:	4643      	mov	r3, r8
 800231a:	eb1a 0303 	adds.w	r3, sl, r3
 800231e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002322:	464b      	mov	r3, r9
 8002324:	eb4b 0303 	adc.w	r3, fp, r3
 8002328:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002338:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800233c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002340:	460b      	mov	r3, r1
 8002342:	18db      	adds	r3, r3, r3
 8002344:	643b      	str	r3, [r7, #64]	; 0x40
 8002346:	4613      	mov	r3, r2
 8002348:	eb42 0303 	adc.w	r3, r2, r3
 800234c:	647b      	str	r3, [r7, #68]	; 0x44
 800234e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002356:	f7fd ff3b 	bl	80001d0 <__aeabi_uldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4611      	mov	r1, r2
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <UART_SetConfig+0x2d4>)
 8002362:	fba3 2301 	umull	r2, r3, r3, r1
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2264      	movs	r2, #100	; 0x64
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	1acb      	subs	r3, r1, r3
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <UART_SetConfig+0x2d4>)
 8002378:	fba3 2302 	umull	r2, r3, r3, r2
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002384:	441c      	add	r4, r3
 8002386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238a:	2200      	movs	r2, #0
 800238c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002390:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002398:	4642      	mov	r2, r8
 800239a:	464b      	mov	r3, r9
 800239c:	1891      	adds	r1, r2, r2
 800239e:	63b9      	str	r1, [r7, #56]	; 0x38
 80023a0:	415b      	adcs	r3, r3
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023a8:	4641      	mov	r1, r8
 80023aa:	1851      	adds	r1, r2, r1
 80023ac:	6339      	str	r1, [r7, #48]	; 0x30
 80023ae:	4649      	mov	r1, r9
 80023b0:	414b      	adcs	r3, r1
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80023c0:	4659      	mov	r1, fp
 80023c2:	00cb      	lsls	r3, r1, #3
 80023c4:	4651      	mov	r1, sl
 80023c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ca:	4651      	mov	r1, sl
 80023cc:	00ca      	lsls	r2, r1, #3
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	4642      	mov	r2, r8
 80023d6:	189b      	adds	r3, r3, r2
 80023d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023dc:	464b      	mov	r3, r9
 80023de:	460a      	mov	r2, r1
 80023e0:	eb42 0303 	adc.w	r3, r2, r3
 80023e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023fc:	460b      	mov	r3, r1
 80023fe:	18db      	adds	r3, r3, r3
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
 8002402:	4613      	mov	r3, r2
 8002404:	eb42 0303 	adc.w	r3, r2, r3
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800240e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002412:	f7fd fedd 	bl	80001d0 <__aeabi_uldivmod>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <UART_SetConfig+0x2d4>)
 800241c:	fba3 1302 	umull	r1, r3, r3, r2
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	2164      	movs	r1, #100	; 0x64
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	3332      	adds	r3, #50	; 0x32
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <UART_SetConfig+0x2d4>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	f003 0207 	and.w	r2, r3, #7
 800243a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4422      	add	r2, r4
 8002442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002444:	e105      	b.n	8002652 <UART_SetConfig+0x4d6>
 8002446:	bf00      	nop
 8002448:	40011000 	.word	0x40011000
 800244c:	40011400 	.word	0x40011400
 8002450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002458:	2200      	movs	r2, #0
 800245a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800245e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002466:	4642      	mov	r2, r8
 8002468:	464b      	mov	r3, r9
 800246a:	1891      	adds	r1, r2, r2
 800246c:	6239      	str	r1, [r7, #32]
 800246e:	415b      	adcs	r3, r3
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002476:	4641      	mov	r1, r8
 8002478:	1854      	adds	r4, r2, r1
 800247a:	4649      	mov	r1, r9
 800247c:	eb43 0501 	adc.w	r5, r3, r1
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	00eb      	lsls	r3, r5, #3
 800248a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248e:	00e2      	lsls	r2, r4, #3
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
 8002494:	4643      	mov	r3, r8
 8002496:	18e3      	adds	r3, r4, r3
 8002498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800249c:	464b      	mov	r3, r9
 800249e:	eb45 0303 	adc.w	r3, r5, r3
 80024a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024c2:	4629      	mov	r1, r5
 80024c4:	008b      	lsls	r3, r1, #2
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024cc:	4621      	mov	r1, r4
 80024ce:	008a      	lsls	r2, r1, #2
 80024d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80024d4:	f7fd fe7c 	bl	80001d0 <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4b60      	ldr	r3, [pc, #384]	; (8002660 <UART_SetConfig+0x4e4>)
 80024de:	fba3 2302 	umull	r2, r3, r3, r2
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	011c      	lsls	r4, r3, #4
 80024e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ea:	2200      	movs	r2, #0
 80024ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024f8:	4642      	mov	r2, r8
 80024fa:	464b      	mov	r3, r9
 80024fc:	1891      	adds	r1, r2, r2
 80024fe:	61b9      	str	r1, [r7, #24]
 8002500:	415b      	adcs	r3, r3
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002508:	4641      	mov	r1, r8
 800250a:	1851      	adds	r1, r2, r1
 800250c:	6139      	str	r1, [r7, #16]
 800250e:	4649      	mov	r1, r9
 8002510:	414b      	adcs	r3, r1
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002520:	4659      	mov	r1, fp
 8002522:	00cb      	lsls	r3, r1, #3
 8002524:	4651      	mov	r1, sl
 8002526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252a:	4651      	mov	r1, sl
 800252c:	00ca      	lsls	r2, r1, #3
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	4603      	mov	r3, r0
 8002534:	4642      	mov	r2, r8
 8002536:	189b      	adds	r3, r3, r2
 8002538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800253c:	464b      	mov	r3, r9
 800253e:	460a      	mov	r2, r1
 8002540:	eb42 0303 	adc.w	r3, r2, r3
 8002544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	67bb      	str	r3, [r7, #120]	; 0x78
 8002552:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002560:	4649      	mov	r1, r9
 8002562:	008b      	lsls	r3, r1, #2
 8002564:	4641      	mov	r1, r8
 8002566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800256a:	4641      	mov	r1, r8
 800256c:	008a      	lsls	r2, r1, #2
 800256e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002572:	f7fd fe2d 	bl	80001d0 <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4b39      	ldr	r3, [pc, #228]	; (8002660 <UART_SetConfig+0x4e4>)
 800257c:	fba3 1302 	umull	r1, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	2164      	movs	r1, #100	; 0x64
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	3332      	adds	r3, #50	; 0x32
 800258e:	4a34      	ldr	r2, [pc, #208]	; (8002660 <UART_SetConfig+0x4e4>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259a:	441c      	add	r4, r3
 800259c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a0:	2200      	movs	r2, #0
 80025a2:	673b      	str	r3, [r7, #112]	; 0x70
 80025a4:	677a      	str	r2, [r7, #116]	; 0x74
 80025a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80025aa:	4642      	mov	r2, r8
 80025ac:	464b      	mov	r3, r9
 80025ae:	1891      	adds	r1, r2, r2
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	415b      	adcs	r3, r3
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ba:	4641      	mov	r1, r8
 80025bc:	1851      	adds	r1, r2, r1
 80025be:	6039      	str	r1, [r7, #0]
 80025c0:	4649      	mov	r1, r9
 80025c2:	414b      	adcs	r3, r1
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025d2:	4659      	mov	r1, fp
 80025d4:	00cb      	lsls	r3, r1, #3
 80025d6:	4651      	mov	r1, sl
 80025d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025dc:	4651      	mov	r1, sl
 80025de:	00ca      	lsls	r2, r1, #3
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	4603      	mov	r3, r0
 80025e6:	4642      	mov	r2, r8
 80025e8:	189b      	adds	r3, r3, r2
 80025ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ec:	464b      	mov	r3, r9
 80025ee:	460a      	mov	r2, r1
 80025f0:	eb42 0303 	adc.w	r3, r2, r3
 80025f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002600:	667a      	str	r2, [r7, #100]	; 0x64
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800260e:	4649      	mov	r1, r9
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	4641      	mov	r1, r8
 8002614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002618:	4641      	mov	r1, r8
 800261a:	008a      	lsls	r2, r1, #2
 800261c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002620:	f7fd fdd6 	bl	80001d0 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <UART_SetConfig+0x4e4>)
 800262a:	fba3 1302 	umull	r1, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2164      	movs	r1, #100	; 0x64
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	3332      	adds	r3, #50	; 0x32
 800263c:	4a08      	ldr	r2, [pc, #32]	; (8002660 <UART_SetConfig+0x4e4>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	f003 020f 	and.w	r2, r3, #15
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4422      	add	r2, r4
 8002650:	609a      	str	r2, [r3, #8]
}
 8002652:	bf00      	nop
 8002654:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265e:	bf00      	nop
 8002660:	51eb851f 	.word	0x51eb851f

08002664 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Handler+0x1c>)
 800266a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800266c:	f001 fc26 	bl	8003ebc <xTaskGetSchedulerState>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002676:	f002 fa0f 	bl	8004a98 <xPortSysTickHandler>
  }
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002694:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <vApplicationGetIdleTaskMemory+0x30>)
 800269a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	601a      	str	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000128 	.word	0x20000128
 80026b4:	200001e4 	.word	0x200001e4

080026b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80026c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <vApplicationGetTimerTaskMemory+0x30>)
 80026ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	200003e4 	.word	0x200003e4
 80026e8:	200004a0 	.word	0x200004a0

080026ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f103 0208 	add.w	r2, r3, #8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f103 0208 	add.w	r2, r3, #8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f103 0208 	add.w	r2, r3, #8
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d103      	bne.n	80027ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e00c      	b.n	80027c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3308      	adds	r3, #8
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e002      	b.n	80027bc <vListInsert+0x2e>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d2f6      	bcs.n	80027b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	601a      	str	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6892      	ldr	r2, [r2, #8]
 8002816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6852      	ldr	r2, [r2, #4]
 8002820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d103      	bne.n	8002834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800287e:	f002 f879 	bl	8004974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	68f9      	ldr	r1, [r7, #12]
 800288c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	441a      	add	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	3b01      	subs	r3, #1
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	441a      	add	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	22ff      	movs	r2, #255	; 0xff
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d114      	bne.n	80028fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01a      	beq.n	8002912 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3310      	adds	r3, #16
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 f929 	bl	8003b38 <xTaskRemoveFromEventList>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <xQueueGenericReset+0xcc>)
 80028ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	e009      	b.n	8002912 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3310      	adds	r3, #16
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fef2 	bl	80026ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3324      	adds	r3, #36	; 0x24
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff feed 	bl	80026ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002912:	f002 f85f 	bl	80049d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	e000ed04 	.word	0xe000ed04

08002924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	; 0x38
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <xQueueGenericCreateStatic+0x52>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <xQueueGenericCreateStatic+0x56>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <xQueueGenericCreateStatic+0x58>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	623b      	str	r3, [r7, #32]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <xQueueGenericCreateStatic+0x7e>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <xQueueGenericCreateStatic+0x82>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <xQueueGenericCreateStatic+0x84>
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	61fb      	str	r3, [r7, #28]
}
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029c2:	2350      	movs	r3, #80	; 0x50
 80029c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b50      	cmp	r3, #80	; 0x50
 80029ca:	d00a      	beq.n	80029e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	61bb      	str	r3, [r7, #24]
}
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f805 	bl	8002a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3730      	adds	r7, #48	; 0x30
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e002      	b.n	8002a36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a42:	2101      	movs	r1, #1
 8002a44:	69b8      	ldr	r0, [r7, #24]
 8002a46:	f7ff ff05 	bl	8002854 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <xQueueGenericSend+0x32>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <xQueueGenericSend+0x40>
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <xQueueGenericSend+0x44>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <xQueueGenericSend+0x46>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <xQueueGenericSend+0x60>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d103      	bne.n	8002aca <xQueueGenericSend+0x6e>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <xQueueGenericSend+0x72>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <xQueueGenericSend+0x74>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xQueueGenericSend+0x8e>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	623b      	str	r3, [r7, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aea:	f001 f9e7 	bl	8003ebc <xTaskGetSchedulerState>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <xQueueGenericSend+0x9e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <xQueueGenericSend+0xa2>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <xQueueGenericSend+0xa4>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <xQueueGenericSend+0xbe>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	61fb      	str	r3, [r7, #28]
}
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b1a:	f001 ff2b 	bl	8004974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <xQueueGenericSend+0xd4>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d129      	bne.n	8002b84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b36:	f000 fa0b 	bl	8002f50 <prvCopyDataToQueue>
 8002b3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	3324      	adds	r3, #36	; 0x24
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fff5 	bl	8003b38 <xTaskRemoveFromEventList>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b54:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <xQueueGenericSend+0x1f8>)
 8002b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	e00a      	b.n	8002b7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <xQueueGenericSend+0x1f8>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b7c:	f001 ff2a 	bl	80049d4 <vPortExitCritical>
				return pdPASS;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e063      	b.n	8002c4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b8a:	f001 ff23 	bl	80049d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e05c      	b.n	8002c4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 f82f 	bl	8003c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ba6:	f001 ff15 	bl	80049d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002baa:	f000 fd9b 	bl	80036e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bae:	f001 fee1 	bl	8004974 <vPortEnterCritical>
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d103      	bne.n	8002bc8 <xQueueGenericSend+0x16c>
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d103      	bne.n	8002bde <xQueueGenericSend+0x182>
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bde:	f001 fef9 	bl	80049d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be2:	1d3a      	adds	r2, r7, #4
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 f81e 	bl	8003c2c <xTaskCheckForTimeOut>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d124      	bne.n	8002c40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf8:	f000 faa2 	bl	8003140 <prvIsQueueFull>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d018      	beq.n	8002c34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	3310      	adds	r3, #16
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 ff44 	bl	8003a98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c12:	f000 fa2d 	bl	8003070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c16:	f000 fd73 	bl	8003700 <xTaskResumeAll>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f af7c 	bne.w	8002b1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <xQueueGenericSend+0x1f8>)
 8002c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	e772      	b.n	8002b1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c36:	f000 fa1b 	bl	8003070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c3a:	f000 fd61 	bl	8003700 <xTaskResumeAll>
 8002c3e:	e76c      	b.n	8002b1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c42:	f000 fa15 	bl	8003070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c46:	f000 fd5b 	bl	8003700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3738      	adds	r7, #56	; 0x38
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	e000ed04 	.word	0xe000ed04

08002c58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b090      	sub	sp, #64	; 0x40
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <xQueueGenericSendFromISR+0x3c>
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <xQueueGenericSendFromISR+0x40>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <xQueueGenericSendFromISR+0x42>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d103      	bne.n	8002cc2 <xQueueGenericSendFromISR+0x6a>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <xQueueGenericSendFromISR+0x6e>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <xQueueGenericSendFromISR+0x70>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	623b      	str	r3, [r7, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ce2:	f001 ff29 	bl	8004b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ce6:	f3ef 8211 	mrs	r2, BASEPRI
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	61fa      	str	r2, [r7, #28]
 8002cfc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <xQueueGenericSendFromISR+0xbc>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d12f      	bne.n	8002d74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d2a:	f000 f911 	bl	8002f50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d36:	d112      	bne.n	8002d5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d016      	beq.n	8002d6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	3324      	adds	r3, #36	; 0x24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fef7 	bl	8003b38 <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e007      	b.n	8002d6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d62:	3301      	adds	r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	b25a      	sxtb	r2, r3
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d72:	e001      	b.n	8002d78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3740      	adds	r7, #64	; 0x40
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	; 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <xQueueReceive+0x30>
	__asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	623b      	str	r3, [r7, #32]
}
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <xQueueReceive+0x3e>
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <xQueueReceive+0x42>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <xQueueReceive+0x44>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <xQueueReceive+0x5e>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	61fb      	str	r3, [r7, #28]
}
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dee:	f001 f865 	bl	8003ebc <xTaskGetSchedulerState>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <xQueueReceive+0x6e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <xQueueReceive+0x72>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xQueueReceive+0x74>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueReceive+0x8e>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	61bb      	str	r3, [r7, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e1e:	f001 fda9 	bl	8004974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01f      	beq.n	8002e6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f000 f8f7 	bl	8003024 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	1e5a      	subs	r2, r3, #1
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00f      	beq.n	8002e66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	3310      	adds	r3, #16
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fe74 	bl	8003b38 <xTaskRemoveFromEventList>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <xQueueReceive+0x1bc>)
 8002e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e66:	f001 fdb5 	bl	80049d4 <vPortExitCritical>
				return pdPASS;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e069      	b.n	8002f42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d103      	bne.n	8002e7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e74:	f001 fdae 	bl	80049d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e062      	b.n	8002f42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 feba 	bl	8003c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e90:	f001 fda0 	bl	80049d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e94:	f000 fc26 	bl	80036e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e98:	f001 fd6c 	bl	8004974 <vPortEnterCritical>
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d103      	bne.n	8002eb2 <xQueueReceive+0x122>
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d103      	bne.n	8002ec8 <xQueueReceive+0x138>
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec8:	f001 fd84 	bl	80049d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ecc:	1d3a      	adds	r2, r7, #4
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fea9 	bl	8003c2c <xTaskCheckForTimeOut>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d123      	bne.n	8002f28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee2:	f000 f917 	bl	8003114 <prvIsQueueEmpty>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d017      	beq.n	8002f1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	3324      	adds	r3, #36	; 0x24
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fdcf 	bl	8003a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efc:	f000 f8b8 	bl	8003070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f00:	f000 fbfe 	bl	8003700 <xTaskResumeAll>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d189      	bne.n	8002e1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <xQueueReceive+0x1bc>)
 8002f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	e780      	b.n	8002e1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f1e:	f000 f8a7 	bl	8003070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f22:	f000 fbed 	bl	8003700 <xTaskResumeAll>
 8002f26:	e77a      	b.n	8002e1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2a:	f000 f8a1 	bl	8003070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f2e:	f000 fbe7 	bl	8003700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f34:	f000 f8ee 	bl	8003114 <prvIsQueueEmpty>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f43f af6f 	beq.w	8002e1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3730      	adds	r7, #48	; 0x30
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d14d      	bne.n	8003012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ffbc 	bl	8003ef8 <xTaskPriorityDisinherit>
 8002f80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e043      	b.n	8003012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d119      	bne.n	8002fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6858      	ldr	r0, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	f002 f81c 	bl	8004fd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d32b      	bcc.n	8003012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	e026      	b.n	8003012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68d8      	ldr	r0, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	f002 f802 	bl	8004fd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	425b      	negs	r3, r3
 8002fde:	441a      	add	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	441a      	add	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d105      	bne.n	8003012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3b01      	subs	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800301a:	697b      	ldr	r3, [r7, #20]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	441a      	add	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d303      	bcc.n	8003058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68d9      	ldr	r1, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	461a      	mov	r2, r3
 8003062:	6838      	ldr	r0, [r7, #0]
 8003064:	f001 ffb8 	bl	8004fd8 <memcpy>
	}
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003078:	f001 fc7c 	bl	8004974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003084:	e011      	b.n	80030aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3324      	adds	r3, #36	; 0x24
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fd50 	bl	8003b38 <xTaskRemoveFromEventList>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800309e:	f000 fe27 	bl	8003cf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	dce9      	bgt.n	8003086 <prvUnlockQueue+0x16>
 80030b2:	e000      	b.n	80030b6 <prvUnlockQueue+0x46>
					break;
 80030b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	22ff      	movs	r2, #255	; 0xff
 80030ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030be:	f001 fc89 	bl	80049d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030c2:	f001 fc57 	bl	8004974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ce:	e011      	b.n	80030f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3310      	adds	r3, #16
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fd2b 	bl	8003b38 <xTaskRemoveFromEventList>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030e8:	f000 fe02 	bl	8003cf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030ec:	7bbb      	ldrb	r3, [r7, #14]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	dce9      	bgt.n	80030d0 <prvUnlockQueue+0x60>
 80030fc:	e000      	b.n	8003100 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003108:	f001 fc64 	bl	80049d4 <vPortExitCritical>
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800311c:	f001 fc2a 	bl	8004974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003128:	2301      	movs	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e001      	b.n	8003132 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003132:	f001 fc4f 	bl	80049d4 <vPortExitCritical>

	return xReturn;
 8003136:	68fb      	ldr	r3, [r7, #12]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003148:	f001 fc14 	bl	8004974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	429a      	cmp	r2, r3
 8003156:	d102      	bne.n	800315e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003158:	2301      	movs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e001      	b.n	8003162 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003162:	f001 fc37 	bl	80049d4 <vPortExitCritical>

	return xReturn;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e014      	b.n	80031aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003180:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <vQueueAddToRegistry+0x50>)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800318c:	490c      	ldr	r1, [pc, #48]	; (80031c0 <vQueueAddToRegistry+0x50>)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <vQueueAddToRegistry+0x50>)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031a2:	e006      	b.n	80031b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b07      	cmp	r3, #7
 80031ae:	d9e7      	bls.n	8003180 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	200008a0 	.word	0x200008a0

080031c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031d4:	f001 fbce 	bl	8004974 <vPortEnterCritical>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d103      	bne.n	80031ee <vQueueWaitForMessageRestricted+0x2a>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d103      	bne.n	8003204 <vQueueWaitForMessageRestricted+0x40>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003204:	f001 fbe6 	bl	80049d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3324      	adds	r3, #36	; 0x24
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fc61 	bl	8003ae0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff26 	bl	8003070 <prvUnlockQueue>
	}
 8003224:	bf00      	nop
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08e      	sub	sp, #56	; 0x38
 8003230:	af04      	add	r7, sp, #16
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	623b      	str	r3, [r7, #32]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <xTaskCreateStatic+0x46>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	61fb      	str	r3, [r7, #28]
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003272:	23bc      	movs	r3, #188	; 0xbc
 8003274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2bbc      	cmp	r3, #188	; 0xbc
 800327a:	d00a      	beq.n	8003292 <xTaskCreateStatic+0x66>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	61bb      	str	r3, [r7, #24]
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003292:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01e      	beq.n	80032d8 <xTaskCreateStatic+0xac>
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032b2:	2300      	movs	r3, #0
 80032b4:	9303      	str	r3, [sp, #12]
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	9302      	str	r3, [sp, #8]
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f850 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032d2:	f000 f8f3 	bl	80034bc <prvAddNewTaskToReadyList>
 80032d6:	e001      	b.n	80032dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032dc:	697b      	ldr	r3, [r7, #20]
	}
 80032de:	4618      	mov	r0, r3
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08c      	sub	sp, #48	; 0x30
 80032ea:	af04      	add	r7, sp, #16
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fc5c 	bl	8004bb8 <pvPortMalloc>
 8003300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003308:	20bc      	movs	r0, #188	; 0xbc
 800330a:	f001 fc55 	bl	8004bb8 <pvPortMalloc>
 800330e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
 800331c:	e005      	b.n	800332a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f001 fd16 	bl	8004d50 <vPortFree>
 8003324:	e001      	b.n	800332a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d017      	beq.n	8003360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	2300      	movs	r3, #0
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f80e 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003354:	69f8      	ldr	r0, [r7, #28]
 8003356:	f000 f8b1 	bl	80034bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800335a:	2301      	movs	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e002      	b.n	8003366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295
 8003364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003366:	69bb      	ldr	r3, [r7, #24]
	}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	461a      	mov	r2, r3
 8003388:	21a5      	movs	r1, #165	; 0xa5
 800338a:	f001 fe33 	bl	8004ff4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003398:	3b01      	subs	r3, #1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	617b      	str	r3, [r7, #20]
}
 80033c4:	bf00      	nop
 80033c6:	e7fe      	b.n	80033c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01f      	beq.n	800340e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e012      	b.n	80033fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	7819      	ldrb	r1, [r3, #0]
 80033dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	3334      	adds	r3, #52	; 0x34
 80033e4:	460a      	mov	r2, r1
 80033e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d006      	beq.n	8003402 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b0f      	cmp	r3, #15
 80033fe:	d9e9      	bls.n	80033d4 <prvInitialiseNewTask+0x64>
 8003400:	e000      	b.n	8003404 <prvInitialiseNewTask+0x94>
			{
				break;
 8003402:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800340c:	e003      	b.n	8003416 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	2b37      	cmp	r3, #55	; 0x37
 800341a:	d901      	bls.n	8003420 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800341c:	2337      	movs	r3, #55	; 0x37
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	2200      	movs	r2, #0
 8003430:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	3304      	adds	r3, #4
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f978 	bl	800272c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	3318      	adds	r3, #24
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f973 	bl	800272c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2200      	movs	r2, #0
 8003468:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	3354      	adds	r3, #84	; 0x54
 8003470:	2260      	movs	r2, #96	; 0x60
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f001 fdbd 	bl	8004ff4 <memset>
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <prvInitialiseNewTask+0x140>)
 800347e:	659a      	str	r2, [r3, #88]	; 0x58
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <prvInitialiseNewTask+0x144>)
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <prvInitialiseNewTask+0x148>)
 800348a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	69b8      	ldr	r0, [r7, #24]
 8003492:	f001 f941 	bl	8004718 <pxPortInitialiseStack>
 8003496:	4602      	mov	r2, r0
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a8:	bf00      	nop
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	08005228 	.word	0x08005228
 80034b4:	08005248 	.word	0x08005248
 80034b8:	08005208 	.word	0x08005208

080034bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034c4:	f001 fa56 	bl	8004974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <prvAddNewTaskToReadyList+0xc4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <prvAddNewTaskToReadyList+0xc4>)
 80034d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034da:	4a2a      	ldr	r2, [pc, #168]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <prvAddNewTaskToReadyList+0xc4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d110      	bne.n	800350a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034e8:	f000 fc26 	bl	8003d38 <prvInitialiseTaskLists>
 80034ec:	e00d      	b.n	800350a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <prvAddNewTaskToReadyList+0xcc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d802      	bhi.n	800350a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <prvAddNewTaskToReadyList+0xd0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3301      	adds	r3, #1
 8003510:	4a1e      	ldr	r2, [pc, #120]	; (800358c <prvAddNewTaskToReadyList+0xd0>)
 8003512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <prvAddNewTaskToReadyList+0xd0>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <prvAddNewTaskToReadyList+0xd4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d903      	bls.n	8003530 <prvAddNewTaskToReadyList+0x74>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <prvAddNewTaskToReadyList+0xd4>)
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a15      	ldr	r2, [pc, #84]	; (8003594 <prvAddNewTaskToReadyList+0xd8>)
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7ff f8fd 	bl	8002746 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800354c:	f001 fa42 	bl	80049d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <prvAddNewTaskToReadyList+0xcc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	429a      	cmp	r2, r3
 8003564:	d207      	bcs.n	8003576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <prvAddNewTaskToReadyList+0xdc>)
 8003568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000db4 	.word	0x20000db4
 8003584:	200008e0 	.word	0x200008e0
 8003588:	20000dc0 	.word	0x20000dc0
 800358c:	20000dd0 	.word	0x20000dd0
 8003590:	20000dbc 	.word	0x20000dbc
 8003594:	200008e4 	.word	0x200008e4
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <vTaskDelay+0x60>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <vTaskDelay+0x30>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	60bb      	str	r3, [r7, #8]
}
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035cc:	f000 f88a 	bl	80036e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035d0:	2100      	movs	r1, #0
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fcfe 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035d8:	f000 f892 	bl	8003700 <xTaskResumeAll>
 80035dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <vTaskDelay+0x64>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000ddc 	.word	0x20000ddc
 8003600:	e000ed04 	.word	0xe000ed04

08003604 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003612:	463a      	mov	r2, r7
 8003614:	1d39      	adds	r1, r7, #4
 8003616:	f107 0308 	add.w	r3, r7, #8
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f832 	bl	8002684 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	9202      	str	r2, [sp, #8]
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	460a      	mov	r2, r1
 8003632:	4924      	ldr	r1, [pc, #144]	; (80036c4 <vTaskStartScheduler+0xc0>)
 8003634:	4824      	ldr	r0, [pc, #144]	; (80036c8 <vTaskStartScheduler+0xc4>)
 8003636:	f7ff fdf9 	bl	800322c <xTaskCreateStatic>
 800363a:	4603      	mov	r3, r0
 800363c:	4a23      	ldr	r2, [pc, #140]	; (80036cc <vTaskStartScheduler+0xc8>)
 800363e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <vTaskStartScheduler+0xc8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003648:	2301      	movs	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e001      	b.n	8003652 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003658:	f000 fd10 	bl	800407c <xTimerCreateTimerTask>
 800365c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d11b      	bne.n	800369c <vTaskStartScheduler+0x98>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	613b      	str	r3, [r7, #16]
}
 8003676:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <vTaskStartScheduler+0xcc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3354      	adds	r3, #84	; 0x54
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <vTaskStartScheduler+0xd0>)
 8003680:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <vTaskStartScheduler+0xd4>)
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <vTaskStartScheduler+0xd8>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <vTaskStartScheduler+0xdc>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003696:	f001 f8cb 	bl	8004830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800369a:	e00e      	b.n	80036ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d10a      	bne.n	80036ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	60fb      	str	r3, [r7, #12]
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <vTaskStartScheduler+0xb4>
}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	080051d8 	.word	0x080051d8
 80036c8:	08003d09 	.word	0x08003d09
 80036cc:	20000dd8 	.word	0x20000dd8
 80036d0:	200008e0 	.word	0x200008e0
 80036d4:	20000018 	.word	0x20000018
 80036d8:	20000dd4 	.word	0x20000dd4
 80036dc:	20000dc0 	.word	0x20000dc0
 80036e0:	20000db8 	.word	0x20000db8

080036e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <vTaskSuspendAll+0x18>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	4a03      	ldr	r2, [pc, #12]	; (80036fc <vTaskSuspendAll+0x18>)
 80036f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	20000ddc 	.word	0x20000ddc

08003700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800370e:	4b42      	ldr	r3, [pc, #264]	; (8003818 <xTaskResumeAll+0x118>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <xTaskResumeAll+0x2c>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	603b      	str	r3, [r7, #0]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800372c:	f001 f922 	bl	8004974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <xTaskResumeAll+0x118>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	4a38      	ldr	r2, [pc, #224]	; (8003818 <xTaskResumeAll+0x118>)
 8003738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <xTaskResumeAll+0x118>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d162      	bne.n	8003808 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003742:	4b36      	ldr	r3, [pc, #216]	; (800381c <xTaskResumeAll+0x11c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d05e      	beq.n	8003808 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800374a:	e02f      	b.n	80037ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <xTaskResumeAll+0x120>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3318      	adds	r3, #24
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff f851 	bl	8002800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f84c 	bl	8002800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <xTaskResumeAll+0x124>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d903      	bls.n	800377c <xTaskResumeAll+0x7c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <xTaskResumeAll+0x124>)
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4a27      	ldr	r2, [pc, #156]	; (8003828 <xTaskResumeAll+0x128>)
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fe ffd7 	bl	8002746 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <xTaskResumeAll+0x12c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <xTaskResumeAll+0x130>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <xTaskResumeAll+0x120>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1cb      	bne.n	800374c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ba:	f000 fb5f 	bl	8003e7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <xTaskResumeAll+0x134>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037ca:	f000 f847 	bl	800385c <xTaskIncrementTick>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <xTaskResumeAll+0x130>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3b01      	subs	r3, #1
 80037de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f1      	bne.n	80037ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <xTaskResumeAll+0x134>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <xTaskResumeAll+0x130>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <xTaskResumeAll+0x138>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003808:	f001 f8e4 	bl	80049d4 <vPortExitCritical>

	return xAlreadyYielded;
 800380c:	68bb      	ldr	r3, [r7, #8]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000ddc 	.word	0x20000ddc
 800381c:	20000db4 	.word	0x20000db4
 8003820:	20000d74 	.word	0x20000d74
 8003824:	20000dbc 	.word	0x20000dbc
 8003828:	200008e4 	.word	0x200008e4
 800382c:	200008e0 	.word	0x200008e0
 8003830:	20000dc8 	.word	0x20000dc8
 8003834:	20000dc4 	.word	0x20000dc4
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <xTaskGetTickCount+0x1c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000db8 	.word	0x20000db8

0800385c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003866:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <xTaskIncrementTick+0x148>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 808f 	bne.w	800398e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003870:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <xTaskIncrementTick+0x14c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003878:	4a4b      	ldr	r2, [pc, #300]	; (80039a8 <xTaskIncrementTick+0x14c>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d120      	bne.n	80038c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <xTaskIncrementTick+0x150>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
}
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <xTaskIncrementTick+0x46>
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <xTaskIncrementTick+0x150>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <xTaskIncrementTick+0x154>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3f      	ldr	r2, [pc, #252]	; (80039ac <xTaskIncrementTick+0x150>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4a3f      	ldr	r2, [pc, #252]	; (80039b0 <xTaskIncrementTick+0x154>)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a3d      	ldr	r2, [pc, #244]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	f000 fadb 	bl	8003e7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038c6:	4b3c      	ldr	r3, [pc, #240]	; (80039b8 <xTaskIncrementTick+0x15c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d349      	bcc.n	8003964 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <xTaskIncrementTick+0x150>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <xTaskIncrementTick+0x15c>)
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	601a      	str	r2, [r3, #0]
					break;
 80038e2:	e03f      	b.n	8003964 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e4:	4b31      	ldr	r3, [pc, #196]	; (80039ac <xTaskIncrementTick+0x150>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d203      	bcs.n	8003904 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038fc:	4a2e      	ldr	r2, [pc, #184]	; (80039b8 <xTaskIncrementTick+0x15c>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003902:	e02f      	b.n	8003964 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3304      	adds	r3, #4
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe ff79 	bl	8002800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3318      	adds	r3, #24
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe ff70 	bl	8002800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <xTaskIncrementTick+0x160>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d903      	bls.n	8003934 <xTaskIncrementTick+0xd8>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a22      	ldr	r2, [pc, #136]	; (80039bc <xTaskIncrementTick+0x160>)
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <xTaskIncrementTick+0x164>)
 8003942:	441a      	add	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7fe fefb 	bl	8002746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <xTaskIncrementTick+0x168>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	429a      	cmp	r2, r3
 800395c:	d3b8      	bcc.n	80038d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800395e:	2301      	movs	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003962:	e7b5      	b.n	80038d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003964:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <xTaskIncrementTick+0x168>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	4915      	ldr	r1, [pc, #84]	; (80039c0 <xTaskIncrementTick+0x164>)
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d901      	bls.n	8003980 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <xTaskIncrementTick+0x16c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e004      	b.n	8003998 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <xTaskIncrementTick+0x170>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <xTaskIncrementTick+0x170>)
 8003996:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003998:	697b      	ldr	r3, [r7, #20]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000ddc 	.word	0x20000ddc
 80039a8:	20000db8 	.word	0x20000db8
 80039ac:	20000d6c 	.word	0x20000d6c
 80039b0:	20000d70 	.word	0x20000d70
 80039b4:	20000dcc 	.word	0x20000dcc
 80039b8:	20000dd4 	.word	0x20000dd4
 80039bc:	20000dbc 	.word	0x20000dbc
 80039c0:	200008e4 	.word	0x200008e4
 80039c4:	200008e0 	.word	0x200008e0
 80039c8:	20000dc8 	.word	0x20000dc8
 80039cc:	20000dc4 	.word	0x20000dc4

080039d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039d6:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <vTaskSwitchContext+0xb0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039de:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <vTaskSwitchContext+0xb4>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039e4:	e046      	b.n	8003a74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80039e6:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <vTaskSwitchContext+0xb4>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ec:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <vTaskSwitchContext+0xb8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e010      	b.n	8003a16 <vTaskSwitchContext+0x46>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <vTaskSwitchContext+0x40>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	607b      	str	r3, [r7, #4]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <vTaskSwitchContext+0x3e>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	491d      	ldr	r1, [pc, #116]	; (8003a8c <vTaskSwitchContext+0xbc>)
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0e4      	beq.n	80039f4 <vTaskSwitchContext+0x24>
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <vTaskSwitchContext+0xbc>)
 8003a36:	4413      	add	r3, r2
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d104      	bne.n	8003a5a <vTaskSwitchContext+0x8a>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <vTaskSwitchContext+0xc0>)
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <vTaskSwitchContext+0xb8>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <vTaskSwitchContext+0xc0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3354      	adds	r3, #84	; 0x54
 8003a70:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <vTaskSwitchContext+0xc4>)
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	20000ddc 	.word	0x20000ddc
 8003a84:	20000dc8 	.word	0x20000dc8
 8003a88:	20000dbc 	.word	0x20000dbc
 8003a8c:	200008e4 	.word	0x200008e4
 8003a90:	200008e0 	.word	0x200008e0
 8003a94:	20000018 	.word	0x20000018

08003a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <vTaskPlaceOnEventList+0x44>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3318      	adds	r3, #24
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fe fe61 	bl	800278e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003acc:	2101      	movs	r1, #1
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	f000 fa80 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200008e0 	.word	0x200008e0

08003ae0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	617b      	str	r3, [r7, #20]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	4619      	mov	r1, r3
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7fe fe18 	bl	8002746 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	68b8      	ldr	r0, [r7, #8]
 8003b26:	f000 fa55 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
	}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200008e0 	.word	0x200008e0

08003b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60fb      	str	r3, [r7, #12]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	3318      	adds	r3, #24
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fe49 	bl	8002800 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <xTaskRemoveFromEventList+0xb0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11d      	bne.n	8003bb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fe40 	bl	8002800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <xTaskRemoveFromEventList+0xb4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d903      	bls.n	8003b94 <xTaskRemoveFromEventList+0x5c>
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4a16      	ldr	r2, [pc, #88]	; (8003bec <xTaskRemoveFromEventList+0xb4>)
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <xTaskRemoveFromEventList+0xb8>)
 8003ba2:	441a      	add	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f7fe fdcb 	bl	8002746 <vListInsertEnd>
 8003bb0:	e005      	b.n	8003bbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	480e      	ldr	r0, [pc, #56]	; (8003bf4 <xTaskRemoveFromEventList+0xbc>)
 8003bba:	f7fe fdc4 	bl	8002746 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <xTaskRemoveFromEventList+0xc0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d905      	bls.n	8003bd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <xTaskRemoveFromEventList+0xc4>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e001      	b.n	8003bdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bdc:	697b      	ldr	r3, [r7, #20]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000ddc 	.word	0x20000ddc
 8003bec:	20000dbc 	.word	0x20000dbc
 8003bf0:	200008e4 	.word	0x200008e4
 8003bf4:	20000d74 	.word	0x20000d74
 8003bf8:	200008e0 	.word	0x200008e0
 8003bfc:	20000dc8 	.word	0x20000dc8

08003c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <vTaskInternalSetTimeOutState+0x24>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <vTaskInternalSetTimeOutState+0x28>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	20000dcc 	.word	0x20000dcc
 8003c28:	20000db8 	.word	0x20000db8

08003c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	613b      	str	r3, [r7, #16]
}
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	60fb      	str	r3, [r7, #12]
}
 8003c6a:	bf00      	nop
 8003c6c:	e7fe      	b.n	8003c6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c6e:	f000 fe81 	bl	8004974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <xTaskCheckForTimeOut+0xbc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d102      	bne.n	8003c92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e023      	b.n	8003cda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <xTaskCheckForTimeOut+0xc0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d007      	beq.n	8003cae <xTaskCheckForTimeOut+0x82>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e015      	b.n	8003cda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d20b      	bcs.n	8003cd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	1ad2      	subs	r2, r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff9b 	bl	8003c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e004      	b.n	8003cda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cda:	f000 fe7b 	bl	80049d4 <vPortExitCritical>

	return xReturn;
 8003cde:	69fb      	ldr	r3, [r7, #28]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000db8 	.word	0x20000db8
 8003cec:	20000dcc 	.word	0x20000dcc

08003cf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <vTaskMissedYield+0x14>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000dc8 	.word	0x20000dc8

08003d08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d10:	f000 f852 	bl	8003db8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <prvIdleTask+0x28>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d9f9      	bls.n	8003d10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <prvIdleTask+0x2c>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d2c:	e7f0      	b.n	8003d10 <prvIdleTask+0x8>
 8003d2e:	bf00      	nop
 8003d30:	200008e4 	.word	0x200008e4
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	e00c      	b.n	8003d5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <prvInitialiseTaskLists+0x60>)
 8003d50:	4413      	add	r3, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fcca 	bl	80026ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b37      	cmp	r3, #55	; 0x37
 8003d62:	d9ef      	bls.n	8003d44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d64:	480d      	ldr	r0, [pc, #52]	; (8003d9c <prvInitialiseTaskLists+0x64>)
 8003d66:	f7fe fcc1 	bl	80026ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <prvInitialiseTaskLists+0x68>)
 8003d6c:	f7fe fcbe 	bl	80026ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d70:	480c      	ldr	r0, [pc, #48]	; (8003da4 <prvInitialiseTaskLists+0x6c>)
 8003d72:	f7fe fcbb 	bl	80026ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d76:	480c      	ldr	r0, [pc, #48]	; (8003da8 <prvInitialiseTaskLists+0x70>)
 8003d78:	f7fe fcb8 	bl	80026ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d7c:	480b      	ldr	r0, [pc, #44]	; (8003dac <prvInitialiseTaskLists+0x74>)
 8003d7e:	f7fe fcb5 	bl	80026ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <prvInitialiseTaskLists+0x78>)
 8003d84:	4a05      	ldr	r2, [pc, #20]	; (8003d9c <prvInitialiseTaskLists+0x64>)
 8003d86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <prvInitialiseTaskLists+0x7c>)
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <prvInitialiseTaskLists+0x68>)
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200008e4 	.word	0x200008e4
 8003d9c:	20000d44 	.word	0x20000d44
 8003da0:	20000d58 	.word	0x20000d58
 8003da4:	20000d74 	.word	0x20000d74
 8003da8:	20000d88 	.word	0x20000d88
 8003dac:	20000da0 	.word	0x20000da0
 8003db0:	20000d6c 	.word	0x20000d6c
 8003db4:	20000d70 	.word	0x20000d70

08003db8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dbe:	e019      	b.n	8003df4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dc0:	f000 fdd8 	bl	8004974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc4:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <prvCheckTasksWaitingTermination+0x50>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe fd15 	bl	8002800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <prvCheckTasksWaitingTermination+0x54>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <prvCheckTasksWaitingTermination+0x54>)
 8003dde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <prvCheckTasksWaitingTermination+0x58>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <prvCheckTasksWaitingTermination+0x58>)
 8003de8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dea:	f000 fdf3 	bl	80049d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f810 	bl	8003e14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <prvCheckTasksWaitingTermination+0x58>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e1      	bne.n	8003dc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000d88 	.word	0x20000d88
 8003e0c:	20000db4 	.word	0x20000db4
 8003e10:	20000d9c 	.word	0x20000d9c

08003e14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3354      	adds	r3, #84	; 0x54
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f8fd 	bl	8005020 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 ff8b 	bl	8004d50 <vPortFree>
				vPortFree( pxTCB );
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 ff88 	bl	8004d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e40:	e018      	b.n	8003e74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d103      	bne.n	8003e54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 ff7f 	bl	8004d50 <vPortFree>
	}
 8003e52:	e00f      	b.n	8003e74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d00a      	beq.n	8003e74 <prvDeleteTCB+0x60>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	60fb      	str	r3, [r7, #12]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <prvDeleteTCB+0x5e>
	}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <prvResetNextTaskUnblockTime+0x38>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e94:	e008      	b.n	8003ea8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <prvResetNextTaskUnblockTime+0x38>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20000d6c 	.word	0x20000d6c
 8003eb8:	20000dd4 	.word	0x20000dd4

08003ebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <xTaskGetSchedulerState+0x34>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	e008      	b.n	8003ee2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <xTaskGetSchedulerState+0x38>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	e001      	b.n	8003ee2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ee2:	687b      	ldr	r3, [r7, #4]
	}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000dc0 	.word	0x20000dc0
 8003ef4:	20000ddc 	.word	0x20000ddc

08003ef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d056      	beq.n	8003fbc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f0e:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <xTaskPriorityDisinherit+0xd0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d00a      	beq.n	8003f2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	60fb      	str	r3, [r7, #12]
}
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60bb      	str	r3, [r7, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	1e5a      	subs	r2, r3, #1
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d02c      	beq.n	8003fbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d128      	bne.n	8003fbc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fc46 	bl	8002800 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <xTaskPriorityDisinherit+0xd4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d903      	bls.n	8003f9c <xTaskPriorityDisinherit+0xa4>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <xTaskPriorityDisinherit+0xd4>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <xTaskPriorityDisinherit+0xd8>)
 8003faa:	441a      	add	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f7fe fbc7 	bl	8002746 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fbc:	697b      	ldr	r3, [r7, #20]
	}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200008e0 	.word	0x200008e0
 8003fcc:	20000dbc 	.word	0x20000dbc
 8003fd0:	200008e4 	.word	0x200008e4

08003fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe4:	4b20      	ldr	r3, [pc, #128]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fc08 	bl	8002800 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d10a      	bne.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4819      	ldr	r0, [pc, #100]	; (800406c <prvAddCurrentTaskToDelayedList+0x98>)
 8004008:	f7fe fb9d 	bl	8002746 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800400c:	e026      	b.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	429a      	cmp	r2, r3
 8004024:	d209      	bcs.n	800403a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f7fe fbab 	bl	800278e <vListInsert>
}
 8004038:	e010      	b.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7fe fba1 	bl	800278e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d202      	bcs.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000db8 	.word	0x20000db8
 8004068:	200008e0 	.word	0x200008e0
 800406c:	20000da0 	.word	0x20000da0
 8004070:	20000d70 	.word	0x20000d70
 8004074:	20000d6c 	.word	0x20000d6c
 8004078:	20000dd4 	.word	0x20000dd4

0800407c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004086:	f000 fb07 	bl	8004698 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <xTimerCreateTimerTask+0x80>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d021      	beq.n	80040d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800409a:	1d3a      	adds	r2, r7, #4
 800409c:	f107 0108 	add.w	r1, r7, #8
 80040a0:	f107 030c 	add.w	r3, r7, #12
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fb07 	bl	80026b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	9202      	str	r2, [sp, #8]
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	2302      	movs	r3, #2
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2300      	movs	r3, #0
 80040ba:	460a      	mov	r2, r1
 80040bc:	4910      	ldr	r1, [pc, #64]	; (8004100 <xTimerCreateTimerTask+0x84>)
 80040be:	4811      	ldr	r0, [pc, #68]	; (8004104 <xTimerCreateTimerTask+0x88>)
 80040c0:	f7ff f8b4 	bl	800322c <xTaskCreateStatic>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <xTimerCreateTimerTask+0x8c>)
 80040c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <xTimerCreateTimerTask+0x8c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	613b      	str	r3, [r7, #16]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040f2:	697b      	ldr	r3, [r7, #20]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000e10 	.word	0x20000e10
 8004100:	080051e0 	.word	0x080051e0
 8004104:	08004241 	.word	0x08004241
 8004108:	20000e14 	.word	0x20000e14

0800410c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	623b      	str	r3, [r7, #32]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <xTimerGenericCommand+0x98>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02a      	beq.n	8004198 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b05      	cmp	r3, #5
 8004152:	dc18      	bgt.n	8004186 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004154:	f7ff feb2 	bl	8003ebc <xTaskGetSchedulerState>
 8004158:	4603      	mov	r3, r0
 800415a:	2b02      	cmp	r3, #2
 800415c:	d109      	bne.n	8004172 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <xTimerGenericCommand+0x98>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f107 0110 	add.w	r1, r7, #16
 8004166:	2300      	movs	r3, #0
 8004168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416a:	f7fe fc77 	bl	8002a5c <xQueueGenericSend>
 800416e:	6278      	str	r0, [r7, #36]	; 0x24
 8004170:	e012      	b.n	8004198 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <xTimerGenericCommand+0x98>)
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	f107 0110 	add.w	r1, r7, #16
 800417a:	2300      	movs	r3, #0
 800417c:	2200      	movs	r2, #0
 800417e:	f7fe fc6d 	bl	8002a5c <xQueueGenericSend>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24
 8004184:	e008      	b.n	8004198 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <xTimerGenericCommand+0x98>)
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	f107 0110 	add.w	r1, r7, #16
 800418e:	2300      	movs	r3, #0
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	f7fe fd61 	bl	8002c58 <xQueueGenericSendFromISR>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800419a:	4618      	mov	r0, r3
 800419c:	3728      	adds	r7, #40	; 0x28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000e10 	.word	0x20000e10

080041a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <prvProcessExpiredTimer+0x94>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	3304      	adds	r3, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fb1d 	bl	8002800 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d022      	beq.n	800421a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	18d1      	adds	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	6978      	ldr	r0, [r7, #20]
 80041e2:	f000 f8d1 	bl	8004388 <prvInsertTimerInActiveList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01f      	beq.n	800422c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ec:	2300      	movs	r3, #0
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	2100      	movs	r1, #0
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	f7ff ff88 	bl	800410c <xTimerGenericCommand>
 80041fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d113      	bne.n	800422c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	4798      	blx	r3
}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000e08 	.word	0x20000e08

08004240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004248:	f107 0308 	add.w	r3, r7, #8
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f857 	bl	8004300 <prvGetNextExpireTime>
 8004252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4619      	mov	r1, r3
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f803 	bl	8004264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800425e:	f000 f8d5 	bl	800440c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004262:	e7f1      	b.n	8004248 <prvTimerTask+0x8>

08004264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800426e:	f7ff fa39 	bl	80036e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004272:	f107 0308 	add.w	r3, r7, #8
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f866 	bl	8004348 <prvSampleTimeNow>
 800427c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d130      	bne.n	80042e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <prvProcessTimerOrBlockTask+0x3c>
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	429a      	cmp	r2, r3
 8004290:	d806      	bhi.n	80042a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004292:	f7ff fa35 	bl	8003700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff85 	bl	80041a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800429e:	e024      	b.n	80042ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042a6:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <prvProcessTimerOrBlockTask+0x90>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <prvProcessTimerOrBlockTask+0x50>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <prvProcessTimerOrBlockTask+0x52>
 80042b4:	2300      	movs	r3, #0
 80042b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <prvProcessTimerOrBlockTask+0x94>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4619      	mov	r1, r3
 80042c6:	f7fe ff7d 	bl	80031c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042ca:	f7ff fa19 	bl	8003700 <xTaskResumeAll>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <prvProcessTimerOrBlockTask+0x98>)
 80042d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	f3bf 8f6f 	isb	sy
}
 80042e4:	e001      	b.n	80042ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042e6:	f7ff fa0b 	bl	8003700 <xTaskResumeAll>
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000e0c 	.word	0x20000e0c
 80042f8:	20000e10 	.word	0x20000e10
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <prvGetNextExpireTime+0x44>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <prvGetNextExpireTime+0x16>
 8004312:	2201      	movs	r2, #1
 8004314:	e000      	b.n	8004318 <prvGetNextExpireTime+0x18>
 8004316:	2200      	movs	r2, #0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <prvGetNextExpireTime+0x44>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e001      	b.n	8004334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000e08 	.word	0x20000e08

08004348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004350:	f7ff fa74 	bl	800383c <xTaskGetTickCount>
 8004354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <prvSampleTimeNow+0x3c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d205      	bcs.n	800436c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004360:	f000 f936 	bl	80045d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e002      	b.n	8004372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004372:	4a04      	ldr	r2, [pc, #16]	; (8004384 <prvSampleTimeNow+0x3c>)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004378:	68fb      	ldr	r3, [r7, #12]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000e18 	.word	0x20000e18

08004388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d812      	bhi.n	80043d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	1ad2      	subs	r2, r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e01b      	b.n	80043fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <prvInsertTimerInActiveList+0x7c>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7fe f9de 	bl	800278e <vListInsert>
 80043d2:	e012      	b.n	80043fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d206      	bcs.n	80043ea <prvInsertTimerInActiveList+0x62>
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043e4:	2301      	movs	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e007      	b.n	80043fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <prvInsertTimerInActiveList+0x80>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7fe f9ca 	bl	800278e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043fa:	697b      	ldr	r3, [r7, #20]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000e0c 	.word	0x20000e0c
 8004408:	20000e08 	.word	0x20000e08

0800440c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004412:	e0ca      	b.n	80045aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	da18      	bge.n	800444c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	3304      	adds	r3, #4
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	61fb      	str	r3, [r7, #28]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004442:	6850      	ldr	r0, [r2, #4]
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	4611      	mov	r1, r2
 800444a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f2c0 80aa 	blt.w	80045a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe f9cb 	bl	8002800 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800446a:	463b      	mov	r3, r7
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff6b 	bl	8004348 <prvSampleTimeNow>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b09      	cmp	r3, #9
 8004478:	f200 8097 	bhi.w	80045aa <prvProcessReceivedCommands+0x19e>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <prvProcessReceivedCommands+0x78>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044ad 	.word	0x080044ad
 8004490:	08004521 	.word	0x08004521
 8004494:	08004535 	.word	0x08004535
 8004498:	0800457f 	.word	0x0800457f
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044ad 	.word	0x080044ad
 80044a4:	08004521 	.word	0x08004521
 80044a8:	08004535 	.word	0x08004535
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	18d1      	adds	r1, r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044cc:	f7ff ff5c 	bl	8004388 <prvInsertTimerInActiveList>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d069      	beq.n	80045aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d05e      	beq.n	80045aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	441a      	add	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2300      	movs	r3, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fe:	f7ff fe05 	bl	800410c <xTimerGenericCommand>
 8004502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d14f      	bne.n	80045aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	61bb      	str	r3, [r7, #24]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	b2da      	uxtb	r2, r3
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004532:	e03a      	b.n	80045aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	617b      	str	r3, [r7, #20]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	18d1      	adds	r1, r2, r3
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004578:	f7ff ff06 	bl	8004388 <prvInsertTimerInActiveList>
					break;
 800457c:	e015      	b.n	80045aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800458c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458e:	f000 fbdf 	bl	8004d50 <vPortFree>
 8004592:	e00a      	b.n	80045aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045a6:	e000      	b.n	80045aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80045a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <prvProcessReceivedCommands+0x1c0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	1d39      	adds	r1, r7, #4
 80045b0:	2200      	movs	r2, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fbec 	bl	8002d90 <xQueueReceive>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f47f af2a 	bne.w	8004414 <prvProcessReceivedCommands+0x8>
	}
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3730      	adds	r7, #48	; 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000e10 	.word	0x20000e10

080045d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045d6:	e048      	b.n	800466a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045d8:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <prvSwitchTimerLists+0xc0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e2:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <prvSwitchTimerLists+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe f905 	bl	8002800 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02e      	beq.n	800466a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	429a      	cmp	r2, r3
 800461c:	d90e      	bls.n	800463c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800462a:	4b19      	ldr	r3, [pc, #100]	; (8004690 <prvSwitchTimerLists+0xc0>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fe f8aa 	bl	800278e <vListInsert>
 800463a:	e016      	b.n	800466a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800463c:	2300      	movs	r3, #0
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2300      	movs	r3, #0
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	2100      	movs	r1, #0
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff fd60 	bl	800410c <xTimerGenericCommand>
 800464c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	603b      	str	r3, [r7, #0]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <prvSwitchTimerLists+0xc0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1b1      	bne.n	80045d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <prvSwitchTimerLists+0xc0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <prvSwitchTimerLists+0xc4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a04      	ldr	r2, [pc, #16]	; (8004690 <prvSwitchTimerLists+0xc0>)
 8004680:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004682:	4a04      	ldr	r2, [pc, #16]	; (8004694 <prvSwitchTimerLists+0xc4>)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000e08 	.word	0x20000e08
 8004694:	20000e0c 	.word	0x20000e0c

08004698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800469e:	f000 f969 	bl	8004974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d120      	bne.n	80046ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046aa:	4814      	ldr	r0, [pc, #80]	; (80046fc <prvCheckForValidListAndQueue+0x64>)
 80046ac:	f7fe f81e 	bl	80026ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046b0:	4813      	ldr	r0, [pc, #76]	; (8004700 <prvCheckForValidListAndQueue+0x68>)
 80046b2:	f7fe f81b 	bl	80026ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <prvCheckForValidListAndQueue+0x6c>)
 80046b8:	4a10      	ldr	r2, [pc, #64]	; (80046fc <prvCheckForValidListAndQueue+0x64>)
 80046ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <prvCheckForValidListAndQueue+0x70>)
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <prvCheckForValidListAndQueue+0x68>)
 80046c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <prvCheckForValidListAndQueue+0x74>)
 80046c8:	4a11      	ldr	r2, [pc, #68]	; (8004710 <prvCheckForValidListAndQueue+0x78>)
 80046ca:	2110      	movs	r1, #16
 80046cc:	200a      	movs	r0, #10
 80046ce:	f7fe f929 	bl	8002924 <xQueueGenericCreateStatic>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	490b      	ldr	r1, [pc, #44]	; (8004714 <prvCheckForValidListAndQueue+0x7c>)
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fd42 	bl	8003170 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046ec:	f000 f972 	bl	80049d4 <vPortExitCritical>
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000e10 	.word	0x20000e10
 80046fc:	20000de0 	.word	0x20000de0
 8004700:	20000df4 	.word	0x20000df4
 8004704:	20000e08 	.word	0x20000e08
 8004708:	20000e0c 	.word	0x20000e0c
 800470c:	20000ebc 	.word	0x20000ebc
 8004710:	20000e1c 	.word	0x20000e1c
 8004714:	080051e8 	.word	0x080051e8

08004718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3b04      	subs	r3, #4
 8004728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b04      	subs	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f023 0201 	bic.w	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b04      	subs	r3, #4
 8004746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004748:	4a0c      	ldr	r2, [pc, #48]	; (800477c <pxPortInitialiseStack+0x64>)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b14      	subs	r3, #20
 8004752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3b04      	subs	r3, #4
 800475e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f06f 0202 	mvn.w	r2, #2
 8004766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b20      	subs	r3, #32
 800476c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	08004781 	.word	0x08004781

08004780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <prvTaskExitError+0x54>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d00a      	beq.n	80047aa <prvTaskExitError+0x2a>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <prvTaskExitError+0x28>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60bb      	str	r3, [r7, #8]
}
 80047bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047be:	bf00      	nop
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0fc      	beq.n	80047c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	20000014 	.word	0x20000014
	...

080047e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <pxCurrentTCBConst2>)
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6808      	ldr	r0, [r1, #0]
 80047e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	f380 8809 	msr	PSP, r0
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f380 8811 	msr	BASEPRI, r0
 80047fa:	4770      	bx	lr
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst2>:
 8004800:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004808:	4808      	ldr	r0, [pc, #32]	; (800482c <prvPortStartFirstTask+0x24>)
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	6800      	ldr	r0, [r0, #0]
 800480e:	f380 8808 	msr	MSP, r0
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f380 8814 	msr	CONTROL, r0
 800481a:	b662      	cpsie	i
 800481c:	b661      	cpsie	f
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	df00      	svc	0
 8004828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800482a:	bf00      	nop
 800482c:	e000ed08 	.word	0xe000ed08

08004830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004836:	4b46      	ldr	r3, [pc, #280]	; (8004950 <xPortStartScheduler+0x120>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a46      	ldr	r2, [pc, #280]	; (8004954 <xPortStartScheduler+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10a      	bne.n	8004856 <xPortStartScheduler+0x26>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004856:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <xPortStartScheduler+0x120>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <xPortStartScheduler+0x128>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10a      	bne.n	8004876 <xPortStartScheduler+0x46>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60fb      	str	r3, [r7, #12]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004876:	4b39      	ldr	r3, [pc, #228]	; (800495c <xPortStartScheduler+0x12c>)
 8004878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <xPortStartScheduler+0x130>)
 800489c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <xPortStartScheduler+0x134>)
 80048a0:	2207      	movs	r2, #7
 80048a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048a4:	e009      	b.n	80048ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <xPortStartScheduler+0x134>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <xPortStartScheduler+0x134>)
 80048ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b80      	cmp	r3, #128	; 0x80
 80048c4:	d0ef      	beq.n	80048a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048c6:	4b27      	ldr	r3, [pc, #156]	; (8004964 <xPortStartScheduler+0x134>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1c3 0307 	rsb	r3, r3, #7
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d00a      	beq.n	80048e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60bb      	str	r3, [r7, #8]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <xPortStartScheduler+0x134>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <xPortStartScheduler+0x134>)
 80048f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048f2:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <xPortStartScheduler+0x134>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048fa:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <xPortStartScheduler+0x134>)
 80048fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <xPortStartScheduler+0x138>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <xPortStartScheduler+0x138>)
 800490c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <xPortStartScheduler+0x138>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <xPortStartScheduler+0x138>)
 8004918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800491c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800491e:	f000 f8dd 	bl	8004adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <xPortStartScheduler+0x13c>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004928:	f000 f8fc 	bl	8004b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <xPortStartScheduler+0x140>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <xPortStartScheduler+0x140>)
 8004932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004938:	f7ff ff66 	bl	8004808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800493c:	f7ff f848 	bl	80039d0 <vTaskSwitchContext>
	prvTaskExitError();
 8004940:	f7ff ff1e 	bl	8004780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	e000ed00 	.word	0xe000ed00
 8004954:	410fc271 	.word	0x410fc271
 8004958:	410fc270 	.word	0x410fc270
 800495c:	e000e400 	.word	0xe000e400
 8004960:	20000f0c 	.word	0x20000f0c
 8004964:	20000f10 	.word	0x20000f10
 8004968:	e000ed20 	.word	0xe000ed20
 800496c:	20000014 	.word	0x20000014
 8004970:	e000ef34 	.word	0xe000ef34

08004974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	607b      	str	r3, [r7, #4]
}
 800498c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <vPortEnterCritical+0x58>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3301      	adds	r3, #1
 8004994:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <vPortEnterCritical+0x58>)
 8004996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <vPortEnterCritical+0x58>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10f      	bne.n	80049c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <vPortEnterCritical+0x5c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	603b      	str	r3, [r7, #0]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vPortEnterCritical+0x4a>
	}
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000014 	.word	0x20000014
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <vPortExitCritical+0x50>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <vPortExitCritical+0x24>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	607b      	str	r3, [r7, #4]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <vPortExitCritical+0x50>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <vPortExitCritical+0x50>)
 8004a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <vPortExitCritical+0x50>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <vPortExitCritical+0x42>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f383 8811 	msr	BASEPRI, r3
}
 8004a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000014 	.word	0x20000014
	...

08004a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a30:	f3ef 8009 	mrs	r0, PSP
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <pxCurrentTCBConst>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	f01e 0f10 	tst.w	lr, #16
 8004a40:	bf08      	it	eq
 8004a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4a:	6010      	str	r0, [r2, #0]
 8004a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a54:	f380 8811 	msr	BASEPRI, r0
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f7fe ffb6 	bl	80039d0 <vTaskSwitchContext>
 8004a64:	f04f 0000 	mov.w	r0, #0
 8004a68:	f380 8811 	msr	BASEPRI, r0
 8004a6c:	bc09      	pop	{r0, r3}
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	6808      	ldr	r0, [r1, #0]
 8004a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a76:	f01e 0f10 	tst.w	lr, #16
 8004a7a:	bf08      	it	eq
 8004a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a80:	f380 8809 	msr	PSP, r0
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst>:
 8004a90:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
}
 8004ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ab2:	f7fe fed3 	bl	800385c <xTaskIncrementTick>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <xPortSysTickHandler+0x40>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f383 8811 	msr	BASEPRI, r3
}
 8004ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <vPortSetupTimerInterrupt+0x38>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <vPortSetupTimerInterrupt+0x3c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <vPortSetupTimerInterrupt+0x40>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <vPortSetupTimerInterrupt+0x44>)
 8004afa:	3b01      	subs	r3, #1
 8004afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e010 	.word	0xe000e010
 8004b14:	e000e018 	.word	0xe000e018
 8004b18:	20000008 	.word	0x20000008
 8004b1c:	10624dd3 	.word	0x10624dd3
 8004b20:	e000e014 	.word	0xe000e014

08004b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b34 <vPortEnableVFP+0x10>
 8004b28:	6801      	ldr	r1, [r0, #0]
 8004b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b2e:	6001      	str	r1, [r0, #0]
 8004b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b32:	bf00      	nop
 8004b34:	e000ed88 	.word	0xe000ed88

08004b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b3e:	f3ef 8305 	mrs	r3, IPSR
 8004b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	d914      	bls.n	8004b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <vPortValidateInterruptPriority+0x70>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b54:	4b15      	ldr	r3, [pc, #84]	; (8004bac <vPortValidateInterruptPriority+0x74>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	7afa      	ldrb	r2, [r7, #11]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d20a      	bcs.n	8004b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <vPortValidateInterruptPriority+0x78>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <vPortValidateInterruptPriority+0x7c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d90a      	bls.n	8004b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	603b      	str	r3, [r7, #0]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <vPortValidateInterruptPriority+0x60>
	}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	e000e3f0 	.word	0xe000e3f0
 8004bac:	20000f0c 	.word	0x20000f0c
 8004bb0:	e000ed0c 	.word	0xe000ed0c
 8004bb4:	20000f10 	.word	0x20000f10

08004bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bc4:	f7fe fd8e 	bl	80036e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bc8:	4b5b      	ldr	r3, [pc, #364]	; (8004d38 <pvPortMalloc+0x180>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bd0:	f000 f920 	bl	8004e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <pvPortMalloc+0x184>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 8093 	bne.w	8004d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01d      	beq.n	8004c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004be8:	2208      	movs	r2, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d014      	beq.n	8004c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f023 0307 	bic.w	r3, r3, #7
 8004c00:	3308      	adds	r3, #8
 8004c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <pvPortMalloc+0x6c>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	617b      	str	r3, [r7, #20]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d06e      	beq.n	8004d08 <pvPortMalloc+0x150>
 8004c2a:	4b45      	ldr	r3, [pc, #276]	; (8004d40 <pvPortMalloc+0x188>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d869      	bhi.n	8004d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c34:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <pvPortMalloc+0x18c>)
 8004c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <pvPortMalloc+0x18c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3e:	e004      	b.n	8004c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d903      	bls.n	8004c5c <pvPortMalloc+0xa4>
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f1      	bne.n	8004c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <pvPortMalloc+0x180>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d050      	beq.n	8004d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	4413      	add	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	2308      	movs	r3, #8
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d91f      	bls.n	8004cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	613b      	str	r3, [r7, #16]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cc2:	69b8      	ldr	r0, [r7, #24]
 8004cc4:	f000 f908 	bl	8004ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <pvPortMalloc+0x188>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <pvPortMalloc+0x188>)
 8004cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cd6:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <pvPortMalloc+0x188>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <pvPortMalloc+0x190>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d203      	bcs.n	8004cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <pvPortMalloc+0x188>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <pvPortMalloc+0x190>)
 8004ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <pvPortMalloc+0x184>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <pvPortMalloc+0x194>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a11      	ldr	r2, [pc, #68]	; (8004d4c <pvPortMalloc+0x194>)
 8004d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d08:	f7fe fcfa 	bl	8003700 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <pvPortMalloc+0x174>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60fb      	str	r3, [r7, #12]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <pvPortMalloc+0x172>
	return pvReturn;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20004b1c 	.word	0x20004b1c
 8004d3c:	20004b30 	.word	0x20004b30
 8004d40:	20004b20 	.word	0x20004b20
 8004d44:	20004b14 	.word	0x20004b14
 8004d48:	20004b24 	.word	0x20004b24
 8004d4c:	20004b28 	.word	0x20004b28

08004d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04d      	beq.n	8004dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d62:	2308      	movs	r3, #8
 8004d64:	425b      	negs	r3, r3
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <vPortFree+0xb8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <vPortFree+0x44>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60fb      	str	r3, [r7, #12]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <vPortFree+0x62>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60bb      	str	r3, [r7, #8]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <vPortFree+0xb8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01e      	beq.n	8004dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11a      	bne.n	8004dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <vPortFree+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dd8:	f7fe fc84 	bl	80036e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <vPortFree+0xbc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <vPortFree+0xbc>)
 8004de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dea:	6938      	ldr	r0, [r7, #16]
 8004dec:	f000 f874 	bl	8004ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <vPortFree+0xc0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	4a06      	ldr	r2, [pc, #24]	; (8004e10 <vPortFree+0xc0>)
 8004df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dfa:	f7fe fc81 	bl	8003700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20004b30 	.word	0x20004b30
 8004e0c:	20004b20 	.word	0x20004b20
 8004e10:	20004b2c 	.word	0x20004b2c

08004e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <prvHeapInit+0xac>)
 8004e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3307      	adds	r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0307 	bic.w	r3, r3, #7
 8004e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <prvHeapInit+0xac>)
 8004e44:	4413      	add	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <prvHeapInit+0xb0>)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <prvHeapInit+0xb0>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e60:	2208      	movs	r2, #8
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <prvHeapInit+0xb8>)
 8004ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <prvHeapInit+0xbc>)
 8004eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <prvHeapInit+0xc0>)
 8004eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	20000f14 	.word	0x20000f14
 8004ec4:	20004b14 	.word	0x20004b14
 8004ec8:	20004b1c 	.word	0x20004b1c
 8004ecc:	20004b24 	.word	0x20004b24
 8004ed0:	20004b20 	.word	0x20004b20
 8004ed4:	20004b30 	.word	0x20004b30

08004ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ee0:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <prvInsertBlockIntoFreeList+0xac>)
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e002      	b.n	8004eec <prvInsertBlockIntoFreeList+0x14>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d8f7      	bhi.n	8004ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d108      	bne.n	8004f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	441a      	add	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	441a      	add	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d118      	bne.n	8004f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <prvInsertBlockIntoFreeList+0xb0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d00d      	beq.n	8004f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e008      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <prvInsertBlockIntoFreeList+0xb0>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e003      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d002      	beq.n	8004f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20004b14 	.word	0x20004b14
 8004f88:	20004b1c 	.word	0x20004b1c

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4d0d      	ldr	r5, [pc, #52]	; (8004fc4 <__libc_init_array+0x38>)
 8004f90:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f92:	1b64      	subs	r4, r4, r5
 8004f94:	10a4      	asrs	r4, r4, #2
 8004f96:	2600      	movs	r6, #0
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	4d0b      	ldr	r5, [pc, #44]	; (8004fcc <__libc_init_array+0x40>)
 8004f9e:	4c0c      	ldr	r4, [pc, #48]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa0:	f000 f8f2 	bl	8005188 <_init>
 8004fa4:	1b64      	subs	r4, r4, r5
 8004fa6:	10a4      	asrs	r4, r4, #2
 8004fa8:	2600      	movs	r6, #0
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	08005270 	.word	0x08005270
 8004fc8:	08005270 	.word	0x08005270
 8004fcc:	08005270 	.word	0x08005270
 8004fd0:	08005274 	.word	0x08005274

08004fd4 <__retarget_lock_acquire_recursive>:
 8004fd4:	4770      	bx	lr

08004fd6 <__retarget_lock_release_recursive>:
 8004fd6:	4770      	bx	lr

08004fd8 <memcpy>:
 8004fd8:	440a      	add	r2, r1
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fe0:	d100      	bne.n	8004fe4 <memcpy+0xc>
 8004fe2:	4770      	bx	lr
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fee:	4291      	cmp	r1, r2
 8004ff0:	d1f9      	bne.n	8004fe6 <memcpy+0xe>
 8004ff2:	bd10      	pop	{r4, pc}

08004ff4 <memset>:
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <memset+0xa>
 8004ffc:	4770      	bx	lr
 8004ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8005002:	e7f9      	b.n	8004ff8 <memset+0x4>

08005004 <cleanup_glue>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	460c      	mov	r4, r1
 8005008:	6809      	ldr	r1, [r1, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	b109      	cbz	r1, 8005012 <cleanup_glue+0xe>
 800500e:	f7ff fff9 	bl	8005004 <cleanup_glue>
 8005012:	4621      	mov	r1, r4
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800501a:	f000 b869 	b.w	80050f0 <_free_r>
	...

08005020 <_reclaim_reent>:
 8005020:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <_reclaim_reent+0xb4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4283      	cmp	r3, r0
 8005026:	b570      	push	{r4, r5, r6, lr}
 8005028:	4604      	mov	r4, r0
 800502a:	d051      	beq.n	80050d0 <_reclaim_reent+0xb0>
 800502c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800502e:	b143      	cbz	r3, 8005042 <_reclaim_reent+0x22>
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d14a      	bne.n	80050cc <_reclaim_reent+0xac>
 8005036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	b111      	cbz	r1, 8005042 <_reclaim_reent+0x22>
 800503c:	4620      	mov	r0, r4
 800503e:	f000 f857 	bl	80050f0 <_free_r>
 8005042:	6961      	ldr	r1, [r4, #20]
 8005044:	b111      	cbz	r1, 800504c <_reclaim_reent+0x2c>
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f852 	bl	80050f0 <_free_r>
 800504c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800504e:	b111      	cbz	r1, 8005056 <_reclaim_reent+0x36>
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f84d 	bl	80050f0 <_free_r>
 8005056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005058:	b111      	cbz	r1, 8005060 <_reclaim_reent+0x40>
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f848 	bl	80050f0 <_free_r>
 8005060:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005062:	b111      	cbz	r1, 800506a <_reclaim_reent+0x4a>
 8005064:	4620      	mov	r0, r4
 8005066:	f000 f843 	bl	80050f0 <_free_r>
 800506a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800506c:	b111      	cbz	r1, 8005074 <_reclaim_reent+0x54>
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f83e 	bl	80050f0 <_free_r>
 8005074:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005076:	b111      	cbz	r1, 800507e <_reclaim_reent+0x5e>
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f839 	bl	80050f0 <_free_r>
 800507e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005080:	b111      	cbz	r1, 8005088 <_reclaim_reent+0x68>
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f834 	bl	80050f0 <_free_r>
 8005088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800508a:	b111      	cbz	r1, 8005092 <_reclaim_reent+0x72>
 800508c:	4620      	mov	r0, r4
 800508e:	f000 f82f 	bl	80050f0 <_free_r>
 8005092:	69a3      	ldr	r3, [r4, #24]
 8005094:	b1e3      	cbz	r3, 80050d0 <_reclaim_reent+0xb0>
 8005096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005098:	4620      	mov	r0, r4
 800509a:	4798      	blx	r3
 800509c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800509e:	b1b9      	cbz	r1, 80050d0 <_reclaim_reent+0xb0>
 80050a0:	4620      	mov	r0, r4
 80050a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050a6:	f7ff bfad 	b.w	8005004 <cleanup_glue>
 80050aa:	5949      	ldr	r1, [r1, r5]
 80050ac:	b941      	cbnz	r1, 80050c0 <_reclaim_reent+0xa0>
 80050ae:	3504      	adds	r5, #4
 80050b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b2:	2d80      	cmp	r5, #128	; 0x80
 80050b4:	68d9      	ldr	r1, [r3, #12]
 80050b6:	d1f8      	bne.n	80050aa <_reclaim_reent+0x8a>
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 f819 	bl	80050f0 <_free_r>
 80050be:	e7ba      	b.n	8005036 <_reclaim_reent+0x16>
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f814 	bl	80050f0 <_free_r>
 80050c8:	4631      	mov	r1, r6
 80050ca:	e7ef      	b.n	80050ac <_reclaim_reent+0x8c>
 80050cc:	2500      	movs	r5, #0
 80050ce:	e7ef      	b.n	80050b0 <_reclaim_reent+0x90>
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	bf00      	nop
 80050d4:	20000018 	.word	0x20000018

080050d8 <__malloc_lock>:
 80050d8:	4801      	ldr	r0, [pc, #4]	; (80050e0 <__malloc_lock+0x8>)
 80050da:	f7ff bf7b 	b.w	8004fd4 <__retarget_lock_acquire_recursive>
 80050de:	bf00      	nop
 80050e0:	20004b34 	.word	0x20004b34

080050e4 <__malloc_unlock>:
 80050e4:	4801      	ldr	r0, [pc, #4]	; (80050ec <__malloc_unlock+0x8>)
 80050e6:	f7ff bf76 	b.w	8004fd6 <__retarget_lock_release_recursive>
 80050ea:	bf00      	nop
 80050ec:	20004b34 	.word	0x20004b34

080050f0 <_free_r>:
 80050f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050f2:	2900      	cmp	r1, #0
 80050f4:	d044      	beq.n	8005180 <_free_r+0x90>
 80050f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005102:	bfb8      	it	lt
 8005104:	18e4      	addlt	r4, r4, r3
 8005106:	f7ff ffe7 	bl	80050d8 <__malloc_lock>
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <_free_r+0x94>)
 800510c:	9801      	ldr	r0, [sp, #4]
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	b933      	cbnz	r3, 8005120 <_free_r+0x30>
 8005112:	6063      	str	r3, [r4, #4]
 8005114:	6014      	str	r4, [r2, #0]
 8005116:	b003      	add	sp, #12
 8005118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800511c:	f7ff bfe2 	b.w	80050e4 <__malloc_unlock>
 8005120:	42a3      	cmp	r3, r4
 8005122:	d908      	bls.n	8005136 <_free_r+0x46>
 8005124:	6825      	ldr	r5, [r4, #0]
 8005126:	1961      	adds	r1, r4, r5
 8005128:	428b      	cmp	r3, r1
 800512a:	bf01      	itttt	eq
 800512c:	6819      	ldreq	r1, [r3, #0]
 800512e:	685b      	ldreq	r3, [r3, #4]
 8005130:	1949      	addeq	r1, r1, r5
 8005132:	6021      	streq	r1, [r4, #0]
 8005134:	e7ed      	b.n	8005112 <_free_r+0x22>
 8005136:	461a      	mov	r2, r3
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b10b      	cbz	r3, 8005140 <_free_r+0x50>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d9fa      	bls.n	8005136 <_free_r+0x46>
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	1855      	adds	r5, r2, r1
 8005144:	42a5      	cmp	r5, r4
 8005146:	d10b      	bne.n	8005160 <_free_r+0x70>
 8005148:	6824      	ldr	r4, [r4, #0]
 800514a:	4421      	add	r1, r4
 800514c:	1854      	adds	r4, r2, r1
 800514e:	42a3      	cmp	r3, r4
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	d1e0      	bne.n	8005116 <_free_r+0x26>
 8005154:	681c      	ldr	r4, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	6053      	str	r3, [r2, #4]
 800515a:	4421      	add	r1, r4
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	e7da      	b.n	8005116 <_free_r+0x26>
 8005160:	d902      	bls.n	8005168 <_free_r+0x78>
 8005162:	230c      	movs	r3, #12
 8005164:	6003      	str	r3, [r0, #0]
 8005166:	e7d6      	b.n	8005116 <_free_r+0x26>
 8005168:	6825      	ldr	r5, [r4, #0]
 800516a:	1961      	adds	r1, r4, r5
 800516c:	428b      	cmp	r3, r1
 800516e:	bf04      	itt	eq
 8005170:	6819      	ldreq	r1, [r3, #0]
 8005172:	685b      	ldreq	r3, [r3, #4]
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	bf04      	itt	eq
 8005178:	1949      	addeq	r1, r1, r5
 800517a:	6021      	streq	r1, [r4, #0]
 800517c:	6054      	str	r4, [r2, #4]
 800517e:	e7ca      	b.n	8005116 <_free_r+0x26>
 8005180:	b003      	add	sp, #12
 8005182:	bd30      	pop	{r4, r5, pc}
 8005184:	20004b38 	.word	0x20004b38

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
