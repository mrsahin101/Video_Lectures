
012_FreeRTOS_QUEUE_MULTIPLE_SENDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db8  08005db8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004ad0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b48  20004b48  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188b9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030bb  00000000  00000000  00038961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a6f  00000000  00000000  0003e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155d9  00000000  00000000  00041ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5aff  00000000  00000000  000570b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cbaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000583c  00000000  00000000  0012cc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c30 	.word	0x08005c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005c30 	.word	0x08005c30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vSenderTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void vSenderTask(void *pvParameters)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	BaseType_t xStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <vSenderTask+0x3c>)
 8000586:	f000 fe3c 	bl	8001202 <HAL_GPIO_TogglePin>
		xStatus = xQueueSendToBack(xQueue, pvParameters, xTicksToWait);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <vSenderTask+0x40>)
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f002 fbc0 	bl	8002d18 <xQueueGenericSend>
 8000598:	60b8      	str	r0, [r7, #8]

		if(xStatus != pdPASS)
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d0ef      	beq.n	8000580 <vSenderTask+0xc>
			HAL_UART_Transmit(&huart2, "Kuyruga eklenemedi!", 30, HAL_MAX_DELAY);
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	221e      	movs	r2, #30
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <vSenderTask+0x44>)
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <vSenderTask+0x48>)
 80005aa:	f001 fe0a 	bl	80021c2 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005ae:	e7e7      	b.n	8000580 <vSenderTask+0xc>
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	200000d8 	.word	0x200000d8
 80005b8:	08005c48 	.word	0x08005c48
 80005bc:	20000094 	.word	0x20000094

080005c0 <vReceiverTask>:
	}
}
static void vReceiverTask(void *pvParameters)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	; 0x30
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	BaseType_t xStatus;
	char buffer[25];

	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005cc:	4828      	ldr	r0, [pc, #160]	; (8000670 <vReceiverTask+0xb0>)
 80005ce:	f000 fe18 	bl	8001202 <HAL_GPIO_TogglePin>
		if(uxQueueMessagesWaiting(xQueue) != 3)
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <vReceiverTask+0xb4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fe18 	bl	800320c <uxQueueMessagesWaiting>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d006      	beq.n	80005f0 <vReceiverTask+0x30>
			HAL_UART_Transmit(&huart2, "Kuyruk Dolu!", 20, HAL_MAX_DELAY);
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	2214      	movs	r2, #20
 80005e8:	4923      	ldr	r1, [pc, #140]	; (8000678 <vReceiverTask+0xb8>)
 80005ea:	4824      	ldr	r0, [pc, #144]	; (800067c <vReceiverTask+0xbc>)
 80005ec:	f001 fde9 	bl	80021c2 <HAL_UART_Transmit>

		xStatus = xQueueReceive(xQueue, &xReceviedStructure, 0);
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <vReceiverTask+0xb4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80005f8:	2200      	movs	r2, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd26 	bl	800304c <xQueueReceive>
 8000600:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(xStatus == pdPASS)
 8000602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000604:	2b01      	cmp	r3, #1
 8000606:	d12b      	bne.n	8000660 <vReceiverTask+0xa0>
		{
			if(xReceviedStructure.eDataSource == eGonderici1)
 8000608:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <vReceiverTask+0x74>
			{
				sprintf(buffer, "From Sender 1 : %d\t\n", xReceviedStructure.ucValue);
 8000610:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000614:	461a      	mov	r2, r3
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4919      	ldr	r1, [pc, #100]	; (8000680 <vReceiverTask+0xc0>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 ff4d 	bl	80054bc <siprintf>
				HAL_UART_Transmit(&huart2, buffer, 30, HAL_MAX_DELAY);
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	221e      	movs	r2, #30
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <vReceiverTask+0xbc>)
 800062e:	f001 fdc8 	bl	80021c2 <HAL_UART_Transmit>
 8000632:	e7c9      	b.n	80005c8 <vReceiverTask+0x8>
			}
			else if(xReceviedStructure.eDataSource == eGonderici2)
 8000634:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000638:	2b01      	cmp	r3, #1
 800063a:	d1c5      	bne.n	80005c8 <vReceiverTask+0x8>
			{
				sprintf(buffer, "From Sender 2 : %d\t\n", xReceviedStructure.ucValue);
 800063c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000640:	461a      	mov	r2, r3
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	490f      	ldr	r1, [pc, #60]	; (8000684 <vReceiverTask+0xc4>)
 8000648:	4618      	mov	r0, r3
 800064a:	f004 ff37 	bl	80054bc <siprintf>
				HAL_UART_Transmit(&huart2, buffer, 30, HAL_MAX_DELAY);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	221e      	movs	r2, #30
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <vReceiverTask+0xbc>)
 800065a:	f001 fdb2 	bl	80021c2 <HAL_UART_Transmit>
 800065e:	e7b3      	b.n	80005c8 <vReceiverTask+0x8>
			}
		}
		else
			HAL_UART_Transmit(&huart2, "Kuyruktan Alinamadi!\n", 30, HAL_MAX_DELAY);
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	221e      	movs	r2, #30
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <vReceiverTask+0xc8>)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <vReceiverTask+0xbc>)
 800066a:	f001 fdaa 	bl	80021c2 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800066e:	e7ab      	b.n	80005c8 <vReceiverTask+0x8>
 8000670:	40020c00 	.word	0x40020c00
 8000674:	200000d8 	.word	0x200000d8
 8000678:	08005c5c 	.word	0x08005c5c
 800067c:	20000094 	.word	0x20000094
 8000680:	08005c6c 	.word	0x08005c6c
 8000684:	08005c84 	.word	0x08005c84
 8000688:	08005c9c 	.word	0x08005c9c

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fadd 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f84d 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f8df 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069e:	f000 f8b3 	bl	8000808 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xQueue = xQueueCreate(3, sizeof(VeriYapim_t));
 80006a2:	2200      	movs	r2, #0
 80006a4:	2102      	movs	r1, #2
 80006a6:	2003      	movs	r0, #3
 80006a8:	f002 fad8 	bl	8002c5c <xQueueGenericCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <main+0x80>)
 80006b0:	6013      	str	r3, [r2, #0]
  if(xQueue != NULL)
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <main+0x80>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d020      	beq.n	80006fc <main+0x70>
  {
	  xTaskCreate(vSenderTask, "Sender1", configMINIMAL_STACK_SIZE, &(xStructsToSend[0]), 2, NULL);
 80006ba:	2300      	movs	r3, #0
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2302      	movs	r3, #2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <main+0x84>)
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	4913      	ldr	r1, [pc, #76]	; (8000714 <main+0x88>)
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <main+0x8c>)
 80006ca:	f002 ff88 	bl	80035de <xTaskCreate>
	  xTaskCreate(vSenderTask, "Sender2", configMINIMAL_STACK_SIZE, &(xStructsToSend[1]), 2, NULL);
 80006ce:	2300      	movs	r3, #0
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2302      	movs	r3, #2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <main+0x90>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	4911      	ldr	r1, [pc, #68]	; (8000720 <main+0x94>)
 80006dc:	480e      	ldr	r0, [pc, #56]	; (8000718 <main+0x8c>)
 80006de:	f002 ff7e 	bl	80035de <xTaskCreate>
	  xTaskCreate(vReceiverTask,"Receiver", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80006e2:	2300      	movs	r3, #0
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2300      	movs	r3, #0
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <main+0x98>)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <main+0x9c>)
 80006f2:	f002 ff74 	bl	80035de <xTaskCreate>
	  vTaskStartScheduler();
 80006f6:	f003 f8cd 	bl	8003894 <vTaskStartScheduler>
 80006fa:	e006      	b.n	800070a <main+0x7e>
  }
  else
	  HAL_UART_Transmit(&huart2,"Kuyruk Olusturulamadi!\r\n", 40, HAL_MAX_DELAY);
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2228      	movs	r2, #40	; 0x28
 8000702:	490a      	ldr	r1, [pc, #40]	; (800072c <main+0xa0>)
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <main+0xa4>)
 8000706:	f001 fd5c 	bl	80021c2 <HAL_UART_Transmit>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x7e>
 800070c:	200000d8 	.word	0x200000d8
 8000710:	20000000 	.word	0x20000000
 8000714:	08005cb4 	.word	0x08005cb4
 8000718:	08000575 	.word	0x08000575
 800071c:	20000002 	.word	0x20000002
 8000720:	08005cbc 	.word	0x08005cbc
 8000724:	08005cc4 	.word	0x08005cc4
 8000728:	080005c1 	.word	0x080005c1
 800072c:	08005cd0 	.word	0x08005cd0
 8000730:	20000094 	.word	0x20000094

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fda4 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <SystemClock_Config+0xcc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <SystemClock_Config+0xd0>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fd3c 	bl	8001238 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007c6:	f000 f8bb 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2105      	movs	r1, #5
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ff9d 	bl	8001728 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f4:	f000 f8a4 	bl	8000940 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	; 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f001 fc72 	bl	8002128 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f879 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000094 	.word	0x20000094
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a25      	ldr	r2, [pc, #148]	; (8000910 <MX_GPIO_Init+0xb4>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_GPIO_Init+0xb8>)
 80008ce:	f000 fc7f 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008e6:	f000 fad7 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0xb8>)
 8000904:	f000 fac8 	bl	8000e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f9b1 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40002000 	.word	0x40002000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_MspInit+0x54>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x54>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 fa57 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12b      	bne.n	8000a1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fe:	230c      	movs	r3, #12
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1a:	f000 fa3d 	bl	8000e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 0210 	add.w	r2, r7, #16
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f87c 	bl	8001b68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7a:	f001 f84d 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000a7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a80:	e004      	b.n	8000a8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a82:	f001 f849 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000a86:	4603      	mov	r3, r0
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_InitTick+0xe8>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	0c9b      	lsrs	r3, r3, #18
 8000a96:	3b01      	subs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_InitTick+0xec>)
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <HAL_InitTick+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_InitTick+0xec>)
 8000aa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_InitTick+0xec>)
 8000aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aac:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_InitTick+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <HAL_InitTick+0xec>)
 8000ac2:	f001 f883 	bl	8001bcc <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d11b      	bne.n	8000b0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000ad4:	4812      	ldr	r0, [pc, #72]	; (8000b20 <HAL_InitTick+0xec>)
 8000ad6:	f001 f8d3 	bl	8001c80 <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d111      	bne.n	8000b0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ae8:	202d      	movs	r0, #45	; 0x2d
 8000aea:	f000 f9c7 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d808      	bhi.n	8000b06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	202d      	movs	r0, #45	; 0x2d
 8000afa:	f000 f9a3 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0xf4>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e002      	b.n	8000b0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	431bde83 	.word	0x431bde83
 8000b20:	200000dc 	.word	0x200000dc
 8000b24:	40002000 	.word	0x40002000
 8000b28:	20000008 	.word	0x20000008

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b5e:	f001 f8ff 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000dc 	.word	0x200000dc

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f004 fb3e 	bl	800521c <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20020000 	.word	0x20020000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	20000124 	.word	0x20000124
 8000bd4:	20004b48 	.word	0x20004b48

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f004 fafd 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fd2d 	bl	800068c <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c40:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 8000c44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c48:	20004b48 	.word	0x20004b48

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f7ff fed8 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe62 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	20000128 	.word	0x20000128

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000128 	.word	0x20000128

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e16b      	b.n	800118c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 815a 	bne.w	8001186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80b4 	beq.w	8001186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x310>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x328>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x20a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x310>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_GPIO_Init+0x334>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x334>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_GPIO_Init+0x334>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x334>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae90 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001214:	887a      	ldrh	r2, [r7, #2]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	041a      	lsls	r2, r3, #16
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43d9      	mvns	r1, r3
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	400b      	ands	r3, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e267      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b85      	ldr	r3, [pc, #532]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e242      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b69      	ldr	r3, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a68      	ldr	r2, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fce4 	bl	8000cbc <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fce0 	bl	8000cbc <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e207      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fcd0 	bl	8000cbc <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fccc 	bl	8000cbc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f3      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc85 	bl	8000cbc <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc81 	bl	8000cbc <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a8      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc64 	bl	8000cbc <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc60 	bl	8000cbc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e187      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fc44 	bl	8000cbc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc40 	bl	8000cbc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e167      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fc2d 	bl	8000cbc <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00e      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fc29 	bl	8000cbc <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d907      	bls.n	8001484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e150      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ea      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8097 	beq.w	80015cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b77      	ldr	r3, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a73      	ldr	r2, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fbe9 	bl	8000cbc <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fbe5 	bl	8000cbc <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e10c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x2ea>
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x30c>
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5e      	ldr	r2, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fbaa 	bl	8000cbc <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fba6 	bl	8000cbc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0cb      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x334>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fb94 	bl	8000cbc <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fb90 	bl	8000cbc <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0b5      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a1 	beq.w	8001718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb64 	bl	8000cbc <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb60 	bl	8000cbc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e087      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491b      	ldr	r1, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb39 	bl	8000cbc <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb35 	bl	8000cbc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e05c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x416>
 800166c:	e054      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb22 	bl	8000cbc <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb1e 	bl	8000cbc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x444>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d121      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fa50 	bl	8000cbc <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fa4c 	bl	8000cbc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f8b0 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08005d04 	.word	0x08005d04
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b094      	sub	sp, #80	; 0x50
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001904:	2300      	movs	r3, #0
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80e1 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e0db      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800192c:	e0db      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x208>)
 8001930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001932:	e0d8      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
 8001954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
 8001962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001966:	4622      	mov	r2, r4
 8001968:	462b      	mov	r3, r5
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	0159      	lsls	r1, r3, #5
 8001974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001978:	0150      	lsls	r0, r2, #5
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4621      	mov	r1, r4
 8001980:	1a51      	subs	r1, r2, r1
 8001982:	6139      	str	r1, [r7, #16]
 8001984:	4629      	mov	r1, r5
 8001986:	eb63 0301 	sbc.w	r3, r3, r1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001998:	4659      	mov	r1, fp
 800199a:	018b      	lsls	r3, r1, #6
 800199c:	4651      	mov	r1, sl
 800199e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a2:	4651      	mov	r1, sl
 80019a4:	018a      	lsls	r2, r1, #6
 80019a6:	4651      	mov	r1, sl
 80019a8:	ebb2 0801 	subs.w	r8, r2, r1
 80019ac:	4659      	mov	r1, fp
 80019ae:	eb63 0901 	sbc.w	r9, r3, r1
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c6:	4690      	mov	r8, r2
 80019c8:	4699      	mov	r9, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	eb18 0303 	adds.w	r3, r8, r3
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	462b      	mov	r3, r5
 80019d4:	eb49 0303 	adc.w	r3, r9, r3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019e6:	4629      	mov	r1, r5
 80019e8:	024b      	lsls	r3, r1, #9
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f0:	4621      	mov	r1, r4
 80019f2:	024a      	lsls	r2, r1, #9
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	2200      	movs	r2, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a04:	f7fe fc34 	bl	8000270 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a10:	e058      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	464b      	mov	r3, r9
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	0159      	lsls	r1, r3, #5
 8001a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3e:	0150      	lsls	r0, r2, #5
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4641      	mov	r1, r8
 8001a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a64:	ebb2 040a 	subs.w	r4, r2, sl
 8001a68:	eb63 050b 	sbc.w	r5, r3, fp
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	00eb      	lsls	r3, r5, #3
 8001a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4643      	mov	r3, r8
 8001a82:	18e3      	adds	r3, r4, r3
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	464b      	mov	r3, r9
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	028b      	lsls	r3, r1, #10
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	028a      	lsls	r2, r1, #10
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab8:	f7fe fbda 	bl	8000270 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3750      	adds	r7, #80	; 0x50
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0a9b      	lsrs	r3, r3, #10
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08005d14 	.word	0x08005d14

08001b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b44:	f7ff ffdc 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0b5b      	lsrs	r3, r3, #13
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08005d14 	.word	0x08005d14

08001b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	220f      	movs	r2, #15
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_RCC_GetClockConfig+0x60>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0207 	and.w	r2, r3, #7
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e041      	b.n	8001c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f839 	bl	8001c6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 f9d8 	bl	8001fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d001      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e04e      	b.n	8001d36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d022      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc2:	d01d      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d018      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00e      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d111      	bne.n	8001d24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d010      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0201 	orr.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d22:	e007      	b.n	8001d34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40000c00 	.word	0x40000c00
 8001d54:	40010400 	.word	0x40010400
 8001d58:	40014000 	.word	0x40014000
 8001d5c:	40001800 	.word	0x40001800

08001d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0202 	mvn.w	r2, #2
 8001d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8ee 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8e0 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8f1 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0204 	mvn.w	r2, #4
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8c4 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8b6 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8c7 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0208 	mvn.w	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f89a 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f88c 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f89d 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f870 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f862 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f873 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0201 	mvn.w	r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fd1c 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f902 	bl	8002114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f838 	bl	8001fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0220 	mvn.w	r2, #32
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8cc 	bl	8002100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <TIM_Base_SetConfig+0x114>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d00f      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3d      	ldr	r2, [pc, #244]	; (80020d8 <TIM_Base_SetConfig+0x118>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00b      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <TIM_Base_SetConfig+0x11c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <TIM_Base_SetConfig+0x120>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <TIM_Base_SetConfig+0x124>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d108      	bne.n	8002012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <TIM_Base_SetConfig+0x114>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d02b      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d027      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2c      	ldr	r2, [pc, #176]	; (80020d8 <TIM_Base_SetConfig+0x118>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d023      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <TIM_Base_SetConfig+0x11c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01f      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <TIM_Base_SetConfig+0x120>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01b      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <TIM_Base_SetConfig+0x124>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d017      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <TIM_Base_SetConfig+0x128>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a27      	ldr	r2, [pc, #156]	; (80020ec <TIM_Base_SetConfig+0x12c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00f      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <TIM_Base_SetConfig+0x130>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00b      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <TIM_Base_SetConfig+0x134>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <TIM_Base_SetConfig+0x138>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a23      	ldr	r2, [pc, #140]	; (80020fc <TIM_Base_SetConfig+0x13c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d108      	bne.n	8002084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <TIM_Base_SetConfig+0x114>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d003      	beq.n	80020b8 <TIM_Base_SetConfig+0xf8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <TIM_Base_SetConfig+0x124>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d103      	bne.n	80020c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	615a      	str	r2, [r3, #20]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40000c00 	.word	0x40000c00
 80020e4:	40010400 	.word	0x40010400
 80020e8:	40014000 	.word	0x40014000
 80020ec:	40014400 	.word	0x40014400
 80020f0:	40014800 	.word	0x40014800
 80020f4:	40001800 	.word	0x40001800
 80020f8:	40001c00 	.word	0x40001c00
 80020fc:	40002000 	.word	0x40002000

08002100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e03f      	b.n	80021ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fc28 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800216a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f929 	bl	80023c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b08a      	sub	sp, #40	; 0x28
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d17c      	bne.n	80022dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_UART_Transmit+0x2c>
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e075      	b.n	80022de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_UART_Transmit+0x3e>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e06e      	b.n	80022de <HAL_UART_Transmit+0x11c>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002216:	f7fe fd51 	bl	8000cbc <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	d108      	bne.n	8002244 <HAL_UART_Transmit+0x82>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d104      	bne.n	8002244 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	e003      	b.n	800224c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002254:	e02a      	b.n	80022ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f840 	bl	80022e6 <UART_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e036      	b.n	80022de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10b      	bne.n	800228e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	3302      	adds	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	e007      	b.n	800229e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1cf      	bne.n	8002256 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2200      	movs	r2, #0
 80022be:	2140      	movs	r1, #64	; 0x40
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f810 	bl	80022e6 <UART_WaitOnFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e006      	b.n	80022de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b090      	sub	sp, #64	; 0x40
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f6:	e050      	b.n	800239a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fe:	d04c      	beq.n	800239a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <UART_WaitOnFlagUntilTimeout+0x30>
 8002306:	f7fe fcd9 	bl	8000cbc <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002312:	429a      	cmp	r2, r3
 8002314:	d241      	bcs.n	800239a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	e853 3f00 	ldrex	r3, [r3]
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002336:	637a      	str	r2, [r7, #52]	; 0x34
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800233c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800233e:	e841 2300 	strex	r3, r2, [r1]
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e5      	bne.n	8002316 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3314      	adds	r3, #20
 8002350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	e853 3f00 	ldrex	r3, [r3]
 8002358:	613b      	str	r3, [r7, #16]
   return(result);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3314      	adds	r3, #20
 8002368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800236a:	623a      	str	r2, [r7, #32]
 800236c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236e:	69f9      	ldr	r1, [r7, #28]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	61bb      	str	r3, [r7, #24]
   return(result);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e5      	bne.n	800234a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e00f      	b.n	80023ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4013      	ands	r3, r2
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d09f      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3740      	adds	r7, #64	; 0x40
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c8:	b0c0      	sub	sp, #256	; 0x100
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e0:	68d9      	ldr	r1, [r3, #12]
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	ea40 0301 	orr.w	r3, r0, r1
 80023ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	431a      	orrs	r2, r3
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800241c:	f021 010c 	bic.w	r1, r1, #12
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800242a:	430b      	orrs	r3, r1
 800242c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800243a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243e:	6999      	ldr	r1, [r3, #24]
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	ea40 0301 	orr.w	r3, r0, r1
 800244a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <UART_SetConfig+0x2cc>)
 8002454:	429a      	cmp	r2, r3
 8002456:	d005      	beq.n	8002464 <UART_SetConfig+0xa0>
 8002458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <UART_SetConfig+0x2d0>)
 8002460:	429a      	cmp	r2, r3
 8002462:	d104      	bne.n	800246e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002464:	f7ff fb6c 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8002468:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800246c:	e003      	b.n	8002476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800246e:	f7ff fb53 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002472:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002480:	f040 810c 	bne.w	800269c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002488:	2200      	movs	r2, #0
 800248a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800248e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002496:	4622      	mov	r2, r4
 8002498:	462b      	mov	r3, r5
 800249a:	1891      	adds	r1, r2, r2
 800249c:	65b9      	str	r1, [r7, #88]	; 0x58
 800249e:	415b      	adcs	r3, r3
 80024a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024a6:	4621      	mov	r1, r4
 80024a8:	eb12 0801 	adds.w	r8, r2, r1
 80024ac:	4629      	mov	r1, r5
 80024ae:	eb43 0901 	adc.w	r9, r3, r1
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024c6:	4690      	mov	r8, r2
 80024c8:	4699      	mov	r9, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	eb18 0303 	adds.w	r3, r8, r3
 80024d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024d4:	462b      	mov	r3, r5
 80024d6:	eb49 0303 	adc.w	r3, r9, r3
 80024da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024f2:	460b      	mov	r3, r1
 80024f4:	18db      	adds	r3, r3, r3
 80024f6:	653b      	str	r3, [r7, #80]	; 0x50
 80024f8:	4613      	mov	r3, r2
 80024fa:	eb42 0303 	adc.w	r3, r2, r3
 80024fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002508:	f7fd feb2 	bl	8000270 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4b61      	ldr	r3, [pc, #388]	; (8002698 <UART_SetConfig+0x2d4>)
 8002512:	fba3 2302 	umull	r2, r3, r3, r2
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	011c      	lsls	r4, r3, #4
 800251a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002524:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800252c:	4642      	mov	r2, r8
 800252e:	464b      	mov	r3, r9
 8002530:	1891      	adds	r1, r2, r2
 8002532:	64b9      	str	r1, [r7, #72]	; 0x48
 8002534:	415b      	adcs	r3, r3
 8002536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800253c:	4641      	mov	r1, r8
 800253e:	eb12 0a01 	adds.w	sl, r2, r1
 8002542:	4649      	mov	r1, r9
 8002544:	eb43 0b01 	adc.w	fp, r3, r1
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800255c:	4692      	mov	sl, r2
 800255e:	469b      	mov	fp, r3
 8002560:	4643      	mov	r3, r8
 8002562:	eb1a 0303 	adds.w	r3, sl, r3
 8002566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800256a:	464b      	mov	r3, r9
 800256c:	eb4b 0303 	adc.w	r3, fp, r3
 8002570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002580:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002588:	460b      	mov	r3, r1
 800258a:	18db      	adds	r3, r3, r3
 800258c:	643b      	str	r3, [r7, #64]	; 0x40
 800258e:	4613      	mov	r3, r2
 8002590:	eb42 0303 	adc.w	r3, r2, r3
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
 8002596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800259a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800259e:	f7fd fe67 	bl	8000270 <__aeabi_uldivmod>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <UART_SetConfig+0x2d4>)
 80025aa:	fba3 2301 	umull	r2, r3, r3, r1
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2264      	movs	r2, #100	; 0x64
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	1acb      	subs	r3, r1, r3
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025be:	4b36      	ldr	r3, [pc, #216]	; (8002698 <UART_SetConfig+0x2d4>)
 80025c0:	fba3 2302 	umull	r2, r3, r3, r2
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025cc:	441c      	add	r4, r3
 80025ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025d2:	2200      	movs	r2, #0
 80025d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025e0:	4642      	mov	r2, r8
 80025e2:	464b      	mov	r3, r9
 80025e4:	1891      	adds	r1, r2, r2
 80025e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025e8:	415b      	adcs	r3, r3
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025f0:	4641      	mov	r1, r8
 80025f2:	1851      	adds	r1, r2, r1
 80025f4:	6339      	str	r1, [r7, #48]	; 0x30
 80025f6:	4649      	mov	r1, r9
 80025f8:	414b      	adcs	r3, r1
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002608:	4659      	mov	r1, fp
 800260a:	00cb      	lsls	r3, r1, #3
 800260c:	4651      	mov	r1, sl
 800260e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002612:	4651      	mov	r1, sl
 8002614:	00ca      	lsls	r2, r1, #3
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	4603      	mov	r3, r0
 800261c:	4642      	mov	r2, r8
 800261e:	189b      	adds	r3, r3, r2
 8002620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002624:	464b      	mov	r3, r9
 8002626:	460a      	mov	r2, r1
 8002628:	eb42 0303 	adc.w	r3, r2, r3
 800262c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800263c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002644:	460b      	mov	r3, r1
 8002646:	18db      	adds	r3, r3, r3
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
 800264a:	4613      	mov	r3, r2
 800264c:	eb42 0303 	adc.w	r3, r2, r3
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800265a:	f7fd fe09 	bl	8000270 <__aeabi_uldivmod>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <UART_SetConfig+0x2d4>)
 8002664:	fba3 1302 	umull	r1, r3, r3, r2
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	2164      	movs	r1, #100	; 0x64
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	3332      	adds	r3, #50	; 0x32
 8002676:	4a08      	ldr	r2, [pc, #32]	; (8002698 <UART_SetConfig+0x2d4>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	f003 0207 	and.w	r2, r3, #7
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4422      	add	r2, r4
 800268a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800268c:	e105      	b.n	800289a <UART_SetConfig+0x4d6>
 800268e:	bf00      	nop
 8002690:	40011000 	.word	0x40011000
 8002694:	40011400 	.word	0x40011400
 8002698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800269c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026ae:	4642      	mov	r2, r8
 80026b0:	464b      	mov	r3, r9
 80026b2:	1891      	adds	r1, r2, r2
 80026b4:	6239      	str	r1, [r7, #32]
 80026b6:	415b      	adcs	r3, r3
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026be:	4641      	mov	r1, r8
 80026c0:	1854      	adds	r4, r2, r1
 80026c2:	4649      	mov	r1, r9
 80026c4:	eb43 0501 	adc.w	r5, r3, r1
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	00eb      	lsls	r3, r5, #3
 80026d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d6:	00e2      	lsls	r2, r4, #3
 80026d8:	4614      	mov	r4, r2
 80026da:	461d      	mov	r5, r3
 80026dc:	4643      	mov	r3, r8
 80026de:	18e3      	adds	r3, r4, r3
 80026e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026e4:	464b      	mov	r3, r9
 80026e6:	eb45 0303 	adc.w	r3, r5, r3
 80026ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800270a:	4629      	mov	r1, r5
 800270c:	008b      	lsls	r3, r1, #2
 800270e:	4621      	mov	r1, r4
 8002710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002714:	4621      	mov	r1, r4
 8002716:	008a      	lsls	r2, r1, #2
 8002718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800271c:	f7fd fda8 	bl	8000270 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4b60      	ldr	r3, [pc, #384]	; (80028a8 <UART_SetConfig+0x4e4>)
 8002726:	fba3 2302 	umull	r2, r3, r3, r2
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	011c      	lsls	r4, r3, #4
 800272e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002732:	2200      	movs	r2, #0
 8002734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800273c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	1891      	adds	r1, r2, r2
 8002746:	61b9      	str	r1, [r7, #24]
 8002748:	415b      	adcs	r3, r3
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002750:	4641      	mov	r1, r8
 8002752:	1851      	adds	r1, r2, r1
 8002754:	6139      	str	r1, [r7, #16]
 8002756:	4649      	mov	r1, r9
 8002758:	414b      	adcs	r3, r1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002768:	4659      	mov	r1, fp
 800276a:	00cb      	lsls	r3, r1, #3
 800276c:	4651      	mov	r1, sl
 800276e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002772:	4651      	mov	r1, sl
 8002774:	00ca      	lsls	r2, r1, #3
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	4603      	mov	r3, r0
 800277c:	4642      	mov	r2, r8
 800277e:	189b      	adds	r3, r3, r2
 8002780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002784:	464b      	mov	r3, r9
 8002786:	460a      	mov	r2, r1
 8002788:	eb42 0303 	adc.w	r3, r2, r3
 800278c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	67bb      	str	r3, [r7, #120]	; 0x78
 800279a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027a8:	4649      	mov	r1, r9
 80027aa:	008b      	lsls	r3, r1, #2
 80027ac:	4641      	mov	r1, r8
 80027ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b2:	4641      	mov	r1, r8
 80027b4:	008a      	lsls	r2, r1, #2
 80027b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ba:	f7fd fd59 	bl	8000270 <__aeabi_uldivmod>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <UART_SetConfig+0x4e4>)
 80027c4:	fba3 1302 	umull	r1, r3, r3, r2
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	2164      	movs	r1, #100	; 0x64
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	3332      	adds	r3, #50	; 0x32
 80027d6:	4a34      	ldr	r2, [pc, #208]	; (80028a8 <UART_SetConfig+0x4e4>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e2:	441c      	add	r4, r3
 80027e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e8:	2200      	movs	r2, #0
 80027ea:	673b      	str	r3, [r7, #112]	; 0x70
 80027ec:	677a      	str	r2, [r7, #116]	; 0x74
 80027ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027f2:	4642      	mov	r2, r8
 80027f4:	464b      	mov	r3, r9
 80027f6:	1891      	adds	r1, r2, r2
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	415b      	adcs	r3, r3
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002802:	4641      	mov	r1, r8
 8002804:	1851      	adds	r1, r2, r1
 8002806:	6039      	str	r1, [r7, #0]
 8002808:	4649      	mov	r1, r9
 800280a:	414b      	adcs	r3, r1
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800281a:	4659      	mov	r1, fp
 800281c:	00cb      	lsls	r3, r1, #3
 800281e:	4651      	mov	r1, sl
 8002820:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002824:	4651      	mov	r1, sl
 8002826:	00ca      	lsls	r2, r1, #3
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	4603      	mov	r3, r0
 800282e:	4642      	mov	r2, r8
 8002830:	189b      	adds	r3, r3, r2
 8002832:	66bb      	str	r3, [r7, #104]	; 0x68
 8002834:	464b      	mov	r3, r9
 8002836:	460a      	mov	r2, r1
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	663b      	str	r3, [r7, #96]	; 0x60
 8002848:	667a      	str	r2, [r7, #100]	; 0x64
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002856:	4649      	mov	r1, r9
 8002858:	008b      	lsls	r3, r1, #2
 800285a:	4641      	mov	r1, r8
 800285c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002860:	4641      	mov	r1, r8
 8002862:	008a      	lsls	r2, r1, #2
 8002864:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002868:	f7fd fd02 	bl	8000270 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <UART_SetConfig+0x4e4>)
 8002872:	fba3 1302 	umull	r1, r3, r3, r2
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2164      	movs	r1, #100	; 0x64
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	3332      	adds	r3, #50	; 0x32
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <UART_SetConfig+0x4e4>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4422      	add	r2, r4
 8002898:	609a      	str	r2, [r3, #8]
}
 800289a:	bf00      	nop
 800289c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a6:	bf00      	nop
 80028a8:	51eb851f 	.word	0x51eb851f

080028ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Handler+0x1c>)
 80028b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028b4:	f001 fc4a 	bl	800414c <xTaskGetSchedulerState>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028be:	f002 fa33 	bl	8004d28 <xPortSysTickHandler>
  }
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80028dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <vApplicationGetIdleTaskMemory+0x30>)
 80028e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000012c 	.word	0x2000012c
 80028fc:	200001e8 	.word	0x200001e8

08002900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a07      	ldr	r2, [pc, #28]	; (800292c <vApplicationGetTimerTaskMemory+0x2c>)
 8002910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <vApplicationGetTimerTaskMemory+0x30>)
 8002916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	200003e8 	.word	0x200003e8
 8002930:	200004a4 	.word	0x200004a4

08002934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 0208 	add.w	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f103 0208 	add.w	r2, r3, #8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f103 0208 	add.w	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e00c      	b.n	8002a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3308      	adds	r3, #8
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e002      	b.n	8002a04 <vListInsert+0x2e>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d2f6      	bcs.n	80029fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6892      	ldr	r2, [r2, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6852      	ldr	r2, [r2, #4]
 8002a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d103      	bne.n	8002a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ac6:	f002 f89d 	bl	8004c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	3b01      	subs	r3, #1
 8002af8:	68f9      	ldr	r1, [r7, #12]
 8002afa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	441a      	add	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d114      	bne.n	8002b46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01a      	beq.n	8002b5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3310      	adds	r3, #16
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 f94d 	bl	8003dc8 <xTaskRemoveFromEventList>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <xQueueGenericReset+0xcc>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	e009      	b.n	8002b5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3310      	adds	r3, #16
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fef2 	bl	8002934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3324      	adds	r3, #36	; 0x24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff feed 	bl	8002934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b5a:	f002 f883 	bl	8004c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	; 0x38
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <xQueueGenericCreateStatic+0x52>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <xQueueGenericCreateStatic+0x56>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericCreateStatic+0x58>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	623b      	str	r3, [r7, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <xQueueGenericCreateStatic+0x7e>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <xQueueGenericCreateStatic+0x82>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <xQueueGenericCreateStatic+0x84>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	61fb      	str	r3, [r7, #28]
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c0a:	2350      	movs	r3, #80	; 0x50
 8002c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b50      	cmp	r3, #80	; 0x50
 8002c12:	d00a      	beq.n	8002c2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	61bb      	str	r3, [r7, #24]
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f83f 	bl	8002cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3730      	adds	r7, #48	; 0x30
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	613b      	str	r3, [r7, #16]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3350      	adds	r3, #80	; 0x50
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 f8d7 	bl	8004e48 <pvPortMalloc>
 8002c9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d011      	beq.n	8002cc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3350      	adds	r3, #80	; 0x50
 8002caa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f805 	bl	8002cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
	}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e002      	b.n	8002cf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfe:	2101      	movs	r1, #1
 8002d00:	69b8      	ldr	r0, [r7, #24]
 8002d02:	f7ff fecb 	bl	8002a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueGenericSend+0x32>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <xQueueGenericSend+0x40>
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <xQueueGenericSend+0x44>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <xQueueGenericSend+0x46>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <xQueueGenericSend+0x60>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d103      	bne.n	8002d86 <xQueueGenericSend+0x6e>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericSend+0x72>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericSend+0x74>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	623b      	str	r3, [r7, #32]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da6:	f001 f9d1 	bl	800414c <xTaskGetSchedulerState>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <xQueueGenericSend+0x9e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <xQueueGenericSend+0xa2>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <xQueueGenericSend+0xa4>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61fb      	str	r3, [r7, #28]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd6:	f001 ff15 	bl	8004c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <xQueueGenericSend+0xd4>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d129      	bne.n	8002e40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df2:	f000 fa29 	bl	8003248 <prvCopyDataToQueue>
 8002df6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 ffdf 	bl	8003dc8 <xTaskRemoveFromEventList>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <xQueueGenericSend+0x1f8>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	e00a      	b.n	8002e38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e28:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <xQueueGenericSend+0x1f8>)
 8002e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e38:	f001 ff14 	bl	8004c64 <vPortExitCritical>
				return pdPASS;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e063      	b.n	8002f08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e46:	f001 ff0d 	bl	8004c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e05c      	b.n	8002f08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f819 	bl	8003e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e62:	f001 feff 	bl	8004c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e66:	f000 fd85 	bl	8003974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6a:	f001 fecb 	bl	8004c04 <vPortEnterCritical>
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d103      	bne.n	8002e84 <xQueueGenericSend+0x16c>
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d103      	bne.n	8002e9a <xQueueGenericSend+0x182>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e9a:	f001 fee3 	bl	8004c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e9e:	1d3a      	adds	r2, r7, #4
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 f808 	bl	8003ebc <xTaskCheckForTimeOut>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d124      	bne.n	8002efc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb4:	f000 fac0 	bl	8003438 <prvIsQueueFull>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 ff2e 	bl	8003d28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ece:	f000 fa4b 	bl	8003368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ed2:	f000 fd5d 	bl	8003990 <xTaskResumeAll>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f af7c 	bne.w	8002dd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <xQueueGenericSend+0x1f8>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	e772      	b.n	8002dd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 fa39 	bl	8003368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef6:	f000 fd4b 	bl	8003990 <xTaskResumeAll>
 8002efa:	e76c      	b.n	8002dd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efe:	f000 fa33 	bl	8003368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f02:	f000 fd45 	bl	8003990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3738      	adds	r7, #56	; 0x38
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	e000ed04 	.word	0xe000ed04

08002f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b090      	sub	sp, #64	; 0x40
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <xQueueGenericSendFromISR+0x3c>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <xQueueGenericSendFromISR+0x40>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <xQueueGenericSendFromISR+0x42>
 8002f54:	2300      	movs	r3, #0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d103      	bne.n	8002f7e <xQueueGenericSendFromISR+0x6a>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <xQueueGenericSendFromISR+0x6e>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <xQueueGenericSendFromISR+0x70>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	623b      	str	r3, [r7, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f9e:	f001 ff13 	bl	8004dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	61fa      	str	r2, [r7, #28]
 8002fb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <xQueueGenericSendFromISR+0xbc>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d12f      	bne.n	8003030 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fe6:	f000 f92f 	bl	8003248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d112      	bne.n	800301a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d016      	beq.n	800302a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	3324      	adds	r3, #36	; 0x24
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fee1 	bl	8003dc8 <xTaskRemoveFromEventList>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e007      	b.n	800302a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800301a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800301e:	3301      	adds	r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	b25a      	sxtb	r2, r3
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800302a:	2301      	movs	r3, #1
 800302c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800302e:	e001      	b.n	8003034 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003030:	2300      	movs	r3, #0
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800303e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003042:	4618      	mov	r0, r3
 8003044:	3740      	adds	r7, #64	; 0x40
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <xQueueReceive+0x30>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	623b      	str	r3, [r7, #32]
}
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueReceive+0x3e>
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueReceive+0x42>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueReceive+0x44>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueReceive+0x5e>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61fb      	str	r3, [r7, #28]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030aa:	f001 f84f 	bl	800414c <xTaskGetSchedulerState>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xQueueReceive+0x6e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <xQueueReceive+0x72>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueReceive+0x74>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueReceive+0x8e>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	61bb      	str	r3, [r7, #24]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030da:	f001 fd93 	bl	8004c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01f      	beq.n	800312a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ee:	f000 f915 	bl	800331c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00f      	beq.n	8003122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	3310      	adds	r3, #16
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fe5e 	bl	8003dc8 <xTaskRemoveFromEventList>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <xQueueReceive+0x1bc>)
 8003114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003122:	f001 fd9f 	bl	8004c64 <vPortExitCritical>
				return pdPASS;
 8003126:	2301      	movs	r3, #1
 8003128:	e069      	b.n	80031fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003130:	f001 fd98 	bl	8004c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003134:	2300      	movs	r3, #0
 8003136:	e062      	b.n	80031fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fea4 	bl	8003e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800314c:	f001 fd8a 	bl	8004c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003150:	f000 fc10 	bl	8003974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003154:	f001 fd56 	bl	8004c04 <vPortEnterCritical>
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315e:	b25b      	sxtb	r3, r3
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d103      	bne.n	800316e <xQueueReceive+0x122>
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003174:	b25b      	sxtb	r3, r3
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d103      	bne.n	8003184 <xQueueReceive+0x138>
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003184:	f001 fd6e 	bl	8004c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003188:	1d3a      	adds	r2, r7, #4
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fe93 	bl	8003ebc <xTaskCheckForTimeOut>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d123      	bne.n	80031e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800319c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319e:	f000 f935 	bl	800340c <prvIsQueueEmpty>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d017      	beq.n	80031d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	3324      	adds	r3, #36	; 0x24
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fdb9 	bl	8003d28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b8:	f000 f8d6 	bl	8003368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031bc:	f000 fbe8 	bl	8003990 <xTaskResumeAll>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d189      	bne.n	80030da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <xQueueReceive+0x1bc>)
 80031c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	e780      	b.n	80030da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 f8c5 	bl	8003368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031de:	f000 fbd7 	bl	8003990 <xTaskResumeAll>
 80031e2:	e77a      	b.n	80030da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e6:	f000 f8bf 	bl	8003368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ea:	f000 fbd1 	bl	8003990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f0:	f000 f90c 	bl	800340c <prvIsQueueEmpty>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f43f af6f 	beq.w	80030da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	60bb      	str	r3, [r7, #8]
}
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003230:	f001 fce8 	bl	8004c04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800323a:	f001 fd13 	bl	8004c64 <vPortExitCritical>

	return uxReturn;
 800323e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d14d      	bne.n	800330a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff88 	bl	8004188 <xTaskPriorityDisinherit>
 8003278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e043      	b.n	800330a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d119      	bne.n	80032bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6858      	ldr	r0, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	f001 ffee 	bl	8005274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	441a      	add	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d32b      	bcc.n	800330a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	e026      	b.n	800330a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68d8      	ldr	r0, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	461a      	mov	r2, r3
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	f001 ffd4 	bl	8005274 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	425b      	negs	r3, r3
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d207      	bcs.n	80032f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	425b      	negs	r3, r3
 80032f2:	441a      	add	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d105      	bne.n	800330a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	3b01      	subs	r3, #1
 8003308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003312:	697b      	ldr	r3, [r7, #20]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	d303      	bcc.n	8003350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68d9      	ldr	r1, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	461a      	mov	r2, r3
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	f001 ff8a 	bl	8005274 <memcpy>
	}
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003370:	f001 fc48 	bl	8004c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800337a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800337c:	e011      	b.n	80033a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d012      	beq.n	80033ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3324      	adds	r3, #36	; 0x24
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fd1c 	bl	8003dc8 <xTaskRemoveFromEventList>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003396:	f000 fdf3 	bl	8003f80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	3b01      	subs	r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	dce9      	bgt.n	800337e <prvUnlockQueue+0x16>
 80033aa:	e000      	b.n	80033ae <prvUnlockQueue+0x46>
					break;
 80033ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033b6:	f001 fc55 	bl	8004c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033ba:	f001 fc23 	bl	8004c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c6:	e011      	b.n	80033ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3310      	adds	r3, #16
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fcf7 	bl	8003dc8 <xTaskRemoveFromEventList>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033e0:	f000 fdce 	bl	8003f80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	dce9      	bgt.n	80033c8 <prvUnlockQueue+0x60>
 80033f4:	e000      	b.n	80033f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003400:	f001 fc30 	bl	8004c64 <vPortExitCritical>
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003414:	f001 fbf6 	bl	8004c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e001      	b.n	800342a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800342a:	f001 fc1b 	bl	8004c64 <vPortExitCritical>

	return xReturn;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003440:	f001 fbe0 	bl	8004c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	429a      	cmp	r2, r3
 800344e:	d102      	bne.n	8003456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003450:	2301      	movs	r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e001      	b.n	800345a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800345a:	f001 fc03 	bl	8004c64 <vPortExitCritical>

	return xReturn;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e014      	b.n	80034a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003478:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <vQueueAddToRegistry+0x50>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003484:	490c      	ldr	r1, [pc, #48]	; (80034b8 <vQueueAddToRegistry+0x50>)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <vQueueAddToRegistry+0x50>)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800349a:	e006      	b.n	80034aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b07      	cmp	r3, #7
 80034a6:	d9e7      	bls.n	8003478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	200008a4 	.word	0x200008a4

080034bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034cc:	f001 fb9a 	bl	8004c04 <vPortEnterCritical>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d103      	bne.n	80034e6 <vQueueWaitForMessageRestricted+0x2a>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d103      	bne.n	80034fc <vQueueWaitForMessageRestricted+0x40>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034fc:	f001 fbb2 	bl	8004c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d106      	bne.n	8003516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fc2d 	bl	8003d70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff26 	bl	8003368 <prvUnlockQueue>
	}
 800351c:	bf00      	nop
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08e      	sub	sp, #56	; 0x38
 8003528:	af04      	add	r7, sp, #16
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	623b      	str	r3, [r7, #32]
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <xTaskCreateStatic+0x46>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	61fb      	str	r3, [r7, #28]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800356a:	23bc      	movs	r3, #188	; 0xbc
 800356c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2bbc      	cmp	r3, #188	; 0xbc
 8003572:	d00a      	beq.n	800358a <xTaskCreateStatic+0x66>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	61bb      	str	r3, [r7, #24]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800358a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01e      	beq.n	80035d0 <xTaskCreateStatic+0xac>
 8003592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035aa:	2300      	movs	r3, #0
 80035ac:	9303      	str	r3, [sp, #12]
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	9302      	str	r3, [sp, #8]
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f850 	bl	8003668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035ca:	f000 f8f3 	bl	80037b4 <prvAddNewTaskToReadyList>
 80035ce:	e001      	b.n	80035d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035d4:	697b      	ldr	r3, [r7, #20]
	}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3728      	adds	r7, #40	; 0x28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08c      	sub	sp, #48	; 0x30
 80035e2:	af04      	add	r7, sp, #16
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fc28 	bl	8004e48 <pvPortMalloc>
 80035f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003600:	20bc      	movs	r0, #188	; 0xbc
 8003602:	f001 fc21 	bl	8004e48 <pvPortMalloc>
 8003606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
 8003614:	e005      	b.n	8003622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f001 fce2 	bl	8004fe0 <vPortFree>
 800361c:	e001      	b.n	8003622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d017      	beq.n	8003658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	2300      	movs	r3, #0
 8003634:	9303      	str	r3, [sp, #12]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	9302      	str	r3, [sp, #8]
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f80e 	bl	8003668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800364c:	69f8      	ldr	r0, [r7, #28]
 800364e:	f000 f8b1 	bl	80037b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e002      	b.n	800365e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800365e:	69bb      	ldr	r3, [r7, #24]
	}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	461a      	mov	r2, r3
 8003680:	21a5      	movs	r1, #165	; 0xa5
 8003682:	f001 fe05 	bl	8005290 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003690:	3b01      	subs	r3, #1
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f023 0307 	bic.w	r3, r3, #7
 800369e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	617b      	str	r3, [r7, #20]
}
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01f      	beq.n	8003706 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e012      	b.n	80036f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	7819      	ldrb	r1, [r3, #0]
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	3334      	adds	r3, #52	; 0x34
 80036dc:	460a      	mov	r2, r1
 80036de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	3301      	adds	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b0f      	cmp	r3, #15
 80036f6:	d9e9      	bls.n	80036cc <prvInitialiseNewTask+0x64>
 80036f8:	e000      	b.n	80036fc <prvInitialiseNewTask+0x94>
			{
				break;
 80036fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003704:	e003      	b.n	800370e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	2b37      	cmp	r3, #55	; 0x37
 8003712:	d901      	bls.n	8003718 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003714:	2337      	movs	r3, #55	; 0x37
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003722:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	2200      	movs	r2, #0
 8003728:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	3304      	adds	r3, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f920 	bl	8002974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	3318      	adds	r3, #24
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff f91b 	bl	8002974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	2200      	movs	r2, #0
 8003758:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	2200      	movs	r2, #0
 8003760:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	3354      	adds	r3, #84	; 0x54
 8003768:	2260      	movs	r2, #96	; 0x60
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fd8f 	bl	8005290 <memset>
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <prvInitialiseNewTask+0x140>)
 8003776:	659a      	str	r2, [r3, #88]	; 0x58
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	4a0c      	ldr	r2, [pc, #48]	; (80037ac <prvInitialiseNewTask+0x144>)
 800377c:	65da      	str	r2, [r3, #92]	; 0x5c
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <prvInitialiseNewTask+0x148>)
 8003782:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	69b8      	ldr	r0, [r7, #24]
 800378a:	f001 f90d 	bl	80049a8 <pxPortInitialiseStack>
 800378e:	4602      	mov	r2, r0
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037a0:	bf00      	nop
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08005d3c 	.word	0x08005d3c
 80037ac:	08005d5c 	.word	0x08005d5c
 80037b0:	08005d1c 	.word	0x08005d1c

080037b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037bc:	f001 fa22 	bl	8004c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a2c      	ldr	r2, [pc, #176]	; (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ca:	4b2c      	ldr	r3, [pc, #176]	; (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037d2:	4a2a      	ldr	r2, [pc, #168]	; (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037e0:	f000 fbf2 	bl	8003fc8 <prvInitialiseTaskLists>
 80037e4:	e00d      	b.n	8003802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037e6:	4b26      	ldr	r3, [pc, #152]	; (8003880 <prvAddNewTaskToReadyList+0xcc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d802      	bhi.n	8003802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <prvAddNewTaskToReadyList+0xd0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <prvAddNewTaskToReadyList+0xd0>)
 800380a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <prvAddNewTaskToReadyList+0xd0>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <prvAddNewTaskToReadyList+0xd4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d903      	bls.n	8003828 <prvAddNewTaskToReadyList+0x74>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	4a18      	ldr	r2, [pc, #96]	; (8003888 <prvAddNewTaskToReadyList+0xd4>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4a15      	ldr	r2, [pc, #84]	; (800388c <prvAddNewTaskToReadyList+0xd8>)
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f7ff f8a5 	bl	800298e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003844:	f001 fa0e 	bl	8004c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <prvAddNewTaskToReadyList+0xcc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <prvAddNewTaskToReadyList+0xc8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d207      	bcs.n	800386e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <prvAddNewTaskToReadyList+0xdc>)
 8003860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000db8 	.word	0x20000db8
 800387c:	200008e4 	.word	0x200008e4
 8003880:	20000dc4 	.word	0x20000dc4
 8003884:	20000dd4 	.word	0x20000dd4
 8003888:	20000dc0 	.word	0x20000dc0
 800388c:	200008e8 	.word	0x200008e8
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038a2:	463a      	mov	r2, r7
 80038a4:	1d39      	adds	r1, r7, #4
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f80e 	bl	80028cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	460a      	mov	r2, r1
 80038c2:	4924      	ldr	r1, [pc, #144]	; (8003954 <vTaskStartScheduler+0xc0>)
 80038c4:	4824      	ldr	r0, [pc, #144]	; (8003958 <vTaskStartScheduler+0xc4>)
 80038c6:	f7ff fe2d 	bl	8003524 <xTaskCreateStatic>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4a23      	ldr	r2, [pc, #140]	; (800395c <vTaskStartScheduler+0xc8>)
 80038ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038d0:	4b22      	ldr	r3, [pc, #136]	; (800395c <vTaskStartScheduler+0xc8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e001      	b.n	80038e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038e8:	f000 fd10 	bl	800430c <xTimerCreateTimerTask>
 80038ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d11b      	bne.n	800392c <vTaskStartScheduler+0x98>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	613b      	str	r3, [r7, #16]
}
 8003906:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <vTaskStartScheduler+0xcc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3354      	adds	r3, #84	; 0x54
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <vTaskStartScheduler+0xd0>)
 8003910:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <vTaskStartScheduler+0xd4>)
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <vTaskStartScheduler+0xd8>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <vTaskStartScheduler+0xdc>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003926:	f001 f8cb 	bl	8004ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800392a:	e00e      	b.n	800394a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d10a      	bne.n	800394a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	60fb      	str	r3, [r7, #12]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <vTaskStartScheduler+0xb4>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	08005cec 	.word	0x08005cec
 8003958:	08003f99 	.word	0x08003f99
 800395c:	20000ddc 	.word	0x20000ddc
 8003960:	200008e4 	.word	0x200008e4
 8003964:	20000014 	.word	0x20000014
 8003968:	20000dd8 	.word	0x20000dd8
 800396c:	20000dc4 	.word	0x20000dc4
 8003970:	20000dbc 	.word	0x20000dbc

08003974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <vTaskSuspendAll+0x18>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a03      	ldr	r2, [pc, #12]	; (800398c <vTaskSuspendAll+0x18>)
 8003980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20000de0 	.word	0x20000de0

08003990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800399e:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <xTaskResumeAll+0x118>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <xTaskResumeAll+0x2c>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	603b      	str	r3, [r7, #0]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039bc:	f001 f922 	bl	8004c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039c0:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <xTaskResumeAll+0x118>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4a38      	ldr	r2, [pc, #224]	; (8003aa8 <xTaskResumeAll+0x118>)
 80039c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <xTaskResumeAll+0x118>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d162      	bne.n	8003a98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039d2:	4b36      	ldr	r3, [pc, #216]	; (8003aac <xTaskResumeAll+0x11c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d05e      	beq.n	8003a98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039da:	e02f      	b.n	8003a3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039dc:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <xTaskResumeAll+0x120>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3318      	adds	r3, #24
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f82d 	bl	8002a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff f828 	bl	8002a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <xTaskResumeAll+0x124>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d903      	bls.n	8003a0c <xTaskResumeAll+0x7c>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	4a2a      	ldr	r2, [pc, #168]	; (8003ab4 <xTaskResumeAll+0x124>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <xTaskResumeAll+0x128>)
 8003a1a:	441a      	add	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7fe ffb3 	bl	800298e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4b23      	ldr	r3, [pc, #140]	; (8003abc <xTaskResumeAll+0x12c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <xTaskResumeAll+0x130>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a3c:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <xTaskResumeAll+0x120>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1cb      	bne.n	80039dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a4a:	f000 fb5f 	bl	800410c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <xTaskResumeAll+0x134>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d010      	beq.n	8003a7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a5a:	f000 f847 	bl	8003aec <xTaskIncrementTick>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <xTaskResumeAll+0x130>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f1      	bne.n	8003a5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <xTaskResumeAll+0x134>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <xTaskResumeAll+0x130>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <xTaskResumeAll+0x138>)
 8003a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a98:	f001 f8e4 	bl	8004c64 <vPortExitCritical>

	return xAlreadyYielded;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000de0 	.word	0x20000de0
 8003aac:	20000db8 	.word	0x20000db8
 8003ab0:	20000d78 	.word	0x20000d78
 8003ab4:	20000dc0 	.word	0x20000dc0
 8003ab8:	200008e8 	.word	0x200008e8
 8003abc:	200008e4 	.word	0x200008e4
 8003ac0:	20000dcc 	.word	0x20000dcc
 8003ac4:	20000dc8 	.word	0x20000dc8
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <xTaskGetTickCount+0x1c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ad8:	687b      	ldr	r3, [r7, #4]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000dbc 	.word	0x20000dbc

08003aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af6:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <xTaskIncrementTick+0x148>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 808f 	bne.w	8003c1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b00:	4b4d      	ldr	r3, [pc, #308]	; (8003c38 <xTaskIncrementTick+0x14c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b08:	4a4b      	ldr	r2, [pc, #300]	; (8003c38 <xTaskIncrementTick+0x14c>)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d120      	bne.n	8003b56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b14:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <xTaskIncrementTick+0x150>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	603b      	str	r3, [r7, #0]
}
 8003b30:	bf00      	nop
 8003b32:	e7fe      	b.n	8003b32 <xTaskIncrementTick+0x46>
 8003b34:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <xTaskIncrementTick+0x150>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <xTaskIncrementTick+0x154>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a3f      	ldr	r2, [pc, #252]	; (8003c3c <xTaskIncrementTick+0x150>)
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <xTaskIncrementTick+0x154>)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <xTaskIncrementTick+0x158>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	4a3d      	ldr	r2, [pc, #244]	; (8003c44 <xTaskIncrementTick+0x158>)
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	f000 fadb 	bl	800410c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b56:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <xTaskIncrementTick+0x15c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d349      	bcc.n	8003bf4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b60:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <xTaskIncrementTick+0x150>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <xTaskIncrementTick+0x15c>)
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	601a      	str	r2, [r3, #0]
					break;
 8003b72:	e03f      	b.n	8003bf4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b74:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <xTaskIncrementTick+0x150>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d203      	bcs.n	8003b94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b8c:	4a2e      	ldr	r2, [pc, #184]	; (8003c48 <xTaskIncrementTick+0x15c>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b92:	e02f      	b.n	8003bf4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe ff55 	bl	8002a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe ff4c 	bl	8002a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <xTaskIncrementTick+0x160>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d903      	bls.n	8003bc4 <xTaskIncrementTick+0xd8>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <xTaskIncrementTick+0x160>)
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <xTaskIncrementTick+0x164>)
 8003bd2:	441a      	add	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f7fe fed7 	bl	800298e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <xTaskIncrementTick+0x168>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3b8      	bcc.n	8003b60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bf2:	e7b5      	b.n	8003b60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <xTaskIncrementTick+0x168>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfa:	4915      	ldr	r1, [pc, #84]	; (8003c50 <xTaskIncrementTick+0x164>)
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d901      	bls.n	8003c10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <xTaskIncrementTick+0x16c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e004      	b.n	8003c28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <xTaskIncrementTick+0x170>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <xTaskIncrementTick+0x170>)
 8003c26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c28:	697b      	ldr	r3, [r7, #20]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000de0 	.word	0x20000de0
 8003c38:	20000dbc 	.word	0x20000dbc
 8003c3c:	20000d70 	.word	0x20000d70
 8003c40:	20000d74 	.word	0x20000d74
 8003c44:	20000dd0 	.word	0x20000dd0
 8003c48:	20000dd8 	.word	0x20000dd8
 8003c4c:	20000dc0 	.word	0x20000dc0
 8003c50:	200008e8 	.word	0x200008e8
 8003c54:	200008e4 	.word	0x200008e4
 8003c58:	20000dcc 	.word	0x20000dcc
 8003c5c:	20000dc8 	.word	0x20000dc8

08003c60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <vTaskSwitchContext+0xb0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c6e:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <vTaskSwitchContext+0xb4>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c74:	e046      	b.n	8003d04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <vTaskSwitchContext+0xb4>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <vTaskSwitchContext+0xb8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	e010      	b.n	8003ca6 <vTaskSwitchContext+0x46>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	607b      	str	r3, [r7, #4]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <vTaskSwitchContext+0x3e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	491d      	ldr	r1, [pc, #116]	; (8003d1c <vTaskSwitchContext+0xbc>)
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0e4      	beq.n	8003c84 <vTaskSwitchContext+0x24>
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <vTaskSwitchContext+0xbc>)
 8003cc6:	4413      	add	r3, r2
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3308      	adds	r3, #8
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d104      	bne.n	8003cea <vTaskSwitchContext+0x8a>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <vTaskSwitchContext+0xc0>)
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <vTaskSwitchContext+0xb8>)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <vTaskSwitchContext+0xc0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3354      	adds	r3, #84	; 0x54
 8003d00:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <vTaskSwitchContext+0xc4>)
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20000de0 	.word	0x20000de0
 8003d14:	20000dcc 	.word	0x20000dcc
 8003d18:	20000dc0 	.word	0x20000dc0
 8003d1c:	200008e8 	.word	0x200008e8
 8003d20:	200008e4 	.word	0x200008e4
 8003d24:	20000014 	.word	0x20000014

08003d28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60fb      	str	r3, [r7, #12]
}
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <vTaskPlaceOnEventList+0x44>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3318      	adds	r3, #24
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fe3d 	bl	80029d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	6838      	ldr	r0, [r7, #0]
 8003d60:	f000 fa80 	bl	8004264 <prvAddCurrentTaskToDelayedList>
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	200008e4 	.word	0x200008e4

08003d70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	617b      	str	r3, [r7, #20]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3318      	adds	r3, #24
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7fe fdf4 	bl	800298e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
 8003db0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	68b8      	ldr	r0, [r7, #8]
 8003db6:	f000 fa55 	bl	8004264 <prvAddCurrentTaskToDelayedList>
	}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200008e4 	.word	0x200008e4

08003dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	60fb      	str	r3, [r7, #12]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3318      	adds	r3, #24
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fe25 	bl	8002a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <xTaskRemoveFromEventList+0xb0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11d      	bne.n	8003e42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fe1c 	bl	8002a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <xTaskRemoveFromEventList+0xb4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d903      	bls.n	8003e24 <xTaskRemoveFromEventList+0x5c>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <xTaskRemoveFromEventList+0xb4>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <xTaskRemoveFromEventList+0xb8>)
 8003e32:	441a      	add	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7fe fda7 	bl	800298e <vListInsertEnd>
 8003e40:	e005      	b.n	8003e4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	3318      	adds	r3, #24
 8003e46:	4619      	mov	r1, r3
 8003e48:	480e      	ldr	r0, [pc, #56]	; (8003e84 <xTaskRemoveFromEventList+0xbc>)
 8003e4a:	f7fe fda0 	bl	800298e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <xTaskRemoveFromEventList+0xc0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d905      	bls.n	8003e68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <xTaskRemoveFromEventList+0xc4>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e001      	b.n	8003e6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e6c:	697b      	ldr	r3, [r7, #20]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000de0 	.word	0x20000de0
 8003e7c:	20000dc0 	.word	0x20000dc0
 8003e80:	200008e8 	.word	0x200008e8
 8003e84:	20000d78 	.word	0x20000d78
 8003e88:	200008e4 	.word	0x200008e4
 8003e8c:	20000dcc 	.word	0x20000dcc

08003e90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <vTaskInternalSetTimeOutState+0x24>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <vTaskInternalSetTimeOutState+0x28>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	605a      	str	r2, [r3, #4]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20000dd0 	.word	0x20000dd0
 8003eb8:	20000dbc 	.word	0x20000dbc

08003ebc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	613b      	str	r3, [r7, #16]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60fb      	str	r3, [r7, #12]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003efe:	f000 fe81 	bl	8004c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <xTaskCheckForTimeOut+0xbc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d102      	bne.n	8003f22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	e023      	b.n	8003f6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <xTaskCheckForTimeOut+0xc0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d007      	beq.n	8003f3e <xTaskCheckForTimeOut+0x82>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	e015      	b.n	8003f6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d20b      	bcs.n	8003f60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff9b 	bl	8003e90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	e004      	b.n	8003f6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f6a:	f000 fe7b 	bl	8004c64 <vPortExitCritical>

	return xReturn;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000dbc 	.word	0x20000dbc
 8003f7c:	20000dd0 	.word	0x20000dd0

08003f80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <vTaskMissedYield+0x14>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20000dcc 	.word	0x20000dcc

08003f98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fa0:	f000 f852 	bl	8004048 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <prvIdleTask+0x28>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d9f9      	bls.n	8003fa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <prvIdleTask+0x2c>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fbc:	e7f0      	b.n	8003fa0 <prvIdleTask+0x8>
 8003fbe:	bf00      	nop
 8003fc0:	200008e8 	.word	0x200008e8
 8003fc4:	e000ed04 	.word	0xe000ed04

08003fc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	e00c      	b.n	8003fee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <prvInitialiseTaskLists+0x60>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fca6 	bl	8002934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3301      	adds	r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b37      	cmp	r3, #55	; 0x37
 8003ff2:	d9ef      	bls.n	8003fd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ff4:	480d      	ldr	r0, [pc, #52]	; (800402c <prvInitialiseTaskLists+0x64>)
 8003ff6:	f7fe fc9d 	bl	8002934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ffa:	480d      	ldr	r0, [pc, #52]	; (8004030 <prvInitialiseTaskLists+0x68>)
 8003ffc:	f7fe fc9a 	bl	8002934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004000:	480c      	ldr	r0, [pc, #48]	; (8004034 <prvInitialiseTaskLists+0x6c>)
 8004002:	f7fe fc97 	bl	8002934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004006:	480c      	ldr	r0, [pc, #48]	; (8004038 <prvInitialiseTaskLists+0x70>)
 8004008:	f7fe fc94 	bl	8002934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800400c:	480b      	ldr	r0, [pc, #44]	; (800403c <prvInitialiseTaskLists+0x74>)
 800400e:	f7fe fc91 	bl	8002934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <prvInitialiseTaskLists+0x78>)
 8004014:	4a05      	ldr	r2, [pc, #20]	; (800402c <prvInitialiseTaskLists+0x64>)
 8004016:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <prvInitialiseTaskLists+0x7c>)
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <prvInitialiseTaskLists+0x68>)
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	200008e8 	.word	0x200008e8
 800402c:	20000d48 	.word	0x20000d48
 8004030:	20000d5c 	.word	0x20000d5c
 8004034:	20000d78 	.word	0x20000d78
 8004038:	20000d8c 	.word	0x20000d8c
 800403c:	20000da4 	.word	0x20000da4
 8004040:	20000d70 	.word	0x20000d70
 8004044:	20000d74 	.word	0x20000d74

08004048 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800404e:	e019      	b.n	8004084 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004050:	f000 fdd8 	bl	8004c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <prvCheckTasksWaitingTermination+0x50>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fcf1 	bl	8002a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <prvCheckTasksWaitingTermination+0x54>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <prvCheckTasksWaitingTermination+0x54>)
 800406e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <prvCheckTasksWaitingTermination+0x58>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3b01      	subs	r3, #1
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <prvCheckTasksWaitingTermination+0x58>)
 8004078:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800407a:	f000 fdf3 	bl	8004c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f810 	bl	80040a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <prvCheckTasksWaitingTermination+0x58>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e1      	bne.n	8004050 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000d8c 	.word	0x20000d8c
 800409c:	20000db8 	.word	0x20000db8
 80040a0:	20000da0 	.word	0x20000da0

080040a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3354      	adds	r3, #84	; 0x54
 80040b0:	4618      	mov	r0, r3
 80040b2:	f001 f997 	bl	80053e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 ff8b 	bl	8004fe0 <vPortFree>
				vPortFree( pxTCB );
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 ff88 	bl	8004fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040d0:	e018      	b.n	8004104 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d103      	bne.n	80040e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 ff7f 	bl	8004fe0 <vPortFree>
	}
 80040e2:	e00f      	b.n	8004104 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d00a      	beq.n	8004104 <prvDeleteTCB+0x60>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	60fb      	str	r3, [r7, #12]
}
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <prvDeleteTCB+0x5e>
	}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <prvResetNextTaskUnblockTime+0x38>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <prvResetNextTaskUnblockTime+0x3c>)
 800411e:	f04f 32ff 	mov.w	r2, #4294967295
 8004122:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004124:	e008      	b.n	8004138 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <prvResetNextTaskUnblockTime+0x38>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <prvResetNextTaskUnblockTime+0x3c>)
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	20000d70 	.word	0x20000d70
 8004148:	20000dd8 	.word	0x20000dd8

0800414c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <xTaskGetSchedulerState+0x34>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800415a:	2301      	movs	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e008      	b.n	8004172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <xTaskGetSchedulerState+0x38>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004168:	2302      	movs	r3, #2
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e001      	b.n	8004172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004172:	687b      	ldr	r3, [r7, #4]
	}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	20000dc4 	.word	0x20000dc4
 8004184:	20000de0 	.word	0x20000de0

08004188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d056      	beq.n	800424c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <xTaskPriorityDisinherit+0xd0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d00a      	beq.n	80041be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60bb      	str	r3, [r7, #8]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e0:	1e5a      	subs	r2, r3, #1
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d02c      	beq.n	800424c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d128      	bne.n	800424c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fc22 	bl	8002a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <xTaskPriorityDisinherit+0xd4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <xTaskPriorityDisinherit+0xa4>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <xTaskPriorityDisinherit+0xd4>)
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <xTaskPriorityDisinherit+0xd8>)
 800423a:	441a      	add	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f7fe fba3 	bl	800298e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800424c:	697b      	ldr	r3, [r7, #20]
	}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	200008e4 	.word	0x200008e4
 800425c:	20000dc0 	.word	0x20000dc0
 8004260:	200008e8 	.word	0x200008e8

08004264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800426e:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fbe4 	bl	8002a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d10a      	bne.n	800429e <prvAddCurrentTaskToDelayedList+0x3a>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800428e:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4819      	ldr	r0, [pc, #100]	; (80042fc <prvAddCurrentTaskToDelayedList+0x98>)
 8004298:	f7fe fb79 	bl	800298e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800429c:	e026      	b.n	80042ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d209      	bcs.n	80042ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <prvAddCurrentTaskToDelayedList+0x9c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe fb87 	bl	80029d6 <vListInsert>
}
 80042c8:	e010      	b.n	80042ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7fe fb7d 	bl	80029d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d202      	bcs.n	80042ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000dbc 	.word	0x20000dbc
 80042f8:	200008e4 	.word	0x200008e4
 80042fc:	20000da4 	.word	0x20000da4
 8004300:	20000d74 	.word	0x20000d74
 8004304:	20000d70 	.word	0x20000d70
 8004308:	20000dd8 	.word	0x20000dd8

0800430c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004316:	f000 fb07 	bl	8004928 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800431a:	4b1c      	ldr	r3, [pc, #112]	; (800438c <xTimerCreateTimerTask+0x80>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800432a:	1d3a      	adds	r2, r7, #4
 800432c:	f107 0108 	add.w	r1, r7, #8
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fae3 	bl	8002900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	9202      	str	r2, [sp, #8]
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	2302      	movs	r3, #2
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	460a      	mov	r2, r1
 800434c:	4910      	ldr	r1, [pc, #64]	; (8004390 <xTimerCreateTimerTask+0x84>)
 800434e:	4811      	ldr	r0, [pc, #68]	; (8004394 <xTimerCreateTimerTask+0x88>)
 8004350:	f7ff f8e8 	bl	8003524 <xTaskCreateStatic>
 8004354:	4603      	mov	r3, r0
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <xTimerCreateTimerTask+0x8c>)
 8004358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <xTimerCreateTimerTask+0x8c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004362:	2301      	movs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	613b      	str	r3, [r7, #16]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004382:	697b      	ldr	r3, [r7, #20]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000e14 	.word	0x20000e14
 8004390:	08005cf4 	.word	0x08005cf4
 8004394:	080044d1 	.word	0x080044d1
 8004398:	20000e18 	.word	0x20000e18

0800439c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	623b      	str	r3, [r7, #32]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <xTimerGenericCommand+0x98>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02a      	beq.n	8004428 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	dc18      	bgt.n	8004416 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043e4:	f7ff feb2 	bl	800414c <xTaskGetSchedulerState>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d109      	bne.n	8004402 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <xTimerGenericCommand+0x98>)
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	f107 0110 	add.w	r1, r7, #16
 80043f6:	2300      	movs	r3, #0
 80043f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fa:	f7fe fc8d 	bl	8002d18 <xQueueGenericSend>
 80043fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004400:	e012      	b.n	8004428 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <xTimerGenericCommand+0x98>)
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	f107 0110 	add.w	r1, r7, #16
 800440a:	2300      	movs	r3, #0
 800440c:	2200      	movs	r2, #0
 800440e:	f7fe fc83 	bl	8002d18 <xQueueGenericSend>
 8004412:	6278      	str	r0, [r7, #36]	; 0x24
 8004414:	e008      	b.n	8004428 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <xTimerGenericCommand+0x98>)
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	f107 0110 	add.w	r1, r7, #16
 800441e:	2300      	movs	r3, #0
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	f7fe fd77 	bl	8002f14 <xQueueGenericSendFromISR>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800442a:	4618      	mov	r0, r3
 800442c:	3728      	adds	r7, #40	; 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000e14 	.word	0x20000e14

08004438 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004442:	4b22      	ldr	r3, [pc, #136]	; (80044cc <prvProcessExpiredTimer+0x94>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3304      	adds	r3, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe faf9 	bl	8002a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d022      	beq.n	80044aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	18d1      	adds	r1, r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	6978      	ldr	r0, [r7, #20]
 8004472:	f000 f8d1 	bl	8004618 <prvInsertTimerInActiveList>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01f      	beq.n	80044bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800447c:	2300      	movs	r3, #0
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2300      	movs	r3, #0
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	2100      	movs	r1, #0
 8004486:	6978      	ldr	r0, [r7, #20]
 8004488:	f7ff ff88 	bl	800439c <xTimerGenericCommand>
 800448c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d113      	bne.n	80044bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	60fb      	str	r3, [r7, #12]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	4798      	blx	r3
}
 80044c4:	bf00      	nop
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000e0c 	.word	0x20000e0c

080044d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044d8:	f107 0308 	add.w	r3, r7, #8
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f857 	bl	8004590 <prvGetNextExpireTime>
 80044e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4619      	mov	r1, r3
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f803 	bl	80044f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044ee:	f000 f8d5 	bl	800469c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044f2:	e7f1      	b.n	80044d8 <prvTimerTask+0x8>

080044f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044fe:	f7ff fa39 	bl	8003974 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f866 	bl	80045d8 <prvSampleTimeNow>
 800450c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d130      	bne.n	8004576 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <prvProcessTimerOrBlockTask+0x3c>
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	429a      	cmp	r2, r3
 8004520:	d806      	bhi.n	8004530 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004522:	f7ff fa35 	bl	8003990 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ff85 	bl	8004438 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800452e:	e024      	b.n	800457a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <prvProcessTimerOrBlockTask+0x90>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <prvProcessTimerOrBlockTask+0x50>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <prvProcessTimerOrBlockTask+0x52>
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004548:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <prvProcessTimerOrBlockTask+0x94>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	4619      	mov	r1, r3
 8004556:	f7fe ffb1 	bl	80034bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800455a:	f7ff fa19 	bl	8003990 <xTaskResumeAll>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <prvProcessTimerOrBlockTask+0x98>)
 8004566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	f3bf 8f6f 	isb	sy
}
 8004574:	e001      	b.n	800457a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004576:	f7ff fa0b 	bl	8003990 <xTaskResumeAll>
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000e10 	.word	0x20000e10
 8004588:	20000e14 	.word	0x20000e14
 800458c:	e000ed04 	.word	0xe000ed04

08004590 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004598:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <prvGetNextExpireTime+0x44>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <prvGetNextExpireTime+0x16>
 80045a2:	2201      	movs	r2, #1
 80045a4:	e000      	b.n	80045a8 <prvGetNextExpireTime+0x18>
 80045a6:	2200      	movs	r2, #0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <prvGetNextExpireTime+0x44>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	e001      	b.n	80045c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045c4:	68fb      	ldr	r3, [r7, #12]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000e0c 	.word	0x20000e0c

080045d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045e0:	f7ff fa74 	bl	8003acc <xTaskGetTickCount>
 80045e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <prvSampleTimeNow+0x3c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d205      	bcs.n	80045fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045f0:	f000 f936 	bl	8004860 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e002      	b.n	8004602 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004602:	4a04      	ldr	r2, [pc, #16]	; (8004614 <prvSampleTimeNow+0x3c>)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004608:	68fb      	ldr	r3, [r7, #12]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000e1c 	.word	0x20000e1c

08004618 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d812      	bhi.n	8004664 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	429a      	cmp	r2, r3
 800464a:	d302      	bcc.n	8004652 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e01b      	b.n	800468a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <prvInsertTimerInActiveList+0x7c>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3304      	adds	r3, #4
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f7fe f9ba 	bl	80029d6 <vListInsert>
 8004662:	e012      	b.n	800468a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d206      	bcs.n	800467a <prvInsertTimerInActiveList+0x62>
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d302      	bcc.n	800467a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e007      	b.n	800468a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <prvInsertTimerInActiveList+0x80>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3304      	adds	r3, #4
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f7fe f9a6 	bl	80029d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800468a:	697b      	ldr	r3, [r7, #20]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000e10 	.word	0x20000e10
 8004698:	20000e0c 	.word	0x20000e0c

0800469c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08e      	sub	sp, #56	; 0x38
 80046a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046a2:	e0ca      	b.n	800483a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da18      	bge.n	80046dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	3304      	adds	r3, #4
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	61fb      	str	r3, [r7, #28]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d2:	6850      	ldr	r0, [r2, #4]
 80046d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d6:	6892      	ldr	r2, [r2, #8]
 80046d8:	4611      	mov	r1, r2
 80046da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f2c0 80aa 	blt.w	8004838 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	3304      	adds	r3, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe f9a7 	bl	8002a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046fa:	463b      	mov	r3, r7
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff6b 	bl	80045d8 <prvSampleTimeNow>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b09      	cmp	r3, #9
 8004708:	f200 8097 	bhi.w	800483a <prvProcessReceivedCommands+0x19e>
 800470c:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <prvProcessReceivedCommands+0x78>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	0800473d 	.word	0x0800473d
 8004718:	0800473d 	.word	0x0800473d
 800471c:	0800473d 	.word	0x0800473d
 8004720:	080047b1 	.word	0x080047b1
 8004724:	080047c5 	.word	0x080047c5
 8004728:	0800480f 	.word	0x0800480f
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800473d 	.word	0x0800473d
 8004734:	080047b1 	.word	0x080047b1
 8004738:	080047c5 	.word	0x080047c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	18d1      	adds	r1, r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800475c:	f7ff ff5c 	bl	8004618 <prvInsertTimerInActiveList>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d069      	beq.n	800483a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800476c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05e      	beq.n	800483a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	441a      	add	r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2300      	movs	r3, #0
 800478a:	2100      	movs	r1, #0
 800478c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478e:	f7ff fe05 	bl	800439c <xTimerGenericCommand>
 8004792:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d14f      	bne.n	800483a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	61bb      	str	r3, [r7, #24]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80047c2:	e03a      	b.n	800483a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	617b      	str	r3, [r7, #20]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	18d1      	adds	r1, r2, r3
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004808:	f7ff ff06 	bl	8004618 <prvInsertTimerInActiveList>
					break;
 800480c:	e015      	b.n	800483a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800481c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481e:	f000 fbdf 	bl	8004fe0 <vPortFree>
 8004822:	e00a      	b.n	800483a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004836:	e000      	b.n	800483a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004838:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <prvProcessReceivedCommands+0x1c0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1d39      	adds	r1, r7, #4
 8004840:	2200      	movs	r2, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fc02 	bl	800304c <xQueueReceive>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	f47f af2a 	bne.w	80046a4 <prvProcessReceivedCommands+0x8>
	}
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	3730      	adds	r7, #48	; 0x30
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000e14 	.word	0x20000e14

08004860 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004866:	e048      	b.n	80048fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004868:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <prvSwitchTimerLists+0xc0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004872:	4b2b      	ldr	r3, [pc, #172]	; (8004920 <prvSwitchTimerLists+0xc0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe f8e1 	bl	8002a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02e      	beq.n	80048fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90e      	bls.n	80048cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <prvSwitchTimerLists+0xc0>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe f886 	bl	80029d6 <vListInsert>
 80048ca:	e016      	b.n	80048fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048cc:	2300      	movs	r3, #0
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2300      	movs	r3, #0
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	2100      	movs	r1, #0
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff fd60 	bl	800439c <xTimerGenericCommand>
 80048dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	603b      	str	r3, [r7, #0]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <prvSwitchTimerLists+0xc0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1b1      	bne.n	8004868 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <prvSwitchTimerLists+0xc0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <prvSwitchTimerLists+0xc4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <prvSwitchTimerLists+0xc0>)
 8004910:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004912:	4a04      	ldr	r2, [pc, #16]	; (8004924 <prvSwitchTimerLists+0xc4>)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	6013      	str	r3, [r2, #0]
}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000e0c 	.word	0x20000e0c
 8004924:	20000e10 	.word	0x20000e10

08004928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800492e:	f000 f969 	bl	8004c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <prvCheckForValidListAndQueue+0x60>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d120      	bne.n	800497c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800493a:	4814      	ldr	r0, [pc, #80]	; (800498c <prvCheckForValidListAndQueue+0x64>)
 800493c:	f7fd fffa 	bl	8002934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004940:	4813      	ldr	r0, [pc, #76]	; (8004990 <prvCheckForValidListAndQueue+0x68>)
 8004942:	f7fd fff7 	bl	8002934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <prvCheckForValidListAndQueue+0x6c>)
 8004948:	4a10      	ldr	r2, [pc, #64]	; (800498c <prvCheckForValidListAndQueue+0x64>)
 800494a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <prvCheckForValidListAndQueue+0x70>)
 800494e:	4a10      	ldr	r2, [pc, #64]	; (8004990 <prvCheckForValidListAndQueue+0x68>)
 8004950:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004952:	2300      	movs	r3, #0
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4b11      	ldr	r3, [pc, #68]	; (800499c <prvCheckForValidListAndQueue+0x74>)
 8004958:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <prvCheckForValidListAndQueue+0x78>)
 800495a:	2110      	movs	r1, #16
 800495c:	200a      	movs	r0, #10
 800495e:	f7fe f905 	bl	8002b6c <xQueueGenericCreateStatic>
 8004962:	4603      	mov	r3, r0
 8004964:	4a08      	ldr	r2, [pc, #32]	; (8004988 <prvCheckForValidListAndQueue+0x60>)
 8004966:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004968:	4b07      	ldr	r3, [pc, #28]	; (8004988 <prvCheckForValidListAndQueue+0x60>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <prvCheckForValidListAndQueue+0x60>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	490b      	ldr	r1, [pc, #44]	; (80049a4 <prvCheckForValidListAndQueue+0x7c>)
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fd76 	bl	8003468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800497c:	f000 f972 	bl	8004c64 <vPortExitCritical>
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000e14 	.word	0x20000e14
 800498c:	20000de4 	.word	0x20000de4
 8004990:	20000df8 	.word	0x20000df8
 8004994:	20000e0c 	.word	0x20000e0c
 8004998:	20000e10 	.word	0x20000e10
 800499c:	20000ec0 	.word	0x20000ec0
 80049a0:	20000e20 	.word	0x20000e20
 80049a4:	08005cfc 	.word	0x08005cfc

080049a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3b04      	subs	r3, #4
 80049b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3b04      	subs	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f023 0201 	bic.w	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049d8:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <pxPortInitialiseStack+0x64>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3b14      	subs	r3, #20
 80049e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b04      	subs	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f06f 0202 	mvn.w	r2, #2
 80049f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3b20      	subs	r3, #32
 80049fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049fe:	68fb      	ldr	r3, [r7, #12]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	08004a11 	.word	0x08004a11

08004a10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <prvTaskExitError+0x54>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d00a      	beq.n	8004a3a <prvTaskExitError+0x2a>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <prvTaskExitError+0x28>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	60bb      	str	r3, [r7, #8]
}
 8004a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a4e:	bf00      	nop
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0fc      	beq.n	8004a50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	20000010 	.word	0x20000010
	...

08004a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <pxCurrentTCBConst2>)
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	6808      	ldr	r0, [r1, #0]
 8004a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	f380 8809 	msr	PSP, r0
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8811 	msr	BASEPRI, r0
 8004a8a:	4770      	bx	lr
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst2>:
 8004a90:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a98:	4808      	ldr	r0, [pc, #32]	; (8004abc <prvPortStartFirstTask+0x24>)
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f380 8808 	msr	MSP, r0
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8814 	msr	CONTROL, r0
 8004aaa:	b662      	cpsie	i
 8004aac:	b661      	cpsie	f
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	df00      	svc	0
 8004ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aba:	bf00      	nop
 8004abc:	e000ed08 	.word	0xe000ed08

08004ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ac6:	4b46      	ldr	r3, [pc, #280]	; (8004be0 <xPortStartScheduler+0x120>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a46      	ldr	r2, [pc, #280]	; (8004be4 <xPortStartScheduler+0x124>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10a      	bne.n	8004ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <xPortStartScheduler+0x120>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3f      	ldr	r2, [pc, #252]	; (8004be8 <xPortStartScheduler+0x128>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10a      	bne.n	8004b06 <xPortStartScheduler+0x46>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b06:	4b39      	ldr	r3, [pc, #228]	; (8004bec <xPortStartScheduler+0x12c>)
 8004b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <xPortStartScheduler+0x130>)
 8004b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b2e:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b30:	2207      	movs	r2, #7
 8004b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b34:	e009      	b.n	8004b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b36:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d0ef      	beq.n	8004b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1c3 0307 	rsb	r3, r3, #7
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d00a      	beq.n	8004b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60bb      	str	r3, [r7, #8]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b78:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b82:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b96:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bae:	f000 f8dd 	bl	8004d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <xPortStartScheduler+0x13c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bb8:	f000 f8fc 	bl	8004db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bbc:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <xPortStartScheduler+0x140>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0f      	ldr	r2, [pc, #60]	; (8004c00 <xPortStartScheduler+0x140>)
 8004bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bc8:	f7ff ff66 	bl	8004a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bcc:	f7ff f848 	bl	8003c60 <vTaskSwitchContext>
	prvTaskExitError();
 8004bd0:	f7ff ff1e 	bl	8004a10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	e000ed00 	.word	0xe000ed00
 8004be4:	410fc271 	.word	0x410fc271
 8004be8:	410fc270 	.word	0x410fc270
 8004bec:	e000e400 	.word	0xe000e400
 8004bf0:	20000f10 	.word	0x20000f10
 8004bf4:	20000f14 	.word	0x20000f14
 8004bf8:	e000ed20 	.word	0xe000ed20
 8004bfc:	20000010 	.word	0x20000010
 8004c00:	e000ef34 	.word	0xe000ef34

08004c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	607b      	str	r3, [r7, #4]
}
 8004c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3301      	adds	r3, #1
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10f      	bne.n	8004c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <vPortEnterCritical+0x5c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	603b      	str	r3, [r7, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <vPortEnterCritical+0x4a>
	}
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	20000010 	.word	0x20000010
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <vPortExitCritical+0x24>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	607b      	str	r3, [r7, #4]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <vPortExitCritical+0x42>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f383 8811 	msr	BASEPRI, r3
}
 8004ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000010 	.word	0x20000010
	...

08004cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cc0:	f3ef 8009 	mrs	r0, PSP
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <pxCurrentTCBConst>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f01e 0f10 	tst.w	lr, #16
 8004cd0:	bf08      	it	eq
 8004cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	6010      	str	r0, [r2, #0]
 8004cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ce4:	f380 8811 	msr	BASEPRI, r0
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f7fe ffb6 	bl	8003c60 <vTaskSwitchContext>
 8004cf4:	f04f 0000 	mov.w	r0, #0
 8004cf8:	f380 8811 	msr	BASEPRI, r0
 8004cfc:	bc09      	pop	{r0, r3}
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	6808      	ldr	r0, [r1, #0]
 8004d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d06:	f01e 0f10 	tst.w	lr, #16
 8004d0a:	bf08      	it	eq
 8004d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d10:	f380 8809 	msr	PSP, r0
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	f3af 8000 	nop.w

08004d20 <pxCurrentTCBConst>:
 8004d20:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop

08004d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	607b      	str	r3, [r7, #4]
}
 8004d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d42:	f7fe fed3 	bl	8003aec <xTaskIncrementTick>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <xPortSysTickHandler+0x40>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f383 8811 	msr	BASEPRI, r3
}
 8004d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <vPortSetupTimerInterrupt+0x38>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <vPortSetupTimerInterrupt+0x3c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <vPortSetupTimerInterrupt+0x40>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <vPortSetupTimerInterrupt+0x44>)
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d90:	2207      	movs	r2, #7
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000e010 	.word	0xe000e010
 8004da4:	e000e018 	.word	0xe000e018
 8004da8:	20000004 	.word	0x20000004
 8004dac:	10624dd3 	.word	0x10624dd3
 8004db0:	e000e014 	.word	0xe000e014

08004db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dc4 <vPortEnableVFP+0x10>
 8004db8:	6801      	ldr	r1, [r0, #0]
 8004dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dbe:	6001      	str	r1, [r0, #0]
 8004dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dc2:	bf00      	nop
 8004dc4:	e000ed88 	.word	0xe000ed88

08004dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dce:	f3ef 8305 	mrs	r3, IPSR
 8004dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d914      	bls.n	8004e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dda:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <vPortValidateInterruptPriority+0x70>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <vPortValidateInterruptPriority+0x74>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	7afa      	ldrb	r2, [r7, #11]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d20a      	bcs.n	8004e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e04:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <vPortValidateInterruptPriority+0x78>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <vPortValidateInterruptPriority+0x7c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d90a      	bls.n	8004e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	603b      	str	r3, [r7, #0]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <vPortValidateInterruptPriority+0x60>
	}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	e000e3f0 	.word	0xe000e3f0
 8004e3c:	20000f10 	.word	0x20000f10
 8004e40:	e000ed0c 	.word	0xe000ed0c
 8004e44:	20000f14 	.word	0x20000f14

08004e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e54:	f7fe fd8e 	bl	8003974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e58:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <pvPortMalloc+0x180>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e60:	f000 f920 	bl	80050a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <pvPortMalloc+0x184>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 8093 	bne.w	8004f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01d      	beq.n	8004eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e78:	2208      	movs	r2, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d014      	beq.n	8004eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f023 0307 	bic.w	r3, r3, #7
 8004e90:	3308      	adds	r3, #8
 8004e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	617b      	str	r3, [r7, #20]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d06e      	beq.n	8004f98 <pvPortMalloc+0x150>
 8004eba:	4b45      	ldr	r3, [pc, #276]	; (8004fd0 <pvPortMalloc+0x188>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d869      	bhi.n	8004f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ec4:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <pvPortMalloc+0x18c>)
 8004ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ec8:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <pvPortMalloc+0x18c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ece:	e004      	b.n	8004eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <pvPortMalloc+0xa4>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f1      	bne.n	8004ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004eec:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <pvPortMalloc+0x180>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d050      	beq.n	8004f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2208      	movs	r2, #8
 8004efc:	4413      	add	r3, r2
 8004efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	2308      	movs	r3, #8
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d91f      	bls.n	8004f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <pvPortMalloc+0xf8>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	613b      	str	r3, [r7, #16]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f52:	69b8      	ldr	r0, [r7, #24]
 8004f54:	f000 f908 	bl	8005168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <pvPortMalloc+0x190>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d203      	bcs.n	8004f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <pvPortMalloc+0x190>)
 8004f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <pvPortMalloc+0x184>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <pvPortMalloc+0x194>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <pvPortMalloc+0x194>)
 8004f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f98:	f7fe fcfa 	bl	8003990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <pvPortMalloc+0x174>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <pvPortMalloc+0x172>
	return pvReturn;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3728      	adds	r7, #40	; 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20004b20 	.word	0x20004b20
 8004fcc:	20004b34 	.word	0x20004b34
 8004fd0:	20004b24 	.word	0x20004b24
 8004fd4:	20004b18 	.word	0x20004b18
 8004fd8:	20004b28 	.word	0x20004b28
 8004fdc:	20004b2c 	.word	0x20004b2c

08004fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04d      	beq.n	800508e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <vPortFree+0xb8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <vPortFree+0x44>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60fb      	str	r3, [r7, #12]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <vPortFree+0x62>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60bb      	str	r3, [r7, #8]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <vPortFree+0xb8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01e      	beq.n	800508e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11a      	bne.n	800508e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <vPortFree+0xb8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	43db      	mvns	r3, r3
 8005062:	401a      	ands	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005068:	f7fe fc84 	bl	8003974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <vPortFree+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4413      	add	r3, r2
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <vPortFree+0xbc>)
 8005078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800507a:	6938      	ldr	r0, [r7, #16]
 800507c:	f000 f874 	bl	8005168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <vPortFree+0xc0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <vPortFree+0xc0>)
 8005088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800508a:	f7fe fc81 	bl	8003990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20004b34 	.word	0x20004b34
 800509c:	20004b24 	.word	0x20004b24
 80050a0:	20004b30 	.word	0x20004b30

080050a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <prvHeapInit+0xac>)
 80050b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3307      	adds	r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0307 	bic.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <prvHeapInit+0xac>)
 80050d4:	4413      	add	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <prvHeapInit+0xb0>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050e2:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <prvHeapInit+0xb0>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4413      	add	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050f0:	2208      	movs	r2, #8
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a15      	ldr	r2, [pc, #84]	; (8005158 <prvHeapInit+0xb4>)
 8005104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <prvHeapInit+0xb4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <prvHeapInit+0xb4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <prvHeapInit+0xb4>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a0a      	ldr	r2, [pc, #40]	; (800515c <prvHeapInit+0xb8>)
 8005132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4a09      	ldr	r2, [pc, #36]	; (8005160 <prvHeapInit+0xbc>)
 800513a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <prvHeapInit+0xc0>)
 800513e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000f18 	.word	0x20000f18
 8005154:	20004b18 	.word	0x20004b18
 8005158:	20004b20 	.word	0x20004b20
 800515c:	20004b28 	.word	0x20004b28
 8005160:	20004b24 	.word	0x20004b24
 8005164:	20004b34 	.word	0x20004b34

08005168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <prvInsertBlockIntoFreeList+0xac>)
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e002      	b.n	800517c <prvInsertBlockIntoFreeList+0x14>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d8f7      	bhi.n	8005176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4413      	add	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d108      	bne.n	80051aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d118      	bne.n	80051f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <prvInsertBlockIntoFreeList+0xb0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d00d      	beq.n	80051e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e008      	b.n	80051f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvInsertBlockIntoFreeList+0xb0>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e003      	b.n	80051f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d002      	beq.n	8005206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20004b18 	.word	0x20004b18
 8005218:	20004b20 	.word	0x20004b20

0800521c <__errno>:
 800521c:	4b01      	ldr	r3, [pc, #4]	; (8005224 <__errno+0x8>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000014 	.word	0x20000014

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4d0d      	ldr	r5, [pc, #52]	; (8005260 <__libc_init_array+0x38>)
 800522c:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <__libc_init_array+0x3c>)
 800522e:	1b64      	subs	r4, r4, r5
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	2600      	movs	r6, #0
 8005234:	42a6      	cmp	r6, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	4d0b      	ldr	r5, [pc, #44]	; (8005268 <__libc_init_array+0x40>)
 800523a:	4c0c      	ldr	r4, [pc, #48]	; (800526c <__libc_init_array+0x44>)
 800523c:	f000 fcf8 	bl	8005c30 <_init>
 8005240:	1b64      	subs	r4, r4, r5
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	2600      	movs	r6, #0
 8005246:	42a6      	cmp	r6, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005250:	4798      	blx	r3
 8005252:	3601      	adds	r6, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f855 3b04 	ldr.w	r3, [r5], #4
 800525a:	4798      	blx	r3
 800525c:	3601      	adds	r6, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	08005db8 	.word	0x08005db8
 8005264:	08005db8 	.word	0x08005db8
 8005268:	08005db8 	.word	0x08005db8
 800526c:	08005dbc 	.word	0x08005dbc

08005270 <__retarget_lock_acquire_recursive>:
 8005270:	4770      	bx	lr

08005272 <__retarget_lock_release_recursive>:
 8005272:	4770      	bx	lr

08005274 <memcpy>:
 8005274:	440a      	add	r2, r1
 8005276:	4291      	cmp	r1, r2
 8005278:	f100 33ff 	add.w	r3, r0, #4294967295
 800527c:	d100      	bne.n	8005280 <memcpy+0xc>
 800527e:	4770      	bx	lr
 8005280:	b510      	push	{r4, lr}
 8005282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800528a:	4291      	cmp	r1, r2
 800528c:	d1f9      	bne.n	8005282 <memcpy+0xe>
 800528e:	bd10      	pop	{r4, pc}

08005290 <memset>:
 8005290:	4402      	add	r2, r0
 8005292:	4603      	mov	r3, r0
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	f803 1b01 	strb.w	r1, [r3], #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <sbrk_aligned>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4e0e      	ldr	r6, [pc, #56]	; (80052dc <sbrk_aligned+0x3c>)
 80052a4:	460c      	mov	r4, r1
 80052a6:	6831      	ldr	r1, [r6, #0]
 80052a8:	4605      	mov	r5, r0
 80052aa:	b911      	cbnz	r1, 80052b2 <sbrk_aligned+0x12>
 80052ac:	f000 f8f6 	bl	800549c <_sbrk_r>
 80052b0:	6030      	str	r0, [r6, #0]
 80052b2:	4621      	mov	r1, r4
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f8f1 	bl	800549c <_sbrk_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d00a      	beq.n	80052d4 <sbrk_aligned+0x34>
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d007      	beq.n	80052d8 <sbrk_aligned+0x38>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f8e6 	bl	800549c <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d101      	bne.n	80052d8 <sbrk_aligned+0x38>
 80052d4:	f04f 34ff 	mov.w	r4, #4294967295
 80052d8:	4620      	mov	r0, r4
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	20004b40 	.word	0x20004b40

080052e0 <_malloc_r>:
 80052e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e4:	1ccd      	adds	r5, r1, #3
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	4607      	mov	r7, r0
 80052f6:	db01      	blt.n	80052fc <_malloc_r+0x1c>
 80052f8:	42a9      	cmp	r1, r5
 80052fa:	d905      	bls.n	8005308 <_malloc_r+0x28>
 80052fc:	230c      	movs	r3, #12
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	2600      	movs	r6, #0
 8005302:	4630      	mov	r0, r6
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005308:	4e2e      	ldr	r6, [pc, #184]	; (80053c4 <_malloc_r+0xe4>)
 800530a:	f000 f8f7 	bl	80054fc <__malloc_lock>
 800530e:	6833      	ldr	r3, [r6, #0]
 8005310:	461c      	mov	r4, r3
 8005312:	bb34      	cbnz	r4, 8005362 <_malloc_r+0x82>
 8005314:	4629      	mov	r1, r5
 8005316:	4638      	mov	r0, r7
 8005318:	f7ff ffc2 	bl	80052a0 <sbrk_aligned>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	4604      	mov	r4, r0
 8005320:	d14d      	bne.n	80053be <_malloc_r+0xde>
 8005322:	6834      	ldr	r4, [r6, #0]
 8005324:	4626      	mov	r6, r4
 8005326:	2e00      	cmp	r6, #0
 8005328:	d140      	bne.n	80053ac <_malloc_r+0xcc>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	4631      	mov	r1, r6
 800532e:	4638      	mov	r0, r7
 8005330:	eb04 0803 	add.w	r8, r4, r3
 8005334:	f000 f8b2 	bl	800549c <_sbrk_r>
 8005338:	4580      	cmp	r8, r0
 800533a:	d13a      	bne.n	80053b2 <_malloc_r+0xd2>
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	3503      	adds	r5, #3
 8005340:	1a6d      	subs	r5, r5, r1
 8005342:	f025 0503 	bic.w	r5, r5, #3
 8005346:	3508      	adds	r5, #8
 8005348:	2d0c      	cmp	r5, #12
 800534a:	bf38      	it	cc
 800534c:	250c      	movcc	r5, #12
 800534e:	4629      	mov	r1, r5
 8005350:	4638      	mov	r0, r7
 8005352:	f7ff ffa5 	bl	80052a0 <sbrk_aligned>
 8005356:	3001      	adds	r0, #1
 8005358:	d02b      	beq.n	80053b2 <_malloc_r+0xd2>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	442b      	add	r3, r5
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	e00e      	b.n	8005380 <_malloc_r+0xa0>
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	1b52      	subs	r2, r2, r5
 8005366:	d41e      	bmi.n	80053a6 <_malloc_r+0xc6>
 8005368:	2a0b      	cmp	r2, #11
 800536a:	d916      	bls.n	800539a <_malloc_r+0xba>
 800536c:	1961      	adds	r1, r4, r5
 800536e:	42a3      	cmp	r3, r4
 8005370:	6025      	str	r5, [r4, #0]
 8005372:	bf18      	it	ne
 8005374:	6059      	strne	r1, [r3, #4]
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	bf08      	it	eq
 800537a:	6031      	streq	r1, [r6, #0]
 800537c:	5162      	str	r2, [r4, r5]
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	4638      	mov	r0, r7
 8005382:	f104 060b 	add.w	r6, r4, #11
 8005386:	f000 f8bf 	bl	8005508 <__malloc_unlock>
 800538a:	f026 0607 	bic.w	r6, r6, #7
 800538e:	1d23      	adds	r3, r4, #4
 8005390:	1af2      	subs	r2, r6, r3
 8005392:	d0b6      	beq.n	8005302 <_malloc_r+0x22>
 8005394:	1b9b      	subs	r3, r3, r6
 8005396:	50a3      	str	r3, [r4, r2]
 8005398:	e7b3      	b.n	8005302 <_malloc_r+0x22>
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	42a3      	cmp	r3, r4
 800539e:	bf0c      	ite	eq
 80053a0:	6032      	streq	r2, [r6, #0]
 80053a2:	605a      	strne	r2, [r3, #4]
 80053a4:	e7ec      	b.n	8005380 <_malloc_r+0xa0>
 80053a6:	4623      	mov	r3, r4
 80053a8:	6864      	ldr	r4, [r4, #4]
 80053aa:	e7b2      	b.n	8005312 <_malloc_r+0x32>
 80053ac:	4634      	mov	r4, r6
 80053ae:	6876      	ldr	r6, [r6, #4]
 80053b0:	e7b9      	b.n	8005326 <_malloc_r+0x46>
 80053b2:	230c      	movs	r3, #12
 80053b4:	603b      	str	r3, [r7, #0]
 80053b6:	4638      	mov	r0, r7
 80053b8:	f000 f8a6 	bl	8005508 <__malloc_unlock>
 80053bc:	e7a1      	b.n	8005302 <_malloc_r+0x22>
 80053be:	6025      	str	r5, [r4, #0]
 80053c0:	e7de      	b.n	8005380 <_malloc_r+0xa0>
 80053c2:	bf00      	nop
 80053c4:	20004b3c 	.word	0x20004b3c

080053c8 <cleanup_glue>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	460c      	mov	r4, r1
 80053cc:	6809      	ldr	r1, [r1, #0]
 80053ce:	4605      	mov	r5, r0
 80053d0:	b109      	cbz	r1, 80053d6 <cleanup_glue+0xe>
 80053d2:	f7ff fff9 	bl	80053c8 <cleanup_glue>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053de:	f000 b899 	b.w	8005514 <_free_r>
	...

080053e4 <_reclaim_reent>:
 80053e4:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <_reclaim_reent+0xb4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4283      	cmp	r3, r0
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	4604      	mov	r4, r0
 80053ee:	d051      	beq.n	8005494 <_reclaim_reent+0xb0>
 80053f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053f2:	b143      	cbz	r3, 8005406 <_reclaim_reent+0x22>
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d14a      	bne.n	8005490 <_reclaim_reent+0xac>
 80053fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	b111      	cbz	r1, 8005406 <_reclaim_reent+0x22>
 8005400:	4620      	mov	r0, r4
 8005402:	f000 f887 	bl	8005514 <_free_r>
 8005406:	6961      	ldr	r1, [r4, #20]
 8005408:	b111      	cbz	r1, 8005410 <_reclaim_reent+0x2c>
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f882 	bl	8005514 <_free_r>
 8005410:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005412:	b111      	cbz	r1, 800541a <_reclaim_reent+0x36>
 8005414:	4620      	mov	r0, r4
 8005416:	f000 f87d 	bl	8005514 <_free_r>
 800541a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800541c:	b111      	cbz	r1, 8005424 <_reclaim_reent+0x40>
 800541e:	4620      	mov	r0, r4
 8005420:	f000 f878 	bl	8005514 <_free_r>
 8005424:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005426:	b111      	cbz	r1, 800542e <_reclaim_reent+0x4a>
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f873 	bl	8005514 <_free_r>
 800542e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005430:	b111      	cbz	r1, 8005438 <_reclaim_reent+0x54>
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f86e 	bl	8005514 <_free_r>
 8005438:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800543a:	b111      	cbz	r1, 8005442 <_reclaim_reent+0x5e>
 800543c:	4620      	mov	r0, r4
 800543e:	f000 f869 	bl	8005514 <_free_r>
 8005442:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005444:	b111      	cbz	r1, 800544c <_reclaim_reent+0x68>
 8005446:	4620      	mov	r0, r4
 8005448:	f000 f864 	bl	8005514 <_free_r>
 800544c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800544e:	b111      	cbz	r1, 8005456 <_reclaim_reent+0x72>
 8005450:	4620      	mov	r0, r4
 8005452:	f000 f85f 	bl	8005514 <_free_r>
 8005456:	69a3      	ldr	r3, [r4, #24]
 8005458:	b1e3      	cbz	r3, 8005494 <_reclaim_reent+0xb0>
 800545a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800545c:	4620      	mov	r0, r4
 800545e:	4798      	blx	r3
 8005460:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005462:	b1b9      	cbz	r1, 8005494 <_reclaim_reent+0xb0>
 8005464:	4620      	mov	r0, r4
 8005466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800546a:	f7ff bfad 	b.w	80053c8 <cleanup_glue>
 800546e:	5949      	ldr	r1, [r1, r5]
 8005470:	b941      	cbnz	r1, 8005484 <_reclaim_reent+0xa0>
 8005472:	3504      	adds	r5, #4
 8005474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005476:	2d80      	cmp	r5, #128	; 0x80
 8005478:	68d9      	ldr	r1, [r3, #12]
 800547a:	d1f8      	bne.n	800546e <_reclaim_reent+0x8a>
 800547c:	4620      	mov	r0, r4
 800547e:	f000 f849 	bl	8005514 <_free_r>
 8005482:	e7ba      	b.n	80053fa <_reclaim_reent+0x16>
 8005484:	680e      	ldr	r6, [r1, #0]
 8005486:	4620      	mov	r0, r4
 8005488:	f000 f844 	bl	8005514 <_free_r>
 800548c:	4631      	mov	r1, r6
 800548e:	e7ef      	b.n	8005470 <_reclaim_reent+0x8c>
 8005490:	2500      	movs	r5, #0
 8005492:	e7ef      	b.n	8005474 <_reclaim_reent+0x90>
 8005494:	bd70      	pop	{r4, r5, r6, pc}
 8005496:	bf00      	nop
 8005498:	20000014 	.word	0x20000014

0800549c <_sbrk_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d06      	ldr	r5, [pc, #24]	; (80054b8 <_sbrk_r+0x1c>)
 80054a0:	2300      	movs	r3, #0
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fb fb60 	bl	8000b6c <_sbrk>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_sbrk_r+0x1a>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_sbrk_r+0x1a>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20004b44 	.word	0x20004b44

080054bc <siprintf>:
 80054bc:	b40e      	push	{r1, r2, r3}
 80054be:	b500      	push	{lr}
 80054c0:	b09c      	sub	sp, #112	; 0x70
 80054c2:	ab1d      	add	r3, sp, #116	; 0x74
 80054c4:	9002      	str	r0, [sp, #8]
 80054c6:	9006      	str	r0, [sp, #24]
 80054c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054cc:	4809      	ldr	r0, [pc, #36]	; (80054f4 <siprintf+0x38>)
 80054ce:	9107      	str	r1, [sp, #28]
 80054d0:	9104      	str	r1, [sp, #16]
 80054d2:	4909      	ldr	r1, [pc, #36]	; (80054f8 <siprintf+0x3c>)
 80054d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d8:	9105      	str	r1, [sp, #20]
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	a902      	add	r1, sp, #8
 80054e0:	f000 f8c0 	bl	8005664 <_svfiprintf_r>
 80054e4:	9b02      	ldr	r3, [sp, #8]
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	b01c      	add	sp, #112	; 0x70
 80054ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f0:	b003      	add	sp, #12
 80054f2:	4770      	bx	lr
 80054f4:	20000014 	.word	0x20000014
 80054f8:	ffff0208 	.word	0xffff0208

080054fc <__malloc_lock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__malloc_lock+0x8>)
 80054fe:	f7ff beb7 	b.w	8005270 <__retarget_lock_acquire_recursive>
 8005502:	bf00      	nop
 8005504:	20004b38 	.word	0x20004b38

08005508 <__malloc_unlock>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__malloc_unlock+0x8>)
 800550a:	f7ff beb2 	b.w	8005272 <__retarget_lock_release_recursive>
 800550e:	bf00      	nop
 8005510:	20004b38 	.word	0x20004b38

08005514 <_free_r>:
 8005514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005516:	2900      	cmp	r1, #0
 8005518:	d044      	beq.n	80055a4 <_free_r+0x90>
 800551a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800551e:	9001      	str	r0, [sp, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f1a1 0404 	sub.w	r4, r1, #4
 8005526:	bfb8      	it	lt
 8005528:	18e4      	addlt	r4, r4, r3
 800552a:	f7ff ffe7 	bl	80054fc <__malloc_lock>
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <_free_r+0x94>)
 8005530:	9801      	ldr	r0, [sp, #4]
 8005532:	6813      	ldr	r3, [r2, #0]
 8005534:	b933      	cbnz	r3, 8005544 <_free_r+0x30>
 8005536:	6063      	str	r3, [r4, #4]
 8005538:	6014      	str	r4, [r2, #0]
 800553a:	b003      	add	sp, #12
 800553c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005540:	f7ff bfe2 	b.w	8005508 <__malloc_unlock>
 8005544:	42a3      	cmp	r3, r4
 8005546:	d908      	bls.n	800555a <_free_r+0x46>
 8005548:	6825      	ldr	r5, [r4, #0]
 800554a:	1961      	adds	r1, r4, r5
 800554c:	428b      	cmp	r3, r1
 800554e:	bf01      	itttt	eq
 8005550:	6819      	ldreq	r1, [r3, #0]
 8005552:	685b      	ldreq	r3, [r3, #4]
 8005554:	1949      	addeq	r1, r1, r5
 8005556:	6021      	streq	r1, [r4, #0]
 8005558:	e7ed      	b.n	8005536 <_free_r+0x22>
 800555a:	461a      	mov	r2, r3
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b10b      	cbz	r3, 8005564 <_free_r+0x50>
 8005560:	42a3      	cmp	r3, r4
 8005562:	d9fa      	bls.n	800555a <_free_r+0x46>
 8005564:	6811      	ldr	r1, [r2, #0]
 8005566:	1855      	adds	r5, r2, r1
 8005568:	42a5      	cmp	r5, r4
 800556a:	d10b      	bne.n	8005584 <_free_r+0x70>
 800556c:	6824      	ldr	r4, [r4, #0]
 800556e:	4421      	add	r1, r4
 8005570:	1854      	adds	r4, r2, r1
 8005572:	42a3      	cmp	r3, r4
 8005574:	6011      	str	r1, [r2, #0]
 8005576:	d1e0      	bne.n	800553a <_free_r+0x26>
 8005578:	681c      	ldr	r4, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	6053      	str	r3, [r2, #4]
 800557e:	4421      	add	r1, r4
 8005580:	6011      	str	r1, [r2, #0]
 8005582:	e7da      	b.n	800553a <_free_r+0x26>
 8005584:	d902      	bls.n	800558c <_free_r+0x78>
 8005586:	230c      	movs	r3, #12
 8005588:	6003      	str	r3, [r0, #0]
 800558a:	e7d6      	b.n	800553a <_free_r+0x26>
 800558c:	6825      	ldr	r5, [r4, #0]
 800558e:	1961      	adds	r1, r4, r5
 8005590:	428b      	cmp	r3, r1
 8005592:	bf04      	itt	eq
 8005594:	6819      	ldreq	r1, [r3, #0]
 8005596:	685b      	ldreq	r3, [r3, #4]
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	bf04      	itt	eq
 800559c:	1949      	addeq	r1, r1, r5
 800559e:	6021      	streq	r1, [r4, #0]
 80055a0:	6054      	str	r4, [r2, #4]
 80055a2:	e7ca      	b.n	800553a <_free_r+0x26>
 80055a4:	b003      	add	sp, #12
 80055a6:	bd30      	pop	{r4, r5, pc}
 80055a8:	20004b3c 	.word	0x20004b3c

080055ac <__ssputs_r>:
 80055ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	688e      	ldr	r6, [r1, #8]
 80055b2:	429e      	cmp	r6, r3
 80055b4:	4682      	mov	sl, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	4690      	mov	r8, r2
 80055ba:	461f      	mov	r7, r3
 80055bc:	d838      	bhi.n	8005630 <__ssputs_r+0x84>
 80055be:	898a      	ldrh	r2, [r1, #12]
 80055c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055c4:	d032      	beq.n	800562c <__ssputs_r+0x80>
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	6909      	ldr	r1, [r1, #16]
 80055ca:	eba5 0901 	sub.w	r9, r5, r1
 80055ce:	6965      	ldr	r5, [r4, #20]
 80055d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055d8:	3301      	adds	r3, #1
 80055da:	444b      	add	r3, r9
 80055dc:	106d      	asrs	r5, r5, #1
 80055de:	429d      	cmp	r5, r3
 80055e0:	bf38      	it	cc
 80055e2:	461d      	movcc	r5, r3
 80055e4:	0553      	lsls	r3, r2, #21
 80055e6:	d531      	bpl.n	800564c <__ssputs_r+0xa0>
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7ff fe79 	bl	80052e0 <_malloc_r>
 80055ee:	4606      	mov	r6, r0
 80055f0:	b950      	cbnz	r0, 8005608 <__ssputs_r+0x5c>
 80055f2:	230c      	movs	r3, #12
 80055f4:	f8ca 3000 	str.w	r3, [sl]
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005608:	6921      	ldr	r1, [r4, #16]
 800560a:	464a      	mov	r2, r9
 800560c:	f7ff fe32 	bl	8005274 <memcpy>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	6126      	str	r6, [r4, #16]
 800561e:	6165      	str	r5, [r4, #20]
 8005620:	444e      	add	r6, r9
 8005622:	eba5 0509 	sub.w	r5, r5, r9
 8005626:	6026      	str	r6, [r4, #0]
 8005628:	60a5      	str	r5, [r4, #8]
 800562a:	463e      	mov	r6, r7
 800562c:	42be      	cmp	r6, r7
 800562e:	d900      	bls.n	8005632 <__ssputs_r+0x86>
 8005630:	463e      	mov	r6, r7
 8005632:	6820      	ldr	r0, [r4, #0]
 8005634:	4632      	mov	r2, r6
 8005636:	4641      	mov	r1, r8
 8005638:	f000 faa8 	bl	8005b8c <memmove>
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	1b9b      	subs	r3, r3, r6
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	4433      	add	r3, r6
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	2000      	movs	r0, #0
 800564a:	e7db      	b.n	8005604 <__ssputs_r+0x58>
 800564c:	462a      	mov	r2, r5
 800564e:	f000 fab7 	bl	8005bc0 <_realloc_r>
 8005652:	4606      	mov	r6, r0
 8005654:	2800      	cmp	r0, #0
 8005656:	d1e1      	bne.n	800561c <__ssputs_r+0x70>
 8005658:	6921      	ldr	r1, [r4, #16]
 800565a:	4650      	mov	r0, sl
 800565c:	f7ff ff5a 	bl	8005514 <_free_r>
 8005660:	e7c7      	b.n	80055f2 <__ssputs_r+0x46>
	...

08005664 <_svfiprintf_r>:
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	4698      	mov	r8, r3
 800566a:	898b      	ldrh	r3, [r1, #12]
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	b09d      	sub	sp, #116	; 0x74
 8005670:	4607      	mov	r7, r0
 8005672:	460d      	mov	r5, r1
 8005674:	4614      	mov	r4, r2
 8005676:	d50e      	bpl.n	8005696 <_svfiprintf_r+0x32>
 8005678:	690b      	ldr	r3, [r1, #16]
 800567a:	b963      	cbnz	r3, 8005696 <_svfiprintf_r+0x32>
 800567c:	2140      	movs	r1, #64	; 0x40
 800567e:	f7ff fe2f 	bl	80052e0 <_malloc_r>
 8005682:	6028      	str	r0, [r5, #0]
 8005684:	6128      	str	r0, [r5, #16]
 8005686:	b920      	cbnz	r0, 8005692 <_svfiprintf_r+0x2e>
 8005688:	230c      	movs	r3, #12
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e0d1      	b.n	8005836 <_svfiprintf_r+0x1d2>
 8005692:	2340      	movs	r3, #64	; 0x40
 8005694:	616b      	str	r3, [r5, #20]
 8005696:	2300      	movs	r3, #0
 8005698:	9309      	str	r3, [sp, #36]	; 0x24
 800569a:	2320      	movs	r3, #32
 800569c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056a4:	2330      	movs	r3, #48	; 0x30
 80056a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005850 <_svfiprintf_r+0x1ec>
 80056aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056ae:	f04f 0901 	mov.w	r9, #1
 80056b2:	4623      	mov	r3, r4
 80056b4:	469a      	mov	sl, r3
 80056b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ba:	b10a      	cbz	r2, 80056c0 <_svfiprintf_r+0x5c>
 80056bc:	2a25      	cmp	r2, #37	; 0x25
 80056be:	d1f9      	bne.n	80056b4 <_svfiprintf_r+0x50>
 80056c0:	ebba 0b04 	subs.w	fp, sl, r4
 80056c4:	d00b      	beq.n	80056de <_svfiprintf_r+0x7a>
 80056c6:	465b      	mov	r3, fp
 80056c8:	4622      	mov	r2, r4
 80056ca:	4629      	mov	r1, r5
 80056cc:	4638      	mov	r0, r7
 80056ce:	f7ff ff6d 	bl	80055ac <__ssputs_r>
 80056d2:	3001      	adds	r0, #1
 80056d4:	f000 80aa 	beq.w	800582c <_svfiprintf_r+0x1c8>
 80056d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056da:	445a      	add	r2, fp
 80056dc:	9209      	str	r2, [sp, #36]	; 0x24
 80056de:	f89a 3000 	ldrb.w	r3, [sl]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 80a2 	beq.w	800582c <_svfiprintf_r+0x1c8>
 80056e8:	2300      	movs	r3, #0
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f2:	f10a 0a01 	add.w	sl, sl, #1
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	9307      	str	r3, [sp, #28]
 80056fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005700:	4654      	mov	r4, sl
 8005702:	2205      	movs	r2, #5
 8005704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005708:	4851      	ldr	r0, [pc, #324]	; (8005850 <_svfiprintf_r+0x1ec>)
 800570a:	f7fa fd61 	bl	80001d0 <memchr>
 800570e:	9a04      	ldr	r2, [sp, #16]
 8005710:	b9d8      	cbnz	r0, 800574a <_svfiprintf_r+0xe6>
 8005712:	06d0      	lsls	r0, r2, #27
 8005714:	bf44      	itt	mi
 8005716:	2320      	movmi	r3, #32
 8005718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800571c:	0711      	lsls	r1, r2, #28
 800571e:	bf44      	itt	mi
 8005720:	232b      	movmi	r3, #43	; 0x2b
 8005722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005726:	f89a 3000 	ldrb.w	r3, [sl]
 800572a:	2b2a      	cmp	r3, #42	; 0x2a
 800572c:	d015      	beq.n	800575a <_svfiprintf_r+0xf6>
 800572e:	9a07      	ldr	r2, [sp, #28]
 8005730:	4654      	mov	r4, sl
 8005732:	2000      	movs	r0, #0
 8005734:	f04f 0c0a 	mov.w	ip, #10
 8005738:	4621      	mov	r1, r4
 800573a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800573e:	3b30      	subs	r3, #48	; 0x30
 8005740:	2b09      	cmp	r3, #9
 8005742:	d94e      	bls.n	80057e2 <_svfiprintf_r+0x17e>
 8005744:	b1b0      	cbz	r0, 8005774 <_svfiprintf_r+0x110>
 8005746:	9207      	str	r2, [sp, #28]
 8005748:	e014      	b.n	8005774 <_svfiprintf_r+0x110>
 800574a:	eba0 0308 	sub.w	r3, r0, r8
 800574e:	fa09 f303 	lsl.w	r3, r9, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	9304      	str	r3, [sp, #16]
 8005756:	46a2      	mov	sl, r4
 8005758:	e7d2      	b.n	8005700 <_svfiprintf_r+0x9c>
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	1d19      	adds	r1, r3, #4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	9103      	str	r1, [sp, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfbb      	ittet	lt
 8005766:	425b      	neglt	r3, r3
 8005768:	f042 0202 	orrlt.w	r2, r2, #2
 800576c:	9307      	strge	r3, [sp, #28]
 800576e:	9307      	strlt	r3, [sp, #28]
 8005770:	bfb8      	it	lt
 8005772:	9204      	strlt	r2, [sp, #16]
 8005774:	7823      	ldrb	r3, [r4, #0]
 8005776:	2b2e      	cmp	r3, #46	; 0x2e
 8005778:	d10c      	bne.n	8005794 <_svfiprintf_r+0x130>
 800577a:	7863      	ldrb	r3, [r4, #1]
 800577c:	2b2a      	cmp	r3, #42	; 0x2a
 800577e:	d135      	bne.n	80057ec <_svfiprintf_r+0x188>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	1d1a      	adds	r2, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	9203      	str	r2, [sp, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfb8      	it	lt
 800578c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005790:	3402      	adds	r4, #2
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005860 <_svfiprintf_r+0x1fc>
 8005798:	7821      	ldrb	r1, [r4, #0]
 800579a:	2203      	movs	r2, #3
 800579c:	4650      	mov	r0, sl
 800579e:	f7fa fd17 	bl	80001d0 <memchr>
 80057a2:	b140      	cbz	r0, 80057b6 <_svfiprintf_r+0x152>
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	eba0 000a 	sub.w	r0, r0, sl
 80057aa:	fa03 f000 	lsl.w	r0, r3, r0
 80057ae:	9b04      	ldr	r3, [sp, #16]
 80057b0:	4303      	orrs	r3, r0
 80057b2:	3401      	adds	r4, #1
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ba:	4826      	ldr	r0, [pc, #152]	; (8005854 <_svfiprintf_r+0x1f0>)
 80057bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c0:	2206      	movs	r2, #6
 80057c2:	f7fa fd05 	bl	80001d0 <memchr>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d038      	beq.n	800583c <_svfiprintf_r+0x1d8>
 80057ca:	4b23      	ldr	r3, [pc, #140]	; (8005858 <_svfiprintf_r+0x1f4>)
 80057cc:	bb1b      	cbnz	r3, 8005816 <_svfiprintf_r+0x1b2>
 80057ce:	9b03      	ldr	r3, [sp, #12]
 80057d0:	3307      	adds	r3, #7
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	3308      	adds	r3, #8
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057dc:	4433      	add	r3, r6
 80057de:	9309      	str	r3, [sp, #36]	; 0x24
 80057e0:	e767      	b.n	80056b2 <_svfiprintf_r+0x4e>
 80057e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e6:	460c      	mov	r4, r1
 80057e8:	2001      	movs	r0, #1
 80057ea:	e7a5      	b.n	8005738 <_svfiprintf_r+0xd4>
 80057ec:	2300      	movs	r3, #0
 80057ee:	3401      	adds	r4, #1
 80057f0:	9305      	str	r3, [sp, #20]
 80057f2:	4619      	mov	r1, r3
 80057f4:	f04f 0c0a 	mov.w	ip, #10
 80057f8:	4620      	mov	r0, r4
 80057fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057fe:	3a30      	subs	r2, #48	; 0x30
 8005800:	2a09      	cmp	r2, #9
 8005802:	d903      	bls.n	800580c <_svfiprintf_r+0x1a8>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0c5      	beq.n	8005794 <_svfiprintf_r+0x130>
 8005808:	9105      	str	r1, [sp, #20]
 800580a:	e7c3      	b.n	8005794 <_svfiprintf_r+0x130>
 800580c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005810:	4604      	mov	r4, r0
 8005812:	2301      	movs	r3, #1
 8005814:	e7f0      	b.n	80057f8 <_svfiprintf_r+0x194>
 8005816:	ab03      	add	r3, sp, #12
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	462a      	mov	r2, r5
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <_svfiprintf_r+0x1f8>)
 800581e:	a904      	add	r1, sp, #16
 8005820:	4638      	mov	r0, r7
 8005822:	f3af 8000 	nop.w
 8005826:	1c42      	adds	r2, r0, #1
 8005828:	4606      	mov	r6, r0
 800582a:	d1d6      	bne.n	80057da <_svfiprintf_r+0x176>
 800582c:	89ab      	ldrh	r3, [r5, #12]
 800582e:	065b      	lsls	r3, r3, #25
 8005830:	f53f af2c 	bmi.w	800568c <_svfiprintf_r+0x28>
 8005834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005836:	b01d      	add	sp, #116	; 0x74
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	ab03      	add	r3, sp, #12
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	462a      	mov	r2, r5
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <_svfiprintf_r+0x1f8>)
 8005844:	a904      	add	r1, sp, #16
 8005846:	4638      	mov	r0, r7
 8005848:	f000 f87a 	bl	8005940 <_printf_i>
 800584c:	e7eb      	b.n	8005826 <_svfiprintf_r+0x1c2>
 800584e:	bf00      	nop
 8005850:	08005d7c 	.word	0x08005d7c
 8005854:	08005d86 	.word	0x08005d86
 8005858:	00000000 	.word	0x00000000
 800585c:	080055ad 	.word	0x080055ad
 8005860:	08005d82 	.word	0x08005d82

08005864 <_printf_common>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	4616      	mov	r6, r2
 800586a:	4699      	mov	r9, r3
 800586c:	688a      	ldr	r2, [r1, #8]
 800586e:	690b      	ldr	r3, [r1, #16]
 8005870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005874:	4293      	cmp	r3, r2
 8005876:	bfb8      	it	lt
 8005878:	4613      	movlt	r3, r2
 800587a:	6033      	str	r3, [r6, #0]
 800587c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005880:	4607      	mov	r7, r0
 8005882:	460c      	mov	r4, r1
 8005884:	b10a      	cbz	r2, 800588a <_printf_common+0x26>
 8005886:	3301      	adds	r3, #1
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	0699      	lsls	r1, r3, #26
 800588e:	bf42      	ittt	mi
 8005890:	6833      	ldrmi	r3, [r6, #0]
 8005892:	3302      	addmi	r3, #2
 8005894:	6033      	strmi	r3, [r6, #0]
 8005896:	6825      	ldr	r5, [r4, #0]
 8005898:	f015 0506 	ands.w	r5, r5, #6
 800589c:	d106      	bne.n	80058ac <_printf_common+0x48>
 800589e:	f104 0a19 	add.w	sl, r4, #25
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	6832      	ldr	r2, [r6, #0]
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	dc26      	bgt.n	80058fa <_printf_common+0x96>
 80058ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b0:	1e13      	subs	r3, r2, #0
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	bf18      	it	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	0692      	lsls	r2, r2, #26
 80058ba:	d42b      	bmi.n	8005914 <_printf_common+0xb0>
 80058bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d01e      	beq.n	8005908 <_printf_common+0xa4>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	68e5      	ldr	r5, [r4, #12]
 80058ce:	6832      	ldr	r2, [r6, #0]
 80058d0:	f003 0306 	and.w	r3, r3, #6
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	bf08      	it	eq
 80058d8:	1aad      	subeq	r5, r5, r2
 80058da:	68a3      	ldr	r3, [r4, #8]
 80058dc:	6922      	ldr	r2, [r4, #16]
 80058de:	bf0c      	ite	eq
 80058e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e4:	2500      	movne	r5, #0
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bfc4      	itt	gt
 80058ea:	1a9b      	subgt	r3, r3, r2
 80058ec:	18ed      	addgt	r5, r5, r3
 80058ee:	2600      	movs	r6, #0
 80058f0:	341a      	adds	r4, #26
 80058f2:	42b5      	cmp	r5, r6
 80058f4:	d11a      	bne.n	800592c <_printf_common+0xc8>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e008      	b.n	800590c <_printf_common+0xa8>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4652      	mov	r2, sl
 80058fe:	4649      	mov	r1, r9
 8005900:	4638      	mov	r0, r7
 8005902:	47c0      	blx	r8
 8005904:	3001      	adds	r0, #1
 8005906:	d103      	bne.n	8005910 <_printf_common+0xac>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005910:	3501      	adds	r5, #1
 8005912:	e7c6      	b.n	80058a2 <_printf_common+0x3e>
 8005914:	18e1      	adds	r1, r4, r3
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	2030      	movs	r0, #48	; 0x30
 800591a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800591e:	4422      	add	r2, r4
 8005920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005928:	3302      	adds	r3, #2
 800592a:	e7c7      	b.n	80058bc <_printf_common+0x58>
 800592c:	2301      	movs	r3, #1
 800592e:	4622      	mov	r2, r4
 8005930:	4649      	mov	r1, r9
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	3001      	adds	r0, #1
 8005938:	d0e6      	beq.n	8005908 <_printf_common+0xa4>
 800593a:	3601      	adds	r6, #1
 800593c:	e7d9      	b.n	80058f2 <_printf_common+0x8e>
	...

08005940 <_printf_i>:
 8005940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	7e0f      	ldrb	r7, [r1, #24]
 8005946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005948:	2f78      	cmp	r7, #120	; 0x78
 800594a:	4691      	mov	r9, r2
 800594c:	4680      	mov	r8, r0
 800594e:	460c      	mov	r4, r1
 8005950:	469a      	mov	sl, r3
 8005952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005956:	d807      	bhi.n	8005968 <_printf_i+0x28>
 8005958:	2f62      	cmp	r7, #98	; 0x62
 800595a:	d80a      	bhi.n	8005972 <_printf_i+0x32>
 800595c:	2f00      	cmp	r7, #0
 800595e:	f000 80d8 	beq.w	8005b12 <_printf_i+0x1d2>
 8005962:	2f58      	cmp	r7, #88	; 0x58
 8005964:	f000 80a3 	beq.w	8005aae <_printf_i+0x16e>
 8005968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005970:	e03a      	b.n	80059e8 <_printf_i+0xa8>
 8005972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005976:	2b15      	cmp	r3, #21
 8005978:	d8f6      	bhi.n	8005968 <_printf_i+0x28>
 800597a:	a101      	add	r1, pc, #4	; (adr r1, 8005980 <_printf_i+0x40>)
 800597c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059ed 	.word	0x080059ed
 8005988:	08005969 	.word	0x08005969
 800598c:	08005969 	.word	0x08005969
 8005990:	08005969 	.word	0x08005969
 8005994:	08005969 	.word	0x08005969
 8005998:	080059ed 	.word	0x080059ed
 800599c:	08005969 	.word	0x08005969
 80059a0:	08005969 	.word	0x08005969
 80059a4:	08005969 	.word	0x08005969
 80059a8:	08005969 	.word	0x08005969
 80059ac:	08005af9 	.word	0x08005af9
 80059b0:	08005a1d 	.word	0x08005a1d
 80059b4:	08005adb 	.word	0x08005adb
 80059b8:	08005969 	.word	0x08005969
 80059bc:	08005969 	.word	0x08005969
 80059c0:	08005b1b 	.word	0x08005b1b
 80059c4:	08005969 	.word	0x08005969
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005969 	.word	0x08005969
 80059d0:	08005969 	.word	0x08005969
 80059d4:	08005ae3 	.word	0x08005ae3
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	602a      	str	r2, [r5, #0]
 80059e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0a3      	b.n	8005b34 <_printf_i+0x1f4>
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	6829      	ldr	r1, [r5, #0]
 80059f0:	0606      	lsls	r6, r0, #24
 80059f2:	f101 0304 	add.w	r3, r1, #4
 80059f6:	d50a      	bpl.n	8005a0e <_printf_i+0xce>
 80059f8:	680e      	ldr	r6, [r1, #0]
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	da03      	bge.n	8005a08 <_printf_i+0xc8>
 8005a00:	232d      	movs	r3, #45	; 0x2d
 8005a02:	4276      	negs	r6, r6
 8005a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a08:	485e      	ldr	r0, [pc, #376]	; (8005b84 <_printf_i+0x244>)
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	e019      	b.n	8005a42 <_printf_i+0x102>
 8005a0e:	680e      	ldr	r6, [r1, #0]
 8005a10:	602b      	str	r3, [r5, #0]
 8005a12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a16:	bf18      	it	ne
 8005a18:	b236      	sxthne	r6, r6
 8005a1a:	e7ef      	b.n	80059fc <_printf_i+0xbc>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	6820      	ldr	r0, [r4, #0]
 8005a20:	1d19      	adds	r1, r3, #4
 8005a22:	6029      	str	r1, [r5, #0]
 8005a24:	0601      	lsls	r1, r0, #24
 8005a26:	d501      	bpl.n	8005a2c <_printf_i+0xec>
 8005a28:	681e      	ldr	r6, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <_printf_i+0xf2>
 8005a2c:	0646      	lsls	r6, r0, #25
 8005a2e:	d5fb      	bpl.n	8005a28 <_printf_i+0xe8>
 8005a30:	881e      	ldrh	r6, [r3, #0]
 8005a32:	4854      	ldr	r0, [pc, #336]	; (8005b84 <_printf_i+0x244>)
 8005a34:	2f6f      	cmp	r7, #111	; 0x6f
 8005a36:	bf0c      	ite	eq
 8005a38:	2308      	moveq	r3, #8
 8005a3a:	230a      	movne	r3, #10
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a42:	6865      	ldr	r5, [r4, #4]
 8005a44:	60a5      	str	r5, [r4, #8]
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	bfa2      	ittt	ge
 8005a4a:	6821      	ldrge	r1, [r4, #0]
 8005a4c:	f021 0104 	bicge.w	r1, r1, #4
 8005a50:	6021      	strge	r1, [r4, #0]
 8005a52:	b90e      	cbnz	r6, 8005a58 <_printf_i+0x118>
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	d04d      	beq.n	8005af4 <_printf_i+0x1b4>
 8005a58:	4615      	mov	r5, r2
 8005a5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a62:	5dc7      	ldrb	r7, [r0, r7]
 8005a64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a68:	4637      	mov	r7, r6
 8005a6a:	42bb      	cmp	r3, r7
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	d9f4      	bls.n	8005a5a <_printf_i+0x11a>
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d10b      	bne.n	8005a8c <_printf_i+0x14c>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	07de      	lsls	r6, r3, #31
 8005a78:	d508      	bpl.n	8005a8c <_printf_i+0x14c>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	6861      	ldr	r1, [r4, #4]
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	bfde      	ittt	le
 8005a82:	2330      	movle	r3, #48	; 0x30
 8005a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a8c:	1b52      	subs	r2, r2, r5
 8005a8e:	6122      	str	r2, [r4, #16]
 8005a90:	f8cd a000 	str.w	sl, [sp]
 8005a94:	464b      	mov	r3, r9
 8005a96:	aa03      	add	r2, sp, #12
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	f7ff fee2 	bl	8005864 <_printf_common>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d14c      	bne.n	8005b3e <_printf_i+0x1fe>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	b004      	add	sp, #16
 8005aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aae:	4835      	ldr	r0, [pc, #212]	; (8005b84 <_printf_i+0x244>)
 8005ab0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ab4:	6829      	ldr	r1, [r5, #0]
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005abc:	6029      	str	r1, [r5, #0]
 8005abe:	061d      	lsls	r5, r3, #24
 8005ac0:	d514      	bpl.n	8005aec <_printf_i+0x1ac>
 8005ac2:	07df      	lsls	r7, r3, #31
 8005ac4:	bf44      	itt	mi
 8005ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8005aca:	6023      	strmi	r3, [r4, #0]
 8005acc:	b91e      	cbnz	r6, 8005ad6 <_printf_i+0x196>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	f023 0320 	bic.w	r3, r3, #32
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	e7b0      	b.n	8005a3c <_printf_i+0xfc>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	f043 0320 	orr.w	r3, r3, #32
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	2378      	movs	r3, #120	; 0x78
 8005ae4:	4828      	ldr	r0, [pc, #160]	; (8005b88 <_printf_i+0x248>)
 8005ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aea:	e7e3      	b.n	8005ab4 <_printf_i+0x174>
 8005aec:	0659      	lsls	r1, r3, #25
 8005aee:	bf48      	it	mi
 8005af0:	b2b6      	uxthmi	r6, r6
 8005af2:	e7e6      	b.n	8005ac2 <_printf_i+0x182>
 8005af4:	4615      	mov	r5, r2
 8005af6:	e7bb      	b.n	8005a70 <_printf_i+0x130>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	6826      	ldr	r6, [r4, #0]
 8005afc:	6961      	ldr	r1, [r4, #20]
 8005afe:	1d18      	adds	r0, r3, #4
 8005b00:	6028      	str	r0, [r5, #0]
 8005b02:	0635      	lsls	r5, r6, #24
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	d501      	bpl.n	8005b0c <_printf_i+0x1cc>
 8005b08:	6019      	str	r1, [r3, #0]
 8005b0a:	e002      	b.n	8005b12 <_printf_i+0x1d2>
 8005b0c:	0670      	lsls	r0, r6, #25
 8005b0e:	d5fb      	bpl.n	8005b08 <_printf_i+0x1c8>
 8005b10:	8019      	strh	r1, [r3, #0]
 8005b12:	2300      	movs	r3, #0
 8005b14:	6123      	str	r3, [r4, #16]
 8005b16:	4615      	mov	r5, r2
 8005b18:	e7ba      	b.n	8005a90 <_printf_i+0x150>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	1d1a      	adds	r2, r3, #4
 8005b1e:	602a      	str	r2, [r5, #0]
 8005b20:	681d      	ldr	r5, [r3, #0]
 8005b22:	6862      	ldr	r2, [r4, #4]
 8005b24:	2100      	movs	r1, #0
 8005b26:	4628      	mov	r0, r5
 8005b28:	f7fa fb52 	bl	80001d0 <memchr>
 8005b2c:	b108      	cbz	r0, 8005b32 <_printf_i+0x1f2>
 8005b2e:	1b40      	subs	r0, r0, r5
 8005b30:	6060      	str	r0, [r4, #4]
 8005b32:	6863      	ldr	r3, [r4, #4]
 8005b34:	6123      	str	r3, [r4, #16]
 8005b36:	2300      	movs	r3, #0
 8005b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b3c:	e7a8      	b.n	8005a90 <_printf_i+0x150>
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	462a      	mov	r2, r5
 8005b42:	4649      	mov	r1, r9
 8005b44:	4640      	mov	r0, r8
 8005b46:	47d0      	blx	sl
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d0ab      	beq.n	8005aa4 <_printf_i+0x164>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	079b      	lsls	r3, r3, #30
 8005b50:	d413      	bmi.n	8005b7a <_printf_i+0x23a>
 8005b52:	68e0      	ldr	r0, [r4, #12]
 8005b54:	9b03      	ldr	r3, [sp, #12]
 8005b56:	4298      	cmp	r0, r3
 8005b58:	bfb8      	it	lt
 8005b5a:	4618      	movlt	r0, r3
 8005b5c:	e7a4      	b.n	8005aa8 <_printf_i+0x168>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4632      	mov	r2, r6
 8005b62:	4649      	mov	r1, r9
 8005b64:	4640      	mov	r0, r8
 8005b66:	47d0      	blx	sl
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d09b      	beq.n	8005aa4 <_printf_i+0x164>
 8005b6c:	3501      	adds	r5, #1
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	9903      	ldr	r1, [sp, #12]
 8005b72:	1a5b      	subs	r3, r3, r1
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dcf2      	bgt.n	8005b5e <_printf_i+0x21e>
 8005b78:	e7eb      	b.n	8005b52 <_printf_i+0x212>
 8005b7a:	2500      	movs	r5, #0
 8005b7c:	f104 0619 	add.w	r6, r4, #25
 8005b80:	e7f5      	b.n	8005b6e <_printf_i+0x22e>
 8005b82:	bf00      	nop
 8005b84:	08005d8d 	.word	0x08005d8d
 8005b88:	08005d9e 	.word	0x08005d9e

08005b8c <memmove>:
 8005b8c:	4288      	cmp	r0, r1
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	eb01 0402 	add.w	r4, r1, r2
 8005b94:	d902      	bls.n	8005b9c <memmove+0x10>
 8005b96:	4284      	cmp	r4, r0
 8005b98:	4623      	mov	r3, r4
 8005b9a:	d807      	bhi.n	8005bac <memmove+0x20>
 8005b9c:	1e43      	subs	r3, r0, #1
 8005b9e:	42a1      	cmp	r1, r4
 8005ba0:	d008      	beq.n	8005bb4 <memmove+0x28>
 8005ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005baa:	e7f8      	b.n	8005b9e <memmove+0x12>
 8005bac:	4402      	add	r2, r0
 8005bae:	4601      	mov	r1, r0
 8005bb0:	428a      	cmp	r2, r1
 8005bb2:	d100      	bne.n	8005bb6 <memmove+0x2a>
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bbe:	e7f7      	b.n	8005bb0 <memmove+0x24>

08005bc0 <_realloc_r>:
 8005bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4614      	mov	r4, r2
 8005bc8:	460e      	mov	r6, r1
 8005bca:	b921      	cbnz	r1, 8005bd6 <_realloc_r+0x16>
 8005bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	f7ff bb85 	b.w	80052e0 <_malloc_r>
 8005bd6:	b92a      	cbnz	r2, 8005be4 <_realloc_r+0x24>
 8005bd8:	f7ff fc9c 	bl	8005514 <_free_r>
 8005bdc:	4625      	mov	r5, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be4:	f000 f81b 	bl	8005c1e <_malloc_usable_size_r>
 8005be8:	4284      	cmp	r4, r0
 8005bea:	4607      	mov	r7, r0
 8005bec:	d802      	bhi.n	8005bf4 <_realloc_r+0x34>
 8005bee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bf2:	d812      	bhi.n	8005c1a <_realloc_r+0x5a>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	f7ff fb72 	bl	80052e0 <_malloc_r>
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d0ed      	beq.n	8005bde <_realloc_r+0x1e>
 8005c02:	42bc      	cmp	r4, r7
 8005c04:	4622      	mov	r2, r4
 8005c06:	4631      	mov	r1, r6
 8005c08:	bf28      	it	cs
 8005c0a:	463a      	movcs	r2, r7
 8005c0c:	f7ff fb32 	bl	8005274 <memcpy>
 8005c10:	4631      	mov	r1, r6
 8005c12:	4640      	mov	r0, r8
 8005c14:	f7ff fc7e 	bl	8005514 <_free_r>
 8005c18:	e7e1      	b.n	8005bde <_realloc_r+0x1e>
 8005c1a:	4635      	mov	r5, r6
 8005c1c:	e7df      	b.n	8005bde <_realloc_r+0x1e>

08005c1e <_malloc_usable_size_r>:
 8005c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c22:	1f18      	subs	r0, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfbc      	itt	lt
 8005c28:	580b      	ldrlt	r3, [r1, r0]
 8005c2a:	18c0      	addlt	r0, r0, r3
 8005c2c:	4770      	bx	lr
	...

08005c30 <_init>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr

08005c3c <_fini>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr
