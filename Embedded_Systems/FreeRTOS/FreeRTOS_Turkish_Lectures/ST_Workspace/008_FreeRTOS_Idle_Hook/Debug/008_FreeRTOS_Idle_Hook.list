
008_FreeRTOS_Idle_Hook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d88  08005d88  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d90  08005d90  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00004ad0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b50  20004b50  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188f5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003121  00000000  00000000  000389a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a5d  00000000  00000000  0003e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015627  00000000  00000000  00041bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5af8  00000000  00000000  000571d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cccc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058bc  00000000  00000000  0012cd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c40 	.word	0x08005c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005c40 	.word	0x08005c40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationIdleHook>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vApplicationIdleHook(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	//#define configUSE_IDLE_HOOK                      1 yapmayı unutma FreeRTOSConfig.h içerisinde
	ulIdleCycleCount++;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <vApplicationIdleHook+0x18>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <vApplicationIdleHook+0x18>)
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	200000e0 	.word	0x200000e0

08000590 <vTask2>:
void vTask2(void * pvParameters)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	char *GorevAdi = (char *) pvParameters;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800059c:	f003 fa9a 	bl	8003ad4 <xTaskGetTickCount>
 80005a0:	4603      	mov	r3, r0
 80005a2:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	2213      	movs	r2, #19
 80005aa:	68f9      	ldr	r1, [r7, #12]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <vTask2+0x30>)
 80005ae:	f001 fdb2 	bl	8002116 <HAL_UART_Transmit>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	21c8      	movs	r1, #200	; 0xc8
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 f8bd 	bl	8003738 <vTaskDelayUntil>
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 80005be:	e7f1      	b.n	80005a4 <vTask2+0x14>
 80005c0:	2000009c 	.word	0x2000009c

080005c4 <vTask1>:
	}
}
void vTask1(void * pvParameters)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	char *GorevAdi = (char *)pvParameters;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
	const TickType_t xDelay250ms = pdMS_TO_TICKS(200);
 80005d0:	23c8      	movs	r3, #200	; 0xc8
 80005d2:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 80005d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d8:	2213      	movs	r2, #19
 80005da:	68f9      	ldr	r1, [r7, #12]
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <vTask1+0x28>)
 80005de:	f001 fd9a 	bl	8002116 <HAL_UART_Transmit>
		vTaskDelay(xDelay250ms);
 80005e2:	68b8      	ldr	r0, [r7, #8]
 80005e4:	f003 f926 	bl	8003834 <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)GorevAdi, 19, 0xFFFF);
 80005e8:	e7f4      	b.n	80005d4 <vTask1+0x10>
 80005ea:	bf00      	nop
 80005ec:	2000009c 	.word	0x2000009c

080005f0 <vTaskFunction>:
	}
}
void vTaskFunction(void * pvParameters)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	char *GorevAdi;
	char Output[40];
	GorevAdi = (char *) pvParameters;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
	const TickType_t xDelay250ms = pdMS_TO_TICKS(999);
 80005fc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000600:	633b      	str	r3, [r7, #48]	; 0x30
	for(;;)
	{
		sprintf(Output, "IdleTick : %d", ulIdleCycleCount);
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <vTaskFunction+0x3c>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4909      	ldr	r1, [pc, #36]	; (8000630 <vTaskFunction+0x40>)
 800060c:	4618      	mov	r0, r3
 800060e:	f004 ff5d 	bl	80054cc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)Output, 19, 0xFFFF);
 8000612:	f107 0108 	add.w	r1, r7, #8
 8000616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061a:	2213      	movs	r2, #19
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <vTaskFunction+0x44>)
 800061e:	f001 fd7a 	bl	8002116 <HAL_UART_Transmit>
		vTaskDelay(xDelay250ms);
 8000622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000624:	f003 f906 	bl	8003834 <vTaskDelay>
		sprintf(Output, "IdleTick : %d", ulIdleCycleCount);
 8000628:	e7eb      	b.n	8000602 <vTaskFunction+0x12>
 800062a:	bf00      	nop
 800062c:	200000e0 	.word	0x200000e0
 8000630:	08005c58 	.word	0x08005c58
 8000634:	2000009c 	.word	0x2000009c

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 facb 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f83b 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f8cd 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 f8a1 	bl	8000790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTask1, "Task 1", configMINIMAL_STACK_SIZE, (void*)Gorev1Metin, 1, NULL);
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <main+0x60>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	9201      	str	r2, [sp, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	9200      	str	r2, [sp, #0]
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	490f      	ldr	r1, [pc, #60]	; (800069c <main+0x64>)
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0x68>)
 8000660:	f002 ff0f 	bl	8003482 <xTaskCreate>
  xTaskCreate(vTask2, "Task 2", configMINIMAL_STACK_SIZE, (void*)Gorev2Metin, 2, NULL);
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <main+0x6c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	9201      	str	r2, [sp, #4]
 800066c:	2202      	movs	r2, #2
 800066e:	9200      	str	r2, [sp, #0]
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <main+0x70>)
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <main+0x74>)
 8000676:	f002 ff04 	bl	8003482 <xTaskCreate>
  xTaskCreate(vTaskFunction, "vTaskFunc", configMINIMAL_STACK_SIZE,(void *)Gorev3Metin,3, NULL);
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <main+0x78>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	2203      	movs	r2, #3
 8000684:	9200      	str	r2, [sp, #0]
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	490a      	ldr	r1, [pc, #40]	; (80006b4 <main+0x7c>)
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <main+0x80>)
 800068c:	f002 fef9 	bl	8003482 <xTaskCreate>
  vTaskStartScheduler();
 8000690:	f003 f904 	bl	800389c <vTaskStartScheduler>
  /* Start scheduler */
  //osKernelStart();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x5c>
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000
 800069c:	08005c68 	.word	0x08005c68
 80006a0:	080005c5 	.word	0x080005c5
 80006a4:	20000004 	.word	0x20000004
 80006a8:	08005c70 	.word	0x08005c70
 80006ac:	08000591 	.word	0x08000591
 80006b0:	20000008 	.word	0x20000008
 80006b4:	08005c78 	.word	0x08005c78
 80006b8:	080005f1 	.word	0x080005f1

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fde8 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073a:	2307      	movs	r3, #7
 800073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fd22 	bl	800118c <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800074e:	f000 f8bb 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f000 ff83 	bl	800167c <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800077c:	f000 f8a4 	bl	80008c8 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f001 fc58 	bl	800207c <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f879 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000009c 	.word	0x2000009c
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_GPIO_Init+0xb4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_GPIO_Init+0xb4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_GPIO_Init+0xb4>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_GPIO_Init+0xb8>)
 8000856:	f000 fc7f 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085a:	2301      	movs	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_GPIO_Init+0xbc>)
 800086e:	f000 fad7 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000872:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xb8>)
 800088c:	f000 fac8 	bl	8000e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	40020000 	.word	0x40020000

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 f9b1 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40002000 	.word	0x40002000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_MspInit+0x54>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <HAL_MspInit+0x54>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_MspInit+0x54>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_MspInit+0x54>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 fa57 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0x84>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d12b      	bne.n	80009a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_UART_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000986:	230c      	movs	r3, #12
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000996:	2307      	movs	r3, #7
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_UART_MspInit+0x8c>)
 80009a2:	f000 fa3d 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020000 	.word	0x40020000

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a32      	ldr	r2, [pc, #200]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f862 	bl	8001abc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a02:	f001 f833 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8000a06:	6378      	str	r0, [r7, #52]	; 0x34
 8000a08:	e004      	b.n	8000a14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a0a:	f001 f82f 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	0c9b      	lsrs	r3, r3, #18
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a24:	4a21      	ldr	r2, [pc, #132]	; (8000aac <HAL_InitTick+0xf0>)
 8000a26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a34:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a4a:	f001 f869 	bl	8001b20 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d11b      	bne.n	8000a94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a5e:	f001 f8b9 	bl	8001bd4 <HAL_TIM_Base_Start_IT>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d111      	bne.n	8000a94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a70:	202d      	movs	r0, #45	; 0x2d
 8000a72:	f000 f9c7 	bl	8000e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d808      	bhi.n	8000a8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	202d      	movs	r0, #45	; 0x2d
 8000a82:	f000 f9a3 	bl	8000dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_InitTick+0xf4>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e002      	b.n	8000a94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3738      	adds	r7, #56	; 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	200000e4 	.word	0x200000e4
 8000aac:	40002000 	.word	0x40002000
 8000ab0:	20000010 	.word	0x20000010

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ae6:	f001 f8e5 	bl	8001cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000e4 	.word	0x200000e4

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f004 fb82 	bl	800522c <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20020000 	.word	0x20020000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	2000012c 	.word	0x2000012c
 8000b5c:	20004b50 	.word	0x20004b50

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8a:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba0:	4c0b      	ldr	r4, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bae:	f7ff ffd7 	bl	8000b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f004 fb41 	bl	8005238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fd3f 	bl	8000638 <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bc8:	08005d98 	.word	0x08005d98
  ldr r2, =_sbss
 8000bcc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000bd0:	20004b50 	.word	0x20004b50

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8d8 	bl	8000db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff fed8 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe62 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000014 	.word	0x20000014
 8000c40:	20000130 	.word	0x20000130

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000130 	.word	0x20000130

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff4c 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff61 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ffb1 	bl	8000d50 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff80 	bl	8000cfc <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e16b      	b.n	8001114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 815a 	bne.w	800110e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d017      	beq.n	8000f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80b4 	beq.w	800110e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x324>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x20a>
 8001026:	2307      	movs	r3, #7
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102a:	2308      	movs	r3, #8
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x310>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x334>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x334>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae90 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e267      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d075      	beq.n	8001296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d00c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d05b      	beq.n	8001294 <HAL_RCC_OscConfig+0x108>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d157      	bne.n	8001294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e242      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x74>
 80011f2:	4b76      	ldr	r3, [pc, #472]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a75      	ldr	r2, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b70      	ldr	r3, [pc, #448]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6c      	ldr	r2, [pc, #432]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001224:	4b69      	ldr	r3, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a68      	ldr	r2, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a65      	ldr	r2, [pc, #404]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fcfe 	bl	8000c44 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fcfa 	bl	8000c44 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e207      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xc0>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcea 	bl	8000c44 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fce6 	bl	8000c44 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1f3      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0xe8>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b44      	ldr	r3, [pc, #272]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1c7      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e03a      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_RCC_OscConfig+0x244>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff fc9f 	bl	8000c44 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fc9b 	bl	8000c44 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1a8      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4925      	ldr	r1, [pc, #148]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_RCC_OscConfig+0x244>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc7e 	bl	8000c44 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fc7a 	bl	8000c44 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e187      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d036      	beq.n	80013e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d016      	beq.n	80013ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_RCC_OscConfig+0x248>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fc5e 	bl	8000c44 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc5a 	bl	8000c44 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e167      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x200>
 80013aa:	e01b      	b.n	80013e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_OscConfig+0x248>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fc47 	bl	8000c44 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e00e      	b.n	80013d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc43 	bl	8000c44 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d907      	bls.n	80013d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e150      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	42470000 	.word	0x42470000
 80013d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ea      	bne.n	80013ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8097 	beq.w	8001520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b77      	ldr	r3, [pc, #476]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a73      	ldr	r2, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fc03 	bl	8000c44 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fbff 	bl	8000c44 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e10c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x2ea>
 8001468:	4b64      	ldr	r3, [pc, #400]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a63      	ldr	r2, [pc, #396]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	e01c      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x30c>
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a5b      	ldr	r2, [pc, #364]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001498:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d015      	beq.n	80014e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fbc4 	bl	8000c44 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fbc0 	bl	8000c44 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0cb      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ee      	beq.n	80014c0 <HAL_RCC_OscConfig+0x334>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fbae 	bl	8000c44 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fbaa 	bl	8000c44 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0b5      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	4a38      	ldr	r2, [pc, #224]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a1 	beq.w	800166c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d05c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d141      	bne.n	80015c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb7e 	bl	8000c44 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fb7a 	bl	8000c44 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e087      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	3b01      	subs	r3, #1
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	491b      	ldr	r1, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fb53 	bl	8000c44 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb4f 	bl	8000c44 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e05c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x416>
 80015c0:	e054      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb3c 	bl	8000c44 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fb38 	bl	8000c44 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e045      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x444>
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e038      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000
 8001604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x4ec>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d028      	beq.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d121      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11a      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001638:	4013      	ands	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800163e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001640:	4293      	cmp	r3, r2
 8001642:	d111      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	3b01      	subs	r3, #1
 8001652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0cc      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa6a 	bl	8000c44 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fa66 	bl	8000c44 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f8ca 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00
 8001838:	40023800 	.word	0x40023800
 800183c:	08005cdc 	.word	0x08005cdc
 8001840:	2000000c 	.word	0x2000000c
 8001844:	20000010 	.word	0x20000010

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800184c:	b094      	sub	sp, #80	; 0x50
 800184e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001858:	2300      	movs	r3, #0
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d00d      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x40>
 800186c:	2b08      	cmp	r3, #8
 800186e:	f200 80e1 	bhi.w	8001a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x34>
 8001876:	2b04      	cmp	r3, #4
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x3a>
 800187a:	e0db      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001880:	e0db      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001882:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001886:	e0d8      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001892:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	2200      	movs	r2, #0
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
 80018b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ba:	4622      	mov	r2, r4
 80018bc:	462b      	mov	r3, r5
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	0159      	lsls	r1, r3, #5
 80018c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018cc:	0150      	lsls	r0, r2, #5
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4621      	mov	r1, r4
 80018d4:	1a51      	subs	r1, r2, r1
 80018d6:	6139      	str	r1, [r7, #16]
 80018d8:	4629      	mov	r1, r5
 80018da:	eb63 0301 	sbc.w	r3, r3, r1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018ec:	4659      	mov	r1, fp
 80018ee:	018b      	lsls	r3, r1, #6
 80018f0:	4651      	mov	r1, sl
 80018f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018f6:	4651      	mov	r1, sl
 80018f8:	018a      	lsls	r2, r1, #6
 80018fa:	4651      	mov	r1, sl
 80018fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001900:	4659      	mov	r1, fp
 8001902:	eb63 0901 	sbc.w	r9, r3, r1
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191a:	4690      	mov	r8, r2
 800191c:	4699      	mov	r9, r3
 800191e:	4623      	mov	r3, r4
 8001920:	eb18 0303 	adds.w	r3, r8, r3
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	462b      	mov	r3, r5
 8001928:	eb49 0303 	adc.w	r3, r9, r3
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800193a:	4629      	mov	r1, r5
 800193c:	024b      	lsls	r3, r1, #9
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001944:	4621      	mov	r1, r4
 8001946:	024a      	lsls	r2, r1, #9
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800194e:	2200      	movs	r2, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
 8001952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001958:	f7fe fc8a 	bl	8000270 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001964:	e058      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	4618      	mov	r0, r3
 8001970:	4611      	mov	r1, r2
 8001972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001980:	4642      	mov	r2, r8
 8001982:	464b      	mov	r3, r9
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0159      	lsls	r1, r3, #5
 800198e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001992:	0150      	lsls	r0, r2, #5
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4641      	mov	r1, r8
 800199a:	ebb2 0a01 	subs.w	sl, r2, r1
 800199e:	4649      	mov	r1, r9
 80019a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019b8:	ebb2 040a 	subs.w	r4, r2, sl
 80019bc:	eb63 050b 	sbc.w	r5, r3, fp
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	00eb      	lsls	r3, r5, #3
 80019ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ce:	00e2      	lsls	r2, r4, #3
 80019d0:	4614      	mov	r4, r2
 80019d2:	461d      	mov	r5, r3
 80019d4:	4643      	mov	r3, r8
 80019d6:	18e3      	adds	r3, r4, r3
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	464b      	mov	r3, r9
 80019dc:	eb45 0303 	adc.w	r3, r5, r3
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ee:	4629      	mov	r1, r5
 80019f0:	028b      	lsls	r3, r1, #10
 80019f2:	4621      	mov	r1, r4
 80019f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f8:	4621      	mov	r1, r4
 80019fa:	028a      	lsls	r2, r1, #10
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	2200      	movs	r2, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	61fa      	str	r2, [r7, #28]
 8001a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0c:	f7fe fc30 	bl	8000270 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c1b      	lsrs	r3, r3, #16
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	3301      	adds	r3, #1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3750      	adds	r7, #80	; 0x50
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	007a1200 	.word	0x007a1200

08001a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0a9b      	lsrs	r3, r3, #10
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08005cec 	.word	0x08005cec

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a98:	f7ff ffdc 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0b5b      	lsrs	r3, r3, #13
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08005cec 	.word	0x08005cec

08001abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	220f      	movs	r2, #15
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_GetClockConfig+0x60>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0207 	and.w	r2, r3, #7
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e041      	b.n	8001bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f839 	bl	8001bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 f9d8 	bl	8001f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d001      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e04e      	b.n	8001c8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d022      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c16:	d01d      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00e      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_TIM_Base_Start_IT+0xd8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d111      	bne.n	8001c78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d010      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c76:	e007      	b.n	8001c88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	40010400 	.word	0x40010400
 8001cac:	40014000 	.word	0x40014000
 8001cb0:	40001800 	.word	0x40001800

08001cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d122      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d11b      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0202 	mvn.w	r2, #2
 8001ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8ee 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001cfc:	e005      	b.n	8001d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8e0 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8f1 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d122      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0204 	mvn.w	r2, #4
 8001d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8c4 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8b6 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f8c7 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d122      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0208 	mvn.w	r2, #8
 8001d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f89a 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f88c 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f89d 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0210 	mvn.w	r2, #16
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f870 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f862 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f873 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0201 	mvn.w	r2, #1
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fd36 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b80      	cmp	r3, #128	; 0x80
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f902 	bl	8002068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	2b40      	cmp	r3, #64	; 0x40
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b40      	cmp	r3, #64	; 0x40
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f838 	bl	8001f00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0220 	mvn.w	r2, #32
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8cc 	bl	8002054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a40      	ldr	r2, [pc, #256]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	; (800202c <TIM_Base_SetConfig+0x118>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	; (8002030 <TIM_Base_SetConfig+0x11c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <TIM_Base_SetConfig+0x120>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d027      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2c      	ldr	r2, [pc, #176]	; (800202c <TIM_Base_SetConfig+0x118>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d023      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <TIM_Base_SetConfig+0x11c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <TIM_Base_SetConfig+0x120>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a29      	ldr	r2, [pc, #164]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d017      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a28      	ldr	r2, [pc, #160]	; (800203c <TIM_Base_SetConfig+0x128>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a27      	ldr	r2, [pc, #156]	; (8002040 <TIM_Base_SetConfig+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <TIM_Base_SetConfig+0x130>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <TIM_Base_SetConfig+0x134>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	; (800204c <TIM_Base_SetConfig+0x138>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	; (8002050 <TIM_Base_SetConfig+0x13c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d108      	bne.n	8001fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d003      	beq.n	800200c <TIM_Base_SetConfig+0xf8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d103      	bne.n	8002014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	615a      	str	r2, [r3, #20]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40010400 	.word	0x40010400
 800203c:	40014000 	.word	0x40014000
 8002040:	40014400 	.word	0x40014400
 8002044:	40014800 	.word	0x40014800
 8002048:	40001800 	.word	0x40001800
 800204c:	40001c00 	.word	0x40001c00
 8002050:	40002000 	.word	0x40002000

08002054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e03f      	b.n	800210e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fc42 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f929 	bl	8002318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b08a      	sub	sp, #40	; 0x28
 800211a:	af02      	add	r7, sp, #8
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b20      	cmp	r3, #32
 8002134:	d17c      	bne.n	8002230 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_UART_Transmit+0x2c>
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e075      	b.n	8002232 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_UART_Transmit+0x3e>
 8002150:	2302      	movs	r3, #2
 8002152:	e06e      	b.n	8002232 <HAL_UART_Transmit+0x11c>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2221      	movs	r2, #33	; 0x21
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800216a:	f7fe fd6b 	bl	8000c44 <HAL_GetTick>
 800216e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002184:	d108      	bne.n	8002198 <HAL_UART_Transmit+0x82>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d104      	bne.n	8002198 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	e003      	b.n	80021a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021a8:	e02a      	b.n	8002200 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f840 	bl	800223a <UART_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e036      	b.n	8002232 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10b      	bne.n	80021e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	3302      	adds	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	e007      	b.n	80021f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	3301      	adds	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1cf      	bne.n	80021aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2200      	movs	r2, #0
 8002212:	2140      	movs	r1, #64	; 0x40
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f810 	bl	800223a <UART_WaitOnFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e006      	b.n	8002232 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e000      	b.n	8002232 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002230:	2302      	movs	r3, #2
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b090      	sub	sp, #64	; 0x40
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	4613      	mov	r3, r2
 8002248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800224a:	e050      	b.n	80022ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002252:	d04c      	beq.n	80022ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <UART_WaitOnFlagUntilTimeout+0x30>
 800225a:	f7fe fcf3 	bl	8000c44 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002266:	429a      	cmp	r2, r3
 8002268:	d241      	bcs.n	80022ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	330c      	adds	r3, #12
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	e853 3f00 	ldrex	r3, [r3]
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800228a:	637a      	str	r2, [r7, #52]	; 0x34
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e5      	bne.n	800226a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	613b      	str	r3, [r7, #16]
   return(result);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3314      	adds	r3, #20
 80022bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022be:	623a      	str	r2, [r7, #32]
 80022c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c2:	69f9      	ldr	r1, [r7, #28]
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e00f      	b.n	800230e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	429a      	cmp	r2, r3
 800230a:	d09f      	beq.n	800224c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3740      	adds	r7, #64	; 0x40
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800231c:	b0c0      	sub	sp, #256	; 0x100
 800231e:	af00      	add	r7, sp, #0
 8002320:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	68d9      	ldr	r1, [r3, #12]
 8002336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	ea40 0301 	orr.w	r3, r0, r1
 8002340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	431a      	orrs	r2, r3
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	431a      	orrs	r2, r3
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002370:	f021 010c 	bic.w	r1, r1, #12
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800237e:	430b      	orrs	r3, r1
 8002380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800238e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002392:	6999      	ldr	r1, [r3, #24]
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	ea40 0301 	orr.w	r3, r0, r1
 800239e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b8f      	ldr	r3, [pc, #572]	; (80025e4 <UART_SetConfig+0x2cc>)
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d005      	beq.n	80023b8 <UART_SetConfig+0xa0>
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b8d      	ldr	r3, [pc, #564]	; (80025e8 <UART_SetConfig+0x2d0>)
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d104      	bne.n	80023c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b8:	f7ff fb6c 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80023bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023c0:	e003      	b.n	80023ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023c2:	f7ff fb53 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80023c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d4:	f040 810c 	bne.w	80025f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023ea:	4622      	mov	r2, r4
 80023ec:	462b      	mov	r3, r5
 80023ee:	1891      	adds	r1, r2, r2
 80023f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80023f2:	415b      	adcs	r3, r3
 80023f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023fa:	4621      	mov	r1, r4
 80023fc:	eb12 0801 	adds.w	r8, r2, r1
 8002400:	4629      	mov	r1, r5
 8002402:	eb43 0901 	adc.w	r9, r3, r1
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800241a:	4690      	mov	r8, r2
 800241c:	4699      	mov	r9, r3
 800241e:	4623      	mov	r3, r4
 8002420:	eb18 0303 	adds.w	r3, r8, r3
 8002424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002428:	462b      	mov	r3, r5
 800242a:	eb49 0303 	adc.w	r3, r9, r3
 800242e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800243e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002446:	460b      	mov	r3, r1
 8002448:	18db      	adds	r3, r3, r3
 800244a:	653b      	str	r3, [r7, #80]	; 0x50
 800244c:	4613      	mov	r3, r2
 800244e:	eb42 0303 	adc.w	r3, r2, r3
 8002452:	657b      	str	r3, [r7, #84]	; 0x54
 8002454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002458:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800245c:	f7fd ff08 	bl	8000270 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <UART_SetConfig+0x2d4>)
 8002466:	fba3 2302 	umull	r2, r3, r3, r2
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	011c      	lsls	r4, r3, #4
 800246e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002472:	2200      	movs	r2, #0
 8002474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002478:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800247c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002480:	4642      	mov	r2, r8
 8002482:	464b      	mov	r3, r9
 8002484:	1891      	adds	r1, r2, r2
 8002486:	64b9      	str	r1, [r7, #72]	; 0x48
 8002488:	415b      	adcs	r3, r3
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002490:	4641      	mov	r1, r8
 8002492:	eb12 0a01 	adds.w	sl, r2, r1
 8002496:	4649      	mov	r1, r9
 8002498:	eb43 0b01 	adc.w	fp, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024b0:	4692      	mov	sl, r2
 80024b2:	469b      	mov	fp, r3
 80024b4:	4643      	mov	r3, r8
 80024b6:	eb1a 0303 	adds.w	r3, sl, r3
 80024ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024be:	464b      	mov	r3, r9
 80024c0:	eb4b 0303 	adc.w	r3, fp, r3
 80024c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024dc:	460b      	mov	r3, r1
 80024de:	18db      	adds	r3, r3, r3
 80024e0:	643b      	str	r3, [r7, #64]	; 0x40
 80024e2:	4613      	mov	r3, r2
 80024e4:	eb42 0303 	adc.w	r3, r2, r3
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024f2:	f7fd febd 	bl	8000270 <__aeabi_uldivmod>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <UART_SetConfig+0x2d4>)
 80024fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2264      	movs	r2, #100	; 0x64
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	1acb      	subs	r3, r1, r3
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <UART_SetConfig+0x2d4>)
 8002514:	fba3 2302 	umull	r2, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002520:	441c      	add	r4, r3
 8002522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002526:	2200      	movs	r2, #0
 8002528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800252c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002530:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002534:	4642      	mov	r2, r8
 8002536:	464b      	mov	r3, r9
 8002538:	1891      	adds	r1, r2, r2
 800253a:	63b9      	str	r1, [r7, #56]	; 0x38
 800253c:	415b      	adcs	r3, r3
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	4641      	mov	r1, r8
 8002546:	1851      	adds	r1, r2, r1
 8002548:	6339      	str	r1, [r7, #48]	; 0x30
 800254a:	4649      	mov	r1, r9
 800254c:	414b      	adcs	r3, r1
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800255c:	4659      	mov	r1, fp
 800255e:	00cb      	lsls	r3, r1, #3
 8002560:	4651      	mov	r1, sl
 8002562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002566:	4651      	mov	r1, sl
 8002568:	00ca      	lsls	r2, r1, #3
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	4603      	mov	r3, r0
 8002570:	4642      	mov	r2, r8
 8002572:	189b      	adds	r3, r3, r2
 8002574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002578:	464b      	mov	r3, r9
 800257a:	460a      	mov	r2, r1
 800257c:	eb42 0303 	adc.w	r3, r2, r3
 8002580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002590:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002598:	460b      	mov	r3, r1
 800259a:	18db      	adds	r3, r3, r3
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
 800259e:	4613      	mov	r3, r2
 80025a0:	eb42 0303 	adc.w	r3, r2, r3
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025ae:	f7fd fe5f 	bl	8000270 <__aeabi_uldivmod>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <UART_SetConfig+0x2d4>)
 80025b8:	fba3 1302 	umull	r1, r3, r3, r2
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	2164      	movs	r1, #100	; 0x64
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	3332      	adds	r3, #50	; 0x32
 80025ca:	4a08      	ldr	r2, [pc, #32]	; (80025ec <UART_SetConfig+0x2d4>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	f003 0207 	and.w	r2, r3, #7
 80025d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4422      	add	r2, r4
 80025de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025e0:	e105      	b.n	80027ee <UART_SetConfig+0x4d6>
 80025e2:	bf00      	nop
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40011400 	.word	0x40011400
 80025ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002602:	4642      	mov	r2, r8
 8002604:	464b      	mov	r3, r9
 8002606:	1891      	adds	r1, r2, r2
 8002608:	6239      	str	r1, [r7, #32]
 800260a:	415b      	adcs	r3, r3
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002612:	4641      	mov	r1, r8
 8002614:	1854      	adds	r4, r2, r1
 8002616:	4649      	mov	r1, r9
 8002618:	eb43 0501 	adc.w	r5, r3, r1
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	00eb      	lsls	r3, r5, #3
 8002626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262a:	00e2      	lsls	r2, r4, #3
 800262c:	4614      	mov	r4, r2
 800262e:	461d      	mov	r5, r3
 8002630:	4643      	mov	r3, r8
 8002632:	18e3      	adds	r3, r4, r3
 8002634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002638:	464b      	mov	r3, r9
 800263a:	eb45 0303 	adc.w	r3, r5, r3
 800263e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800264e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800265e:	4629      	mov	r1, r5
 8002660:	008b      	lsls	r3, r1, #2
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002668:	4621      	mov	r1, r4
 800266a:	008a      	lsls	r2, r1, #2
 800266c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002670:	f7fd fdfe 	bl	8000270 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <UART_SetConfig+0x4e4>)
 800267a:	fba3 2302 	umull	r2, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	011c      	lsls	r4, r3, #4
 8002682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800268c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002690:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	1891      	adds	r1, r2, r2
 800269a:	61b9      	str	r1, [r7, #24]
 800269c:	415b      	adcs	r3, r3
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a4:	4641      	mov	r1, r8
 80026a6:	1851      	adds	r1, r2, r1
 80026a8:	6139      	str	r1, [r7, #16]
 80026aa:	4649      	mov	r1, r9
 80026ac:	414b      	adcs	r3, r1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026bc:	4659      	mov	r1, fp
 80026be:	00cb      	lsls	r3, r1, #3
 80026c0:	4651      	mov	r1, sl
 80026c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c6:	4651      	mov	r1, sl
 80026c8:	00ca      	lsls	r2, r1, #3
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	4642      	mov	r2, r8
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026d8:	464b      	mov	r3, r9
 80026da:	460a      	mov	r2, r1
 80026dc:	eb42 0303 	adc.w	r3, r2, r3
 80026e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026fc:	4649      	mov	r1, r9
 80026fe:	008b      	lsls	r3, r1, #2
 8002700:	4641      	mov	r1, r8
 8002702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002706:	4641      	mov	r1, r8
 8002708:	008a      	lsls	r2, r1, #2
 800270a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800270e:	f7fd fdaf 	bl	8000270 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <UART_SetConfig+0x4e4>)
 8002718:	fba3 1302 	umull	r1, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	2164      	movs	r1, #100	; 0x64
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	3332      	adds	r3, #50	; 0x32
 800272a:	4a34      	ldr	r2, [pc, #208]	; (80027fc <UART_SetConfig+0x4e4>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002736:	441c      	add	r4, r3
 8002738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273c:	2200      	movs	r2, #0
 800273e:	673b      	str	r3, [r7, #112]	; 0x70
 8002740:	677a      	str	r2, [r7, #116]	; 0x74
 8002742:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002746:	4642      	mov	r2, r8
 8002748:	464b      	mov	r3, r9
 800274a:	1891      	adds	r1, r2, r2
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	415b      	adcs	r3, r3
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002756:	4641      	mov	r1, r8
 8002758:	1851      	adds	r1, r2, r1
 800275a:	6039      	str	r1, [r7, #0]
 800275c:	4649      	mov	r1, r9
 800275e:	414b      	adcs	r3, r1
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800276e:	4659      	mov	r1, fp
 8002770:	00cb      	lsls	r3, r1, #3
 8002772:	4651      	mov	r1, sl
 8002774:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002778:	4651      	mov	r1, sl
 800277a:	00ca      	lsls	r2, r1, #3
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	4603      	mov	r3, r0
 8002782:	4642      	mov	r2, r8
 8002784:	189b      	adds	r3, r3, r2
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
 8002788:	464b      	mov	r3, r9
 800278a:	460a      	mov	r2, r1
 800278c:	eb42 0303 	adc.w	r3, r2, r3
 8002790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	663b      	str	r3, [r7, #96]	; 0x60
 800279c:	667a      	str	r2, [r7, #100]	; 0x64
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027aa:	4649      	mov	r1, r9
 80027ac:	008b      	lsls	r3, r1, #2
 80027ae:	4641      	mov	r1, r8
 80027b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b4:	4641      	mov	r1, r8
 80027b6:	008a      	lsls	r2, r1, #2
 80027b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027bc:	f7fd fd58 	bl	8000270 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <UART_SetConfig+0x4e4>)
 80027c6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2164      	movs	r1, #100	; 0x64
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a08      	ldr	r2, [pc, #32]	; (80027fc <UART_SetConfig+0x4e4>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4422      	add	r2, r4
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027fa:	bf00      	nop
 80027fc:	51eb851f 	.word	0x51eb851f

08002800 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Handler+0x1c>)
 8002806:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002808:	f001 fca6 	bl	8004158 <xTaskGetSchedulerState>
 800280c:	4603      	mov	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002812:	f002 fa91 	bl	8004d38 <xPortSysTickHandler>
  }
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a07      	ldr	r2, [pc, #28]	; (800284c <vApplicationGetIdleTaskMemory+0x2c>)
 8002830:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <vApplicationGetIdleTaskMemory+0x30>)
 8002836:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000134 	.word	0x20000134
 8002850:	200001f0 	.word	0x200001f0

08002854 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <vApplicationGetTimerTaskMemory+0x2c>)
 8002864:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <vApplicationGetTimerTaskMemory+0x30>)
 800286a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002872:	601a      	str	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	200003f0 	.word	0x200003f0
 8002884:	200004ac 	.word	0x200004ac

08002888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0208 	add.w	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f103 0208 	add.w	r2, r3, #8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f103 0208 	add.w	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d103      	bne.n	800294a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e00c      	b.n	8002964 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3308      	adds	r3, #8
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e002      	b.n	8002958 <vListInsert+0x2e>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	429a      	cmp	r2, r3
 8002962:	d2f6      	bcs.n	8002952 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6892      	ldr	r2, [r2, #8]
 80029b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6852      	ldr	r2, [r2, #4]
 80029bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d103      	bne.n	80029d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	1e5a      	subs	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a1a:	f002 f8fb 	bl	8004c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	441a      	add	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	441a      	add	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d114      	bne.n	8002a9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01a      	beq.n	8002aae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3310      	adds	r3, #16
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 f9a7 	bl	8003dd0 <xTaskRemoveFromEventList>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <xQueueGenericReset+0xcc>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	e009      	b.n	8002aae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fef2 	bl	8002888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff feed 	bl	8002888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aae:	f002 f8e1 	bl	8004c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	; 0x38
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <xQueueGenericCreateStatic+0x52>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <xQueueGenericCreateStatic+0x56>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <xQueueGenericCreateStatic+0x58>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	623b      	str	r3, [r7, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <xQueueGenericCreateStatic+0x7e>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <xQueueGenericCreateStatic+0x82>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <xQueueGenericCreateStatic+0x84>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	61fb      	str	r3, [r7, #28]
}
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b5e:	2350      	movs	r3, #80	; 0x50
 8002b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d00a      	beq.n	8002b7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	61bb      	str	r3, [r7, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f805 	bl	8002bb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3730      	adds	r7, #48	; 0x30
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e002      	b.n	8002bd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bde:	2101      	movs	r1, #1
 8002be0:	69b8      	ldr	r0, [r7, #24]
 8002be2:	f7ff ff05 	bl	80029f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueGenericSend+0x32>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <xQueueGenericSend+0x40>
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <xQueueGenericSend+0x44>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <xQueueGenericSend+0x46>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <xQueueGenericSend+0x60>
	__asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c54:	bf00      	nop
 8002c56:	e7fe      	b.n	8002c56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSend+0x6e>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericSend+0x72>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericSend+0x74>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	623b      	str	r3, [r7, #32]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c86:	f001 fa67 	bl	8004158 <xTaskGetSchedulerState>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <xQueueGenericSend+0x9e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <xQueueGenericSend+0xa2>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueGenericSend+0xa4>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61fb      	str	r3, [r7, #28]
}
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cb6:	f001 ffad 	bl	8004c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <xQueueGenericSend+0xd4>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d129      	bne.n	8002d20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd2:	f000 fa0b 	bl	80030ec <prvCopyDataToQueue>
 8002cd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 f873 	bl	8003dd0 <xTaskRemoveFromEventList>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <xQueueGenericSend+0x1f8>)
 8002cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	e00a      	b.n	8002d18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <xQueueGenericSend+0x1f8>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d18:	f001 ffac 	bl	8004c74 <vPortExitCritical>
				return pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e063      	b.n	8002de8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d26:	f001 ffa5 	bl	8004c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e05c      	b.n	8002de8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f8ad 	bl	8003e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d42:	f001 ff97 	bl	8004c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d46:	f000 fe19 	bl	800397c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d4a:	f001 ff63 	bl	8004c14 <vPortEnterCritical>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d103      	bne.n	8002d64 <xQueueGenericSend+0x16c>
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSend+0x182>
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d7a:	f001 ff7b 	bl	8004c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d7e:	1d3a      	adds	r2, r7, #4
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 f89c 	bl	8003ec4 <xTaskCheckForTimeOut>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d124      	bne.n	8002ddc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d94:	f000 faa2 	bl	80032dc <prvIsQueueFull>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d018      	beq.n	8002dd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	3310      	adds	r3, #16
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 ffc2 	bl	8003d30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dae:	f000 fa2d 	bl	800320c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002db2:	f000 fdf1 	bl	8003998 <xTaskResumeAll>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f af7c 	bne.w	8002cb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <xQueueGenericSend+0x1f8>)
 8002dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	e772      	b.n	8002cb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd2:	f000 fa1b 	bl	800320c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dd6:	f000 fddf 	bl	8003998 <xTaskResumeAll>
 8002dda:	e76c      	b.n	8002cb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dde:	f000 fa15 	bl	800320c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002de2:	f000 fdd9 	bl	8003998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002de6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3738      	adds	r7, #56	; 0x38
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b090      	sub	sp, #64	; 0x40
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <xQueueGenericSendFromISR+0x3c>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <xQueueGenericSendFromISR+0x40>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <xQueueGenericSendFromISR+0x42>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSendFromISR+0x6a>
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <xQueueGenericSendFromISR+0x6e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGenericSendFromISR+0x70>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	623b      	str	r3, [r7, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e7e:	f001 ffab 	bl	8004dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e82:	f3ef 8211 	mrs	r2, BASEPRI
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <xQueueGenericSendFromISR+0xbc>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d12f      	bne.n	8002f10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ec6:	f000 f911 	bl	80030ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002eca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d112      	bne.n	8002efa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d016      	beq.n	8002f0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ede:	3324      	adds	r3, #36	; 0x24
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 ff75 	bl	8003dd0 <xTaskRemoveFromEventList>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e007      	b.n	8002f0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002efa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f0e:	e001      	b.n	8002f14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3740      	adds	r7, #64	; 0x40
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <xQueueReceive+0x30>
	__asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	623b      	str	r3, [r7, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	e7fe      	b.n	8002f5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <xQueueReceive+0x3e>
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xQueueReceive+0x42>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <xQueueReceive+0x44>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xQueueReceive+0x5e>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	61fb      	str	r3, [r7, #28]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f8a:	f001 f8e5 	bl	8004158 <xTaskGetSchedulerState>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <xQueueReceive+0x6e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <xQueueReceive+0x72>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueReceive+0x74>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueReceive+0x8e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	61bb      	str	r3, [r7, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fba:	f001 fe2b 	bl	8004c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01f      	beq.n	800300a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fce:	f000 f8f7 	bl	80031c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00f      	beq.n	8003002 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	3310      	adds	r3, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fef2 	bl	8003dd0 <xTaskRemoveFromEventList>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <xQueueReceive+0x1bc>)
 8002ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003002:	f001 fe37 	bl	8004c74 <vPortExitCritical>
				return pdPASS;
 8003006:	2301      	movs	r3, #1
 8003008:	e069      	b.n	80030de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003010:	f001 fe30 	bl	8004c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003014:	2300      	movs	r3, #0
 8003016:	e062      	b.n	80030de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ff38 	bl	8003e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003028:	2301      	movs	r3, #1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800302c:	f001 fe22 	bl	8004c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003030:	f000 fca4 	bl	800397c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003034:	f001 fdee 	bl	8004c14 <vPortEnterCritical>
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800303e:	b25b      	sxtb	r3, r3
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d103      	bne.n	800304e <xQueueReceive+0x122>
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003054:	b25b      	sxtb	r3, r3
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d103      	bne.n	8003064 <xQueueReceive+0x138>
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003064:	f001 fe06 	bl	8004c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003068:	1d3a      	adds	r2, r7, #4
 800306a:	f107 0310 	add.w	r3, r7, #16
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 ff27 	bl	8003ec4 <xTaskCheckForTimeOut>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d123      	bne.n	80030c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800307c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307e:	f000 f917 	bl	80032b0 <prvIsQueueEmpty>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d017      	beq.n	80030b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	3324      	adds	r3, #36	; 0x24
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fe4d 	bl	8003d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003098:	f000 f8b8 	bl	800320c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800309c:	f000 fc7c 	bl	8003998 <xTaskResumeAll>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d189      	bne.n	8002fba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <xQueueReceive+0x1bc>)
 80030a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	e780      	b.n	8002fba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ba:	f000 f8a7 	bl	800320c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030be:	f000 fc6b 	bl	8003998 <xTaskResumeAll>
 80030c2:	e77a      	b.n	8002fba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c6:	f000 f8a1 	bl	800320c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ca:	f000 fc65 	bl	8003998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d0:	f000 f8ee 	bl	80032b0 <prvIsQueueEmpty>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f43f af6f 	beq.w	8002fba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3730      	adds	r7, #48	; 0x30
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10d      	bne.n	8003126 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d14d      	bne.n	80031ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f83c 	bl	8004194 <xTaskPriorityDisinherit>
 800311c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e043      	b.n	80031ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d119      	bne.n	8003160 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6858      	ldr	r0, [r3, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	461a      	mov	r2, r3
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	f002 f8a4 	bl	8005284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	441a      	add	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d32b      	bcc.n	80031ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e026      	b.n	80031ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68d8      	ldr	r0, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	461a      	mov	r2, r3
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	f002 f88a 	bl	8005284 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	425b      	negs	r3, r3
 800317a:	441a      	add	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	425b      	negs	r3, r3
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d105      	bne.n	80031ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031b6:	697b      	ldr	r3, [r7, #20]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d018      	beq.n	8003204 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	441a      	add	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d303      	bcc.n	80031f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68d9      	ldr	r1, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	461a      	mov	r2, r3
 80031fe:	6838      	ldr	r0, [r7, #0]
 8003200:	f002 f840 	bl	8005284 <memcpy>
	}
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003214:	f001 fcfe 	bl	8004c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800321e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003220:	e011      	b.n	8003246 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d012      	beq.n	8003250 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3324      	adds	r3, #36	; 0x24
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fdce 	bl	8003dd0 <xTaskRemoveFromEventList>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800323a:	f000 fea5 	bl	8003f88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3b01      	subs	r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	dce9      	bgt.n	8003222 <prvUnlockQueue+0x16>
 800324e:	e000      	b.n	8003252 <prvUnlockQueue+0x46>
					break;
 8003250:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800325a:	f001 fd0b 	bl	8004c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800325e:	f001 fcd9 	bl	8004c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003268:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800326a:	e011      	b.n	8003290 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3310      	adds	r3, #16
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fda9 	bl	8003dd0 <xTaskRemoveFromEventList>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003284:	f000 fe80 	bl	8003f88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003288:	7bbb      	ldrb	r3, [r7, #14]
 800328a:	3b01      	subs	r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003294:	2b00      	cmp	r3, #0
 8003296:	dce9      	bgt.n	800326c <prvUnlockQueue+0x60>
 8003298:	e000      	b.n	800329c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800329a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032a4:	f001 fce6 	bl	8004c74 <vPortExitCritical>
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032b8:	f001 fcac 	bl	8004c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e001      	b.n	80032ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ce:	f001 fcd1 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 80032d2:	68fb      	ldr	r3, [r7, #12]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032e4:	f001 fc96 	bl	8004c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d102      	bne.n	80032fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e001      	b.n	80032fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032fe:	f001 fcb9 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e014      	b.n	8003346 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800331c:	4a0f      	ldr	r2, [pc, #60]	; (800335c <vQueueAddToRegistry+0x50>)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003328:	490c      	ldr	r1, [pc, #48]	; (800335c <vQueueAddToRegistry+0x50>)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <vQueueAddToRegistry+0x50>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800333e:	e006      	b.n	800334e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b07      	cmp	r3, #7
 800334a:	d9e7      	bls.n	800331c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	200008ac 	.word	0x200008ac

08003360 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003370:	f001 fc50 	bl	8004c14 <vPortEnterCritical>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800337a:	b25b      	sxtb	r3, r3
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d103      	bne.n	800338a <vQueueWaitForMessageRestricted+0x2a>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003390:	b25b      	sxtb	r3, r3
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d103      	bne.n	80033a0 <vQueueWaitForMessageRestricted+0x40>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a0:	f001 fc68 	bl	8004c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fcdf 	bl	8003d78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff26 	bl	800320c <prvUnlockQueue>
	}
 80033c0:	bf00      	nop
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	623b      	str	r3, [r7, #32]
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xTaskCreateStatic+0x46>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	61fb      	str	r3, [r7, #28]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800340e:	23bc      	movs	r3, #188	; 0xbc
 8003410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2bbc      	cmp	r3, #188	; 0xbc
 8003416:	d00a      	beq.n	800342e <xTaskCreateStatic+0x66>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	61bb      	str	r3, [r7, #24]
}
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800342e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01e      	beq.n	8003474 <xTaskCreateStatic+0xac>
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003444:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	2202      	movs	r2, #2
 800344a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800344e:	2300      	movs	r3, #0
 8003450:	9303      	str	r3, [sp, #12]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f850 	bl	800350c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800346c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800346e:	f000 f8f3 	bl	8003658 <prvAddNewTaskToReadyList>
 8003472:	e001      	b.n	8003478 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003478:	697b      	ldr	r3, [r7, #20]
	}
 800347a:	4618      	mov	r0, r3
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003482:	b580      	push	{r7, lr}
 8003484:	b08c      	sub	sp, #48	; 0x30
 8003486:	af04      	add	r7, sp, #16
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fcde 	bl	8004e58 <pvPortMalloc>
 800349c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034a4:	20bc      	movs	r0, #188	; 0xbc
 80034a6:	f001 fcd7 	bl	8004e58 <pvPortMalloc>
 80034aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
 80034b8:	e005      	b.n	80034c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f001 fd98 	bl	8004ff0 <vPortFree>
 80034c0:	e001      	b.n	80034c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d017      	beq.n	80034fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	9302      	str	r3, [sp, #8]
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f80e 	bl	800350c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034f0:	69f8      	ldr	r0, [r7, #28]
 80034f2:	f000 f8b1 	bl	8003658 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e002      	b.n	8003502 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003502:	69bb      	ldr	r3, [r7, #24]
	}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	461a      	mov	r2, r3
 8003524:	21a5      	movs	r1, #165	; 0xa5
 8003526:	f001 febb 	bl	80052a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003534:	3b01      	subs	r3, #1
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f023 0307 	bic.w	r3, r3, #7
 8003542:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <prvInitialiseNewTask+0x58>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	617b      	str	r3, [r7, #20]
}
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01f      	beq.n	80035aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	e012      	b.n	8003596 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	7819      	ldrb	r1, [r3, #0]
 8003578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	3334      	adds	r3, #52	; 0x34
 8003580:	460a      	mov	r2, r1
 8003582:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b0f      	cmp	r3, #15
 800359a:	d9e9      	bls.n	8003570 <prvInitialiseNewTask+0x64>
 800359c:	e000      	b.n	80035a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800359e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a8:	e003      	b.n	80035b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	2b37      	cmp	r3, #55	; 0x37
 80035b6:	d901      	bls.n	80035bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035b8:	2337      	movs	r3, #55	; 0x37
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	2200      	movs	r2, #0
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	3304      	adds	r3, #4
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f978 	bl	80028c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	3318      	adds	r3, #24
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff f973 	bl	80028c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	2200      	movs	r2, #0
 8003604:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	3354      	adds	r3, #84	; 0x54
 800360c:	2260      	movs	r2, #96	; 0x60
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f001 fe45 	bl	80052a0 <memset>
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	4a0c      	ldr	r2, [pc, #48]	; (800364c <prvInitialiseNewTask+0x140>)
 800361a:	659a      	str	r2, [r3, #88]	; 0x58
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <prvInitialiseNewTask+0x144>)
 8003620:	65da      	str	r2, [r3, #92]	; 0x5c
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <prvInitialiseNewTask+0x148>)
 8003626:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	69b8      	ldr	r0, [r7, #24]
 800362e:	f001 f9c1 	bl	80049b4 <pxPortInitialiseStack>
 8003632:	4602      	mov	r2, r0
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003642:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003644:	bf00      	nop
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08005d14 	.word	0x08005d14
 8003650:	08005d34 	.word	0x08005d34
 8003654:	08005cf4 	.word	0x08005cf4

08003658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003660:	f001 fad8 	bl	8004c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <prvAddNewTaskToReadyList+0xc4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a2c      	ldr	r2, [pc, #176]	; (800371c <prvAddNewTaskToReadyList+0xc4>)
 800366c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <prvAddNewTaskToReadyList+0xc8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <prvAddNewTaskToReadyList+0xc8>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <prvAddNewTaskToReadyList+0xc4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d110      	bne.n	80036a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003684:	f000 fca6 	bl	8003fd4 <prvInitialiseTaskLists>
 8003688:	e00d      	b.n	80036a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <prvAddNewTaskToReadyList+0xcc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <prvAddNewTaskToReadyList+0xc8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	429a      	cmp	r2, r3
 800369e:	d802      	bhi.n	80036a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036a0:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <prvAddNewTaskToReadyList+0xc8>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <prvAddNewTaskToReadyList+0xd0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <prvAddNewTaskToReadyList+0xd0>)
 80036ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <prvAddNewTaskToReadyList+0xd0>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <prvAddNewTaskToReadyList+0xd4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d903      	bls.n	80036cc <prvAddNewTaskToReadyList+0x74>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <prvAddNewTaskToReadyList+0xd4>)
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <prvAddNewTaskToReadyList+0xd8>)
 80036da:	441a      	add	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f7ff f8fd 	bl	80028e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036e8:	f001 fac4 	bl	8004c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <prvAddNewTaskToReadyList+0xcc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <prvAddNewTaskToReadyList+0xc8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	429a      	cmp	r2, r3
 8003700:	d207      	bcs.n	8003712 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <prvAddNewTaskToReadyList+0xdc>)
 8003704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000dc0 	.word	0x20000dc0
 8003720:	200008ec 	.word	0x200008ec
 8003724:	20000dcc 	.word	0x20000dcc
 8003728:	20000ddc 	.word	0x20000ddc
 800372c:	20000dc8 	.word	0x20000dc8
 8003730:	200008f0 	.word	0x200008f0
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <vTaskDelayUntil+0x2a>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	617b      	str	r3, [r7, #20]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <vTaskDelayUntil+0x46>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	613b      	str	r3, [r7, #16]
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <vTaskDelayUntil+0xf0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <vTaskDelayUntil+0x64>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	60fb      	str	r3, [r7, #12]
}
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800379c:	f000 f8ee 	bl	800397c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <vTaskDelayUntil+0xf4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d20b      	bcs.n	80037d2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d211      	bcs.n	80037e8 <vTaskDelayUntil+0xb0>
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d90d      	bls.n	80037e8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	e00a      	b.n	80037e8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d303      	bcc.n	80037e4 <vTaskDelayUntil+0xac>
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d901      	bls.n	80037e8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd37 	bl	8004270 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003802:	f000 f8c9 	bl	8003998 <xTaskResumeAll>
 8003806:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <vTaskDelayUntil+0xf8>)
 8003810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800381e:	bf00      	nop
 8003820:	3728      	adds	r7, #40	; 0x28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000de8 	.word	0x20000de8
 800382c:	20000dc4 	.word	0x20000dc4
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d017      	beq.n	8003876 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <vTaskDelay+0x60>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <vTaskDelay+0x30>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	60bb      	str	r3, [r7, #8]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003864:	f000 f88a 	bl	800397c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003868:	2100      	movs	r1, #0
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fd00 	bl	8004270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003870:	f000 f892 	bl	8003998 <xTaskResumeAll>
 8003874:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <vTaskDelay+0x64>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000de8 	.word	0x20000de8
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038aa:	463a      	mov	r2, r7
 80038ac:	1d39      	adds	r1, r7, #4
 80038ae:	f107 0308 	add.w	r3, r7, #8
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe ffb4 	bl	8002820 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	9202      	str	r2, [sp, #8]
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	460a      	mov	r2, r1
 80038ca:	4924      	ldr	r1, [pc, #144]	; (800395c <vTaskStartScheduler+0xc0>)
 80038cc:	4824      	ldr	r0, [pc, #144]	; (8003960 <vTaskStartScheduler+0xc4>)
 80038ce:	f7ff fd7b 	bl	80033c8 <xTaskCreateStatic>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4a23      	ldr	r2, [pc, #140]	; (8003964 <vTaskStartScheduler+0xc8>)
 80038d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <vTaskStartScheduler+0xc8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e001      	b.n	80038ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d102      	bne.n	80038f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038f0:	f000 fd12 	bl	8004318 <xTimerCreateTimerTask>
 80038f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d11b      	bne.n	8003934 <vTaskStartScheduler+0x98>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	613b      	str	r3, [r7, #16]
}
 800390e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003910:	4b15      	ldr	r3, [pc, #84]	; (8003968 <vTaskStartScheduler+0xcc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3354      	adds	r3, #84	; 0x54
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <vTaskStartScheduler+0xd0>)
 8003918:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <vTaskStartScheduler+0xd4>)
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <vTaskStartScheduler+0xd8>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <vTaskStartScheduler+0xdc>)
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800392e:	f001 f8cf 	bl	8004ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003932:	e00e      	b.n	8003952 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d10a      	bne.n	8003952 <vTaskStartScheduler+0xb6>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60fb      	str	r3, [r7, #12]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <vTaskStartScheduler+0xb4>
}
 8003952:	bf00      	nop
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	08005cc4 	.word	0x08005cc4
 8003960:	08003fa1 	.word	0x08003fa1
 8003964:	20000de4 	.word	0x20000de4
 8003968:	200008ec 	.word	0x200008ec
 800396c:	2000001c 	.word	0x2000001c
 8003970:	20000de0 	.word	0x20000de0
 8003974:	20000dcc 	.word	0x20000dcc
 8003978:	20000dc4 	.word	0x20000dc4

0800397c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <vTaskSuspendAll+0x18>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	4a03      	ldr	r2, [pc, #12]	; (8003994 <vTaskSuspendAll+0x18>)
 8003988:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	20000de8 	.word	0x20000de8

08003998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <xTaskResumeAll+0x118>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	603b      	str	r3, [r7, #0]
}
 80039c0:	bf00      	nop
 80039c2:	e7fe      	b.n	80039c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039c4:	f001 f926 	bl	8004c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039c8:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <xTaskResumeAll+0x118>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <xTaskResumeAll+0x118>)
 80039d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <xTaskResumeAll+0x118>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d162      	bne.n	8003aa0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039da:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <xTaskResumeAll+0x11c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d05e      	beq.n	8003aa0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039e2:	e02f      	b.n	8003a44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <xTaskResumeAll+0x120>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3318      	adds	r3, #24
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe ffd3 	bl	800299c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe ffce 	bl	800299c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	4b2d      	ldr	r3, [pc, #180]	; (8003abc <xTaskResumeAll+0x124>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d903      	bls.n	8003a14 <xTaskResumeAll+0x7c>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	4a2a      	ldr	r2, [pc, #168]	; (8003abc <xTaskResumeAll+0x124>)
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4a27      	ldr	r2, [pc, #156]	; (8003ac0 <xTaskResumeAll+0x128>)
 8003a22:	441a      	add	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f7fe ff59 	bl	80028e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <xTaskResumeAll+0x12c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <xTaskResumeAll+0x130>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a44:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <xTaskResumeAll+0x120>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1cb      	bne.n	80039e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a52:	f000 fb61 	bl	8004118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <xTaskResumeAll+0x134>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a62:	f000 f847 	bl	8003af4 <xTaskIncrementTick>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <xTaskResumeAll+0x130>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f1      	bne.n	8003a62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <xTaskResumeAll+0x134>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <xTaskResumeAll+0x130>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <xTaskResumeAll+0x138>)
 8003a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003aa0:	f001 f8e8 	bl	8004c74 <vPortExitCritical>

	return xAlreadyYielded;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000de8 	.word	0x20000de8
 8003ab4:	20000dc0 	.word	0x20000dc0
 8003ab8:	20000d80 	.word	0x20000d80
 8003abc:	20000dc8 	.word	0x20000dc8
 8003ac0:	200008f0 	.word	0x200008f0
 8003ac4:	200008ec 	.word	0x200008ec
 8003ac8:	20000dd4 	.word	0x20000dd4
 8003acc:	20000dd0 	.word	0x20000dd0
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <xTaskGetTickCount+0x1c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ae0:	687b      	ldr	r3, [r7, #4]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000dc4 	.word	0x20000dc4

08003af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afe:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <xTaskIncrementTick+0x148>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 808f 	bne.w	8003c26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b08:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <xTaskIncrementTick+0x14c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b10:	4a4b      	ldr	r2, [pc, #300]	; (8003c40 <xTaskIncrementTick+0x14c>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d120      	bne.n	8003b5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b1c:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <xTaskIncrementTick+0x150>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	603b      	str	r3, [r7, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xTaskIncrementTick+0x46>
 8003b3c:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <xTaskIncrementTick+0x150>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <xTaskIncrementTick+0x154>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a3f      	ldr	r2, [pc, #252]	; (8003c44 <xTaskIncrementTick+0x150>)
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <xTaskIncrementTick+0x154>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <xTaskIncrementTick+0x158>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <xTaskIncrementTick+0x158>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	f000 fadd 	bl	8004118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b5e:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <xTaskIncrementTick+0x15c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d349      	bcc.n	8003bfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b68:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <xTaskIncrementTick+0x150>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <xTaskIncrementTick+0x15c>)
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295
 8003b78:	601a      	str	r2, [r3, #0]
					break;
 8003b7a:	e03f      	b.n	8003bfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7c:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <xTaskIncrementTick+0x150>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d203      	bcs.n	8003b9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <xTaskIncrementTick+0x15c>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b9a:	e02f      	b.n	8003bfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fefb 	bl	800299c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3318      	adds	r3, #24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fef2 	bl	800299c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <xTaskIncrementTick+0x160>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d903      	bls.n	8003bcc <xTaskIncrementTick+0xd8>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <xTaskIncrementTick+0x160>)
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <xTaskIncrementTick+0x164>)
 8003bda:	441a      	add	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f7fe fe7d 	bl	80028e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <xTaskIncrementTick+0x168>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3b8      	bcc.n	8003b68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bfa:	e7b5      	b.n	8003b68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <xTaskIncrementTick+0x168>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4915      	ldr	r1, [pc, #84]	; (8003c58 <xTaskIncrementTick+0x164>)
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d901      	bls.n	8003c18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <xTaskIncrementTick+0x16c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e004      	b.n	8003c30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <xTaskIncrementTick+0x170>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	; (8003c64 <xTaskIncrementTick+0x170>)
 8003c2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c30:	697b      	ldr	r3, [r7, #20]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000de8 	.word	0x20000de8
 8003c40:	20000dc4 	.word	0x20000dc4
 8003c44:	20000d78 	.word	0x20000d78
 8003c48:	20000d7c 	.word	0x20000d7c
 8003c4c:	20000dd8 	.word	0x20000dd8
 8003c50:	20000de0 	.word	0x20000de0
 8003c54:	20000dc8 	.word	0x20000dc8
 8003c58:	200008f0 	.word	0x200008f0
 8003c5c:	200008ec 	.word	0x200008ec
 8003c60:	20000dd4 	.word	0x20000dd4
 8003c64:	20000dd0 	.word	0x20000dd0

08003c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <vTaskSwitchContext+0xb0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <vTaskSwitchContext+0xb4>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c7c:	e046      	b.n	8003d0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <vTaskSwitchContext+0xb4>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c84:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <vTaskSwitchContext+0xb8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	e010      	b.n	8003cae <vTaskSwitchContext+0x46>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	607b      	str	r3, [r7, #4]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <vTaskSwitchContext+0x3e>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	491d      	ldr	r1, [pc, #116]	; (8003d24 <vTaskSwitchContext+0xbc>)
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0e4      	beq.n	8003c8c <vTaskSwitchContext+0x24>
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <vTaskSwitchContext+0xbc>)
 8003cce:	4413      	add	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d104      	bne.n	8003cf2 <vTaskSwitchContext+0x8a>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <vTaskSwitchContext+0xc0>)
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <vTaskSwitchContext+0xb8>)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <vTaskSwitchContext+0xc0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3354      	adds	r3, #84	; 0x54
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <vTaskSwitchContext+0xc4>)
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	20000de8 	.word	0x20000de8
 8003d1c:	20000dd4 	.word	0x20000dd4
 8003d20:	20000dc8 	.word	0x20000dc8
 8003d24:	200008f0 	.word	0x200008f0
 8003d28:	200008ec 	.word	0x200008ec
 8003d2c:	2000001c 	.word	0x2000001c

08003d30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <vTaskPlaceOnEventList+0x44>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fe fde3 	bl	800292a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d64:	2101      	movs	r1, #1
 8003d66:	6838      	ldr	r0, [r7, #0]
 8003d68:	f000 fa82 	bl	8004270 <prvAddCurrentTaskToDelayedList>
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200008ec 	.word	0x200008ec

08003d78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	617b      	str	r3, [r7, #20]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <vTaskPlaceOnEventListRestricted+0x54>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe fd9a 	bl	80028e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003db4:	f04f 33ff 	mov.w	r3, #4294967295
 8003db8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	68b8      	ldr	r0, [r7, #8]
 8003dbe:	f000 fa57 	bl	8004270 <prvAddCurrentTaskToDelayedList>
	}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200008ec 	.word	0x200008ec

08003dd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	60fb      	str	r3, [r7, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	3318      	adds	r3, #24
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fdcb 	bl	800299c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <xTaskRemoveFromEventList+0xb0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11d      	bne.n	8003e4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fdc2 	bl	800299c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <xTaskRemoveFromEventList+0xb4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d903      	bls.n	8003e2c <xTaskRemoveFromEventList+0x5c>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <xTaskRemoveFromEventList+0xb4>)
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <xTaskRemoveFromEventList+0xb8>)
 8003e3a:	441a      	add	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f7fe fd4d 	bl	80028e2 <vListInsertEnd>
 8003e48:	e005      	b.n	8003e56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480e      	ldr	r0, [pc, #56]	; (8003e8c <xTaskRemoveFromEventList+0xbc>)
 8003e52:	f7fe fd46 	bl	80028e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <xTaskRemoveFromEventList+0xc0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d905      	bls.n	8003e70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e64:	2301      	movs	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <xTaskRemoveFromEventList+0xc4>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e001      	b.n	8003e74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e74:	697b      	ldr	r3, [r7, #20]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000de8 	.word	0x20000de8
 8003e84:	20000dc8 	.word	0x20000dc8
 8003e88:	200008f0 	.word	0x200008f0
 8003e8c:	20000d80 	.word	0x20000d80
 8003e90:	200008ec 	.word	0x200008ec
 8003e94:	20000dd4 	.word	0x20000dd4

08003e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <vTaskInternalSetTimeOutState+0x24>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <vTaskInternalSetTimeOutState+0x28>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	605a      	str	r2, [r3, #4]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000dd8 	.word	0x20000dd8
 8003ec0:	20000dc4 	.word	0x20000dc4

08003ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	613b      	str	r3, [r7, #16]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	60fb      	str	r3, [r7, #12]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f06:	f000 fe85 	bl	8004c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f0a:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <xTaskCheckForTimeOut+0xbc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d102      	bne.n	8003f2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e023      	b.n	8003f72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <xTaskCheckForTimeOut+0xc0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d007      	beq.n	8003f46 <xTaskCheckForTimeOut+0x82>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	e015      	b.n	8003f72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d20b      	bcs.n	8003f68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff9b 	bl	8003e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e004      	b.n	8003f72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f72:	f000 fe7f 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 8003f76:	69fb      	ldr	r3, [r7, #28]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000dc4 	.word	0x20000dc4
 8003f84:	20000dd8 	.word	0x20000dd8

08003f88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <vTaskMissedYield+0x14>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	20000dd4 	.word	0x20000dd4

08003fa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fa8:	f000 f854 	bl	8004054 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <prvIdleTask+0x2c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d907      	bls.n	8003fc4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <prvIdleTask+0x30>)
 8003fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003fc4:	f7fc fad6 	bl	8000574 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003fc8:	e7ee      	b.n	8003fa8 <prvIdleTask+0x8>
 8003fca:	bf00      	nop
 8003fcc:	200008f0 	.word	0x200008f0
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e00c      	b.n	8003ffa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <prvInitialiseTaskLists+0x60>)
 8003fec:	4413      	add	r3, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fc4a 	bl	8002888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b37      	cmp	r3, #55	; 0x37
 8003ffe:	d9ef      	bls.n	8003fe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004000:	480d      	ldr	r0, [pc, #52]	; (8004038 <prvInitialiseTaskLists+0x64>)
 8004002:	f7fe fc41 	bl	8002888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004006:	480d      	ldr	r0, [pc, #52]	; (800403c <prvInitialiseTaskLists+0x68>)
 8004008:	f7fe fc3e 	bl	8002888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800400c:	480c      	ldr	r0, [pc, #48]	; (8004040 <prvInitialiseTaskLists+0x6c>)
 800400e:	f7fe fc3b 	bl	8002888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004012:	480c      	ldr	r0, [pc, #48]	; (8004044 <prvInitialiseTaskLists+0x70>)
 8004014:	f7fe fc38 	bl	8002888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004018:	480b      	ldr	r0, [pc, #44]	; (8004048 <prvInitialiseTaskLists+0x74>)
 800401a:	f7fe fc35 	bl	8002888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <prvInitialiseTaskLists+0x78>)
 8004020:	4a05      	ldr	r2, [pc, #20]	; (8004038 <prvInitialiseTaskLists+0x64>)
 8004022:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <prvInitialiseTaskLists+0x7c>)
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <prvInitialiseTaskLists+0x68>)
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200008f0 	.word	0x200008f0
 8004038:	20000d50 	.word	0x20000d50
 800403c:	20000d64 	.word	0x20000d64
 8004040:	20000d80 	.word	0x20000d80
 8004044:	20000d94 	.word	0x20000d94
 8004048:	20000dac 	.word	0x20000dac
 800404c:	20000d78 	.word	0x20000d78
 8004050:	20000d7c 	.word	0x20000d7c

08004054 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800405a:	e019      	b.n	8004090 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800405c:	f000 fdda 	bl	8004c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <prvCheckTasksWaitingTermination+0x50>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fc95 	bl	800299c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <prvCheckTasksWaitingTermination+0x54>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3b01      	subs	r3, #1
 8004078:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <prvCheckTasksWaitingTermination+0x54>)
 800407a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <prvCheckTasksWaitingTermination+0x58>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <prvCheckTasksWaitingTermination+0x58>)
 8004084:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004086:	f000 fdf5 	bl	8004c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f810 	bl	80040b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <prvCheckTasksWaitingTermination+0x58>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e1      	bne.n	800405c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000d94 	.word	0x20000d94
 80040a8:	20000dc0 	.word	0x20000dc0
 80040ac:	20000da8 	.word	0x20000da8

080040b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3354      	adds	r3, #84	; 0x54
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f999 	bl	80053f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d108      	bne.n	80040de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 ff8d 	bl	8004ff0 <vPortFree>
				vPortFree( pxTCB );
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 ff8a 	bl	8004ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040dc:	e018      	b.n	8004110 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d103      	bne.n	80040f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 ff81 	bl	8004ff0 <vPortFree>
	}
 80040ee:	e00f      	b.n	8004110 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d00a      	beq.n	8004110 <prvDeleteTCB+0x60>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	60fb      	str	r3, [r7, #12]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <prvDeleteTCB+0x5e>
	}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <prvResetNextTaskUnblockTime+0x38>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d104      	bne.n	8004132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <prvResetNextTaskUnblockTime+0x3c>)
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004130:	e008      	b.n	8004144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <prvResetNextTaskUnblockTime+0x38>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4a04      	ldr	r2, [pc, #16]	; (8004154 <prvResetNextTaskUnblockTime+0x3c>)
 8004142:	6013      	str	r3, [r2, #0]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000d78 	.word	0x20000d78
 8004154:	20000de0 	.word	0x20000de0

08004158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <xTaskGetSchedulerState+0x34>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004166:	2301      	movs	r3, #1
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	e008      	b.n	800417e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <xTaskGetSchedulerState+0x38>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004174:	2302      	movs	r3, #2
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	e001      	b.n	800417e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800417e:	687b      	ldr	r3, [r7, #4]
	}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	20000dcc 	.word	0x20000dcc
 8004190:	20000de8 	.word	0x20000de8

08004194 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d056      	beq.n	8004258 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041aa:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <xTaskPriorityDisinherit+0xd0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d00a      	beq.n	80041ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	60fb      	str	r3, [r7, #12]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60bb      	str	r3, [r7, #8]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d02c      	beq.n	8004258 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d128      	bne.n	8004258 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3304      	adds	r3, #4
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fbc6 	bl	800299c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <xTaskPriorityDisinherit+0xd4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d903      	bls.n	8004238 <xTaskPriorityDisinherit+0xa4>
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <xTaskPriorityDisinherit+0xd4>)
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4a09      	ldr	r2, [pc, #36]	; (800426c <xTaskPriorityDisinherit+0xd8>)
 8004246:	441a      	add	r2, r3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f7fe fb47 	bl	80028e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004258:	697b      	ldr	r3, [r7, #20]
	}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200008ec 	.word	0x200008ec
 8004268:	20000dc8 	.word	0x20000dc8
 800426c:	200008f0 	.word	0x200008f0

08004270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800427a:	4b21      	ldr	r3, [pc, #132]	; (8004300 <prvAddCurrentTaskToDelayedList+0x90>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <prvAddCurrentTaskToDelayedList+0x94>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3304      	adds	r3, #4
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fb88 	bl	800299c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d10a      	bne.n	80042aa <prvAddCurrentTaskToDelayedList+0x3a>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <prvAddCurrentTaskToDelayedList+0x94>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4819      	ldr	r0, [pc, #100]	; (8004308 <prvAddCurrentTaskToDelayedList+0x98>)
 80042a4:	f7fe fb1d 	bl	80028e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042a8:	e026      	b.n	80042f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <prvAddCurrentTaskToDelayedList+0x94>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d209      	bcs.n	80042d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <prvAddCurrentTaskToDelayedList+0x9c>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <prvAddCurrentTaskToDelayedList+0x94>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f7fe fb2b 	bl	800292a <vListInsert>
}
 80042d4:	e010      	b.n	80042f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <prvAddCurrentTaskToDelayedList+0x94>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f7fe fb21 	bl	800292a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d202      	bcs.n	80042f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000dc4 	.word	0x20000dc4
 8004304:	200008ec 	.word	0x200008ec
 8004308:	20000dac 	.word	0x20000dac
 800430c:	20000d7c 	.word	0x20000d7c
 8004310:	20000d78 	.word	0x20000d78
 8004314:	20000de0 	.word	0x20000de0

08004318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004322:	f000 fb07 	bl	8004934 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004326:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <xTimerCreateTimerTask+0x80>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d021      	beq.n	8004372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004336:	1d3a      	adds	r2, r7, #4
 8004338:	f107 0108 	add.w	r1, r7, #8
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe fa87 	bl	8002854 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	9202      	str	r2, [sp, #8]
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	2302      	movs	r3, #2
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	460a      	mov	r2, r1
 8004358:	4910      	ldr	r1, [pc, #64]	; (800439c <xTimerCreateTimerTask+0x84>)
 800435a:	4811      	ldr	r0, [pc, #68]	; (80043a0 <xTimerCreateTimerTask+0x88>)
 800435c:	f7ff f834 	bl	80033c8 <xTaskCreateStatic>
 8004360:	4603      	mov	r3, r0
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <xTimerCreateTimerTask+0x8c>)
 8004364:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004366:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <xTimerCreateTimerTask+0x8c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800436e:	2301      	movs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	613b      	str	r3, [r7, #16]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800438e:	697b      	ldr	r3, [r7, #20]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000e1c 	.word	0x20000e1c
 800439c:	08005ccc 	.word	0x08005ccc
 80043a0:	080044dd 	.word	0x080044dd
 80043a4:	20000e20 	.word	0x20000e20

080043a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	623b      	str	r3, [r7, #32]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <xTimerGenericCommand+0x98>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d02a      	beq.n	8004434 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	dc18      	bgt.n	8004422 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043f0:	f7ff feb2 	bl	8004158 <xTaskGetSchedulerState>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d109      	bne.n	800440e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <xTimerGenericCommand+0x98>)
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	f107 0110 	add.w	r1, r7, #16
 8004402:	2300      	movs	r3, #0
 8004404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004406:	f7fe fbf7 	bl	8002bf8 <xQueueGenericSend>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24
 800440c:	e012      	b.n	8004434 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800440e:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <xTimerGenericCommand+0x98>)
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	f107 0110 	add.w	r1, r7, #16
 8004416:	2300      	movs	r3, #0
 8004418:	2200      	movs	r2, #0
 800441a:	f7fe fbed 	bl	8002bf8 <xQueueGenericSend>
 800441e:	6278      	str	r0, [r7, #36]	; 0x24
 8004420:	e008      	b.n	8004434 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <xTimerGenericCommand+0x98>)
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	f107 0110 	add.w	r1, r7, #16
 800442a:	2300      	movs	r3, #0
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	f7fe fce1 	bl	8002df4 <xQueueGenericSendFromISR>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004436:	4618      	mov	r0, r3
 8004438:	3728      	adds	r7, #40	; 0x28
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000e1c 	.word	0x20000e1c

08004444 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af02      	add	r7, sp, #8
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <prvProcessExpiredTimer+0x94>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fa9d 	bl	800299c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d022      	beq.n	80044b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	18d1      	adds	r1, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	6978      	ldr	r0, [r7, #20]
 800447e:	f000 f8d1 	bl	8004624 <prvInsertTimerInActiveList>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01f      	beq.n	80044c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004488:	2300      	movs	r3, #0
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2300      	movs	r3, #0
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	2100      	movs	r1, #0
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7ff ff88 	bl	80043a8 <xTimerGenericCommand>
 8004498:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d113      	bne.n	80044c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	4798      	blx	r3
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000e14 	.word	0x20000e14

080044dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 f857 	bl	800459c <prvGetNextExpireTime>
 80044ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4619      	mov	r1, r3
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f803 	bl	8004500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044fa:	f000 f8d5 	bl	80046a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044fe:	e7f1      	b.n	80044e4 <prvTimerTask+0x8>

08004500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800450a:	f7ff fa37 	bl	800397c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f866 	bl	80045e4 <prvSampleTimeNow>
 8004518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d130      	bne.n	8004582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <prvProcessTimerOrBlockTask+0x3c>
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	429a      	cmp	r2, r3
 800452c:	d806      	bhi.n	800453c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800452e:	f7ff fa33 	bl	8003998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff85 	bl	8004444 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800453a:	e024      	b.n	8004586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <prvProcessTimerOrBlockTask+0x90>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <prvProcessTimerOrBlockTask+0x50>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <prvProcessTimerOrBlockTask+0x52>
 8004550:	2300      	movs	r3, #0
 8004552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <prvProcessTimerOrBlockTask+0x94>)
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	f7fe fefd 	bl	8003360 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004566:	f7ff fa17 	bl	8003998 <xTaskResumeAll>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <prvProcessTimerOrBlockTask+0x98>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
}
 8004580:	e001      	b.n	8004586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004582:	f7ff fa09 	bl	8003998 <xTaskResumeAll>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000e18 	.word	0x20000e18
 8004594:	20000e1c 	.word	0x20000e1c
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <prvGetNextExpireTime+0x44>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <prvGetNextExpireTime+0x16>
 80045ae:	2201      	movs	r2, #1
 80045b0:	e000      	b.n	80045b4 <prvGetNextExpireTime+0x18>
 80045b2:	2200      	movs	r2, #0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <prvGetNextExpireTime+0x44>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e001      	b.n	80045d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000e14 	.word	0x20000e14

080045e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045ec:	f7ff fa72 	bl	8003ad4 <xTaskGetTickCount>
 80045f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <prvSampleTimeNow+0x3c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d205      	bcs.n	8004608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045fc:	f000 f936 	bl	800486c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e002      	b.n	800460e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800460e:	4a04      	ldr	r2, [pc, #16]	; (8004620 <prvSampleTimeNow+0x3c>)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000e24 	.word	0x20000e24

08004624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d812      	bhi.n	8004670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e01b      	b.n	8004696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <prvInsertTimerInActiveList+0x7c>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe f95e 	bl	800292a <vListInsert>
 800466e:	e012      	b.n	8004696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d206      	bcs.n	8004686 <prvInsertTimerInActiveList+0x62>
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e007      	b.n	8004696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <prvInsertTimerInActiveList+0x80>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7fe f94a 	bl	800292a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004696:	697b      	ldr	r3, [r7, #20]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000e18 	.word	0x20000e18
 80046a4:	20000e14 	.word	0x20000e14

080046a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046ae:	e0ca      	b.n	8004846 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da18      	bge.n	80046e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	3304      	adds	r3, #4
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	61fb      	str	r3, [r7, #28]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046de:	6850      	ldr	r0, [r2, #4]
 80046e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e2:	6892      	ldr	r2, [r2, #8]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f2c0 80aa 	blt.w	8004844 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe f94b 	bl	800299c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004706:	463b      	mov	r3, r7
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff6b 	bl	80045e4 <prvSampleTimeNow>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b09      	cmp	r3, #9
 8004714:	f200 8097 	bhi.w	8004846 <prvProcessReceivedCommands+0x19e>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <prvProcessReceivedCommands+0x78>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004749 	.word	0x08004749
 8004724:	08004749 	.word	0x08004749
 8004728:	08004749 	.word	0x08004749
 800472c:	080047bd 	.word	0x080047bd
 8004730:	080047d1 	.word	0x080047d1
 8004734:	0800481b 	.word	0x0800481b
 8004738:	08004749 	.word	0x08004749
 800473c:	08004749 	.word	0x08004749
 8004740:	080047bd 	.word	0x080047bd
 8004744:	080047d1 	.word	0x080047d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	b2da      	uxtb	r2, r3
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	18d1      	adds	r1, r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004768:	f7ff ff5c 	bl	8004624 <prvInsertTimerInActiveList>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d069      	beq.n	8004846 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d05e      	beq.n	8004846 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	441a      	add	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	2100      	movs	r1, #0
 8004798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479a:	f7ff fe05 	bl	80043a8 <xTimerGenericCommand>
 800479e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d14f      	bne.n	8004846 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	61bb      	str	r3, [r7, #24]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80047ce:	e03a      	b.n	8004846 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	617b      	str	r3, [r7, #20]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	18d1      	adds	r1, r2, r3
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004814:	f7ff ff06 	bl	8004624 <prvInsertTimerInActiveList>
					break;
 8004818:	e015      	b.n	8004846 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482a:	f000 fbe1 	bl	8004ff0 <vPortFree>
 800482e:	e00a      	b.n	8004846 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	b2da      	uxtb	r2, r3
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004842:	e000      	b.n	8004846 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004844:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <prvProcessReceivedCommands+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	1d39      	adds	r1, r7, #4
 800484c:	2200      	movs	r2, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fb6c 	bl	8002f2c <xQueueReceive>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	f47f af2a 	bne.w	80046b0 <prvProcessReceivedCommands+0x8>
	}
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3730      	adds	r7, #48	; 0x30
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000e1c 	.word	0x20000e1c

0800486c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004872:	e048      	b.n	8004906 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004874:	4b2d      	ldr	r3, [pc, #180]	; (800492c <prvSwitchTimerLists+0xc0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487e:	4b2b      	ldr	r3, [pc, #172]	; (800492c <prvSwitchTimerLists+0xc0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe f885 	bl	800299c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02e      	beq.n	8004906 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90e      	bls.n	80048d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048c6:	4b19      	ldr	r3, [pc, #100]	; (800492c <prvSwitchTimerLists+0xc0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fe f82a 	bl	800292a <vListInsert>
 80048d6:	e016      	b.n	8004906 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048d8:	2300      	movs	r3, #0
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2300      	movs	r3, #0
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	2100      	movs	r1, #0
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff fd60 	bl	80043a8 <xTimerGenericCommand>
 80048e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	603b      	str	r3, [r7, #0]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <prvSwitchTimerLists+0xc0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1b1      	bne.n	8004874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <prvSwitchTimerLists+0xc0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <prvSwitchTimerLists+0xc4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a04      	ldr	r2, [pc, #16]	; (800492c <prvSwitchTimerLists+0xc0>)
 800491c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800491e:	4a04      	ldr	r2, [pc, #16]	; (8004930 <prvSwitchTimerLists+0xc4>)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6013      	str	r3, [r2, #0]
}
 8004924:	bf00      	nop
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000e14 	.word	0x20000e14
 8004930:	20000e18 	.word	0x20000e18

08004934 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800493a:	f000 f96b 	bl	8004c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <prvCheckForValidListAndQueue+0x60>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d120      	bne.n	8004988 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004946:	4814      	ldr	r0, [pc, #80]	; (8004998 <prvCheckForValidListAndQueue+0x64>)
 8004948:	f7fd ff9e 	bl	8002888 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800494c:	4813      	ldr	r0, [pc, #76]	; (800499c <prvCheckForValidListAndQueue+0x68>)
 800494e:	f7fd ff9b 	bl	8002888 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <prvCheckForValidListAndQueue+0x6c>)
 8004954:	4a10      	ldr	r2, [pc, #64]	; (8004998 <prvCheckForValidListAndQueue+0x64>)
 8004956:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004958:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <prvCheckForValidListAndQueue+0x70>)
 800495a:	4a10      	ldr	r2, [pc, #64]	; (800499c <prvCheckForValidListAndQueue+0x68>)
 800495c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800495e:	2300      	movs	r3, #0
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <prvCheckForValidListAndQueue+0x74>)
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <prvCheckForValidListAndQueue+0x78>)
 8004966:	2110      	movs	r1, #16
 8004968:	200a      	movs	r0, #10
 800496a:	f7fe f8a9 	bl	8002ac0 <xQueueGenericCreateStatic>
 800496e:	4603      	mov	r3, r0
 8004970:	4a08      	ldr	r2, [pc, #32]	; (8004994 <prvCheckForValidListAndQueue+0x60>)
 8004972:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <prvCheckForValidListAndQueue+0x60>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <prvCheckForValidListAndQueue+0x60>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	490b      	ldr	r1, [pc, #44]	; (80049b0 <prvCheckForValidListAndQueue+0x7c>)
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fcc2 	bl	800330c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004988:	f000 f974 	bl	8004c74 <vPortExitCritical>
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000e1c 	.word	0x20000e1c
 8004998:	20000dec 	.word	0x20000dec
 800499c:	20000e00 	.word	0x20000e00
 80049a0:	20000e14 	.word	0x20000e14
 80049a4:	20000e18 	.word	0x20000e18
 80049a8:	20000ec8 	.word	0x20000ec8
 80049ac:	20000e28 	.word	0x20000e28
 80049b0:	08005cd4 	.word	0x08005cd4

080049b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3b04      	subs	r3, #4
 80049c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f023 0201 	bic.w	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3b04      	subs	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049e4:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <pxPortInitialiseStack+0x64>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b14      	subs	r3, #20
 80049ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3b04      	subs	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f06f 0202 	mvn.w	r2, #2
 8004a02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b20      	subs	r3, #32
 8004a08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	08004a1d 	.word	0x08004a1d

08004a1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <prvTaskExitError+0x54>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d00a      	beq.n	8004a46 <prvTaskExitError+0x2a>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <prvTaskExitError+0x28>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	60bb      	str	r3, [r7, #8]
}
 8004a58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a5a:	bf00      	nop
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0fc      	beq.n	8004a5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000018 	.word	0x20000018
	...

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aca:	bf00      	nop
 8004acc:	e000ed08 	.word	0xe000ed08

08004ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ad6:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a46      	ldr	r2, [pc, #280]	; (8004bf4 <xPortStartScheduler+0x124>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10a      	bne.n	8004af6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <xPortStartScheduler+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10a      	bne.n	8004b16 <xPortStartScheduler+0x46>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <xPortStartScheduler+0x12c>)
 8004b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <xPortStartScheduler+0x130>)
 8004b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b44:	e009      	b.n	8004b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d0ef      	beq.n	8004b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d00a      	beq.n	8004b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60bb      	str	r3, [r7, #8]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <xPortStartScheduler+0x138>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bbe:	f000 f8dd 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <xPortStartScheduler+0x13c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bc8:	f000 f8fc 	bl	8004dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bd8:	f7ff ff66 	bl	8004aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bdc:	f7ff f844 	bl	8003c68 <vTaskSwitchContext>
	prvTaskExitError();
 8004be0:	f7ff ff1c 	bl	8004a1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00
 8004bf4:	410fc271 	.word	0x410fc271
 8004bf8:	410fc270 	.word	0x410fc270
 8004bfc:	e000e400 	.word	0xe000e400
 8004c00:	20000f18 	.word	0x20000f18
 8004c04:	20000f1c 	.word	0x20000f1c
 8004c08:	e000ed20 	.word	0xe000ed20
 8004c0c:	20000018 	.word	0x20000018
 8004c10:	e000ef34 	.word	0xe000ef34

08004c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10f      	bne.n	8004c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortEnterCritical+0x5c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	603b      	str	r3, [r7, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vPortEnterCritical+0x4a>
	}
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000018 	.word	0x20000018
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vPortExitCritical+0x24>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <vPortExitCritical+0x42>
 8004caa:	2300      	movs	r3, #0
 8004cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f383 8811 	msr	BASEPRI, r3
}
 8004cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000018 	.word	0x20000018
	...

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7fe ffb2 	bl	8003c68 <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7fe fecf 	bl	8003af4 <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <xPortSysTickHandler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	2000000c 	.word	0x2000000c
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed88 	.word	0xe000ed88

08004dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dde:	f3ef 8305 	mrs	r3, IPSR
 8004de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b0f      	cmp	r3, #15
 8004de8:	d914      	bls.n	8004e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dea:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <vPortValidateInterruptPriority+0x70>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004df4:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <vPortValidateInterruptPriority+0x74>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	7afa      	ldrb	r2, [r7, #11]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d20a      	bcs.n	8004e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <vPortValidateInterruptPriority+0x78>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <vPortValidateInterruptPriority+0x7c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d90a      	bls.n	8004e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	603b      	str	r3, [r7, #0]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <vPortValidateInterruptPriority+0x60>
	}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000e3f0 	.word	0xe000e3f0
 8004e4c:	20000f18 	.word	0x20000f18
 8004e50:	e000ed0c 	.word	0xe000ed0c
 8004e54:	20000f1c 	.word	0x20000f1c

08004e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e64:	f7fe fd8a 	bl	800397c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e68:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <pvPortMalloc+0x180>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e70:	f000 f920 	bl	80050b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e74:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <pvPortMalloc+0x184>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 8093 	bne.w	8004fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01d      	beq.n	8004ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e88:	2208      	movs	r2, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d06e      	beq.n	8004fa8 <pvPortMalloc+0x150>
 8004eca:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <pvPortMalloc+0x188>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d869      	bhi.n	8004fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ede:	e004      	b.n	8004eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d903      	bls.n	8004efc <pvPortMalloc+0xa4>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f1      	bne.n	8004ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <pvPortMalloc+0x180>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d050      	beq.n	8004fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4413      	add	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	2308      	movs	r3, #8
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d91f      	bls.n	8004f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <pvPortMalloc+0xf8>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	613b      	str	r3, [r7, #16]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f62:	69b8      	ldr	r0, [r7, #24]
 8004f64:	f000 f908 	bl	8005178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d203      	bcs.n	8004f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <pvPortMalloc+0x184>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <pvPortMalloc+0x194>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <pvPortMalloc+0x194>)
 8004fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fa8:	f7fe fcf6 	bl	8003998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <pvPortMalloc+0x174>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0x172>
	return pvReturn;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20004b28 	.word	0x20004b28
 8004fdc:	20004b3c 	.word	0x20004b3c
 8004fe0:	20004b2c 	.word	0x20004b2c
 8004fe4:	20004b20 	.word	0x20004b20
 8004fe8:	20004b30 	.word	0x20004b30
 8004fec:	20004b34 	.word	0x20004b34

08004ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04d      	beq.n	800509e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005002:	2308      	movs	r3, #8
 8005004:	425b      	negs	r3, r3
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <vPortFree+0xb8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <vPortFree+0x44>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <vPortFree+0x62>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60bb      	str	r3, [r7, #8]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <vPortFree+0xb8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d11a      	bne.n	800509e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <vPortFree+0xb8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005078:	f7fe fc80 	bl	800397c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <vPortFree+0xbc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4413      	add	r3, r2
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <vPortFree+0xbc>)
 8005088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f000 f874 	bl	8005178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <vPortFree+0xc0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	4a06      	ldr	r2, [pc, #24]	; (80050b0 <vPortFree+0xc0>)
 8005098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800509a:	f7fe fc7d 	bl	8003998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20004b3c 	.word	0x20004b3c
 80050ac:	20004b2c 	.word	0x20004b2c
 80050b0:	20004b38 	.word	0x20004b38

080050b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050c0:	4b27      	ldr	r3, [pc, #156]	; (8005160 <prvHeapInit+0xac>)
 80050c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <prvHeapInit+0xac>)
 80050e4:	4413      	add	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <prvHeapInit+0xb0>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <prvHeapInit+0xb0>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005100:	2208      	movs	r2, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <prvHeapInit+0xb4>)
 8005114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <prvHeapInit+0xb4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <prvHeapInit+0xb4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <prvHeapInit+0xb4>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <prvHeapInit+0xb8>)
 8005142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <prvHeapInit+0xbc>)
 800514a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <prvHeapInit+0xc0>)
 800514e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000f20 	.word	0x20000f20
 8005164:	20004b20 	.word	0x20004b20
 8005168:	20004b28 	.word	0x20004b28
 800516c:	20004b30 	.word	0x20004b30
 8005170:	20004b2c 	.word	0x20004b2c
 8005174:	20004b3c 	.word	0x20004b3c

08005178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005180:	4b28      	ldr	r3, [pc, #160]	; (8005224 <prvInsertBlockIntoFreeList+0xac>)
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e002      	b.n	800518c <prvInsertBlockIntoFreeList+0x14>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d8f7      	bhi.n	8005186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d108      	bne.n	80051ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d118      	bne.n	8005200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d00d      	beq.n	80051f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e008      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e003      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d002      	beq.n	8005216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20004b20 	.word	0x20004b20
 8005228:	20004b28 	.word	0x20004b28

0800522c <__errno>:
 800522c:	4b01      	ldr	r3, [pc, #4]	; (8005234 <__errno+0x8>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000001c 	.word	0x2000001c

08005238 <__libc_init_array>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	4d0d      	ldr	r5, [pc, #52]	; (8005270 <__libc_init_array+0x38>)
 800523c:	4c0d      	ldr	r4, [pc, #52]	; (8005274 <__libc_init_array+0x3c>)
 800523e:	1b64      	subs	r4, r4, r5
 8005240:	10a4      	asrs	r4, r4, #2
 8005242:	2600      	movs	r6, #0
 8005244:	42a6      	cmp	r6, r4
 8005246:	d109      	bne.n	800525c <__libc_init_array+0x24>
 8005248:	4d0b      	ldr	r5, [pc, #44]	; (8005278 <__libc_init_array+0x40>)
 800524a:	4c0c      	ldr	r4, [pc, #48]	; (800527c <__libc_init_array+0x44>)
 800524c:	f000 fcf8 	bl	8005c40 <_init>
 8005250:	1b64      	subs	r4, r4, r5
 8005252:	10a4      	asrs	r4, r4, #2
 8005254:	2600      	movs	r6, #0
 8005256:	42a6      	cmp	r6, r4
 8005258:	d105      	bne.n	8005266 <__libc_init_array+0x2e>
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005260:	4798      	blx	r3
 8005262:	3601      	adds	r6, #1
 8005264:	e7ee      	b.n	8005244 <__libc_init_array+0xc>
 8005266:	f855 3b04 	ldr.w	r3, [r5], #4
 800526a:	4798      	blx	r3
 800526c:	3601      	adds	r6, #1
 800526e:	e7f2      	b.n	8005256 <__libc_init_array+0x1e>
 8005270:	08005d90 	.word	0x08005d90
 8005274:	08005d90 	.word	0x08005d90
 8005278:	08005d90 	.word	0x08005d90
 800527c:	08005d94 	.word	0x08005d94

08005280 <__retarget_lock_acquire_recursive>:
 8005280:	4770      	bx	lr

08005282 <__retarget_lock_release_recursive>:
 8005282:	4770      	bx	lr

08005284 <memcpy>:
 8005284:	440a      	add	r2, r1
 8005286:	4291      	cmp	r1, r2
 8005288:	f100 33ff 	add.w	r3, r0, #4294967295
 800528c:	d100      	bne.n	8005290 <memcpy+0xc>
 800528e:	4770      	bx	lr
 8005290:	b510      	push	{r4, lr}
 8005292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800529a:	4291      	cmp	r1, r2
 800529c:	d1f9      	bne.n	8005292 <memcpy+0xe>
 800529e:	bd10      	pop	{r4, pc}

080052a0 <memset>:
 80052a0:	4402      	add	r2, r0
 80052a2:	4603      	mov	r3, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <sbrk_aligned>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4e0e      	ldr	r6, [pc, #56]	; (80052ec <sbrk_aligned+0x3c>)
 80052b4:	460c      	mov	r4, r1
 80052b6:	6831      	ldr	r1, [r6, #0]
 80052b8:	4605      	mov	r5, r0
 80052ba:	b911      	cbnz	r1, 80052c2 <sbrk_aligned+0x12>
 80052bc:	f000 f8f6 	bl	80054ac <_sbrk_r>
 80052c0:	6030      	str	r0, [r6, #0]
 80052c2:	4621      	mov	r1, r4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 f8f1 	bl	80054ac <_sbrk_r>
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	d00a      	beq.n	80052e4 <sbrk_aligned+0x34>
 80052ce:	1cc4      	adds	r4, r0, #3
 80052d0:	f024 0403 	bic.w	r4, r4, #3
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d007      	beq.n	80052e8 <sbrk_aligned+0x38>
 80052d8:	1a21      	subs	r1, r4, r0
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f8e6 	bl	80054ac <_sbrk_r>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d101      	bne.n	80052e8 <sbrk_aligned+0x38>
 80052e4:	f04f 34ff 	mov.w	r4, #4294967295
 80052e8:	4620      	mov	r0, r4
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	20004b48 	.word	0x20004b48

080052f0 <_malloc_r>:
 80052f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f4:	1ccd      	adds	r5, r1, #3
 80052f6:	f025 0503 	bic.w	r5, r5, #3
 80052fa:	3508      	adds	r5, #8
 80052fc:	2d0c      	cmp	r5, #12
 80052fe:	bf38      	it	cc
 8005300:	250c      	movcc	r5, #12
 8005302:	2d00      	cmp	r5, #0
 8005304:	4607      	mov	r7, r0
 8005306:	db01      	blt.n	800530c <_malloc_r+0x1c>
 8005308:	42a9      	cmp	r1, r5
 800530a:	d905      	bls.n	8005318 <_malloc_r+0x28>
 800530c:	230c      	movs	r3, #12
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	2600      	movs	r6, #0
 8005312:	4630      	mov	r0, r6
 8005314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005318:	4e2e      	ldr	r6, [pc, #184]	; (80053d4 <_malloc_r+0xe4>)
 800531a:	f000 f8f7 	bl	800550c <__malloc_lock>
 800531e:	6833      	ldr	r3, [r6, #0]
 8005320:	461c      	mov	r4, r3
 8005322:	bb34      	cbnz	r4, 8005372 <_malloc_r+0x82>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	f7ff ffc2 	bl	80052b0 <sbrk_aligned>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	4604      	mov	r4, r0
 8005330:	d14d      	bne.n	80053ce <_malloc_r+0xde>
 8005332:	6834      	ldr	r4, [r6, #0]
 8005334:	4626      	mov	r6, r4
 8005336:	2e00      	cmp	r6, #0
 8005338:	d140      	bne.n	80053bc <_malloc_r+0xcc>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	4631      	mov	r1, r6
 800533e:	4638      	mov	r0, r7
 8005340:	eb04 0803 	add.w	r8, r4, r3
 8005344:	f000 f8b2 	bl	80054ac <_sbrk_r>
 8005348:	4580      	cmp	r8, r0
 800534a:	d13a      	bne.n	80053c2 <_malloc_r+0xd2>
 800534c:	6821      	ldr	r1, [r4, #0]
 800534e:	3503      	adds	r5, #3
 8005350:	1a6d      	subs	r5, r5, r1
 8005352:	f025 0503 	bic.w	r5, r5, #3
 8005356:	3508      	adds	r5, #8
 8005358:	2d0c      	cmp	r5, #12
 800535a:	bf38      	it	cc
 800535c:	250c      	movcc	r5, #12
 800535e:	4629      	mov	r1, r5
 8005360:	4638      	mov	r0, r7
 8005362:	f7ff ffa5 	bl	80052b0 <sbrk_aligned>
 8005366:	3001      	adds	r0, #1
 8005368:	d02b      	beq.n	80053c2 <_malloc_r+0xd2>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	442b      	add	r3, r5
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	e00e      	b.n	8005390 <_malloc_r+0xa0>
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	1b52      	subs	r2, r2, r5
 8005376:	d41e      	bmi.n	80053b6 <_malloc_r+0xc6>
 8005378:	2a0b      	cmp	r2, #11
 800537a:	d916      	bls.n	80053aa <_malloc_r+0xba>
 800537c:	1961      	adds	r1, r4, r5
 800537e:	42a3      	cmp	r3, r4
 8005380:	6025      	str	r5, [r4, #0]
 8005382:	bf18      	it	ne
 8005384:	6059      	strne	r1, [r3, #4]
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	bf08      	it	eq
 800538a:	6031      	streq	r1, [r6, #0]
 800538c:	5162      	str	r2, [r4, r5]
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	4638      	mov	r0, r7
 8005392:	f104 060b 	add.w	r6, r4, #11
 8005396:	f000 f8bf 	bl	8005518 <__malloc_unlock>
 800539a:	f026 0607 	bic.w	r6, r6, #7
 800539e:	1d23      	adds	r3, r4, #4
 80053a0:	1af2      	subs	r2, r6, r3
 80053a2:	d0b6      	beq.n	8005312 <_malloc_r+0x22>
 80053a4:	1b9b      	subs	r3, r3, r6
 80053a6:	50a3      	str	r3, [r4, r2]
 80053a8:	e7b3      	b.n	8005312 <_malloc_r+0x22>
 80053aa:	6862      	ldr	r2, [r4, #4]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	bf0c      	ite	eq
 80053b0:	6032      	streq	r2, [r6, #0]
 80053b2:	605a      	strne	r2, [r3, #4]
 80053b4:	e7ec      	b.n	8005390 <_malloc_r+0xa0>
 80053b6:	4623      	mov	r3, r4
 80053b8:	6864      	ldr	r4, [r4, #4]
 80053ba:	e7b2      	b.n	8005322 <_malloc_r+0x32>
 80053bc:	4634      	mov	r4, r6
 80053be:	6876      	ldr	r6, [r6, #4]
 80053c0:	e7b9      	b.n	8005336 <_malloc_r+0x46>
 80053c2:	230c      	movs	r3, #12
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4638      	mov	r0, r7
 80053c8:	f000 f8a6 	bl	8005518 <__malloc_unlock>
 80053cc:	e7a1      	b.n	8005312 <_malloc_r+0x22>
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	e7de      	b.n	8005390 <_malloc_r+0xa0>
 80053d2:	bf00      	nop
 80053d4:	20004b44 	.word	0x20004b44

080053d8 <cleanup_glue>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	6809      	ldr	r1, [r1, #0]
 80053de:	4605      	mov	r5, r0
 80053e0:	b109      	cbz	r1, 80053e6 <cleanup_glue+0xe>
 80053e2:	f7ff fff9 	bl	80053d8 <cleanup_glue>
 80053e6:	4621      	mov	r1, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ee:	f000 b899 	b.w	8005524 <_free_r>
	...

080053f4 <_reclaim_reent>:
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <_reclaim_reent+0xb4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4283      	cmp	r3, r0
 80053fa:	b570      	push	{r4, r5, r6, lr}
 80053fc:	4604      	mov	r4, r0
 80053fe:	d051      	beq.n	80054a4 <_reclaim_reent+0xb0>
 8005400:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005402:	b143      	cbz	r3, 8005416 <_reclaim_reent+0x22>
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d14a      	bne.n	80054a0 <_reclaim_reent+0xac>
 800540a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	b111      	cbz	r1, 8005416 <_reclaim_reent+0x22>
 8005410:	4620      	mov	r0, r4
 8005412:	f000 f887 	bl	8005524 <_free_r>
 8005416:	6961      	ldr	r1, [r4, #20]
 8005418:	b111      	cbz	r1, 8005420 <_reclaim_reent+0x2c>
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f882 	bl	8005524 <_free_r>
 8005420:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005422:	b111      	cbz	r1, 800542a <_reclaim_reent+0x36>
 8005424:	4620      	mov	r0, r4
 8005426:	f000 f87d 	bl	8005524 <_free_r>
 800542a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800542c:	b111      	cbz	r1, 8005434 <_reclaim_reent+0x40>
 800542e:	4620      	mov	r0, r4
 8005430:	f000 f878 	bl	8005524 <_free_r>
 8005434:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005436:	b111      	cbz	r1, 800543e <_reclaim_reent+0x4a>
 8005438:	4620      	mov	r0, r4
 800543a:	f000 f873 	bl	8005524 <_free_r>
 800543e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005440:	b111      	cbz	r1, 8005448 <_reclaim_reent+0x54>
 8005442:	4620      	mov	r0, r4
 8005444:	f000 f86e 	bl	8005524 <_free_r>
 8005448:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800544a:	b111      	cbz	r1, 8005452 <_reclaim_reent+0x5e>
 800544c:	4620      	mov	r0, r4
 800544e:	f000 f869 	bl	8005524 <_free_r>
 8005452:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005454:	b111      	cbz	r1, 800545c <_reclaim_reent+0x68>
 8005456:	4620      	mov	r0, r4
 8005458:	f000 f864 	bl	8005524 <_free_r>
 800545c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800545e:	b111      	cbz	r1, 8005466 <_reclaim_reent+0x72>
 8005460:	4620      	mov	r0, r4
 8005462:	f000 f85f 	bl	8005524 <_free_r>
 8005466:	69a3      	ldr	r3, [r4, #24]
 8005468:	b1e3      	cbz	r3, 80054a4 <_reclaim_reent+0xb0>
 800546a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800546c:	4620      	mov	r0, r4
 800546e:	4798      	blx	r3
 8005470:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005472:	b1b9      	cbz	r1, 80054a4 <_reclaim_reent+0xb0>
 8005474:	4620      	mov	r0, r4
 8005476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800547a:	f7ff bfad 	b.w	80053d8 <cleanup_glue>
 800547e:	5949      	ldr	r1, [r1, r5]
 8005480:	b941      	cbnz	r1, 8005494 <_reclaim_reent+0xa0>
 8005482:	3504      	adds	r5, #4
 8005484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005486:	2d80      	cmp	r5, #128	; 0x80
 8005488:	68d9      	ldr	r1, [r3, #12]
 800548a:	d1f8      	bne.n	800547e <_reclaim_reent+0x8a>
 800548c:	4620      	mov	r0, r4
 800548e:	f000 f849 	bl	8005524 <_free_r>
 8005492:	e7ba      	b.n	800540a <_reclaim_reent+0x16>
 8005494:	680e      	ldr	r6, [r1, #0]
 8005496:	4620      	mov	r0, r4
 8005498:	f000 f844 	bl	8005524 <_free_r>
 800549c:	4631      	mov	r1, r6
 800549e:	e7ef      	b.n	8005480 <_reclaim_reent+0x8c>
 80054a0:	2500      	movs	r5, #0
 80054a2:	e7ef      	b.n	8005484 <_reclaim_reent+0x90>
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	bf00      	nop
 80054a8:	2000001c 	.word	0x2000001c

080054ac <_sbrk_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d06      	ldr	r5, [pc, #24]	; (80054c8 <_sbrk_r+0x1c>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fb fb1c 	bl	8000af4 <_sbrk>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_sbrk_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_sbrk_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20004b4c 	.word	0x20004b4c

080054cc <siprintf>:
 80054cc:	b40e      	push	{r1, r2, r3}
 80054ce:	b500      	push	{lr}
 80054d0:	b09c      	sub	sp, #112	; 0x70
 80054d2:	ab1d      	add	r3, sp, #116	; 0x74
 80054d4:	9002      	str	r0, [sp, #8]
 80054d6:	9006      	str	r0, [sp, #24]
 80054d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054dc:	4809      	ldr	r0, [pc, #36]	; (8005504 <siprintf+0x38>)
 80054de:	9107      	str	r1, [sp, #28]
 80054e0:	9104      	str	r1, [sp, #16]
 80054e2:	4909      	ldr	r1, [pc, #36]	; (8005508 <siprintf+0x3c>)
 80054e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e8:	9105      	str	r1, [sp, #20]
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	a902      	add	r1, sp, #8
 80054f0:	f000 f8c0 	bl	8005674 <_svfiprintf_r>
 80054f4:	9b02      	ldr	r3, [sp, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	b01c      	add	sp, #112	; 0x70
 80054fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005500:	b003      	add	sp, #12
 8005502:	4770      	bx	lr
 8005504:	2000001c 	.word	0x2000001c
 8005508:	ffff0208 	.word	0xffff0208

0800550c <__malloc_lock>:
 800550c:	4801      	ldr	r0, [pc, #4]	; (8005514 <__malloc_lock+0x8>)
 800550e:	f7ff beb7 	b.w	8005280 <__retarget_lock_acquire_recursive>
 8005512:	bf00      	nop
 8005514:	20004b40 	.word	0x20004b40

08005518 <__malloc_unlock>:
 8005518:	4801      	ldr	r0, [pc, #4]	; (8005520 <__malloc_unlock+0x8>)
 800551a:	f7ff beb2 	b.w	8005282 <__retarget_lock_release_recursive>
 800551e:	bf00      	nop
 8005520:	20004b40 	.word	0x20004b40

08005524 <_free_r>:
 8005524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005526:	2900      	cmp	r1, #0
 8005528:	d044      	beq.n	80055b4 <_free_r+0x90>
 800552a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552e:	9001      	str	r0, [sp, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f1a1 0404 	sub.w	r4, r1, #4
 8005536:	bfb8      	it	lt
 8005538:	18e4      	addlt	r4, r4, r3
 800553a:	f7ff ffe7 	bl	800550c <__malloc_lock>
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <_free_r+0x94>)
 8005540:	9801      	ldr	r0, [sp, #4]
 8005542:	6813      	ldr	r3, [r2, #0]
 8005544:	b933      	cbnz	r3, 8005554 <_free_r+0x30>
 8005546:	6063      	str	r3, [r4, #4]
 8005548:	6014      	str	r4, [r2, #0]
 800554a:	b003      	add	sp, #12
 800554c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005550:	f7ff bfe2 	b.w	8005518 <__malloc_unlock>
 8005554:	42a3      	cmp	r3, r4
 8005556:	d908      	bls.n	800556a <_free_r+0x46>
 8005558:	6825      	ldr	r5, [r4, #0]
 800555a:	1961      	adds	r1, r4, r5
 800555c:	428b      	cmp	r3, r1
 800555e:	bf01      	itttt	eq
 8005560:	6819      	ldreq	r1, [r3, #0]
 8005562:	685b      	ldreq	r3, [r3, #4]
 8005564:	1949      	addeq	r1, r1, r5
 8005566:	6021      	streq	r1, [r4, #0]
 8005568:	e7ed      	b.n	8005546 <_free_r+0x22>
 800556a:	461a      	mov	r2, r3
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	b10b      	cbz	r3, 8005574 <_free_r+0x50>
 8005570:	42a3      	cmp	r3, r4
 8005572:	d9fa      	bls.n	800556a <_free_r+0x46>
 8005574:	6811      	ldr	r1, [r2, #0]
 8005576:	1855      	adds	r5, r2, r1
 8005578:	42a5      	cmp	r5, r4
 800557a:	d10b      	bne.n	8005594 <_free_r+0x70>
 800557c:	6824      	ldr	r4, [r4, #0]
 800557e:	4421      	add	r1, r4
 8005580:	1854      	adds	r4, r2, r1
 8005582:	42a3      	cmp	r3, r4
 8005584:	6011      	str	r1, [r2, #0]
 8005586:	d1e0      	bne.n	800554a <_free_r+0x26>
 8005588:	681c      	ldr	r4, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	6053      	str	r3, [r2, #4]
 800558e:	4421      	add	r1, r4
 8005590:	6011      	str	r1, [r2, #0]
 8005592:	e7da      	b.n	800554a <_free_r+0x26>
 8005594:	d902      	bls.n	800559c <_free_r+0x78>
 8005596:	230c      	movs	r3, #12
 8005598:	6003      	str	r3, [r0, #0]
 800559a:	e7d6      	b.n	800554a <_free_r+0x26>
 800559c:	6825      	ldr	r5, [r4, #0]
 800559e:	1961      	adds	r1, r4, r5
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf04      	itt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	bf04      	itt	eq
 80055ac:	1949      	addeq	r1, r1, r5
 80055ae:	6021      	streq	r1, [r4, #0]
 80055b0:	6054      	str	r4, [r2, #4]
 80055b2:	e7ca      	b.n	800554a <_free_r+0x26>
 80055b4:	b003      	add	sp, #12
 80055b6:	bd30      	pop	{r4, r5, pc}
 80055b8:	20004b44 	.word	0x20004b44

080055bc <__ssputs_r>:
 80055bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c0:	688e      	ldr	r6, [r1, #8]
 80055c2:	429e      	cmp	r6, r3
 80055c4:	4682      	mov	sl, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4690      	mov	r8, r2
 80055ca:	461f      	mov	r7, r3
 80055cc:	d838      	bhi.n	8005640 <__ssputs_r+0x84>
 80055ce:	898a      	ldrh	r2, [r1, #12]
 80055d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055d4:	d032      	beq.n	800563c <__ssputs_r+0x80>
 80055d6:	6825      	ldr	r5, [r4, #0]
 80055d8:	6909      	ldr	r1, [r1, #16]
 80055da:	eba5 0901 	sub.w	r9, r5, r1
 80055de:	6965      	ldr	r5, [r4, #20]
 80055e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055e8:	3301      	adds	r3, #1
 80055ea:	444b      	add	r3, r9
 80055ec:	106d      	asrs	r5, r5, #1
 80055ee:	429d      	cmp	r5, r3
 80055f0:	bf38      	it	cc
 80055f2:	461d      	movcc	r5, r3
 80055f4:	0553      	lsls	r3, r2, #21
 80055f6:	d531      	bpl.n	800565c <__ssputs_r+0xa0>
 80055f8:	4629      	mov	r1, r5
 80055fa:	f7ff fe79 	bl	80052f0 <_malloc_r>
 80055fe:	4606      	mov	r6, r0
 8005600:	b950      	cbnz	r0, 8005618 <__ssputs_r+0x5c>
 8005602:	230c      	movs	r3, #12
 8005604:	f8ca 3000 	str.w	r3, [sl]
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005618:	6921      	ldr	r1, [r4, #16]
 800561a:	464a      	mov	r2, r9
 800561c:	f7ff fe32 	bl	8005284 <memcpy>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	6126      	str	r6, [r4, #16]
 800562e:	6165      	str	r5, [r4, #20]
 8005630:	444e      	add	r6, r9
 8005632:	eba5 0509 	sub.w	r5, r5, r9
 8005636:	6026      	str	r6, [r4, #0]
 8005638:	60a5      	str	r5, [r4, #8]
 800563a:	463e      	mov	r6, r7
 800563c:	42be      	cmp	r6, r7
 800563e:	d900      	bls.n	8005642 <__ssputs_r+0x86>
 8005640:	463e      	mov	r6, r7
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	4632      	mov	r2, r6
 8005646:	4641      	mov	r1, r8
 8005648:	f000 faa8 	bl	8005b9c <memmove>
 800564c:	68a3      	ldr	r3, [r4, #8]
 800564e:	1b9b      	subs	r3, r3, r6
 8005650:	60a3      	str	r3, [r4, #8]
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	4433      	add	r3, r6
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	2000      	movs	r0, #0
 800565a:	e7db      	b.n	8005614 <__ssputs_r+0x58>
 800565c:	462a      	mov	r2, r5
 800565e:	f000 fab7 	bl	8005bd0 <_realloc_r>
 8005662:	4606      	mov	r6, r0
 8005664:	2800      	cmp	r0, #0
 8005666:	d1e1      	bne.n	800562c <__ssputs_r+0x70>
 8005668:	6921      	ldr	r1, [r4, #16]
 800566a:	4650      	mov	r0, sl
 800566c:	f7ff ff5a 	bl	8005524 <_free_r>
 8005670:	e7c7      	b.n	8005602 <__ssputs_r+0x46>
	...

08005674 <_svfiprintf_r>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	4698      	mov	r8, r3
 800567a:	898b      	ldrh	r3, [r1, #12]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	b09d      	sub	sp, #116	; 0x74
 8005680:	4607      	mov	r7, r0
 8005682:	460d      	mov	r5, r1
 8005684:	4614      	mov	r4, r2
 8005686:	d50e      	bpl.n	80056a6 <_svfiprintf_r+0x32>
 8005688:	690b      	ldr	r3, [r1, #16]
 800568a:	b963      	cbnz	r3, 80056a6 <_svfiprintf_r+0x32>
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	f7ff fe2f 	bl	80052f0 <_malloc_r>
 8005692:	6028      	str	r0, [r5, #0]
 8005694:	6128      	str	r0, [r5, #16]
 8005696:	b920      	cbnz	r0, 80056a2 <_svfiprintf_r+0x2e>
 8005698:	230c      	movs	r3, #12
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	e0d1      	b.n	8005846 <_svfiprintf_r+0x1d2>
 80056a2:	2340      	movs	r3, #64	; 0x40
 80056a4:	616b      	str	r3, [r5, #20]
 80056a6:	2300      	movs	r3, #0
 80056a8:	9309      	str	r3, [sp, #36]	; 0x24
 80056aa:	2320      	movs	r3, #32
 80056ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b4:	2330      	movs	r3, #48	; 0x30
 80056b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005860 <_svfiprintf_r+0x1ec>
 80056ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056be:	f04f 0901 	mov.w	r9, #1
 80056c2:	4623      	mov	r3, r4
 80056c4:	469a      	mov	sl, r3
 80056c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ca:	b10a      	cbz	r2, 80056d0 <_svfiprintf_r+0x5c>
 80056cc:	2a25      	cmp	r2, #37	; 0x25
 80056ce:	d1f9      	bne.n	80056c4 <_svfiprintf_r+0x50>
 80056d0:	ebba 0b04 	subs.w	fp, sl, r4
 80056d4:	d00b      	beq.n	80056ee <_svfiprintf_r+0x7a>
 80056d6:	465b      	mov	r3, fp
 80056d8:	4622      	mov	r2, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	4638      	mov	r0, r7
 80056de:	f7ff ff6d 	bl	80055bc <__ssputs_r>
 80056e2:	3001      	adds	r0, #1
 80056e4:	f000 80aa 	beq.w	800583c <_svfiprintf_r+0x1c8>
 80056e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ea:	445a      	add	r2, fp
 80056ec:	9209      	str	r2, [sp, #36]	; 0x24
 80056ee:	f89a 3000 	ldrb.w	r3, [sl]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a2 	beq.w	800583c <_svfiprintf_r+0x1c8>
 80056f8:	2300      	movs	r3, #0
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005702:	f10a 0a01 	add.w	sl, sl, #1
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	9307      	str	r3, [sp, #28]
 800570a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800570e:	931a      	str	r3, [sp, #104]	; 0x68
 8005710:	4654      	mov	r4, sl
 8005712:	2205      	movs	r2, #5
 8005714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005718:	4851      	ldr	r0, [pc, #324]	; (8005860 <_svfiprintf_r+0x1ec>)
 800571a:	f7fa fd59 	bl	80001d0 <memchr>
 800571e:	9a04      	ldr	r2, [sp, #16]
 8005720:	b9d8      	cbnz	r0, 800575a <_svfiprintf_r+0xe6>
 8005722:	06d0      	lsls	r0, r2, #27
 8005724:	bf44      	itt	mi
 8005726:	2320      	movmi	r3, #32
 8005728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800572c:	0711      	lsls	r1, r2, #28
 800572e:	bf44      	itt	mi
 8005730:	232b      	movmi	r3, #43	; 0x2b
 8005732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005736:	f89a 3000 	ldrb.w	r3, [sl]
 800573a:	2b2a      	cmp	r3, #42	; 0x2a
 800573c:	d015      	beq.n	800576a <_svfiprintf_r+0xf6>
 800573e:	9a07      	ldr	r2, [sp, #28]
 8005740:	4654      	mov	r4, sl
 8005742:	2000      	movs	r0, #0
 8005744:	f04f 0c0a 	mov.w	ip, #10
 8005748:	4621      	mov	r1, r4
 800574a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800574e:	3b30      	subs	r3, #48	; 0x30
 8005750:	2b09      	cmp	r3, #9
 8005752:	d94e      	bls.n	80057f2 <_svfiprintf_r+0x17e>
 8005754:	b1b0      	cbz	r0, 8005784 <_svfiprintf_r+0x110>
 8005756:	9207      	str	r2, [sp, #28]
 8005758:	e014      	b.n	8005784 <_svfiprintf_r+0x110>
 800575a:	eba0 0308 	sub.w	r3, r0, r8
 800575e:	fa09 f303 	lsl.w	r3, r9, r3
 8005762:	4313      	orrs	r3, r2
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	46a2      	mov	sl, r4
 8005768:	e7d2      	b.n	8005710 <_svfiprintf_r+0x9c>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	1d19      	adds	r1, r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	9103      	str	r1, [sp, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfbb      	ittet	lt
 8005776:	425b      	neglt	r3, r3
 8005778:	f042 0202 	orrlt.w	r2, r2, #2
 800577c:	9307      	strge	r3, [sp, #28]
 800577e:	9307      	strlt	r3, [sp, #28]
 8005780:	bfb8      	it	lt
 8005782:	9204      	strlt	r2, [sp, #16]
 8005784:	7823      	ldrb	r3, [r4, #0]
 8005786:	2b2e      	cmp	r3, #46	; 0x2e
 8005788:	d10c      	bne.n	80057a4 <_svfiprintf_r+0x130>
 800578a:	7863      	ldrb	r3, [r4, #1]
 800578c:	2b2a      	cmp	r3, #42	; 0x2a
 800578e:	d135      	bne.n	80057fc <_svfiprintf_r+0x188>
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	9203      	str	r2, [sp, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	bfb8      	it	lt
 800579c:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a0:	3402      	adds	r4, #2
 80057a2:	9305      	str	r3, [sp, #20]
 80057a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005870 <_svfiprintf_r+0x1fc>
 80057a8:	7821      	ldrb	r1, [r4, #0]
 80057aa:	2203      	movs	r2, #3
 80057ac:	4650      	mov	r0, sl
 80057ae:	f7fa fd0f 	bl	80001d0 <memchr>
 80057b2:	b140      	cbz	r0, 80057c6 <_svfiprintf_r+0x152>
 80057b4:	2340      	movs	r3, #64	; 0x40
 80057b6:	eba0 000a 	sub.w	r0, r0, sl
 80057ba:	fa03 f000 	lsl.w	r0, r3, r0
 80057be:	9b04      	ldr	r3, [sp, #16]
 80057c0:	4303      	orrs	r3, r0
 80057c2:	3401      	adds	r4, #1
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ca:	4826      	ldr	r0, [pc, #152]	; (8005864 <_svfiprintf_r+0x1f0>)
 80057cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d0:	2206      	movs	r2, #6
 80057d2:	f7fa fcfd 	bl	80001d0 <memchr>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d038      	beq.n	800584c <_svfiprintf_r+0x1d8>
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <_svfiprintf_r+0x1f4>)
 80057dc:	bb1b      	cbnz	r3, 8005826 <_svfiprintf_r+0x1b2>
 80057de:	9b03      	ldr	r3, [sp, #12]
 80057e0:	3307      	adds	r3, #7
 80057e2:	f023 0307 	bic.w	r3, r3, #7
 80057e6:	3308      	adds	r3, #8
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ec:	4433      	add	r3, r6
 80057ee:	9309      	str	r3, [sp, #36]	; 0x24
 80057f0:	e767      	b.n	80056c2 <_svfiprintf_r+0x4e>
 80057f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f6:	460c      	mov	r4, r1
 80057f8:	2001      	movs	r0, #1
 80057fa:	e7a5      	b.n	8005748 <_svfiprintf_r+0xd4>
 80057fc:	2300      	movs	r3, #0
 80057fe:	3401      	adds	r4, #1
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	4619      	mov	r1, r3
 8005804:	f04f 0c0a 	mov.w	ip, #10
 8005808:	4620      	mov	r0, r4
 800580a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800580e:	3a30      	subs	r2, #48	; 0x30
 8005810:	2a09      	cmp	r2, #9
 8005812:	d903      	bls.n	800581c <_svfiprintf_r+0x1a8>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0c5      	beq.n	80057a4 <_svfiprintf_r+0x130>
 8005818:	9105      	str	r1, [sp, #20]
 800581a:	e7c3      	b.n	80057a4 <_svfiprintf_r+0x130>
 800581c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005820:	4604      	mov	r4, r0
 8005822:	2301      	movs	r3, #1
 8005824:	e7f0      	b.n	8005808 <_svfiprintf_r+0x194>
 8005826:	ab03      	add	r3, sp, #12
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	462a      	mov	r2, r5
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <_svfiprintf_r+0x1f8>)
 800582e:	a904      	add	r1, sp, #16
 8005830:	4638      	mov	r0, r7
 8005832:	f3af 8000 	nop.w
 8005836:	1c42      	adds	r2, r0, #1
 8005838:	4606      	mov	r6, r0
 800583a:	d1d6      	bne.n	80057ea <_svfiprintf_r+0x176>
 800583c:	89ab      	ldrh	r3, [r5, #12]
 800583e:	065b      	lsls	r3, r3, #25
 8005840:	f53f af2c 	bmi.w	800569c <_svfiprintf_r+0x28>
 8005844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005846:	b01d      	add	sp, #116	; 0x74
 8005848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584c:	ab03      	add	r3, sp, #12
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	462a      	mov	r2, r5
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <_svfiprintf_r+0x1f8>)
 8005854:	a904      	add	r1, sp, #16
 8005856:	4638      	mov	r0, r7
 8005858:	f000 f87a 	bl	8005950 <_printf_i>
 800585c:	e7eb      	b.n	8005836 <_svfiprintf_r+0x1c2>
 800585e:	bf00      	nop
 8005860:	08005d54 	.word	0x08005d54
 8005864:	08005d5e 	.word	0x08005d5e
 8005868:	00000000 	.word	0x00000000
 800586c:	080055bd 	.word	0x080055bd
 8005870:	08005d5a 	.word	0x08005d5a

08005874 <_printf_common>:
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	4616      	mov	r6, r2
 800587a:	4699      	mov	r9, r3
 800587c:	688a      	ldr	r2, [r1, #8]
 800587e:	690b      	ldr	r3, [r1, #16]
 8005880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005884:	4293      	cmp	r3, r2
 8005886:	bfb8      	it	lt
 8005888:	4613      	movlt	r3, r2
 800588a:	6033      	str	r3, [r6, #0]
 800588c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005890:	4607      	mov	r7, r0
 8005892:	460c      	mov	r4, r1
 8005894:	b10a      	cbz	r2, 800589a <_printf_common+0x26>
 8005896:	3301      	adds	r3, #1
 8005898:	6033      	str	r3, [r6, #0]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	0699      	lsls	r1, r3, #26
 800589e:	bf42      	ittt	mi
 80058a0:	6833      	ldrmi	r3, [r6, #0]
 80058a2:	3302      	addmi	r3, #2
 80058a4:	6033      	strmi	r3, [r6, #0]
 80058a6:	6825      	ldr	r5, [r4, #0]
 80058a8:	f015 0506 	ands.w	r5, r5, #6
 80058ac:	d106      	bne.n	80058bc <_printf_common+0x48>
 80058ae:	f104 0a19 	add.w	sl, r4, #25
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	6832      	ldr	r2, [r6, #0]
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	dc26      	bgt.n	800590a <_printf_common+0x96>
 80058bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c0:	1e13      	subs	r3, r2, #0
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	bf18      	it	ne
 80058c6:	2301      	movne	r3, #1
 80058c8:	0692      	lsls	r2, r2, #26
 80058ca:	d42b      	bmi.n	8005924 <_printf_common+0xb0>
 80058cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d0:	4649      	mov	r1, r9
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d01e      	beq.n	8005918 <_printf_common+0xa4>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	68e5      	ldr	r5, [r4, #12]
 80058de:	6832      	ldr	r2, [r6, #0]
 80058e0:	f003 0306 	and.w	r3, r3, #6
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	bf08      	it	eq
 80058e8:	1aad      	subeq	r5, r5, r2
 80058ea:	68a3      	ldr	r3, [r4, #8]
 80058ec:	6922      	ldr	r2, [r4, #16]
 80058ee:	bf0c      	ite	eq
 80058f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f4:	2500      	movne	r5, #0
 80058f6:	4293      	cmp	r3, r2
 80058f8:	bfc4      	itt	gt
 80058fa:	1a9b      	subgt	r3, r3, r2
 80058fc:	18ed      	addgt	r5, r5, r3
 80058fe:	2600      	movs	r6, #0
 8005900:	341a      	adds	r4, #26
 8005902:	42b5      	cmp	r5, r6
 8005904:	d11a      	bne.n	800593c <_printf_common+0xc8>
 8005906:	2000      	movs	r0, #0
 8005908:	e008      	b.n	800591c <_printf_common+0xa8>
 800590a:	2301      	movs	r3, #1
 800590c:	4652      	mov	r2, sl
 800590e:	4649      	mov	r1, r9
 8005910:	4638      	mov	r0, r7
 8005912:	47c0      	blx	r8
 8005914:	3001      	adds	r0, #1
 8005916:	d103      	bne.n	8005920 <_printf_common+0xac>
 8005918:	f04f 30ff 	mov.w	r0, #4294967295
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	3501      	adds	r5, #1
 8005922:	e7c6      	b.n	80058b2 <_printf_common+0x3e>
 8005924:	18e1      	adds	r1, r4, r3
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	2030      	movs	r0, #48	; 0x30
 800592a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800592e:	4422      	add	r2, r4
 8005930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005938:	3302      	adds	r3, #2
 800593a:	e7c7      	b.n	80058cc <_printf_common+0x58>
 800593c:	2301      	movs	r3, #1
 800593e:	4622      	mov	r2, r4
 8005940:	4649      	mov	r1, r9
 8005942:	4638      	mov	r0, r7
 8005944:	47c0      	blx	r8
 8005946:	3001      	adds	r0, #1
 8005948:	d0e6      	beq.n	8005918 <_printf_common+0xa4>
 800594a:	3601      	adds	r6, #1
 800594c:	e7d9      	b.n	8005902 <_printf_common+0x8e>
	...

08005950 <_printf_i>:
 8005950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005954:	7e0f      	ldrb	r7, [r1, #24]
 8005956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005958:	2f78      	cmp	r7, #120	; 0x78
 800595a:	4691      	mov	r9, r2
 800595c:	4680      	mov	r8, r0
 800595e:	460c      	mov	r4, r1
 8005960:	469a      	mov	sl, r3
 8005962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005966:	d807      	bhi.n	8005978 <_printf_i+0x28>
 8005968:	2f62      	cmp	r7, #98	; 0x62
 800596a:	d80a      	bhi.n	8005982 <_printf_i+0x32>
 800596c:	2f00      	cmp	r7, #0
 800596e:	f000 80d8 	beq.w	8005b22 <_printf_i+0x1d2>
 8005972:	2f58      	cmp	r7, #88	; 0x58
 8005974:	f000 80a3 	beq.w	8005abe <_printf_i+0x16e>
 8005978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800597c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005980:	e03a      	b.n	80059f8 <_printf_i+0xa8>
 8005982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005986:	2b15      	cmp	r3, #21
 8005988:	d8f6      	bhi.n	8005978 <_printf_i+0x28>
 800598a:	a101      	add	r1, pc, #4	; (adr r1, 8005990 <_printf_i+0x40>)
 800598c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059fd 	.word	0x080059fd
 8005998:	08005979 	.word	0x08005979
 800599c:	08005979 	.word	0x08005979
 80059a0:	08005979 	.word	0x08005979
 80059a4:	08005979 	.word	0x08005979
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	08005979 	.word	0x08005979
 80059b0:	08005979 	.word	0x08005979
 80059b4:	08005979 	.word	0x08005979
 80059b8:	08005979 	.word	0x08005979
 80059bc:	08005b09 	.word	0x08005b09
 80059c0:	08005a2d 	.word	0x08005a2d
 80059c4:	08005aeb 	.word	0x08005aeb
 80059c8:	08005979 	.word	0x08005979
 80059cc:	08005979 	.word	0x08005979
 80059d0:	08005b2b 	.word	0x08005b2b
 80059d4:	08005979 	.word	0x08005979
 80059d8:	08005a2d 	.word	0x08005a2d
 80059dc:	08005979 	.word	0x08005979
 80059e0:	08005979 	.word	0x08005979
 80059e4:	08005af3 	.word	0x08005af3
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	602a      	str	r2, [r5, #0]
 80059f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0a3      	b.n	8005b44 <_printf_i+0x1f4>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	6829      	ldr	r1, [r5, #0]
 8005a00:	0606      	lsls	r6, r0, #24
 8005a02:	f101 0304 	add.w	r3, r1, #4
 8005a06:	d50a      	bpl.n	8005a1e <_printf_i+0xce>
 8005a08:	680e      	ldr	r6, [r1, #0]
 8005a0a:	602b      	str	r3, [r5, #0]
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	da03      	bge.n	8005a18 <_printf_i+0xc8>
 8005a10:	232d      	movs	r3, #45	; 0x2d
 8005a12:	4276      	negs	r6, r6
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a18:	485e      	ldr	r0, [pc, #376]	; (8005b94 <_printf_i+0x244>)
 8005a1a:	230a      	movs	r3, #10
 8005a1c:	e019      	b.n	8005a52 <_printf_i+0x102>
 8005a1e:	680e      	ldr	r6, [r1, #0]
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a26:	bf18      	it	ne
 8005a28:	b236      	sxthne	r6, r6
 8005a2a:	e7ef      	b.n	8005a0c <_printf_i+0xbc>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	1d19      	adds	r1, r3, #4
 8005a32:	6029      	str	r1, [r5, #0]
 8005a34:	0601      	lsls	r1, r0, #24
 8005a36:	d501      	bpl.n	8005a3c <_printf_i+0xec>
 8005a38:	681e      	ldr	r6, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <_printf_i+0xf2>
 8005a3c:	0646      	lsls	r6, r0, #25
 8005a3e:	d5fb      	bpl.n	8005a38 <_printf_i+0xe8>
 8005a40:	881e      	ldrh	r6, [r3, #0]
 8005a42:	4854      	ldr	r0, [pc, #336]	; (8005b94 <_printf_i+0x244>)
 8005a44:	2f6f      	cmp	r7, #111	; 0x6f
 8005a46:	bf0c      	ite	eq
 8005a48:	2308      	moveq	r3, #8
 8005a4a:	230a      	movne	r3, #10
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a52:	6865      	ldr	r5, [r4, #4]
 8005a54:	60a5      	str	r5, [r4, #8]
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	bfa2      	ittt	ge
 8005a5a:	6821      	ldrge	r1, [r4, #0]
 8005a5c:	f021 0104 	bicge.w	r1, r1, #4
 8005a60:	6021      	strge	r1, [r4, #0]
 8005a62:	b90e      	cbnz	r6, 8005a68 <_printf_i+0x118>
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	d04d      	beq.n	8005b04 <_printf_i+0x1b4>
 8005a68:	4615      	mov	r5, r2
 8005a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a72:	5dc7      	ldrb	r7, [r0, r7]
 8005a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a78:	4637      	mov	r7, r6
 8005a7a:	42bb      	cmp	r3, r7
 8005a7c:	460e      	mov	r6, r1
 8005a7e:	d9f4      	bls.n	8005a6a <_printf_i+0x11a>
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d10b      	bne.n	8005a9c <_printf_i+0x14c>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	07de      	lsls	r6, r3, #31
 8005a88:	d508      	bpl.n	8005a9c <_printf_i+0x14c>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	6861      	ldr	r1, [r4, #4]
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	bfde      	ittt	le
 8005a92:	2330      	movle	r3, #48	; 0x30
 8005a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a9c:	1b52      	subs	r2, r2, r5
 8005a9e:	6122      	str	r2, [r4, #16]
 8005aa0:	f8cd a000 	str.w	sl, [sp]
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	aa03      	add	r2, sp, #12
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4640      	mov	r0, r8
 8005aac:	f7ff fee2 	bl	8005874 <_printf_common>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d14c      	bne.n	8005b4e <_printf_i+0x1fe>
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	b004      	add	sp, #16
 8005aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abe:	4835      	ldr	r0, [pc, #212]	; (8005b94 <_printf_i+0x244>)
 8005ac0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ac4:	6829      	ldr	r1, [r5, #0]
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005acc:	6029      	str	r1, [r5, #0]
 8005ace:	061d      	lsls	r5, r3, #24
 8005ad0:	d514      	bpl.n	8005afc <_printf_i+0x1ac>
 8005ad2:	07df      	lsls	r7, r3, #31
 8005ad4:	bf44      	itt	mi
 8005ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8005ada:	6023      	strmi	r3, [r4, #0]
 8005adc:	b91e      	cbnz	r6, 8005ae6 <_printf_i+0x196>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	f023 0320 	bic.w	r3, r3, #32
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	e7b0      	b.n	8005a4c <_printf_i+0xfc>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	f043 0320 	orr.w	r3, r3, #32
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	2378      	movs	r3, #120	; 0x78
 8005af4:	4828      	ldr	r0, [pc, #160]	; (8005b98 <_printf_i+0x248>)
 8005af6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afa:	e7e3      	b.n	8005ac4 <_printf_i+0x174>
 8005afc:	0659      	lsls	r1, r3, #25
 8005afe:	bf48      	it	mi
 8005b00:	b2b6      	uxthmi	r6, r6
 8005b02:	e7e6      	b.n	8005ad2 <_printf_i+0x182>
 8005b04:	4615      	mov	r5, r2
 8005b06:	e7bb      	b.n	8005a80 <_printf_i+0x130>
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	6826      	ldr	r6, [r4, #0]
 8005b0c:	6961      	ldr	r1, [r4, #20]
 8005b0e:	1d18      	adds	r0, r3, #4
 8005b10:	6028      	str	r0, [r5, #0]
 8005b12:	0635      	lsls	r5, r6, #24
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	d501      	bpl.n	8005b1c <_printf_i+0x1cc>
 8005b18:	6019      	str	r1, [r3, #0]
 8005b1a:	e002      	b.n	8005b22 <_printf_i+0x1d2>
 8005b1c:	0670      	lsls	r0, r6, #25
 8005b1e:	d5fb      	bpl.n	8005b18 <_printf_i+0x1c8>
 8005b20:	8019      	strh	r1, [r3, #0]
 8005b22:	2300      	movs	r3, #0
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	4615      	mov	r5, r2
 8005b28:	e7ba      	b.n	8005aa0 <_printf_i+0x150>
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	1d1a      	adds	r2, r3, #4
 8005b2e:	602a      	str	r2, [r5, #0]
 8005b30:	681d      	ldr	r5, [r3, #0]
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	2100      	movs	r1, #0
 8005b36:	4628      	mov	r0, r5
 8005b38:	f7fa fb4a 	bl	80001d0 <memchr>
 8005b3c:	b108      	cbz	r0, 8005b42 <_printf_i+0x1f2>
 8005b3e:	1b40      	subs	r0, r0, r5
 8005b40:	6060      	str	r0, [r4, #4]
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	2300      	movs	r3, #0
 8005b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4c:	e7a8      	b.n	8005aa0 <_printf_i+0x150>
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	462a      	mov	r2, r5
 8005b52:	4649      	mov	r1, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	47d0      	blx	sl
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d0ab      	beq.n	8005ab4 <_printf_i+0x164>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	079b      	lsls	r3, r3, #30
 8005b60:	d413      	bmi.n	8005b8a <_printf_i+0x23a>
 8005b62:	68e0      	ldr	r0, [r4, #12]
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	4298      	cmp	r0, r3
 8005b68:	bfb8      	it	lt
 8005b6a:	4618      	movlt	r0, r3
 8005b6c:	e7a4      	b.n	8005ab8 <_printf_i+0x168>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4632      	mov	r2, r6
 8005b72:	4649      	mov	r1, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	47d0      	blx	sl
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d09b      	beq.n	8005ab4 <_printf_i+0x164>
 8005b7c:	3501      	adds	r5, #1
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	9903      	ldr	r1, [sp, #12]
 8005b82:	1a5b      	subs	r3, r3, r1
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	dcf2      	bgt.n	8005b6e <_printf_i+0x21e>
 8005b88:	e7eb      	b.n	8005b62 <_printf_i+0x212>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	f104 0619 	add.w	r6, r4, #25
 8005b90:	e7f5      	b.n	8005b7e <_printf_i+0x22e>
 8005b92:	bf00      	nop
 8005b94:	08005d65 	.word	0x08005d65
 8005b98:	08005d76 	.word	0x08005d76

08005b9c <memmove>:
 8005b9c:	4288      	cmp	r0, r1
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	eb01 0402 	add.w	r4, r1, r2
 8005ba4:	d902      	bls.n	8005bac <memmove+0x10>
 8005ba6:	4284      	cmp	r4, r0
 8005ba8:	4623      	mov	r3, r4
 8005baa:	d807      	bhi.n	8005bbc <memmove+0x20>
 8005bac:	1e43      	subs	r3, r0, #1
 8005bae:	42a1      	cmp	r1, r4
 8005bb0:	d008      	beq.n	8005bc4 <memmove+0x28>
 8005bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bba:	e7f8      	b.n	8005bae <memmove+0x12>
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	d100      	bne.n	8005bc6 <memmove+0x2a>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bce:	e7f7      	b.n	8005bc0 <memmove+0x24>

08005bd0 <_realloc_r>:
 8005bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd4:	4680      	mov	r8, r0
 8005bd6:	4614      	mov	r4, r2
 8005bd8:	460e      	mov	r6, r1
 8005bda:	b921      	cbnz	r1, 8005be6 <_realloc_r+0x16>
 8005bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be0:	4611      	mov	r1, r2
 8005be2:	f7ff bb85 	b.w	80052f0 <_malloc_r>
 8005be6:	b92a      	cbnz	r2, 8005bf4 <_realloc_r+0x24>
 8005be8:	f7ff fc9c 	bl	8005524 <_free_r>
 8005bec:	4625      	mov	r5, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf4:	f000 f81b 	bl	8005c2e <_malloc_usable_size_r>
 8005bf8:	4284      	cmp	r4, r0
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	d802      	bhi.n	8005c04 <_realloc_r+0x34>
 8005bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c02:	d812      	bhi.n	8005c2a <_realloc_r+0x5a>
 8005c04:	4621      	mov	r1, r4
 8005c06:	4640      	mov	r0, r8
 8005c08:	f7ff fb72 	bl	80052f0 <_malloc_r>
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0ed      	beq.n	8005bee <_realloc_r+0x1e>
 8005c12:	42bc      	cmp	r4, r7
 8005c14:	4622      	mov	r2, r4
 8005c16:	4631      	mov	r1, r6
 8005c18:	bf28      	it	cs
 8005c1a:	463a      	movcs	r2, r7
 8005c1c:	f7ff fb32 	bl	8005284 <memcpy>
 8005c20:	4631      	mov	r1, r6
 8005c22:	4640      	mov	r0, r8
 8005c24:	f7ff fc7e 	bl	8005524 <_free_r>
 8005c28:	e7e1      	b.n	8005bee <_realloc_r+0x1e>
 8005c2a:	4635      	mov	r5, r6
 8005c2c:	e7df      	b.n	8005bee <_realloc_r+0x1e>

08005c2e <_malloc_usable_size_r>:
 8005c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c32:	1f18      	subs	r0, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfbc      	itt	lt
 8005c38:	580b      	ldrlt	r3, [r1, r0]
 8005c3a:	18c0      	addlt	r0, r0, r3
 8005c3c:	4770      	bx	lr
	...

08005c40 <_init>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

08005c4c <_fini>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr
