
006_CMSIS_OS_SOFTWARE_TIMERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005404  08005404  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800540c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000046b4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004728  20004728  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017375  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000304c  00000000  00000000  00037419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  0003a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001120  00000000  00000000  0003b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022749  00000000  00000000  0003c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140fc  00000000  00000000  0005ef09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3603  00000000  00000000  00073005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146608  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f34  00000000  00000000  00146658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005328 	.word	0x08005328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005328 	.word	0x08005328

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetTimerTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetTimerTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000526:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	20000344 	.word	0x20000344
 8000538:	200003f8 	.word	0x200003f8

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fabd 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f82f 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f8c1 	bl	80006d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f895 	bl	800067c <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <main+0x5c>)
 8000554:	623b      	str	r3, [r7, #32]
 8000556:	2300      	movs	r3, #0
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f890 	bl	8002688 <osTimerCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a0c      	ldr	r2, [pc, #48]	; (800059c <main+0x60>)
 800056c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Receiver */
  osThreadDef(Receiver, Receiver1, osPriorityNormal, 0, 128);
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <main+0x64>)
 8000570:	1d3c      	adds	r4, r7, #4
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverHandle = osThreadCreate(osThread(Receiver), NULL);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f002 f81e 	bl	80025c6 <osThreadCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <main+0x68>)
 800058e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f002 f812 	bl	80025b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x58>
 8000596:	bf00      	nop
 8000598:	080007c9 	.word	0x080007c9
 800059c:	20000840 	.word	0x20000840
 80005a0:	0800534c 	.word	0x0800534c
 80005a4:	2000083c 	.word	0x2000083c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 fdec 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000618:	2308      	movs	r3, #8
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800061c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000626:	2307      	movs	r3, #7
 8000628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fd5e 	bl	80010f0 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063a:	f000 f8e7 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2105      	movs	r1, #5
 800065c:	4618      	mov	r0, r3
 800065e:	f000 ffbf 	bl	80015e0 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000668:	f000 f8d0 	bl	800080c <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART2_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f001 fc94 	bl	8001fe0 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f8a5 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200007f8 	.word	0x200007f8
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_GPIO_Init+0xc8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <MX_GPIO_Init+0xc8>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_GPIO_Init+0xc8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_GPIO_Init+0xc8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a23      	ldr	r2, [pc, #140]	; (8000798 <MX_GPIO_Init+0xc8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_GPIO_Init+0xc8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_GPIO_Init+0xc8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_GPIO_Init+0xc8>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_GPIO_Init+0xc8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <MX_GPIO_Init+0xcc>)
 8000742:	f000 fc7d 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_GPIO_Init+0xd0>)
 800075c:	f000 fad4 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000760:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4619      	mov	r1, r3
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <MX_GPIO_Init+0xcc>)
 800077a:	f000 fac5 	bl	8000d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2105      	movs	r1, #5
 8000782:	2006      	movs	r0, #6
 8000784:	f000 fa96 	bl	8000cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000788:	2006      	movs	r0, #6
 800078a:	f000 faaf 	bl	8000cec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	40020000 	.word	0x40020000

080007a4 <Receiver1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Receiver1 */
void Receiver1(void const * argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osTimerStart(myTimer01Handle, 1000);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <Receiver1+0x20>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 ff9b 	bl	80026f0 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
    osDelay(333);
 80007ba:	f240 104d 	movw	r0, #333	; 0x14d
 80007be:	f001 ff4e 	bl	800265e <osDelay>
 80007c2:	e7fa      	b.n	80007ba <Receiver1+0x16>
 80007c4:	20000840 	.word	0x20000840

080007c8 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <Callback01+0x1c>)
 80007d6:	f000 fc4c 	bl	8001072 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback01 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020c00 	.word	0x40020c00

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 f983 	bl	8000b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40002000 	.word	0x40002000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <HAL_MspInit+0x54>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_MspInit+0x54>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 fa29 	bl	8000cb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <HAL_UART_MspInit+0x84>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12b      	bne.n	80008ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_UART_MspInit+0x88>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_UART_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_UART_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <HAL_UART_MspInit+0x88>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_UART_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ca:	230c      	movs	r3, #12
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <HAL_UART_MspInit+0x8c>)
 80008e6:	f000 fa0f 	bl	8000d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000

08000900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <HAL_InitTick+0xe4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a32      	ldr	r2, [pc, #200]	; (80009e4 <HAL_InitTick+0xe4>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <HAL_InitTick+0xe4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092c:	f107 0210 	add.w	r2, r7, #16
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f872 	bl	8001a20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000946:	f001 f843 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 800094a:	6378      	str	r0, [r7, #52]	; 0x34
 800094c:	e004      	b.n	8000958 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800094e:	f001 f83f 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8000952:	4603      	mov	r3, r0
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <HAL_InitTick+0xe8>)
 800095c:	fba2 2303 	umull	r2, r3, r2, r3
 8000960:	0c9b      	lsrs	r3, r3, #18
 8000962:	3b01      	subs	r3, #1
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_InitTick+0xec>)
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <HAL_InitTick+0xf0>)
 800096a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <HAL_InitTick+0xec>)
 800096e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000972:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <HAL_InitTick+0xec>)
 8000976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000978:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_InitTick+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_InitTick+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <HAL_InitTick+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800098c:	4817      	ldr	r0, [pc, #92]	; (80009ec <HAL_InitTick+0xec>)
 800098e:	f001 f879 	bl	8001a84 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800099c:	2b00      	cmp	r3, #0
 800099e:	d11b      	bne.n	80009d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <HAL_InitTick+0xec>)
 80009a2:	f001 f8c9 	bl	8001b38 <HAL_TIM_Base_Start_IT>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d111      	bne.n	80009d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009b4:	202d      	movs	r0, #45	; 0x2d
 80009b6:	f000 f999 	bl	8000cec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d808      	bhi.n	80009d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	202d      	movs	r0, #45	; 0x2d
 80009c6:	f000 f975 	bl	8000cb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_InitTick+0xf4>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e002      	b.n	80009d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3738      	adds	r7, #56	; 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	431bde83 	.word	0x431bde83
 80009ec:	20000844 	.word	0x20000844
 80009f0:	40002000 	.word	0x40002000
 80009f4:	20000004 	.word	0x20000004

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 fb3d 	bl	80010a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a3a:	f001 f8ed 	bl	8001c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000844 	.word	0x20000844

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a96:	f7ff ffd7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f004 fb47 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd4d 	bl	800053c <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ab0:	0800540c 	.word	0x0800540c
  ldr r2, =_sbss
 8000ab4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ab8:	20004728 	.word	0x20004728

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f8d8 	bl	8000c9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff ff06 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff fe90 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	2000088c 	.word	0x2000088c

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000088c 	.word	0x2000088c

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <__NVIC_EnableIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ff4c 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc6:	f7ff ff61 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	6978      	ldr	r0, [r7, #20]
 8000cd2:	f7ff ffb1 	bl	8000c38 <NVIC_EncodePriority>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff80 	bl	8000be4 <__NVIC_SetPriority>
}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff54 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	e16b      	b.n	8000ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 815a 	bne.w	8000ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d005      	beq.n	8000d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d130      	bne.n	8000dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 0201 	and.w	r2, r3, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d017      	beq.n	8000df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d123      	bne.n	8000e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	69b9      	ldr	r1, [r7, #24]
 8000e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0203 	and.w	r2, r3, #3
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80b4 	beq.w	8000ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <HAL_GPIO_Init+0x30c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a5f      	ldr	r2, [pc, #380]	; (8001014 <HAL_GPIO_Init+0x30c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <HAL_GPIO_Init+0x30c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eaa:	4a5b      	ldr	r2, [pc, #364]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a52      	ldr	r2, [pc, #328]	; (800101c <HAL_GPIO_Init+0x314>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d02b      	beq.n	8000f2e <HAL_GPIO_Init+0x226>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a51      	ldr	r2, [pc, #324]	; (8001020 <HAL_GPIO_Init+0x318>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d025      	beq.n	8000f2a <HAL_GPIO_Init+0x222>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a50      	ldr	r2, [pc, #320]	; (8001024 <HAL_GPIO_Init+0x31c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01f      	beq.n	8000f26 <HAL_GPIO_Init+0x21e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	; (8001028 <HAL_GPIO_Init+0x320>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x21a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <HAL_GPIO_Init+0x324>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x216>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <HAL_GPIO_Init+0x328>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x212>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_GPIO_Init+0x32c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x20e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_GPIO_Init+0x330>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x20a>
 8000f0e:	2307      	movs	r3, #7
 8000f10:	e00e      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f12:	2308      	movs	r3, #8
 8000f14:	e00c      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e00a      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e008      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e004      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	4935      	ldr	r1, [pc, #212]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f72:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <HAL_GPIO_Init+0x334>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_GPIO_Init+0x334>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_GPIO_Init+0x334>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_GPIO_Init+0x334>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_GPIO_Init+0x334>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	f67f ae90 	bls.w	8000d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40013800 	.word	0x40013800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40021400 	.word	0x40021400
 8001034:	40021800 	.word	0x40021800
 8001038:	40021c00 	.word	0x40021c00
 800103c:	40013c00 	.word	0x40013c00

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800105c:	e003      	b.n	8001066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001084:	887a      	ldrh	r2, [r7, #2]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	041a      	lsls	r2, r3, #16
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43d9      	mvns	r1, r3
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	400b      	ands	r3, r1
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f806 	bl	80010d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e267      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4b88      	ldr	r3, [pc, #544]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b82      	ldr	r3, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e242      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a75      	ldr	r2, [pc, #468]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6f      	ldr	r2, [pc, #444]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6c      	ldr	r2, [pc, #432]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b69      	ldr	r3, [pc, #420]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a68      	ldr	r2, [pc, #416]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a65      	ldr	r2, [pc, #404]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcc0 	bl	8000b2c <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcbc 	bl	8000b2c <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e207      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcac 	bl	8000b2c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fca8 	bl	8000b2c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1f3      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1c7      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fc61 	bl	8000b2c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc5d 	bl	8000b2c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1a8      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4925      	ldr	r1, [pc, #148]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc40 	bl	8000b2c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc3c 	bl	8000b2c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e187      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d036      	beq.n	8001348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc20 	bl	8000b2c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc1c 	bl	8000b2c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e167      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e01b      	b.n	8001348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fc09 	bl	8000b2c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e00e      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc05 	bl	8000b2c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d907      	bls.n	800133c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e150      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001330:	40023800 	.word	0x40023800
 8001334:	42470000 	.word	0x42470000
 8001338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ea      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8097 	beq.w	8001484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a7c      	ldr	r2, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b7a      	ldr	r3, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b77      	ldr	r3, [pc, #476]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fbc5 	bl	8000b2c <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fbc1 	bl	8000b2c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e10c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x2ea>
 80013cc:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x30c>
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6713      	str	r3, [r2, #112]	; 0x70
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6713      	str	r3, [r2, #112]	; 0x70
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0304 	bic.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d015      	beq.n	8001448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fb86 	bl	8000b2c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb82 	bl	8000b2c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0cb      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0ee      	beq.n	8001424 <HAL_RCC_OscConfig+0x334>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fb70 	bl	8000b2c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fb6c 	bl	8000b2c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0b5      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ee      	bne.n	8001450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a38      	ldr	r2, [pc, #224]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a1 	beq.w	80015d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d05c      	beq.n	8001554 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d141      	bne.n	8001526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb40 	bl	8000b2c <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb3c 	bl	8000b2c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e087      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	3b01      	subs	r3, #1
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	491b      	ldr	r1, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb15 	bl	8000b2c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb11 	bl	8000b2c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e05c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x416>
 8001524:	e054      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fafe 	bl	8000b2c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fafa 	bl	8000b2c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e045      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x444>
 8001552:	e03d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e038      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000
 8001568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x4ec>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d028      	beq.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d121      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d11a      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d111      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0cc      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90c      	bls.n	800161c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800163e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d044      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e067      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4934      	ldr	r1, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fa2c 	bl	8000b2c <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff fa28 	bl	8000b2c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20c      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f8ba 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08005384 	.word	0x08005384
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b094      	sub	sp, #80	; 0x50
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
 80017b8:	2300      	movs	r3, #0
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017bc:	2300      	movs	r3, #0
 80017be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c4:	4b79      	ldr	r3, [pc, #484]	; (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d00d      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	f200 80e1 	bhi.w	8001998 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x34>
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017de:	e0db      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017e4:	e0db      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e6:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ea:	e0d8      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f6:	4b6d      	ldr	r3, [pc, #436]	; (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d063      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
 800180c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
 800181a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800181e:	4622      	mov	r2, r4
 8001820:	462b      	mov	r3, r5
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	0159      	lsls	r1, r3, #5
 800182c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001830:	0150      	lsls	r0, r2, #5
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4621      	mov	r1, r4
 8001838:	1a51      	subs	r1, r2, r1
 800183a:	6139      	str	r1, [r7, #16]
 800183c:	4629      	mov	r1, r5
 800183e:	eb63 0301 	sbc.w	r3, r3, r1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001850:	4659      	mov	r1, fp
 8001852:	018b      	lsls	r3, r1, #6
 8001854:	4651      	mov	r1, sl
 8001856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185a:	4651      	mov	r1, sl
 800185c:	018a      	lsls	r2, r1, #6
 800185e:	4651      	mov	r1, sl
 8001860:	ebb2 0801 	subs.w	r8, r2, r1
 8001864:	4659      	mov	r1, fp
 8001866:	eb63 0901 	sbc.w	r9, r3, r1
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800187a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800187e:	4690      	mov	r8, r2
 8001880:	4699      	mov	r9, r3
 8001882:	4623      	mov	r3, r4
 8001884:	eb18 0303 	adds.w	r3, r8, r3
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	462b      	mov	r3, r5
 800188c:	eb49 0303 	adc.w	r3, r9, r3
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800189e:	4629      	mov	r1, r5
 80018a0:	024b      	lsls	r3, r1, #9
 80018a2:	4621      	mov	r1, r4
 80018a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a8:	4621      	mov	r1, r4
 80018aa:	024a      	lsls	r2, r1, #9
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b2:	2200      	movs	r2, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018bc:	f7fe fc88 	bl	80001d0 <__aeabi_uldivmod>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4613      	mov	r3, r2
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c8:	e058      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b38      	ldr	r3, [pc, #224]	; (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	2200      	movs	r2, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	4611      	mov	r1, r2
 80018d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018da:	623b      	str	r3, [r7, #32]
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
 80018e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018e4:	4642      	mov	r2, r8
 80018e6:	464b      	mov	r3, r9
 80018e8:	f04f 0000 	mov.w	r0, #0
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	0159      	lsls	r1, r3, #5
 80018f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f6:	0150      	lsls	r0, r2, #5
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4641      	mov	r1, r8
 80018fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001902:	4649      	mov	r1, r9
 8001904:	eb63 0b01 	sbc.w	fp, r3, r1
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001914:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001918:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800191c:	ebb2 040a 	subs.w	r4, r2, sl
 8001920:	eb63 050b 	sbc.w	r5, r3, fp
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	00eb      	lsls	r3, r5, #3
 800192e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001932:	00e2      	lsls	r2, r4, #3
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	4643      	mov	r3, r8
 800193a:	18e3      	adds	r3, r4, r3
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	464b      	mov	r3, r9
 8001940:	eb45 0303 	adc.w	r3, r5, r3
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001952:	4629      	mov	r1, r5
 8001954:	028b      	lsls	r3, r1, #10
 8001956:	4621      	mov	r1, r4
 8001958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800195c:	4621      	mov	r1, r4
 800195e:	028a      	lsls	r2, r1, #10
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001966:	2200      	movs	r2, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	61fa      	str	r2, [r7, #28]
 800196c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001970:	f7fe fc2e 	bl	80001d0 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4613      	mov	r3, r2
 800197a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800198c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800198e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001996:	e002      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800199c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3750      	adds	r7, #80	; 0x50
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	00f42400 	.word	0x00f42400
 80019b4:	007a1200 	.word	0x007a1200

080019b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_RCC_GetHCLKFreq+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019d4:	f7ff fff0 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0a9b      	lsrs	r3, r3, #10
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08005394 	.word	0x08005394

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019fc:	f7ff ffdc 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0b5b      	lsrs	r3, r3, #13
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08005394 	.word	0x08005394

08001a20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetClockConfig+0x60>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0207 	and.w	r2, r3, #7
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e041      	b.n	8001b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f839 	bl	8001b22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f000 f9d8 	bl	8001e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d001      	beq.n	8001b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e04e      	b.n	8001bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d022      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d01d      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d010      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	e007      	b.n	8001bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40000800 	.word	0x40000800
 8001c08:	40000c00 	.word	0x40000c00
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	40014000 	.word	0x40014000
 8001c14:	40001800 	.word	0x40001800

08001c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0202 	mvn.w	r2, #2
 8001c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8ee 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8e0 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8f1 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0204 	mvn.w	r2, #4
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8c4 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8b6 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8c7 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0208 	mvn.w	r2, #8
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f89a 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f88c 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f89d 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0210 	mvn.w	r2, #16
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2208      	movs	r2, #8
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f870 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f862 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f873 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d107      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0201 	mvn.w	r2, #1
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fd26 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b80      	cmp	r3, #128	; 0x80
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f902 	bl	8001fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f838 	bl	8001e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0220 	mvn.w	r2, #32
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8cc 	bl	8001fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <TIM_Base_SetConfig+0x114>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e96:	d00f      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <TIM_Base_SetConfig+0x118>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00b      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3c      	ldr	r2, [pc, #240]	; (8001f94 <TIM_Base_SetConfig+0x11c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d007      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <TIM_Base_SetConfig+0x120>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <TIM_Base_SetConfig+0x124>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d108      	bne.n	8001eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <TIM_Base_SetConfig+0x114>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02b      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d027      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <TIM_Base_SetConfig+0x118>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d023      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <TIM_Base_SetConfig+0x11c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01f      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <TIM_Base_SetConfig+0x120>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01b      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <TIM_Base_SetConfig+0x124>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d017      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <TIM_Base_SetConfig+0x128>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <TIM_Base_SetConfig+0x12c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00f      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <TIM_Base_SetConfig+0x130>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a25      	ldr	r2, [pc, #148]	; (8001fac <TIM_Base_SetConfig+0x134>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <TIM_Base_SetConfig+0x138>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <TIM_Base_SetConfig+0x13c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <TIM_Base_SetConfig+0x114>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d003      	beq.n	8001f70 <TIM_Base_SetConfig+0xf8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <TIM_Base_SetConfig+0x124>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d103      	bne.n	8001f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	615a      	str	r2, [r3, #20]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40000c00 	.word	0x40000c00
 8001f9c:	40010400 	.word	0x40010400
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800
 8001fac:	40001800 	.word	0x40001800
 8001fb0:	40001c00 	.word	0x40001c00
 8001fb4:	40002000 	.word	0x40002000

08001fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e03f      	b.n	8002072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fc32 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f829 	bl	800207c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800207c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002080:	b0c0      	sub	sp, #256	; 0x100
 8002082:	af00      	add	r7, sp, #0
 8002084:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	68d9      	ldr	r1, [r3, #12]
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	ea40 0301 	orr.w	r3, r0, r1
 80020a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020d4:	f021 010c 	bic.w	r1, r1, #12
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020e2:	430b      	orrs	r3, r1
 80020e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f6:	6999      	ldr	r1, [r3, #24]
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	ea40 0301 	orr.w	r3, r0, r1
 8002102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <UART_SetConfig+0x2cc>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d005      	beq.n	800211c <UART_SetConfig+0xa0>
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <UART_SetConfig+0x2d0>)
 8002118:	429a      	cmp	r2, r3
 800211a:	d104      	bne.n	8002126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800211c:	f7ff fc6c 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 8002120:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002124:	e003      	b.n	800212e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002126:	f7ff fc53 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 800212a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002138:	f040 810c 	bne.w	8002354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800213c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002140:	2200      	movs	r2, #0
 8002142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002146:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800214a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800214e:	4622      	mov	r2, r4
 8002150:	462b      	mov	r3, r5
 8002152:	1891      	adds	r1, r2, r2
 8002154:	65b9      	str	r1, [r7, #88]	; 0x58
 8002156:	415b      	adcs	r3, r3
 8002158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800215a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800215e:	4621      	mov	r1, r4
 8002160:	eb12 0801 	adds.w	r8, r2, r1
 8002164:	4629      	mov	r1, r5
 8002166:	eb43 0901 	adc.w	r9, r3, r1
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800217a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800217e:	4690      	mov	r8, r2
 8002180:	4699      	mov	r9, r3
 8002182:	4623      	mov	r3, r4
 8002184:	eb18 0303 	adds.w	r3, r8, r3
 8002188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800218c:	462b      	mov	r3, r5
 800218e:	eb49 0303 	adc.w	r3, r9, r3
 8002192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021aa:	460b      	mov	r3, r1
 80021ac:	18db      	adds	r3, r3, r3
 80021ae:	653b      	str	r3, [r7, #80]	; 0x50
 80021b0:	4613      	mov	r3, r2
 80021b2:	eb42 0303 	adc.w	r3, r2, r3
 80021b6:	657b      	str	r3, [r7, #84]	; 0x54
 80021b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021c0:	f7fe f806 	bl	80001d0 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4b61      	ldr	r3, [pc, #388]	; (8002350 <UART_SetConfig+0x2d4>)
 80021ca:	fba3 2302 	umull	r2, r3, r3, r2
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	011c      	lsls	r4, r3, #4
 80021d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021e4:	4642      	mov	r2, r8
 80021e6:	464b      	mov	r3, r9
 80021e8:	1891      	adds	r1, r2, r2
 80021ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80021ec:	415b      	adcs	r3, r3
 80021ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021f4:	4641      	mov	r1, r8
 80021f6:	eb12 0a01 	adds.w	sl, r2, r1
 80021fa:	4649      	mov	r1, r9
 80021fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800220c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002214:	4692      	mov	sl, r2
 8002216:	469b      	mov	fp, r3
 8002218:	4643      	mov	r3, r8
 800221a:	eb1a 0303 	adds.w	r3, sl, r3
 800221e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002222:	464b      	mov	r3, r9
 8002224:	eb4b 0303 	adc.w	r3, fp, r3
 8002228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002238:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800223c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002240:	460b      	mov	r3, r1
 8002242:	18db      	adds	r3, r3, r3
 8002244:	643b      	str	r3, [r7, #64]	; 0x40
 8002246:	4613      	mov	r3, r2
 8002248:	eb42 0303 	adc.w	r3, r2, r3
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
 800224e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002256:	f7fd ffbb 	bl	80001d0 <__aeabi_uldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4611      	mov	r1, r2
 8002260:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <UART_SetConfig+0x2d4>)
 8002262:	fba3 2301 	umull	r2, r3, r3, r1
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2264      	movs	r2, #100	; 0x64
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	1acb      	subs	r3, r1, r3
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <UART_SetConfig+0x2d4>)
 8002278:	fba3 2302 	umull	r2, r3, r3, r2
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002284:	441c      	add	r4, r3
 8002286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800228a:	2200      	movs	r2, #0
 800228c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002290:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002298:	4642      	mov	r2, r8
 800229a:	464b      	mov	r3, r9
 800229c:	1891      	adds	r1, r2, r2
 800229e:	63b9      	str	r1, [r7, #56]	; 0x38
 80022a0:	415b      	adcs	r3, r3
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022a8:	4641      	mov	r1, r8
 80022aa:	1851      	adds	r1, r2, r1
 80022ac:	6339      	str	r1, [r7, #48]	; 0x30
 80022ae:	4649      	mov	r1, r9
 80022b0:	414b      	adcs	r3, r1
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022c0:	4659      	mov	r1, fp
 80022c2:	00cb      	lsls	r3, r1, #3
 80022c4:	4651      	mov	r1, sl
 80022c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ca:	4651      	mov	r1, sl
 80022cc:	00ca      	lsls	r2, r1, #3
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	4603      	mov	r3, r0
 80022d4:	4642      	mov	r2, r8
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022dc:	464b      	mov	r3, r9
 80022de:	460a      	mov	r2, r1
 80022e0:	eb42 0303 	adc.w	r3, r2, r3
 80022e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022fc:	460b      	mov	r3, r1
 80022fe:	18db      	adds	r3, r3, r3
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
 8002302:	4613      	mov	r3, r2
 8002304:	eb42 0303 	adc.w	r3, r2, r3
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800230e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002312:	f7fd ff5d 	bl	80001d0 <__aeabi_uldivmod>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <UART_SetConfig+0x2d4>)
 800231c:	fba3 1302 	umull	r1, r3, r3, r2
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	2164      	movs	r1, #100	; 0x64
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	3332      	adds	r3, #50	; 0x32
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <UART_SetConfig+0x2d4>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	f003 0207 	and.w	r2, r3, #7
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4422      	add	r2, r4
 8002342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002344:	e105      	b.n	8002552 <UART_SetConfig+0x4d6>
 8002346:	bf00      	nop
 8002348:	40011000 	.word	0x40011000
 800234c:	40011400 	.word	0x40011400
 8002350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002358:	2200      	movs	r2, #0
 800235a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800235e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002366:	4642      	mov	r2, r8
 8002368:	464b      	mov	r3, r9
 800236a:	1891      	adds	r1, r2, r2
 800236c:	6239      	str	r1, [r7, #32]
 800236e:	415b      	adcs	r3, r3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002376:	4641      	mov	r1, r8
 8002378:	1854      	adds	r4, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb43 0501 	adc.w	r5, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	00eb      	lsls	r3, r5, #3
 800238a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800238e:	00e2      	lsls	r2, r4, #3
 8002390:	4614      	mov	r4, r2
 8002392:	461d      	mov	r5, r3
 8002394:	4643      	mov	r3, r8
 8002396:	18e3      	adds	r3, r4, r3
 8002398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800239c:	464b      	mov	r3, r9
 800239e:	eb45 0303 	adc.w	r3, r5, r3
 80023a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023c2:	4629      	mov	r1, r5
 80023c4:	008b      	lsls	r3, r1, #2
 80023c6:	4621      	mov	r1, r4
 80023c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023cc:	4621      	mov	r1, r4
 80023ce:	008a      	lsls	r2, r1, #2
 80023d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023d4:	f7fd fefc 	bl	80001d0 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4b60      	ldr	r3, [pc, #384]	; (8002560 <UART_SetConfig+0x4e4>)
 80023de:	fba3 2302 	umull	r2, r3, r3, r2
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	011c      	lsls	r4, r3, #4
 80023e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	1891      	adds	r1, r2, r2
 80023fe:	61b9      	str	r1, [r7, #24]
 8002400:	415b      	adcs	r3, r3
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002408:	4641      	mov	r1, r8
 800240a:	1851      	adds	r1, r2, r1
 800240c:	6139      	str	r1, [r7, #16]
 800240e:	4649      	mov	r1, r9
 8002410:	414b      	adcs	r3, r1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002420:	4659      	mov	r1, fp
 8002422:	00cb      	lsls	r3, r1, #3
 8002424:	4651      	mov	r1, sl
 8002426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800242a:	4651      	mov	r1, sl
 800242c:	00ca      	lsls	r2, r1, #3
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	4603      	mov	r3, r0
 8002434:	4642      	mov	r2, r8
 8002436:	189b      	adds	r3, r3, r2
 8002438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800243c:	464b      	mov	r3, r9
 800243e:	460a      	mov	r2, r1
 8002440:	eb42 0303 	adc.w	r3, r2, r3
 8002444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	67bb      	str	r3, [r7, #120]	; 0x78
 8002452:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002460:	4649      	mov	r1, r9
 8002462:	008b      	lsls	r3, r1, #2
 8002464:	4641      	mov	r1, r8
 8002466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800246a:	4641      	mov	r1, r8
 800246c:	008a      	lsls	r2, r1, #2
 800246e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002472:	f7fd fead 	bl	80001d0 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4b39      	ldr	r3, [pc, #228]	; (8002560 <UART_SetConfig+0x4e4>)
 800247c:	fba3 1302 	umull	r1, r3, r3, r2
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	3332      	adds	r3, #50	; 0x32
 800248e:	4a34      	ldr	r2, [pc, #208]	; (8002560 <UART_SetConfig+0x4e4>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249a:	441c      	add	r4, r3
 800249c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a0:	2200      	movs	r2, #0
 80024a2:	673b      	str	r3, [r7, #112]	; 0x70
 80024a4:	677a      	str	r2, [r7, #116]	; 0x74
 80024a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024aa:	4642      	mov	r2, r8
 80024ac:	464b      	mov	r3, r9
 80024ae:	1891      	adds	r1, r2, r2
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	415b      	adcs	r3, r3
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ba:	4641      	mov	r1, r8
 80024bc:	1851      	adds	r1, r2, r1
 80024be:	6039      	str	r1, [r7, #0]
 80024c0:	4649      	mov	r1, r9
 80024c2:	414b      	adcs	r3, r1
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024d2:	4659      	mov	r1, fp
 80024d4:	00cb      	lsls	r3, r1, #3
 80024d6:	4651      	mov	r1, sl
 80024d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024dc:	4651      	mov	r1, sl
 80024de:	00ca      	lsls	r2, r1, #3
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	4642      	mov	r2, r8
 80024e8:	189b      	adds	r3, r3, r2
 80024ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ec:	464b      	mov	r3, r9
 80024ee:	460a      	mov	r2, r1
 80024f0:	eb42 0303 	adc.w	r3, r2, r3
 80024f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002500:	667a      	str	r2, [r7, #100]	; 0x64
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800250e:	4649      	mov	r1, r9
 8002510:	008b      	lsls	r3, r1, #2
 8002512:	4641      	mov	r1, r8
 8002514:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002518:	4641      	mov	r1, r8
 800251a:	008a      	lsls	r2, r1, #2
 800251c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002520:	f7fd fe56 	bl	80001d0 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <UART_SetConfig+0x4e4>)
 800252a:	fba3 1302 	umull	r1, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2164      	movs	r1, #100	; 0x64
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	3332      	adds	r3, #50	; 0x32
 800253c:	4a08      	ldr	r2, [pc, #32]	; (8002560 <UART_SetConfig+0x4e4>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4422      	add	r2, r4
 8002550:	609a      	str	r2, [r3, #8]
}
 8002552:	bf00      	nop
 8002554:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002558:	46bd      	mov	sp, r7
 800255a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255e:	bf00      	nop
 8002560:	51eb851f 	.word	0x51eb851f

08002564 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002576:	2b84      	cmp	r3, #132	; 0x84
 8002578:	d005      	beq.n	8002586 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800257a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	3303      	adds	r3, #3
 8002584:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800259a:	f3ef 8305 	mrs	r3, IPSR
 800259e:	607b      	str	r3, [r7, #4]
  return(result);
 80025a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80025bc:	f001 f856 	bl	800366c <vTaskStartScheduler>
  
  return osOK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c8:	b089      	sub	sp, #36	; 0x24
 80025ca:	af04      	add	r7, sp, #16
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <osThreadCreate+0x54>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685c      	ldr	r4, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681d      	ldr	r5, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691e      	ldr	r6, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ffb6 	bl	8002564 <makeFreeRtosPriority>
 80025f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002602:	9202      	str	r2, [sp, #8]
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	9100      	str	r1, [sp, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4632      	mov	r2, r6
 800260c:	4629      	mov	r1, r5
 800260e:	4620      	mov	r0, r4
 8002610:	f000 fe4e 	bl	80032b0 <xTaskCreateStatic>
 8002614:	4603      	mov	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e01c      	b.n	8002654 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685c      	ldr	r4, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002626:	b29e      	uxth	r6, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff98 	bl	8002564 <makeFreeRtosPriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	9200      	str	r2, [sp, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	4632      	mov	r2, r6
 8002642:	4629      	mov	r1, r5
 8002644:	4620      	mov	r0, r4
 8002646:	f000 fe90 	bl	800336a <xTaskCreate>
 800264a:	4603      	mov	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002654:	68fb      	ldr	r3, [r7, #12]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800265e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <osDelay+0x16>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	e000      	b.n	8002676 <osDelay+0x18>
 8002674:	2301      	movs	r3, #1
 8002676:	4618      	mov	r0, r3
 8002678:	f000 ffc4 	bl	8003604 <vTaskDelay>
  
  return osOK;
 800267c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	460b      	mov	r3, r1
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d013      	beq.n	80026c6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <osTimerCreate+0x20>
 80026a4:	2101      	movs	r1, #1
 80026a6:	e000      	b.n	80026aa <osTimerCreate+0x22>
 80026a8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	460a      	mov	r2, r1
 80026ba:	2101      	movs	r1, #1
 80026bc:	480b      	ldr	r0, [pc, #44]	; (80026ec <osTimerCreate+0x64>)
 80026be:	f001 fd9c 	bl	80041fa <xTimerCreateStatic>
 80026c2:	4603      	mov	r3, r0
 80026c4:	e00e      	b.n	80026e4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <osTimerCreate+0x48>
 80026cc:	2201      	movs	r2, #1
 80026ce:	e000      	b.n	80026d2 <osTimerCreate+0x4a>
 80026d0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2101      	movs	r1, #1
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <osTimerCreate+0x64>)
 80026de:	f001 fd6b 	bl	80041b8 <xTimerCreate>
 80026e2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	08005368 	.word	0x08005368

080026f0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <osTimerStart+0x20>
    ticks = 1;
 800270c:	2301      	movs	r3, #1
 800270e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002710:	f7ff ff40 	bl	8002594 <inHandlerMode>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01a      	beq.n	8002750 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2200      	movs	r2, #0
 8002720:	9200      	str	r2, [sp, #0]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	2109      	movs	r1, #9
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f001 fde0 	bl	80042ec <xTimerGenericCommand>
 800272c:	4603      	mov	r3, r0
 800272e:	2b01      	cmp	r3, #1
 8002730:	d002      	beq.n	8002738 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002732:	23ff      	movs	r3, #255	; 0xff
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e018      	b.n	800276a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <osTimerStart+0x7a>
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <osTimerStart+0x84>)
 8002740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	e00c      	b.n	800276a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002750:	2300      	movs	r3, #0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2300      	movs	r3, #0
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	2104      	movs	r1, #4
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f001 fdc6 	bl	80042ec <xTimerGenericCommand>
 8002760:	4603      	mov	r3, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <osTimerStart+0x7a>
      result = osErrorOS;
 8002766:	23ff      	movs	r3, #255	; 0xff
 8002768:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800276a:	697b      	ldr	r3, [r7, #20]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	e000ed04 	.word	0xe000ed04

08002778 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0208 	add.w	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f103 0208 	add.w	r2, r3, #8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f103 0208 	add.w	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d103      	bne.n	800283a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e00c      	b.n	8002854 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3308      	adds	r3, #8
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e002      	b.n	8002848 <vListInsert+0x2e>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d2f6      	bcs.n	8002842 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6852      	ldr	r2, [r2, #4]
 80028ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d103      	bne.n	80028c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	1e5a      	subs	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800290a:	f002 f903 	bl	8004b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	441a      	add	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	3b01      	subs	r3, #1
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	441a      	add	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d114      	bne.n	800298a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01a      	beq.n	800299e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3310      	adds	r3, #16
 800296c:	4618      	mov	r0, r3
 800296e:	f001 f911 	bl	8003b94 <xTaskRemoveFromEventList>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <xQueueGenericReset+0xcc>)
 800297a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	e009      	b.n	800299e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3310      	adds	r3, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fef2 	bl	8002778 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3324      	adds	r3, #36	; 0x24
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff feed 	bl	8002778 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800299e:	f002 f8e9 	bl	8004b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	; 0x38
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <xQueueGenericCreateStatic+0x52>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <xQueueGenericCreateStatic+0x56>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueGenericCreateStatic+0x58>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	623b      	str	r3, [r7, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <xQueueGenericCreateStatic+0x7e>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <xQueueGenericCreateStatic+0x82>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <xQueueGenericCreateStatic+0x84>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	61fb      	str	r3, [r7, #28]
}
 8002a4a:	bf00      	nop
 8002a4c:	e7fe      	b.n	8002a4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a4e:	2348      	movs	r3, #72	; 0x48
 8002a50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b48      	cmp	r3, #72	; 0x48
 8002a56:	d00a      	beq.n	8002a6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	61bb      	str	r3, [r7, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f805 	bl	8002aa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e002      	b.n	8002ac2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ace:	2101      	movs	r1, #1
 8002ad0:	69b8      	ldr	r0, [r7, #24]
 8002ad2:	f7ff ff05 	bl	80028e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	; 0x38
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aee:	2300      	movs	r3, #0
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xQueueGenericSend+0x32>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <xQueueGenericSend+0x40>
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <xQueueGenericSend+0x44>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <xQueueGenericSend+0x46>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <xQueueGenericSend+0x60>
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d103      	bne.n	8002b4e <xQueueGenericSend+0x6e>
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <xQueueGenericSend+0x72>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <xQueueGenericSend+0x74>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xQueueGenericSend+0x8e>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	623b      	str	r3, [r7, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b6e:	f001 f9d1 	bl	8003f14 <xTaskGetSchedulerState>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <xQueueGenericSend+0x9e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <xQueueGenericSend+0xa2>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueGenericSend+0xa4>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericSend+0xbe>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	61fb      	str	r3, [r7, #28]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b9e:	f001 ffb9 	bl	8004b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <xQueueGenericSend+0xd4>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d129      	bne.n	8002c08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bba:	f000 fa0b 	bl	8002fd4 <prvCopyDataToQueue>
 8002bbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	3324      	adds	r3, #36	; 0x24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 ffe1 	bl	8003b94 <xTaskRemoveFromEventList>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <xQueueGenericSend+0x1f8>)
 8002bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	e00a      	b.n	8002c00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <xQueueGenericSend+0x1f8>)
 8002bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c00:	f001 ffb8 	bl	8004b74 <vPortExitCritical>
				return pdPASS;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e063      	b.n	8002cd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c0e:	f001 ffb1 	bl	8004b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e05c      	b.n	8002cd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f819 	bl	8003c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c2a:	f001 ffa3 	bl	8004b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c2e:	f000 fd8d 	bl	800374c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c32:	f001 ff6f 	bl	8004b14 <vPortEnterCritical>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c42:	d103      	bne.n	8002c4c <xQueueGenericSend+0x16c>
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d103      	bne.n	8002c62 <xQueueGenericSend+0x182>
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c62:	f001 ff87 	bl	8004b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c66:	1d3a      	adds	r2, r7, #4
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f808 	bl	8003c84 <xTaskCheckForTimeOut>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d124      	bne.n	8002cc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7c:	f000 faa2 	bl	80031c4 <prvIsQueueFull>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	3310      	adds	r3, #16
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 ff30 	bl	8003af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c96:	f000 fa2d 	bl	80030f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c9a:	f000 fd65 	bl	8003768 <xTaskResumeAll>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f af7c 	bne.w	8002b9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <xQueueGenericSend+0x1f8>)
 8002ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	e772      	b.n	8002b9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cba:	f000 fa1b 	bl	80030f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cbe:	f000 fd53 	bl	8003768 <xTaskResumeAll>
 8002cc2:	e76c      	b.n	8002b9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc6:	f000 fa15 	bl	80030f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cca:	f000 fd4d 	bl	8003768 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3738      	adds	r7, #56	; 0x38
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b090      	sub	sp, #64	; 0x40
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d06:	bf00      	nop
 8002d08:	e7fe      	b.n	8002d08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <xQueueGenericSendFromISR+0x3c>
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <xQueueGenericSendFromISR+0x40>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <xQueueGenericSendFromISR+0x42>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d34:	bf00      	nop
 8002d36:	e7fe      	b.n	8002d36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d103      	bne.n	8002d46 <xQueueGenericSendFromISR+0x6a>
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <xQueueGenericSendFromISR+0x6e>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <xQueueGenericSendFromISR+0x70>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	623b      	str	r3, [r7, #32]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d66:	f001 ffb7 	bl	8004cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	61fa      	str	r2, [r7, #28]
 8002d80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <xQueueGenericSendFromISR+0xbc>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d12f      	bne.n	8002df8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dae:	f000 f911 	bl	8002fd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002db2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d112      	bne.n	8002de2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d016      	beq.n	8002df2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	3324      	adds	r3, #36	; 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fee3 	bl	8003b94 <xTaskRemoveFromEventList>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e007      	b.n	8002df2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002de6:	3301      	adds	r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002df2:	2301      	movs	r3, #1
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002df6:	e001      	b.n	8002dfc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3740      	adds	r7, #64	; 0x40
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08c      	sub	sp, #48	; 0x30
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <xQueueReceive+0x30>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	623b      	str	r3, [r7, #32]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueReceive+0x3e>
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueReceive+0x42>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueReceive+0x44>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueReceive+0x5e>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	61fb      	str	r3, [r7, #28]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e72:	f001 f84f 	bl	8003f14 <xTaskGetSchedulerState>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <xQueueReceive+0x6e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <xQueueReceive+0x72>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <xQueueReceive+0x74>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueReceive+0x8e>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	61bb      	str	r3, [r7, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ea2:	f001 fe37 	bl	8004b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01f      	beq.n	8002ef2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb6:	f000 f8f7 	bl	80030a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00f      	beq.n	8002eea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	3310      	adds	r3, #16
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fe60 	bl	8003b94 <xTaskRemoveFromEventList>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <xQueueReceive+0x1bc>)
 8002edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eea:	f001 fe43 	bl	8004b74 <vPortExitCritical>
				return pdPASS;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e069      	b.n	8002fc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ef8:	f001 fe3c 	bl	8004b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e062      	b.n	8002fc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fea4 	bl	8003c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f14:	f001 fe2e 	bl	8004b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f18:	f000 fc18 	bl	800374c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f1c:	f001 fdfa 	bl	8004b14 <vPortEnterCritical>
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d103      	bne.n	8002f36 <xQueueReceive+0x122>
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d103      	bne.n	8002f4c <xQueueReceive+0x138>
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4c:	f001 fe12 	bl	8004b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f50:	1d3a      	adds	r2, r7, #4
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fe93 	bl	8003c84 <xTaskCheckForTimeOut>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d123      	bne.n	8002fac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f66:	f000 f917 	bl	8003198 <prvIsQueueEmpty>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	3324      	adds	r3, #36	; 0x24
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fdbb 	bl	8003af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f80:	f000 f8b8 	bl	80030f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f84:	f000 fbf0 	bl	8003768 <xTaskResumeAll>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d189      	bne.n	8002ea2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <xQueueReceive+0x1bc>)
 8002f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	e780      	b.n	8002ea2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa2:	f000 f8a7 	bl	80030f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa6:	f000 fbdf 	bl	8003768 <xTaskResumeAll>
 8002faa:	e77a      	b.n	8002ea2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fae:	f000 f8a1 	bl	80030f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb2:	f000 fbd9 	bl	8003768 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb8:	f000 f8ee 	bl	8003198 <prvIsQueueEmpty>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f43f af6f 	beq.w	8002ea2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3730      	adds	r7, #48	; 0x30
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000ed04 	.word	0xe000ed04

08002fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d14d      	bne.n	8003096 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 ffa6 	bl	8003f50 <xTaskPriorityDisinherit>
 8003004:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	e043      	b.n	8003096 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6858      	ldr	r0, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	461a      	mov	r2, r3
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	f002 f8aa 	bl	8005178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	441a      	add	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d32b      	bcc.n	8003096 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	e026      	b.n	8003096 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68d8      	ldr	r0, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	461a      	mov	r2, r3
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	f002 f890 	bl	8005178 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	425b      	negs	r3, r3
 8003062:	441a      	add	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	425b      	negs	r3, r3
 800307e:	441a      	add	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d105      	bne.n	8003096 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3b01      	subs	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	441a      	add	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d303      	bcc.n	80030dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	461a      	mov	r2, r3
 80030e6:	6838      	ldr	r0, [r7, #0]
 80030e8:	f002 f846 	bl	8005178 <memcpy>
	}
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030fc:	f001 fd0a 	bl	8004b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003106:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003108:	e011      	b.n	800312e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3324      	adds	r3, #36	; 0x24
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fd3c 	bl	8003b94 <xTaskRemoveFromEventList>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003122:	f000 fe11 	bl	8003d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	3b01      	subs	r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	dce9      	bgt.n	800310a <prvUnlockQueue+0x16>
 8003136:	e000      	b.n	800313a <prvUnlockQueue+0x46>
					break;
 8003138:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	22ff      	movs	r2, #255	; 0xff
 800313e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003142:	f001 fd17 	bl	8004b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003146:	f001 fce5 	bl	8004b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003150:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003152:	e011      	b.n	8003178 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3310      	adds	r3, #16
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fd17 	bl	8003b94 <xTaskRemoveFromEventList>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800316c:	f000 fdec 	bl	8003d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	3b01      	subs	r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800317c:	2b00      	cmp	r3, #0
 800317e:	dce9      	bgt.n	8003154 <prvUnlockQueue+0x60>
 8003180:	e000      	b.n	8003184 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003182:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	22ff      	movs	r2, #255	; 0xff
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800318c:	f001 fcf2 	bl	8004b74 <vPortExitCritical>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031a0:	f001 fcb8 	bl	8004b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e001      	b.n	80031b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031b6:	f001 fcdd 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031cc:	f001 fca2 	bl	8004b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d102      	bne.n	80031e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e001      	b.n	80031e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031e6:	f001 fcc5 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e014      	b.n	800322e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <vQueueAddToRegistry+0x50>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003210:	490c      	ldr	r1, [pc, #48]	; (8003244 <vQueueAddToRegistry+0x50>)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <vQueueAddToRegistry+0x50>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003226:	e006      	b.n	8003236 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b07      	cmp	r3, #7
 8003232:	d9e7      	bls.n	8003204 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000890 	.word	0x20000890

08003248 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003258:	f001 fc5c 	bl	8004b14 <vPortEnterCritical>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003262:	b25b      	sxtb	r3, r3
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d103      	bne.n	8003272 <vQueueWaitForMessageRestricted+0x2a>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003278:	b25b      	sxtb	r3, r3
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d103      	bne.n	8003288 <vQueueWaitForMessageRestricted+0x40>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003288:	f001 fc74 	bl	8004b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3324      	adds	r3, #36	; 0x24
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fc4d 	bl	8003b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff ff26 	bl	80030f4 <prvUnlockQueue>
	}
 80032a8:	bf00      	nop
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xTaskCreateStatic+0x2a>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	623b      	str	r3, [r7, #32]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	61fb      	str	r3, [r7, #28]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032f6:	23b4      	movs	r3, #180	; 0xb4
 80032f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2bb4      	cmp	r3, #180	; 0xb4
 80032fe:	d00a      	beq.n	8003316 <xTaskCreateStatic+0x66>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61bb      	str	r3, [r7, #24]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003316:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01e      	beq.n	800335c <xTaskCreateStatic+0xac>
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01b      	beq.n	800335c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800332c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	2202      	movs	r2, #2
 8003332:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003336:	2300      	movs	r3, #0
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f850 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003356:	f000 f8eb 	bl	8003530 <prvAddNewTaskToReadyList>
 800335a:	e001      	b.n	8003360 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003360:	697b      	ldr	r3, [r7, #20]
	}
 8003362:	4618      	mov	r0, r3
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08c      	sub	sp, #48	; 0x30
 800336e:	af04      	add	r7, sp, #16
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fcea 	bl	8004d58 <pvPortMalloc>
 8003384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800338c:	20b4      	movs	r0, #180	; 0xb4
 800338e:	f001 fce3 	bl	8004d58 <pvPortMalloc>
 8003392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
 80033a0:	e005      	b.n	80033ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f001 fda4 	bl	8004ef0 <vPortFree>
 80033a8:	e001      	b.n	80033ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d017      	beq.n	80033e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	2300      	movs	r3, #0
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f80e 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033d8:	69f8      	ldr	r0, [r7, #28]
 80033da:	f000 f8a9 	bl	8003530 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e002      	b.n	80033ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033ea:	69bb      	ldr	r3, [r7, #24]
	}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800340c:	3b01      	subs	r3, #1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f023 0307 	bic.w	r3, r3, #7
 800341a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	617b      	str	r3, [r7, #20]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01f      	beq.n	8003482 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e012      	b.n	800346e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	7819      	ldrb	r1, [r3, #0]
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	3334      	adds	r3, #52	; 0x34
 8003458:	460a      	mov	r2, r1
 800345a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	3301      	adds	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d9e9      	bls.n	8003448 <prvInitialiseNewTask+0x54>
 8003474:	e000      	b.n	8003478 <prvInitialiseNewTask+0x84>
			{
				break;
 8003476:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003480:	e003      	b.n	800348a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	2b06      	cmp	r3, #6
 800348e:	d901      	bls.n	8003494 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003490:	2306      	movs	r3, #6
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	2200      	movs	r2, #0
 80034a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff f984 	bl	80027b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	3318      	adds	r3, #24
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f97f 	bl	80027b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	f1c3 0207 	rsb	r2, r3, #7
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	334c      	adds	r3, #76	; 0x4c
 80034e4:	2260      	movs	r2, #96	; 0x60
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fe53 	bl	8005194 <memset>
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <prvInitialiseNewTask+0x130>)
 80034f2:	651a      	str	r2, [r3, #80]	; 0x50
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <prvInitialiseNewTask+0x134>)
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	4a0b      	ldr	r2, [pc, #44]	; (800352c <prvInitialiseNewTask+0x138>)
 80034fe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	69b8      	ldr	r0, [r7, #24]
 8003506:	f001 f9db 	bl	80048c0 <pxPortInitialiseStack>
 800350a:	4602      	mov	r2, r0
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800351c:	bf00      	nop
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	080053bc 	.word	0x080053bc
 8003528:	080053dc 	.word	0x080053dc
 800352c:	0800539c 	.word	0x0800539c

08003530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003538:	f001 faec 	bl	8004b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800353c:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <prvAddNewTaskToReadyList+0xb8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <prvAddNewTaskToReadyList+0xb8>)
 8003544:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <prvAddNewTaskToReadyList+0xbc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800354e:	4a27      	ldr	r2, [pc, #156]	; (80035ec <prvAddNewTaskToReadyList+0xbc>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <prvAddNewTaskToReadyList+0xb8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d110      	bne.n	800357e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800355c:	f000 fc18 	bl	8003d90 <prvInitialiseTaskLists>
 8003560:	e00d      	b.n	800357e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <prvAddNewTaskToReadyList+0xc0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <prvAddNewTaskToReadyList+0xbc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	429a      	cmp	r2, r3
 8003576:	d802      	bhi.n	800357e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <prvAddNewTaskToReadyList+0xbc>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <prvAddNewTaskToReadyList+0xc4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <prvAddNewTaskToReadyList+0xc4>)
 8003586:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2201      	movs	r2, #1
 800358e:	409a      	lsls	r2, r3
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <prvAddNewTaskToReadyList+0xc8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <prvAddNewTaskToReadyList+0xc8>)
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <prvAddNewTaskToReadyList+0xcc>)
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7ff f90e 	bl	80027d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035b6:	f001 fadd 	bl	8004b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <prvAddNewTaskToReadyList+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <prvAddNewTaskToReadyList+0xbc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d207      	bcs.n	80035e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <prvAddNewTaskToReadyList+0xd0>)
 80035d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200009d0 	.word	0x200009d0
 80035ec:	200008d0 	.word	0x200008d0
 80035f0:	200009dc 	.word	0x200009dc
 80035f4:	200009ec 	.word	0x200009ec
 80035f8:	200009d8 	.word	0x200009d8
 80035fc:	200008d4 	.word	0x200008d4
 8003600:	e000ed04 	.word	0xe000ed04

08003604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d017      	beq.n	8003646 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <vTaskDelay+0x60>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <vTaskDelay+0x30>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	60bb      	str	r3, [r7, #8]
}
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003634:	f000 f88a 	bl	800374c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003638:	2100      	movs	r1, #0
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fd0e 	bl	800405c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003640:	f000 f892 	bl	8003768 <xTaskResumeAll>
 8003644:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <vTaskDelay+0x64>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200009f8 	.word	0x200009f8
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800367a:	463a      	mov	r2, r7
 800367c:	1d39      	adds	r1, r7, #4
 800367e:	f107 0308 	add.w	r3, r7, #8
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ff26 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	9202      	str	r2, [sp, #8]
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	2300      	movs	r3, #0
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	460a      	mov	r2, r1
 800369a:	4924      	ldr	r1, [pc, #144]	; (800372c <vTaskStartScheduler+0xc0>)
 800369c:	4824      	ldr	r0, [pc, #144]	; (8003730 <vTaskStartScheduler+0xc4>)
 800369e:	f7ff fe07 	bl	80032b0 <xTaskCreateStatic>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4a23      	ldr	r2, [pc, #140]	; (8003734 <vTaskStartScheduler+0xc8>)
 80036a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <vTaskStartScheduler+0xc8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036b0:	2301      	movs	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e001      	b.n	80036ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036c0:	f000 fd32 	bl	8004128 <xTimerCreateTimerTask>
 80036c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d11b      	bne.n	8003704 <vTaskStartScheduler+0x98>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	613b      	str	r3, [r7, #16]
}
 80036de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036e0:	4b15      	ldr	r3, [pc, #84]	; (8003738 <vTaskStartScheduler+0xcc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	334c      	adds	r3, #76	; 0x4c
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <vTaskStartScheduler+0xd0>)
 80036e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <vTaskStartScheduler+0xd4>)
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <vTaskStartScheduler+0xd8>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <vTaskStartScheduler+0xdc>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036fe:	f001 f967 	bl	80049d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003702:	e00e      	b.n	8003722 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d10a      	bne.n	8003722 <vTaskStartScheduler+0xb6>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	60fb      	str	r3, [r7, #12]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <vTaskStartScheduler+0xb4>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	0800536c 	.word	0x0800536c
 8003730:	08003d61 	.word	0x08003d61
 8003734:	200009f4 	.word	0x200009f4
 8003738:	200008d0 	.word	0x200008d0
 800373c:	20000010 	.word	0x20000010
 8003740:	200009f0 	.word	0x200009f0
 8003744:	200009dc 	.word	0x200009dc
 8003748:	200009d4 	.word	0x200009d4

0800374c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <vTaskSuspendAll+0x18>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	4a03      	ldr	r2, [pc, #12]	; (8003764 <vTaskSuspendAll+0x18>)
 8003758:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	200009f8 	.word	0x200009f8

08003768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003776:	4b41      	ldr	r3, [pc, #260]	; (800387c <xTaskResumeAll+0x114>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <xTaskResumeAll+0x2c>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	603b      	str	r3, [r7, #0]
}
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003794:	f001 f9be 	bl	8004b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003798:	4b38      	ldr	r3, [pc, #224]	; (800387c <xTaskResumeAll+0x114>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3b01      	subs	r3, #1
 800379e:	4a37      	ldr	r2, [pc, #220]	; (800387c <xTaskResumeAll+0x114>)
 80037a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a2:	4b36      	ldr	r3, [pc, #216]	; (800387c <xTaskResumeAll+0x114>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d161      	bne.n	800386e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037aa:	4b35      	ldr	r3, [pc, #212]	; (8003880 <xTaskResumeAll+0x118>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d05d      	beq.n	800386e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037b2:	e02e      	b.n	8003812 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b4:	4b33      	ldr	r3, [pc, #204]	; (8003884 <xTaskResumeAll+0x11c>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3318      	adds	r3, #24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f863 	bl	800288c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff f85e 	bl	800288c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	2201      	movs	r2, #1
 80037d6:	409a      	lsls	r2, r3
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <xTaskResumeAll+0x120>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4313      	orrs	r3, r2
 80037de:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <xTaskResumeAll+0x120>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4a27      	ldr	r2, [pc, #156]	; (800388c <xTaskResumeAll+0x124>)
 80037f0:	441a      	add	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7fe ffea 	bl	80027d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <xTaskResumeAll+0x128>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <xTaskResumeAll+0x12c>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <xTaskResumeAll+0x11c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1cc      	bne.n	80037b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003820:	f000 fb58 	bl	8003ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003824:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <xTaskResumeAll+0x130>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003830:	f000 f846 	bl	80038c0 <xTaskIncrementTick>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <xTaskResumeAll+0x12c>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f1      	bne.n	8003830 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <xTaskResumeAll+0x130>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <xTaskResumeAll+0x12c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800385a:	2301      	movs	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <xTaskResumeAll+0x134>)
 8003860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800386e:	f001 f981 	bl	8004b74 <vPortExitCritical>

	return xAlreadyYielded;
 8003872:	68bb      	ldr	r3, [r7, #8]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	200009f8 	.word	0x200009f8
 8003880:	200009d0 	.word	0x200009d0
 8003884:	20000990 	.word	0x20000990
 8003888:	200009d8 	.word	0x200009d8
 800388c:	200008d4 	.word	0x200008d4
 8003890:	200008d0 	.word	0x200008d0
 8003894:	200009e4 	.word	0x200009e4
 8003898:	200009e0 	.word	0x200009e0
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <xTaskGetTickCount+0x1c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038ac:	687b      	ldr	r3, [r7, #4]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	200009d4 	.word	0x200009d4

080038c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ca:	4b4e      	ldr	r3, [pc, #312]	; (8003a04 <xTaskIncrementTick+0x144>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 808e 	bne.w	80039f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038d4:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <xTaskIncrementTick+0x148>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038dc:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <xTaskIncrementTick+0x148>)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d120      	bne.n	800392a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038e8:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <xTaskIncrementTick+0x14c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <xTaskIncrementTick+0x48>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	603b      	str	r3, [r7, #0]
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xTaskIncrementTick+0x46>
 8003908:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <xTaskIncrementTick+0x14c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <xTaskIncrementTick+0x150>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <xTaskIncrementTick+0x14c>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4a3e      	ldr	r2, [pc, #248]	; (8003a10 <xTaskIncrementTick+0x150>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <xTaskIncrementTick+0x154>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <xTaskIncrementTick+0x154>)
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	f000 fad5 	bl	8003ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <xTaskIncrementTick+0x158>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	429a      	cmp	r2, r3
 8003932:	d348      	bcc.n	80039c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <xTaskIncrementTick+0x14c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <xTaskIncrementTick+0x158>)
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	601a      	str	r2, [r3, #0]
					break;
 8003946:	e03e      	b.n	80039c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003948:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <xTaskIncrementTick+0x14c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d203      	bcs.n	8003968 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003960:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <xTaskIncrementTick+0x158>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003966:	e02e      	b.n	80039c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe ff8d 	bl	800288c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3318      	adds	r3, #24
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe ff84 	bl	800288c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <xTaskIncrementTick+0x15c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <xTaskIncrementTick+0x15c>)
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <xTaskIncrementTick+0x160>)
 80039a4:	441a      	add	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f7fe ff10 	bl	80027d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <xTaskIncrementTick+0x164>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	429a      	cmp	r2, r3
 80039be:	d3b9      	bcc.n	8003934 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c4:	e7b6      	b.n	8003934 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <xTaskIncrementTick+0x164>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4914      	ldr	r1, [pc, #80]	; (8003a20 <xTaskIncrementTick+0x160>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d901      	bls.n	80039e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <xTaskIncrementTick+0x168>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039ea:	2301      	movs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e004      	b.n	80039fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <xTaskIncrementTick+0x16c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <xTaskIncrementTick+0x16c>)
 80039f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039fa:	697b      	ldr	r3, [r7, #20]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	200009f8 	.word	0x200009f8
 8003a08:	200009d4 	.word	0x200009d4
 8003a0c:	20000988 	.word	0x20000988
 8003a10:	2000098c 	.word	0x2000098c
 8003a14:	200009e8 	.word	0x200009e8
 8003a18:	200009f0 	.word	0x200009f0
 8003a1c:	200009d8 	.word	0x200009d8
 8003a20:	200008d4 	.word	0x200008d4
 8003a24:	200008d0 	.word	0x200008d0
 8003a28:	200009e4 	.word	0x200009e4
 8003a2c:	200009e0 	.word	0x200009e0

08003a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <vTaskSwitchContext+0xac>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <vTaskSwitchContext+0xb0>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a44:	e044      	b.n	8003ad0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003a46:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <vTaskSwitchContext+0xb0>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <vTaskSwitchContext+0xb4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	f1c3 031f 	rsb	r3, r3, #31
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	4921      	ldr	r1, [pc, #132]	; (8003ae8 <vTaskSwitchContext+0xb8>)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	607b      	str	r3, [r7, #4]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <vTaskSwitchContext+0x5a>
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <vTaskSwitchContext+0xb8>)
 8003a98:	4413      	add	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3308      	adds	r3, #8
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d104      	bne.n	8003abc <vTaskSwitchContext+0x8c>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <vTaskSwitchContext+0xbc>)
 8003ac4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <vTaskSwitchContext+0xbc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	334c      	adds	r3, #76	; 0x4c
 8003acc:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <vTaskSwitchContext+0xc0>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	200009f8 	.word	0x200009f8
 8003ae0:	200009e4 	.word	0x200009e4
 8003ae4:	200009d8 	.word	0x200009d8
 8003ae8:	200008d4 	.word	0x200008d4
 8003aec:	200008d0 	.word	0x200008d0
 8003af0:	20000010 	.word	0x20000010

08003af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	60fb      	str	r3, [r7, #12]
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <vTaskPlaceOnEventList+0x44>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3318      	adds	r3, #24
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe fe79 	bl	800281a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b28:	2101      	movs	r1, #1
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	f000 fa96 	bl	800405c <prvAddCurrentTaskToDelayedList>
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200008d0 	.word	0x200008d0

08003b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	617b      	str	r3, [r7, #20]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3318      	adds	r3, #24
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7fe fe30 	bl	80027d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	68b8      	ldr	r0, [r7, #8]
 8003b82:	f000 fa6b 	bl	800405c <prvAddCurrentTaskToDelayedList>
	}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200008d0 	.word	0x200008d0

08003b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	60fb      	str	r3, [r7, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3318      	adds	r3, #24
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fe61 	bl	800288c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <xTaskRemoveFromEventList+0xac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11c      	bne.n	8003c0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe fe58 	bl	800288c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <xTaskRemoveFromEventList+0xb0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <xTaskRemoveFromEventList+0xb0>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <xTaskRemoveFromEventList+0xb4>)
 8003bfc:	441a      	add	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7fe fde4 	bl	80027d2 <vListInsertEnd>
 8003c0a:	e005      	b.n	8003c18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3318      	adds	r3, #24
 8003c10:	4619      	mov	r1, r3
 8003c12:	480e      	ldr	r0, [pc, #56]	; (8003c4c <xTaskRemoveFromEventList+0xb8>)
 8003c14:	f7fe fddd 	bl	80027d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <xTaskRemoveFromEventList+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d905      	bls.n	8003c32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <xTaskRemoveFromEventList+0xc0>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e001      	b.n	8003c36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c36:	697b      	ldr	r3, [r7, #20]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	200009f8 	.word	0x200009f8
 8003c44:	200009d8 	.word	0x200009d8
 8003c48:	200008d4 	.word	0x200008d4
 8003c4c:	20000990 	.word	0x20000990
 8003c50:	200008d0 	.word	0x200008d0
 8003c54:	200009e4 	.word	0x200009e4

08003c58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <vTaskInternalSetTimeOutState+0x24>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <vTaskInternalSetTimeOutState+0x28>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	605a      	str	r2, [r3, #4]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	200009e8 	.word	0x200009e8
 8003c80:	200009d4 	.word	0x200009d4

08003c84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	613b      	str	r3, [r7, #16]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cc6:	f000 ff25 	bl	8004b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <xTaskCheckForTimeOut+0xbc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d102      	bne.n	8003cea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e023      	b.n	8003d32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <xTaskCheckForTimeOut+0xc0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d007      	beq.n	8003d06 <xTaskCheckForTimeOut+0x82>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e015      	b.n	8003d32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d20b      	bcs.n	8003d28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	1ad2      	subs	r2, r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff9b 	bl	8003c58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e004      	b.n	8003d32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d32:	f000 ff1f 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 8003d36:	69fb      	ldr	r3, [r7, #28]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	200009d4 	.word	0x200009d4
 8003d44:	200009e8 	.word	0x200009e8

08003d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <vTaskMissedYield+0x14>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	200009e4 	.word	0x200009e4

08003d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d68:	f000 f852 	bl	8003e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <prvIdleTask+0x28>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d9f9      	bls.n	8003d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <prvIdleTask+0x2c>)
 8003d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d84:	e7f0      	b.n	8003d68 <prvIdleTask+0x8>
 8003d86:	bf00      	nop
 8003d88:	200008d4 	.word	0x200008d4
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	e00c      	b.n	8003db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <prvInitialiseTaskLists+0x60>)
 8003da8:	4413      	add	r3, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fce4 	bl	8002778 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3301      	adds	r3, #1
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b06      	cmp	r3, #6
 8003dba:	d9ef      	bls.n	8003d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dbc:	480d      	ldr	r0, [pc, #52]	; (8003df4 <prvInitialiseTaskLists+0x64>)
 8003dbe:	f7fe fcdb 	bl	8002778 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dc2:	480d      	ldr	r0, [pc, #52]	; (8003df8 <prvInitialiseTaskLists+0x68>)
 8003dc4:	f7fe fcd8 	bl	8002778 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dc8:	480c      	ldr	r0, [pc, #48]	; (8003dfc <prvInitialiseTaskLists+0x6c>)
 8003dca:	f7fe fcd5 	bl	8002778 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dce:	480c      	ldr	r0, [pc, #48]	; (8003e00 <prvInitialiseTaskLists+0x70>)
 8003dd0:	f7fe fcd2 	bl	8002778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dd4:	480b      	ldr	r0, [pc, #44]	; (8003e04 <prvInitialiseTaskLists+0x74>)
 8003dd6:	f7fe fccf 	bl	8002778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <prvInitialiseTaskLists+0x78>)
 8003ddc:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <prvInitialiseTaskLists+0x64>)
 8003dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <prvInitialiseTaskLists+0x7c>)
 8003de2:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <prvInitialiseTaskLists+0x68>)
 8003de4:	601a      	str	r2, [r3, #0]
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200008d4 	.word	0x200008d4
 8003df4:	20000960 	.word	0x20000960
 8003df8:	20000974 	.word	0x20000974
 8003dfc:	20000990 	.word	0x20000990
 8003e00:	200009a4 	.word	0x200009a4
 8003e04:	200009bc 	.word	0x200009bc
 8003e08:	20000988 	.word	0x20000988
 8003e0c:	2000098c 	.word	0x2000098c

08003e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e16:	e019      	b.n	8003e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e18:	f000 fe7c 	bl	8004b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <prvCheckTasksWaitingTermination+0x50>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe fd2f 	bl	800288c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <prvCheckTasksWaitingTermination+0x54>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <prvCheckTasksWaitingTermination+0x54>)
 8003e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <prvCheckTasksWaitingTermination+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <prvCheckTasksWaitingTermination+0x58>)
 8003e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e42:	f000 fe97 	bl	8004b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f810 	bl	8003e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <prvCheckTasksWaitingTermination+0x58>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e1      	bne.n	8003e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200009a4 	.word	0x200009a4
 8003e64:	200009d0 	.word	0x200009d0
 8003e68:	200009b8 	.word	0x200009b8

08003e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	334c      	adds	r3, #76	; 0x4c
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 f9a1 	bl	80051c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d108      	bne.n	8003e9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f82f 	bl	8004ef0 <vPortFree>
				vPortFree( pxTCB );
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f001 f82c 	bl	8004ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e98:	e018      	b.n	8003ecc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d103      	bne.n	8003eac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 f823 	bl	8004ef0 <vPortFree>
	}
 8003eaa:	e00f      	b.n	8003ecc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d00a      	beq.n	8003ecc <prvDeleteTCB+0x60>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60fb      	str	r3, [r7, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <prvDeleteTCB+0x5e>
	}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eec:	e008      	b.n	8003f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	20000988 	.word	0x20000988
 8003f10:	200009f0 	.word	0x200009f0

08003f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <xTaskGetSchedulerState+0x34>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f22:	2301      	movs	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	e008      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <xTaskGetSchedulerState+0x38>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f30:	2302      	movs	r3, #2
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e001      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f3a:	687b      	ldr	r3, [r7, #4]
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	200009dc 	.word	0x200009dc
 8003f4c:	200009f8 	.word	0x200009f8

08003f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d06e      	beq.n	8004044 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f66:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <xTaskPriorityDisinherit+0x100>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d00a      	beq.n	8003f86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	60fb      	str	r3, [r7, #12]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	60bb      	str	r3, [r7, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d044      	beq.n	8004044 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d140      	bne.n	8004044 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fc60 	bl	800288c <uxListRemove>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d115      	bne.n	8003ffe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	491f      	ldr	r1, [pc, #124]	; (8004054 <xTaskPriorityDisinherit+0x104>)
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xTaskPriorityDisinherit+0xae>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	2201      	movs	r2, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <xTaskPriorityDisinherit+0x108>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	4a17      	ldr	r2, [pc, #92]	; (8004058 <xTaskPriorityDisinherit+0x108>)
 8003ffc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f1c3 0207 	rsb	r2, r3, #7
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	2201      	movs	r2, #1
 8004018:	409a      	lsls	r2, r3
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <xTaskPriorityDisinherit+0x108>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4313      	orrs	r3, r2
 8004020:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <xTaskPriorityDisinherit+0x108>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <xTaskPriorityDisinherit+0x104>)
 8004032:	441a      	add	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f7fe fbc9 	bl	80027d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004044:	697b      	ldr	r3, [r7, #20]
	}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200008d0 	.word	0x200008d0
 8004054:	200008d4 	.word	0x200008d4
 8004058:	200009d8 	.word	0x200009d8

0800405c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004066:	4b29      	ldr	r3, [pc, #164]	; (800410c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800406c:	4b28      	ldr	r3, [pc, #160]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3304      	adds	r3, #4
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fc0a 	bl	800288c <uxListRemove>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	2201      	movs	r2, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <prvAddCurrentTaskToDelayedList+0xb8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4013      	ands	r3, r2
 8004092:	4a20      	ldr	r2, [pc, #128]	; (8004114 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004094:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d10a      	bne.n	80040b4 <prvAddCurrentTaskToDelayedList+0x58>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	481a      	ldr	r0, [pc, #104]	; (8004118 <prvAddCurrentTaskToDelayedList+0xbc>)
 80040ae:	f7fe fb90 	bl	80027d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040b2:	e026      	b.n	8004102 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d209      	bcs.n	80040e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <prvAddCurrentTaskToDelayedList+0xc0>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7fe fb9e 	bl	800281a <vListInsert>
}
 80040de:	e010      	b.n	8004102 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7fe fb94 	bl	800281a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d202      	bcs.n	8004102 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040fc:	4a09      	ldr	r2, [pc, #36]	; (8004124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6013      	str	r3, [r2, #0]
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200009d4 	.word	0x200009d4
 8004110:	200008d0 	.word	0x200008d0
 8004114:	200009d8 	.word	0x200009d8
 8004118:	200009bc 	.word	0x200009bc
 800411c:	2000098c 	.word	0x2000098c
 8004120:	20000988 	.word	0x20000988
 8004124:	200009f0 	.word	0x200009f0

08004128 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004132:	f000 fb85 	bl	8004840 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <xTimerCreateTimerTask+0x80>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d021      	beq.n	8004182 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004146:	1d3a      	adds	r2, r7, #4
 8004148:	f107 0108 	add.w	r1, r7, #8
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc f9d9 	bl	8000508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	9202      	str	r2, [sp, #8]
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	2302      	movs	r3, #2
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	460a      	mov	r2, r1
 8004168:	4910      	ldr	r1, [pc, #64]	; (80041ac <xTimerCreateTimerTask+0x84>)
 800416a:	4811      	ldr	r0, [pc, #68]	; (80041b0 <xTimerCreateTimerTask+0x88>)
 800416c:	f7ff f8a0 	bl	80032b0 <xTaskCreateStatic>
 8004170:	4603      	mov	r3, r0
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <xTimerCreateTimerTask+0x8c>)
 8004174:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <xTimerCreateTimerTask+0x8c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800417e:	2301      	movs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	613b      	str	r3, [r7, #16]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800419e:	697b      	ldr	r3, [r7, #20]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20000a2c 	.word	0x20000a2c
 80041ac:	08005374 	.word	0x08005374
 80041b0:	08004421 	.word	0x08004421
 80041b4:	20000a30 	.word	0x20000a30

080041b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80041c6:	2028      	movs	r0, #40	; 0x28
 80041c8:	f000 fdc6 	bl	8004d58 <pvPortMalloc>
 80041cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f843 	bl	8004276 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80041f0:	697b      	ldr	r3, [r7, #20]
	}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b08a      	sub	sp, #40	; 0x28
 80041fe:	af02      	add	r7, sp, #8
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004208:	2328      	movs	r3, #40	; 0x28
 800420a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b28      	cmp	r3, #40	; 0x28
 8004210:	d00a      	beq.n	8004228 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	61bb      	str	r3, [r7, #24]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004228:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTimerCreateStatic+0x4c>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	617b      	str	r3, [r7, #20]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f805 	bl	8004276 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800426c:	69fb      	ldr	r3, [r7, #28]
	}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b086      	sub	sp, #24
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	617b      	str	r3, [r7, #20]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01e      	beq.n	80042e4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80042a6:	f000 facb 	bl	8004840 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	3304      	adds	r3, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fa76 	bl	80027b8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	623b      	str	r3, [r7, #32]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <xTimerGenericCommand+0x98>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02a      	beq.n	8004378 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b05      	cmp	r3, #5
 8004332:	dc18      	bgt.n	8004366 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004334:	f7ff fdee 	bl	8003f14 <xTaskGetSchedulerState>
 8004338:	4603      	mov	r3, r0
 800433a:	2b02      	cmp	r3, #2
 800433c:	d109      	bne.n	8004352 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <xTimerGenericCommand+0x98>)
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f107 0114 	add.w	r1, r7, #20
 8004346:	2300      	movs	r3, #0
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	f7fe fbc9 	bl	8002ae0 <xQueueGenericSend>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24
 8004350:	e012      	b.n	8004378 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <xTimerGenericCommand+0x98>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f107 0114 	add.w	r1, r7, #20
 800435a:	2300      	movs	r3, #0
 800435c:	2200      	movs	r2, #0
 800435e:	f7fe fbbf 	bl	8002ae0 <xQueueGenericSend>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24
 8004364:	e008      	b.n	8004378 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <xTimerGenericCommand+0x98>)
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f107 0114 	add.w	r1, r7, #20
 800436e:	2300      	movs	r3, #0
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	f7fe fcb3 	bl	8002cdc <xQueueGenericSendFromISR>
 8004376:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800437a:	4618      	mov	r0, r3
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000a2c 	.word	0x20000a2c

08004388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <prvProcessExpiredTimer+0x94>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fa73 	bl	800288c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	18d1      	adds	r1, r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6978      	ldr	r0, [r7, #20]
 80043c2:	f000 f8d1 	bl	8004568 <prvInsertTimerInActiveList>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01f      	beq.n	800440c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2300      	movs	r3, #0
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	2100      	movs	r1, #0
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff ff88 	bl	80042ec <xTimerGenericCommand>
 80043dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d113      	bne.n	800440c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	4798      	blx	r3
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000a24 	.word	0x20000a24

08004420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004428:	f107 0308 	add.w	r3, r7, #8
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f857 	bl	80044e0 <prvGetNextExpireTime>
 8004432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4619      	mov	r1, r3
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f803 	bl	8004444 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800443e:	f000 f8d5 	bl	80045ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004442:	e7f1      	b.n	8004428 <prvTimerTask+0x8>

08004444 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800444e:	f7ff f97d 	bl	800374c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f866 	bl	8004528 <prvSampleTimeNow>
 800445c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d130      	bne.n	80044c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <prvProcessTimerOrBlockTask+0x3c>
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	429a      	cmp	r2, r3
 8004470:	d806      	bhi.n	8004480 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004472:	f7ff f979 	bl	8003768 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff85 	bl	8004388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800447e:	e024      	b.n	80044ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <prvProcessTimerOrBlockTask+0x90>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <prvProcessTimerOrBlockTask+0x50>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <prvProcessTimerOrBlockTask+0x52>
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <prvProcessTimerOrBlockTask+0x94>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fe fecf 	bl	8003248 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044aa:	f7ff f95d 	bl	8003768 <xTaskResumeAll>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <prvProcessTimerOrBlockTask+0x98>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
}
 80044c4:	e001      	b.n	80044ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044c6:	f7ff f94f 	bl	8003768 <xTaskResumeAll>
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000a28 	.word	0x20000a28
 80044d8:	20000a2c 	.word	0x20000a2c
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <prvGetNextExpireTime+0x44>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <prvGetNextExpireTime+0x16>
 80044f2:	2201      	movs	r2, #1
 80044f4:	e000      	b.n	80044f8 <prvGetNextExpireTime+0x18>
 80044f6:	2200      	movs	r2, #0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <prvGetNextExpireTime+0x44>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e001      	b.n	8004514 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000a24 	.word	0x20000a24

08004528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004530:	f7ff f9b6 	bl	80038a0 <xTaskGetTickCount>
 8004534:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvSampleTimeNow+0x3c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d205      	bcs.n	800454c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004540:	f000 f91a 	bl	8004778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e002      	b.n	8004552 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004552:	4a04      	ldr	r2, [pc, #16]	; (8004564 <prvSampleTimeNow+0x3c>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000a34 	.word	0x20000a34

08004568 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d812      	bhi.n	80045b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e01b      	b.n	80045da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <prvInsertTimerInActiveList+0x7c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe f934 	bl	800281a <vListInsert>
 80045b2:	e012      	b.n	80045da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d206      	bcs.n	80045ca <prvInsertTimerInActiveList+0x62>
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e007      	b.n	80045da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <prvInsertTimerInActiveList+0x80>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7fe f920 	bl	800281a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045da:	697b      	ldr	r3, [r7, #20]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000a28 	.word	0x20000a28
 80045e8:	20000a24 	.word	0x20000a24

080045ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	; 0x30
 80045f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045f2:	e0ae      	b.n	8004752 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f2c0 80aa 	blt.w	8004750 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe f93d 	bl	800288c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ff87 	bl	8004528 <prvSampleTimeNow>
 800461a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b09      	cmp	r3, #9
 8004620:	f200 8097 	bhi.w	8004752 <prvProcessReceivedCommands+0x166>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <prvProcessReceivedCommands+0x40>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004655 	.word	0x08004655
 8004630:	08004655 	.word	0x08004655
 8004634:	08004655 	.word	0x08004655
 8004638:	080046c9 	.word	0x080046c9
 800463c:	080046dd 	.word	0x080046dd
 8004640:	08004727 	.word	0x08004727
 8004644:	08004655 	.word	0x08004655
 8004648:	08004655 	.word	0x08004655
 800464c:	080046c9 	.word	0x080046c9
 8004650:	080046dd 	.word	0x080046dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	18d1      	adds	r1, r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004674:	f7ff ff78 	bl	8004568 <prvInsertTimerInActiveList>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d069      	beq.n	8004752 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004684:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05e      	beq.n	8004752 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	441a      	add	r2, r3
 800469c:	2300      	movs	r3, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a6:	f7ff fe21 	bl	80042ec <xTimerGenericCommand>
 80046aa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d14f      	bne.n	8004752 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	61bb      	str	r3, [r7, #24]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80046da:	e03a      	b.n	8004752 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	617b      	str	r3, [r7, #20]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	18d1      	adds	r1, r2, r3
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004720:	f7ff ff22 	bl	8004568 <prvInsertTimerInActiveList>
					break;
 8004724:	e015      	b.n	8004752 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004736:	f000 fbdb 	bl	8004ef0 <vPortFree>
 800473a:	e00a      	b.n	8004752 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800474e:	e000      	b.n	8004752 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004750:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <prvProcessReceivedCommands+0x188>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f107 0108 	add.w	r1, r7, #8
 800475a:	2200      	movs	r2, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fb59 	bl	8002e14 <xQueueReceive>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f af45 	bne.w	80045f4 <prvProcessReceivedCommands+0x8>
	}
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	3728      	adds	r7, #40	; 0x28
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000a2c 	.word	0x20000a2c

08004778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800477e:	e048      	b.n	8004812 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004780:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <prvSwitchTimerLists+0xc0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <prvSwitchTimerLists+0xc0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3304      	adds	r3, #4
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe f877 	bl	800288c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02e      	beq.n	8004812 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d90e      	bls.n	80047e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <prvSwitchTimerLists+0xc0>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe f81c 	bl	800281a <vListInsert>
 80047e2:	e016      	b.n	8004812 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047e4:	2300      	movs	r3, #0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2300      	movs	r3, #0
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	2100      	movs	r1, #0
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff fd7c 	bl	80042ec <xTimerGenericCommand>
 80047f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	603b      	str	r3, [r7, #0]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004812:	4b09      	ldr	r3, [pc, #36]	; (8004838 <prvSwitchTimerLists+0xc0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1b1      	bne.n	8004780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <prvSwitchTimerLists+0xc0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <prvSwitchTimerLists+0xc4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvSwitchTimerLists+0xc0>)
 8004828:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800482a:	4a04      	ldr	r2, [pc, #16]	; (800483c <prvSwitchTimerLists+0xc4>)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000a24 	.word	0x20000a24
 800483c:	20000a28 	.word	0x20000a28

08004840 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004846:	f000 f965 	bl	8004b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <prvCheckForValidListAndQueue+0x60>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d120      	bne.n	8004894 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004852:	4814      	ldr	r0, [pc, #80]	; (80048a4 <prvCheckForValidListAndQueue+0x64>)
 8004854:	f7fd ff90 	bl	8002778 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004858:	4813      	ldr	r0, [pc, #76]	; (80048a8 <prvCheckForValidListAndQueue+0x68>)
 800485a:	f7fd ff8d 	bl	8002778 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800485e:	4b13      	ldr	r3, [pc, #76]	; (80048ac <prvCheckForValidListAndQueue+0x6c>)
 8004860:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <prvCheckForValidListAndQueue+0x64>)
 8004862:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <prvCheckForValidListAndQueue+0x70>)
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <prvCheckForValidListAndQueue+0x68>)
 8004868:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800486a:	2300      	movs	r3, #0
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <prvCheckForValidListAndQueue+0x74>)
 8004870:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <prvCheckForValidListAndQueue+0x78>)
 8004872:	210c      	movs	r1, #12
 8004874:	200a      	movs	r0, #10
 8004876:	f7fe f89b 	bl	80029b0 <xQueueGenericCreateStatic>
 800487a:	4603      	mov	r3, r0
 800487c:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <prvCheckForValidListAndQueue+0x60>)
 800487e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <prvCheckForValidListAndQueue+0x60>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <prvCheckForValidListAndQueue+0x60>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	490b      	ldr	r1, [pc, #44]	; (80048bc <prvCheckForValidListAndQueue+0x7c>)
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fcb0 	bl	80031f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004894:	f000 f96e 	bl	8004b74 <vPortExitCritical>
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000a2c 	.word	0x20000a2c
 80048a4:	200009fc 	.word	0x200009fc
 80048a8:	20000a10 	.word	0x20000a10
 80048ac:	20000a24 	.word	0x20000a24
 80048b0:	20000a28 	.word	0x20000a28
 80048b4:	20000ab0 	.word	0x20000ab0
 80048b8:	20000a38 	.word	0x20000a38
 80048bc:	0800537c 	.word	0x0800537c

080048c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3b04      	subs	r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3b04      	subs	r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b04      	subs	r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f0:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <pxPortInitialiseStack+0x64>)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3b14      	subs	r3, #20
 80048fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3b04      	subs	r3, #4
 8004906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f06f 0202 	mvn.w	r2, #2
 800490e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b20      	subs	r3, #32
 8004914:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	08004929 	.word	0x08004929

08004928 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <prvTaskExitError+0x54>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d00a      	beq.n	8004952 <prvTaskExitError+0x2a>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <prvTaskExitError+0x28>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60bb      	str	r3, [r7, #8]
}
 8004964:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004966:	bf00      	nop
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0fc      	beq.n	8004968 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	2000000c 	.word	0x2000000c

08004980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <pxCurrentTCBConst2>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	f380 8809 	msr	PSP, r0
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8811 	msr	BASEPRI, r0
 800499a:	4770      	bx	lr
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst2>:
 80049a0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049a8:	4808      	ldr	r0, [pc, #32]	; (80049cc <prvPortStartFirstTask+0x24>)
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f380 8808 	msr	MSP, r0
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f380 8814 	msr	CONTROL, r0
 80049ba:	b662      	cpsie	i
 80049bc:	b661      	cpsie	f
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	df00      	svc	0
 80049c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049ca:	bf00      	nop
 80049cc:	e000ed08 	.word	0xe000ed08

080049d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049d6:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <xPortStartScheduler+0x120>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <xPortStartScheduler+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10a      	bne.n	80049f6 <xPortStartScheduler+0x26>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049f6:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <xPortStartScheduler+0x120>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3f      	ldr	r2, [pc, #252]	; (8004af8 <xPortStartScheduler+0x128>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10a      	bne.n	8004a16 <xPortStartScheduler+0x46>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a16:	4b39      	ldr	r3, [pc, #228]	; (8004afc <xPortStartScheduler+0x12c>)
 8004a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <xPortStartScheduler+0x130>)
 8004a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a3e:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a44:	e009      	b.n	8004a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a46:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d0ef      	beq.n	8004a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1c3 0307 	rsb	r3, r3, #7
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d00a      	beq.n	8004a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	60bb      	str	r3, [r7, #8]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004aa6:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <xPortStartScheduler+0x138>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <xPortStartScheduler+0x138>)
 8004aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <xPortStartScheduler+0x138>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <xPortStartScheduler+0x138>)
 8004ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004abe:	f000 f8dd 	bl	8004c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <xPortStartScheduler+0x13c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ac8:	f000 f8fc 	bl	8004cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <xPortStartScheduler+0x140>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <xPortStartScheduler+0x140>)
 8004ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ad8:	f7ff ff66 	bl	80049a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004adc:	f7fe ffa8 	bl	8003a30 <vTaskSwitchContext>
	prvTaskExitError();
 8004ae0:	f7ff ff22 	bl	8004928 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	e000ed00 	.word	0xe000ed00
 8004af4:	410fc271 	.word	0x410fc271
 8004af8:	410fc270 	.word	0x410fc270
 8004afc:	e000e400 	.word	0xe000e400
 8004b00:	20000af8 	.word	0x20000af8
 8004b04:	20000afc 	.word	0x20000afc
 8004b08:	e000ed20 	.word	0xe000ed20
 8004b0c:	2000000c 	.word	0x2000000c
 8004b10:	e000ef34 	.word	0xe000ef34

08004b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
}
 8004b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10f      	bne.n	8004b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <vPortEnterCritical+0x5c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	603b      	str	r3, [r7, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <vPortEnterCritical+0x4a>
	}
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	2000000c 	.word	0x2000000c
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <vPortExitCritical+0x50>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <vPortExitCritical+0x24>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	607b      	str	r3, [r7, #4]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vPortExitCritical+0x50>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <vPortExitCritical+0x50>)
 8004ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <vPortExitCritical+0x50>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <vPortExitCritical+0x42>
 8004baa:	2300      	movs	r3, #0
 8004bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c
	...

08004bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bd0:	f3ef 8009 	mrs	r0, PSP
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <pxCurrentTCBConst>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f01e 0f10 	tst.w	lr, #16
 8004be0:	bf08      	it	eq
 8004be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bf4:	f380 8811 	msr	BASEPRI, r0
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f7fe ff16 	bl	8003a30 <vTaskSwitchContext>
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f380 8811 	msr	BASEPRI, r0
 8004c0c:	bc09      	pop	{r0, r3}
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c16:	f01e 0f10 	tst.w	lr, #16
 8004c1a:	bf08      	it	eq
 8004c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c20:	f380 8809 	msr	PSP, r0
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst>:
 8004c30:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c52:	f7fe fe35 	bl	80038c0 <xTaskIncrementTick>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <SysTick_Handler+0x40>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
}
 8004c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortSetupTimerInterrupt+0x34>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <vPortSetupTimerInterrupt+0x38>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <vPortSetupTimerInterrupt+0x3c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <vPortSetupTimerInterrupt+0x40>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <vPortSetupTimerInterrupt+0x44>)
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c9e:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <vPortSetupTimerInterrupt+0x34>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000e010 	.word	0xe000e010
 8004cb4:	e000e018 	.word	0xe000e018
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	10624dd3 	.word	0x10624dd3
 8004cc0:	e000e014 	.word	0xe000e014

08004cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cd4 <vPortEnableVFP+0x10>
 8004cc8:	6801      	ldr	r1, [r0, #0]
 8004cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cce:	6001      	str	r1, [r0, #0]
 8004cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cd2:	bf00      	nop
 8004cd4:	e000ed88 	.word	0xe000ed88

08004cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cde:	f3ef 8305 	mrs	r3, IPSR
 8004ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d914      	bls.n	8004d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <vPortValidateInterruptPriority+0x70>)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cf4:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <vPortValidateInterruptPriority+0x74>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	7afa      	ldrb	r2, [r7, #11]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d20a      	bcs.n	8004d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <vPortValidateInterruptPriority+0x78>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <vPortValidateInterruptPriority+0x7c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d90a      	bls.n	8004d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	603b      	str	r3, [r7, #0]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <vPortValidateInterruptPriority+0x60>
	}
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	e000e3f0 	.word	0xe000e3f0
 8004d4c:	20000af8 	.word	0x20000af8
 8004d50:	e000ed0c 	.word	0xe000ed0c
 8004d54:	20000afc 	.word	0x20000afc

08004d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d64:	f7fe fcf2 	bl	800374c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d68:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <pvPortMalloc+0x180>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d70:	f000 f920 	bl	8004fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d74:	4b59      	ldr	r3, [pc, #356]	; (8004edc <pvPortMalloc+0x184>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8093 	bne.w	8004ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01d      	beq.n	8004dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d88:	2208      	movs	r2, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d014      	beq.n	8004dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f023 0307 	bic.w	r3, r3, #7
 8004da0:	3308      	adds	r3, #8
 8004da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	617b      	str	r3, [r7, #20]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d06e      	beq.n	8004ea8 <pvPortMalloc+0x150>
 8004dca:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <pvPortMalloc+0x188>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d869      	bhi.n	8004ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dd4:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <pvPortMalloc+0x18c>)
 8004dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dd8:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <pvPortMalloc+0x18c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dde:	e004      	b.n	8004dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d903      	bls.n	8004dfc <pvPortMalloc+0xa4>
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f1      	bne.n	8004de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dfc:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <pvPortMalloc+0x180>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d050      	beq.n	8004ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	1ad2      	subs	r2, r2, r3
 8004e20:	2308      	movs	r3, #8
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d91f      	bls.n	8004e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <pvPortMalloc+0xf8>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	613b      	str	r3, [r7, #16]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e62:	69b8      	ldr	r0, [r7, #24]
 8004e64:	f000 f908 	bl	8005078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e68:	4b1d      	ldr	r3, [pc, #116]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <pvPortMalloc+0x190>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d203      	bcs.n	8004e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <pvPortMalloc+0x190>)
 8004e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <pvPortMalloc+0x184>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <pvPortMalloc+0x194>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a11      	ldr	r2, [pc, #68]	; (8004eec <pvPortMalloc+0x194>)
 8004ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ea8:	f7fe fc5e 	bl	8003768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <pvPortMalloc+0x174>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60fb      	str	r3, [r7, #12]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <pvPortMalloc+0x172>
	return pvReturn;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3728      	adds	r7, #40	; 0x28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20004708 	.word	0x20004708
 8004edc:	2000471c 	.word	0x2000471c
 8004ee0:	2000470c 	.word	0x2000470c
 8004ee4:	20004700 	.word	0x20004700
 8004ee8:	20004710 	.word	0x20004710
 8004eec:	20004714 	.word	0x20004714

08004ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d04d      	beq.n	8004f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f02:	2308      	movs	r3, #8
 8004f04:	425b      	negs	r3, r3
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <vPortFree+0xb8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <vPortFree+0x44>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60fb      	str	r3, [r7, #12]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <vPortFree+0x62>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60bb      	str	r3, [r7, #8]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <vPortFree+0xb8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01e      	beq.n	8004f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11a      	bne.n	8004f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <vPortFree+0xb8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	401a      	ands	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f78:	f7fe fbe8 	bl	800374c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <vPortFree+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4413      	add	r3, r2
 8004f86:	4a09      	ldr	r2, [pc, #36]	; (8004fac <vPortFree+0xbc>)
 8004f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f8a:	6938      	ldr	r0, [r7, #16]
 8004f8c:	f000 f874 	bl	8005078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <vPortFree+0xc0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	4a06      	ldr	r2, [pc, #24]	; (8004fb0 <vPortFree+0xc0>)
 8004f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f9a:	f7fe fbe5 	bl	8003768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000471c 	.word	0x2000471c
 8004fac:	2000470c 	.word	0x2000470c
 8004fb0:	20004718 	.word	0x20004718

08004fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <prvHeapInit+0xac>)
 8004fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3307      	adds	r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <prvHeapInit+0xac>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fec:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <prvHeapInit+0xb0>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <prvHeapInit+0xb0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005000:	2208      	movs	r2, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0307 	bic.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <prvHeapInit+0xb4>)
 8005014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <prvHeapInit+0xb4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <prvHeapInit+0xb4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <prvHeapInit+0xb4>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a0a      	ldr	r2, [pc, #40]	; (800506c <prvHeapInit+0xb8>)
 8005042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <prvHeapInit+0xbc>)
 800504a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <prvHeapInit+0xc0>)
 800504e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	20000b00 	.word	0x20000b00
 8005064:	20004700 	.word	0x20004700
 8005068:	20004708 	.word	0x20004708
 800506c:	20004710 	.word	0x20004710
 8005070:	2000470c 	.word	0x2000470c
 8005074:	2000471c 	.word	0x2000471c

08005078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005080:	4b28      	ldr	r3, [pc, #160]	; (8005124 <prvInsertBlockIntoFreeList+0xac>)
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e002      	b.n	800508c <prvInsertBlockIntoFreeList+0x14>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d8f7      	bhi.n	8005086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d108      	bne.n	80050ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	441a      	add	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	441a      	add	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d118      	bne.n	8005100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b15      	ldr	r3, [pc, #84]	; (8005128 <prvInsertBlockIntoFreeList+0xb0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d00d      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	441a      	add	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e008      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <prvInsertBlockIntoFreeList+0xb0>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e003      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d002      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20004700 	.word	0x20004700
 8005128:	20004708 	.word	0x20004708

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4d0d      	ldr	r5, [pc, #52]	; (8005164 <__libc_init_array+0x38>)
 8005130:	4c0d      	ldr	r4, [pc, #52]	; (8005168 <__libc_init_array+0x3c>)
 8005132:	1b64      	subs	r4, r4, r5
 8005134:	10a4      	asrs	r4, r4, #2
 8005136:	2600      	movs	r6, #0
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	4d0b      	ldr	r5, [pc, #44]	; (800516c <__libc_init_array+0x40>)
 800513e:	4c0c      	ldr	r4, [pc, #48]	; (8005170 <__libc_init_array+0x44>)
 8005140:	f000 f8f2 	bl	8005328 <_init>
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	2600      	movs	r6, #0
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	f855 3b04 	ldr.w	r3, [r5], #4
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	f855 3b04 	ldr.w	r3, [r5], #4
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	08005404 	.word	0x08005404
 8005168:	08005404 	.word	0x08005404
 800516c:	08005404 	.word	0x08005404
 8005170:	08005408 	.word	0x08005408

08005174 <__retarget_lock_acquire_recursive>:
 8005174:	4770      	bx	lr

08005176 <__retarget_lock_release_recursive>:
 8005176:	4770      	bx	lr

08005178 <memcpy>:
 8005178:	440a      	add	r2, r1
 800517a:	4291      	cmp	r1, r2
 800517c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005180:	d100      	bne.n	8005184 <memcpy+0xc>
 8005182:	4770      	bx	lr
 8005184:	b510      	push	{r4, lr}
 8005186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800518a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800518e:	4291      	cmp	r1, r2
 8005190:	d1f9      	bne.n	8005186 <memcpy+0xe>
 8005192:	bd10      	pop	{r4, pc}

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <cleanup_glue>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	460c      	mov	r4, r1
 80051a8:	6809      	ldr	r1, [r1, #0]
 80051aa:	4605      	mov	r5, r0
 80051ac:	b109      	cbz	r1, 80051b2 <cleanup_glue+0xe>
 80051ae:	f7ff fff9 	bl	80051a4 <cleanup_glue>
 80051b2:	4621      	mov	r1, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ba:	f000 b869 	b.w	8005290 <_free_r>
	...

080051c0 <_reclaim_reent>:
 80051c0:	4b2c      	ldr	r3, [pc, #176]	; (8005274 <_reclaim_reent+0xb4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4283      	cmp	r3, r0
 80051c6:	b570      	push	{r4, r5, r6, lr}
 80051c8:	4604      	mov	r4, r0
 80051ca:	d051      	beq.n	8005270 <_reclaim_reent+0xb0>
 80051cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051ce:	b143      	cbz	r3, 80051e2 <_reclaim_reent+0x22>
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d14a      	bne.n	800526c <_reclaim_reent+0xac>
 80051d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	b111      	cbz	r1, 80051e2 <_reclaim_reent+0x22>
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 f857 	bl	8005290 <_free_r>
 80051e2:	6961      	ldr	r1, [r4, #20]
 80051e4:	b111      	cbz	r1, 80051ec <_reclaim_reent+0x2c>
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f852 	bl	8005290 <_free_r>
 80051ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051ee:	b111      	cbz	r1, 80051f6 <_reclaim_reent+0x36>
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 f84d 	bl	8005290 <_free_r>
 80051f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051f8:	b111      	cbz	r1, 8005200 <_reclaim_reent+0x40>
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f848 	bl	8005290 <_free_r>
 8005200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005202:	b111      	cbz	r1, 800520a <_reclaim_reent+0x4a>
 8005204:	4620      	mov	r0, r4
 8005206:	f000 f843 	bl	8005290 <_free_r>
 800520a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800520c:	b111      	cbz	r1, 8005214 <_reclaim_reent+0x54>
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f83e 	bl	8005290 <_free_r>
 8005214:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005216:	b111      	cbz	r1, 800521e <_reclaim_reent+0x5e>
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f839 	bl	8005290 <_free_r>
 800521e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005220:	b111      	cbz	r1, 8005228 <_reclaim_reent+0x68>
 8005222:	4620      	mov	r0, r4
 8005224:	f000 f834 	bl	8005290 <_free_r>
 8005228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522a:	b111      	cbz	r1, 8005232 <_reclaim_reent+0x72>
 800522c:	4620      	mov	r0, r4
 800522e:	f000 f82f 	bl	8005290 <_free_r>
 8005232:	69a3      	ldr	r3, [r4, #24]
 8005234:	b1e3      	cbz	r3, 8005270 <_reclaim_reent+0xb0>
 8005236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005238:	4620      	mov	r0, r4
 800523a:	4798      	blx	r3
 800523c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800523e:	b1b9      	cbz	r1, 8005270 <_reclaim_reent+0xb0>
 8005240:	4620      	mov	r0, r4
 8005242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005246:	f7ff bfad 	b.w	80051a4 <cleanup_glue>
 800524a:	5949      	ldr	r1, [r1, r5]
 800524c:	b941      	cbnz	r1, 8005260 <_reclaim_reent+0xa0>
 800524e:	3504      	adds	r5, #4
 8005250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005252:	2d80      	cmp	r5, #128	; 0x80
 8005254:	68d9      	ldr	r1, [r3, #12]
 8005256:	d1f8      	bne.n	800524a <_reclaim_reent+0x8a>
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f819 	bl	8005290 <_free_r>
 800525e:	e7ba      	b.n	80051d6 <_reclaim_reent+0x16>
 8005260:	680e      	ldr	r6, [r1, #0]
 8005262:	4620      	mov	r0, r4
 8005264:	f000 f814 	bl	8005290 <_free_r>
 8005268:	4631      	mov	r1, r6
 800526a:	e7ef      	b.n	800524c <_reclaim_reent+0x8c>
 800526c:	2500      	movs	r5, #0
 800526e:	e7ef      	b.n	8005250 <_reclaim_reent+0x90>
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	bf00      	nop
 8005274:	20000010 	.word	0x20000010

08005278 <__malloc_lock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_lock+0x8>)
 800527a:	f7ff bf7b 	b.w	8005174 <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	20004720 	.word	0x20004720

08005284 <__malloc_unlock>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__malloc_unlock+0x8>)
 8005286:	f7ff bf76 	b.w	8005176 <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	20004720 	.word	0x20004720

08005290 <_free_r>:
 8005290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005292:	2900      	cmp	r1, #0
 8005294:	d044      	beq.n	8005320 <_free_r+0x90>
 8005296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529a:	9001      	str	r0, [sp, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f1a1 0404 	sub.w	r4, r1, #4
 80052a2:	bfb8      	it	lt
 80052a4:	18e4      	addlt	r4, r4, r3
 80052a6:	f7ff ffe7 	bl	8005278 <__malloc_lock>
 80052aa:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <_free_r+0x94>)
 80052ac:	9801      	ldr	r0, [sp, #4]
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	b933      	cbnz	r3, 80052c0 <_free_r+0x30>
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	6014      	str	r4, [r2, #0]
 80052b6:	b003      	add	sp, #12
 80052b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052bc:	f7ff bfe2 	b.w	8005284 <__malloc_unlock>
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d908      	bls.n	80052d6 <_free_r+0x46>
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1961      	adds	r1, r4, r5
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf01      	itttt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	1949      	addeq	r1, r1, r5
 80052d2:	6021      	streq	r1, [r4, #0]
 80052d4:	e7ed      	b.n	80052b2 <_free_r+0x22>
 80052d6:	461a      	mov	r2, r3
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	b10b      	cbz	r3, 80052e0 <_free_r+0x50>
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d9fa      	bls.n	80052d6 <_free_r+0x46>
 80052e0:	6811      	ldr	r1, [r2, #0]
 80052e2:	1855      	adds	r5, r2, r1
 80052e4:	42a5      	cmp	r5, r4
 80052e6:	d10b      	bne.n	8005300 <_free_r+0x70>
 80052e8:	6824      	ldr	r4, [r4, #0]
 80052ea:	4421      	add	r1, r4
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	d1e0      	bne.n	80052b6 <_free_r+0x26>
 80052f4:	681c      	ldr	r4, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	6053      	str	r3, [r2, #4]
 80052fa:	4421      	add	r1, r4
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	e7da      	b.n	80052b6 <_free_r+0x26>
 8005300:	d902      	bls.n	8005308 <_free_r+0x78>
 8005302:	230c      	movs	r3, #12
 8005304:	6003      	str	r3, [r0, #0]
 8005306:	e7d6      	b.n	80052b6 <_free_r+0x26>
 8005308:	6825      	ldr	r5, [r4, #0]
 800530a:	1961      	adds	r1, r4, r5
 800530c:	428b      	cmp	r3, r1
 800530e:	bf04      	itt	eq
 8005310:	6819      	ldreq	r1, [r3, #0]
 8005312:	685b      	ldreq	r3, [r3, #4]
 8005314:	6063      	str	r3, [r4, #4]
 8005316:	bf04      	itt	eq
 8005318:	1949      	addeq	r1, r1, r5
 800531a:	6021      	streq	r1, [r4, #0]
 800531c:	6054      	str	r4, [r2, #4]
 800531e:	e7ca      	b.n	80052b6 <_free_r+0x26>
 8005320:	b003      	add	sp, #12
 8005322:	bd30      	pop	{r4, r5, pc}
 8005324:	20004724 	.word	0x20004724

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
