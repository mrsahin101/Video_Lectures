
004_CMSIS_OS_QUEUE_LAB_TWO_SENDERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006058  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800637c  0800637c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006384  08006384  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800638c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000040dc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004158  20004158  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001638f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003011  00000000  00000000  0003643b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00039450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e0  00000000  00000000  0003a658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231a9  00000000  00000000  0003b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001484d  00000000  00000000  0005e8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4647  00000000  00000000  0007312e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147775  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000503c  00000000  00000000  001477c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061d0 	.word	0x080061d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080061d0 	.word	0x080061d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000098 	.word	0x20000098
 80005b4:	2000014c 	.word	0x2000014c

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b09e      	sub	sp, #120	; 0x78
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fb87 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f871 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f903 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f8d7 	bl	800077c <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue1 */
  osMessageQDef(Queue1, 256, uint8_t);
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <main+0xc8>)
 80005d0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80005d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue1Handle = osMessageCreate(osMessageQ(Queue1), NULL);
 80005da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fee4 	bl	80033ae <osMessageCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <main+0xcc>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue02 */
  osMessageQDef(Queue02, 16, Data);
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <main+0xd0>)
 80005ee:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80005f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue02Handle = osMessageCreate(osMessageQ(Queue02), NULL);
 80005f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fed5 	bl	80033ae <osMessageCreate>
 8000604:	4603      	mov	r3, r0
 8000606:	4a21      	ldr	r2, [pc, #132]	; (800068c <main+0xd4>)
 8000608:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Sender1 */
  osThreadDef(Sender1, StartSender1, osPriorityNormal, 0, 128);
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <main+0xd8>)
 800060c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sender1Handle = osThreadCreate(osThread(Sender1), NULL);
 800061e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fe62 	bl	80032ee <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a19      	ldr	r2, [pc, #100]	; (8000694 <main+0xdc>)
 800062e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Receiver */
  osThreadDef(Receiver, StartReceiver, osPriorityAboveNormal, 0, 128);
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <main+0xe0>)
 8000632:	f107 0420 	add.w	r4, r7, #32
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverHandle = osThreadCreate(osThread(Receiver), NULL);
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fe4f 	bl	80032ee <osThreadCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <main+0xe4>)
 8000654:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sender2 */
  osThreadDef(Sender2, StartSender2, osPriorityNormal, 0, 128);
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <main+0xe8>)
 8000658:	1d3c      	adds	r4, r7, #4
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sender2Handle = osThreadCreate(osThread(Sender2), NULL);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fe3e 	bl	80032ee <osThreadCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <main+0xec>)
 8000676:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000678:	f002 fe32 	bl	80032e0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0xc4>
 800067e:	bf00      	nop
 8000680:	08006204 	.word	0x08006204
 8000684:	2000039c 	.word	0x2000039c
 8000688:	08006214 	.word	0x08006214
 800068c:	200003a0 	.word	0x200003a0
 8000690:	08006224 	.word	0x08006224
 8000694:	20000390 	.word	0x20000390
 8000698:	08006240 	.word	0x08006240
 800069c:	20000394 	.word	0x20000394
 80006a0:	0800625c 	.word	0x0800625c
 80006a4:	20000398 	.word	0x20000398

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 f8ba 	bl	8005830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800071c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000726:	2307      	movs	r3, #7
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fe20 	bl	8001374 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800073a:	f000 f92f 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2105      	movs	r1, #5
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f881 	bl	8001864 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000768:	f000 f918 	bl	800099c <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	; 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART2_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f001 fd56 	bl	8002264 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f8ed 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000034c 	.word	0x2000034c
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_GPIO_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <MX_GPIO_Init+0x4c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_GPIO_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_GPIO_Init+0x4c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <MX_GPIO_Init+0x4c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_GPIO_Init+0x4c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void const * argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMessagePut(Queue1Handle, 0x1,200);
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <StartSender1+0x30>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	22c8      	movs	r2, #200	; 0xc8
 800082e:	2101      	movs	r1, #1
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fde5 	bl	8003400 <osMessagePut>
	  osMessagePut(Queue02Handle, (uint32_t)&DataToSend1, 200);
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <StartSender1+0x34>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4907      	ldr	r1, [pc, #28]	; (8000858 <StartSender1+0x38>)
 800083c:	22c8      	movs	r2, #200	; 0xc8
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fdde 	bl	8003400 <osMessagePut>
	  osDelay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	f002 fd9d 	bl	8003386 <osDelay>
	  osMessagePut(Queue1Handle, 0x1,200);
 800084c:	e7ec      	b.n	8000828 <StartSender1+0x8>
 800084e:	bf00      	nop
 8000850:	2000039c 	.word	0x2000039c
 8000854:	200003a0 	.word	0x200003a0
 8000858:	20000000 	.word	0x20000000

0800085c <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void const * argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0a2      	sub	sp, #136	; 0x88
 8000860:	af00      	add	r7, sp, #0
 8000862:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
	osEvent retvalue;
	char buffer[100];
	for(;;)
	{
		retvalue = osMessageGet(Queue1Handle,4000);
 8000864:	4b30      	ldr	r3, [pc, #192]	; (8000928 <StartReceiver+0xcc>)
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	463b      	mov	r3, r7
 800086a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fe06 	bl	8003480 <osMessageGet>
 8000874:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000878:	463a      	mov	r2, r7
 800087a:	ca07      	ldmia	r2, {r0, r1, r2}
 800087c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)&(retvalue.value.v), 1,HAL_MAX_DELAY);
 8000880:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000884:	1d19      	adds	r1, r3, #4
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	2201      	movs	r2, #1
 800088c:	4827      	ldr	r0, [pc, #156]	; (800092c <StartReceiver+0xd0>)
 800088e:	f001 fd36 	bl	80022fe <HAL_UART_Transmit>
		osDelay(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f002 fd77 	bl	8003386 <osDelay>
		retvalue = osMessageGet(Queue02Handle, 1000);
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <StartReceiver+0xd4>)
 800089a:	6819      	ldr	r1, [r3, #0]
 800089c:	463b      	mov	r3, r7
 800089e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fdec 	bl	8003480 <osMessageGet>
 80008a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008ac:	463a      	mov	r2, r7
 80008ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(((Data*)retvalue.value.p)->Source == 1)
 80008b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d118      	bne.n	80008f0 <StartReceiver+0x94>
		{
			sprintf(buffer, "Received message from Sender 1 -> %d",((Data*)(retvalue.value.p))->Value);
 80008be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	f107 0318 	add.w	r3, r7, #24
 80008ca:	491a      	ldr	r1, [pc, #104]	; (8000934 <StartReceiver+0xd8>)
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 f8c5 	bl	8005a5c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fc7a 	bl	80001d0 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f107 0118 	add.w	r1, r7, #24
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	4810      	ldr	r0, [pc, #64]	; (800092c <StartReceiver+0xd0>)
 80008ea:	f001 fd08 	bl	80022fe <HAL_UART_Transmit>
 80008ee:	e017      	b.n	8000920 <StartReceiver+0xc4>
		}
		else
		{
			sprintf(buffer, "Received message from Sender 2 -> %u",((Data*)(retvalue.value.p))->Value);
 80008f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	490e      	ldr	r1, [pc, #56]	; (8000938 <StartReceiver+0xdc>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 f8ac 	bl	8005a5c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fc61 	bl	80001d0 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	b29a      	uxth	r2, r3
 8000912:	f107 0118 	add.w	r1, r7, #24
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <StartReceiver+0xd0>)
 800091c:	f001 fcef 	bl	80022fe <HAL_UART_Transmit>
		}
		osDelay(100);
 8000920:	2064      	movs	r0, #100	; 0x64
 8000922:	f002 fd30 	bl	8003386 <osDelay>
		retvalue = osMessageGet(Queue1Handle,4000);
 8000926:	e79d      	b.n	8000864 <StartReceiver+0x8>
 8000928:	2000039c 	.word	0x2000039c
 800092c:	2000034c 	.word	0x2000034c
 8000930:	200003a0 	.word	0x200003a0
 8000934:	08006278 	.word	0x08006278
 8000938:	080062a0 	.word	0x080062a0

0800093c <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void const * argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */
  /* Infinite loop */
  for(;;)
  {
	  osMessagePut(Queue1Handle, 0x2,200);
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <StartSender2+0x30>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	22c8      	movs	r2, #200	; 0xc8
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fd57 	bl	8003400 <osMessagePut>
	  osMessagePut(Queue02Handle, (uint32_t)&DataToSend2,200);
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <StartSender2+0x34>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4907      	ldr	r1, [pc, #28]	; (8000974 <StartSender2+0x38>)
 8000958:	22c8      	movs	r2, #200	; 0xc8
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fd50 	bl	8003400 <osMessagePut>
	  osDelay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f002 fd0f 	bl	8003386 <osDelay>
	  osMessagePut(Queue1Handle, 0x2,200);
 8000968:	e7ec      	b.n	8000944 <StartSender2+0x8>
 800096a:	bf00      	nop
 800096c:	2000039c 	.word	0x2000039c
 8000970:	200003a0 	.word	0x200003a0
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098a:	f000 f9c3 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40002000 	.word	0x40002000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <HAL_MspInit+0x54>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x54>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_MspInit+0x54>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_MspInit+0x54>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	210f      	movs	r1, #15
 80009ea:	f06f 0001 	mvn.w	r0, #1
 80009ee:	f000 fa69 	bl	8000ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_UART_MspInit+0x94>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d133      	bne.n	8000a8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_UART_MspInit+0x9c>)
 8000a76:	f000 fae1 	bl	800103c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	2026      	movs	r0, #38	; 0x26
 8000a80:	f000 fa20 	bl	8000ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a84:	2026      	movs	r0, #38	; 0x26
 8000a86:	f000 fa39 	bl	8000efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40004400 	.word	0x40004400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <HAL_InitTick+0xe4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a32      	ldr	r2, [pc, #200]	; (8000b84 <HAL_InitTick+0xe4>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_InitTick+0xe4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 f8e4 	bl	8001ca4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae6:	f001 f8b5 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8000aea:	6378      	str	r0, [r7, #52]	; 0x34
 8000aec:	e004      	b.n	8000af8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aee:	f001 f8b1 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8000af2:	4603      	mov	r3, r0
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <HAL_InitTick+0xe8>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	0c9b      	lsrs	r3, r3, #18
 8000b02:	3b01      	subs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <HAL_InitTick+0xec>)
 8000b08:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <HAL_InitTick+0xf0>)
 8000b0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_InitTick+0xec>)
 8000b0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b12:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_InitTick+0xec>)
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_InitTick+0xec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_InitTick+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_InitTick+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b2c:	4817      	ldr	r0, [pc, #92]	; (8000b8c <HAL_InitTick+0xec>)
 8000b2e:	f001 f8eb 	bl	8001d08 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d11b      	bne.n	8000b78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <HAL_InitTick+0xec>)
 8000b42:	f001 f93b 	bl	8001dbc <HAL_TIM_Base_Start_IT>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d111      	bne.n	8000b78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b54:	202d      	movs	r0, #45	; 0x2d
 8000b56:	f000 f9d1 	bl	8000efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d808      	bhi.n	8000b72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	202d      	movs	r0, #45	; 0x2d
 8000b66:	f000 f9ad 	bl	8000ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_InitTick+0xf4>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	e002      	b.n	8000b78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3738      	adds	r7, #56	; 0x38
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	200003a4 	.word	0x200003a4
 8000b90:	40002000 	.word	0x40002000
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART2_IRQHandler+0x10>)
 8000bca:	f001 fc2b 	bl	8002424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000034c 	.word	0x2000034c

08000bd8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000bde:	f001 f95d 	bl	8001e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200003a4 	.word	0x200003a4

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f004 fdce 	bl	80057bc <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20020000 	.word	0x20020000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	200003ec 	.word	0x200003ec
 8000c54:	20004158 	.word	0x20004158

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca6:	f7ff ffd7 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f004 fd8d 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc83 	bl	80005b8 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cc0:	0800638c 	.word	0x0800638c
  ldr r2, =_sbss
 8000cc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cc8:	20004158 	.word	0x20004158

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f8d8 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f7ff fece 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe50 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000010 	.word	0x20000010
 8000d38:	200003f0 	.word	0x200003f0

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200003f0 	.word	0x200003f0

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4c 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff ffb1 	bl	8000e48 <NVIC_EncodePriority>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff80 	bl	8000df4 <__NVIC_SetPriority>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff54 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f26:	f7ff ff09 	bl	8000d3c <HAL_GetTick>
 8000f2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d008      	beq.n	8000f4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e052      	b.n	8000ff0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0216 	bic.w	r2, r2, #22
 8000f58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d103      	bne.n	8000f7a <HAL_DMA_Abort+0x62>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0208 	bic.w	r2, r2, #8
 8000f88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9a:	e013      	b.n	8000fc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f9c:	f7ff fece 	bl	8000d3c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	d90c      	bls.n	8000fc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2220      	movs	r2, #32
 8000fae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e015      	b.n	8000ff0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e4      	bne.n	8000f9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd6:	223f      	movs	r2, #63	; 0x3f
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d004      	beq.n	8001016 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00c      	b.n	8001030 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2205      	movs	r2, #5
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0201 	bic.w	r2, r2, #1
 800102c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e16b      	b.n	8001330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 815a 	bne.w	800132a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80b4 	beq.w	800132a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b60      	ldr	r3, [pc, #384]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5f      	ldr	r2, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a5b      	ldr	r2, [pc, #364]	; (800134c <HAL_GPIO_Init+0x310>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_GPIO_Init+0x314>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x318>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x31c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x320>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x324>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x328>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x32c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x330>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20a>
 8001242:	2307      	movs	r3, #7
 8001244:	e00e      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001246:	2308      	movs	r3, #8
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124a:	2306      	movs	r3, #6
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x310>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae90 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e267      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d075      	beq.n	800147e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b04      	cmp	r3, #4
 800139c:	d00c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d112      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013b6:	d10b      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d05b      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d157      	bne.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e242      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d106      	bne.n	80013e8 <HAL_RCC_OscConfig+0x74>
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a75      	ldr	r2, [pc, #468]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x98>
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6f      	ldr	r2, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6c      	ldr	r2, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 800140c:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a68      	ldr	r2, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc86 	bl	8000d3c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fc82 	bl	8000d3c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e207      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xc0>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc72 	bl	8000d3c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc6e 	bl	8000d3c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1f3      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0xe8>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1c7      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4937      	ldr	r1, [pc, #220]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_RCC_OscConfig+0x244>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fc27 	bl	8000d3c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc23 	bl	8000d3c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1a8      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4925      	ldr	r1, [pc, #148]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x244>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc06 	bl	8000d3c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fc02 	bl	8000d3c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e187      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d036      	beq.n	80015cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d016      	beq.n	8001594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x248>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fbe6 	bl	8000d3c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fbe2 	bl	8000d3c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e167      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x200>
 8001592:	e01b      	b.n	80015cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x248>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fbcf 	bl	8000d3c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	e00e      	b.n	80015c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbcb 	bl	8000d3c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d907      	bls.n	80015c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e150      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	42470000 	.word	0x42470000
 80015bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ea      	bne.n	80015a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8097 	beq.w	8001708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b7d      	ldr	r3, [pc, #500]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a73      	ldr	r2, [pc, #460]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb8b 	bl	8000d3c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fb87 	bl	8000d3c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e10c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x2ea>
 8001650:	4b64      	ldr	r3, [pc, #400]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a63      	ldr	r2, [pc, #396]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x30c>
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0304 	bic.w	r3, r3, #4
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d015      	beq.n	80016cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb4c 	bl	8000d3c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff fb48 	bl	8000d3c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0cb      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0ee      	beq.n	80016a8 <HAL_RCC_OscConfig+0x334>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fb36 	bl	8000d3c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb32 	bl	8000d3c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0b5      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a1 	beq.w	8001854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d05c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d141      	bne.n	80017aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb06 	bl	8000d3c <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fb02 	bl	8000d3c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e087      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fadb 	bl	8000d3c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fad7 	bl	8000d3c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e05c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x416>
 80017a8:	e054      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fac4 	bl	8000d3c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fac0 	bl	8000d3c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e045      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x444>
 80017d6:	e03d      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e038      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000
 80017ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x4ec>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d028      	beq.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d121      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11a      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001820:	4013      	ands	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001828:	4293      	cmp	r3, r2
 800182a:	d111      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	3b01      	subs	r3, #1
 800183a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0cc      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d90c      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d044      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	2b03      	cmp	r3, #3
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e067      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4934      	ldr	r1, [pc, #208]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff f9f2 	bl	8000d3c <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff f9ee 	bl	8000d3c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e04f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d20c      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f848 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	080062d0 	.word	0x080062d0
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a34:	b094      	sub	sp, #80	; 0x50
 8001a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a48:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d00d      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	f200 80e1 	bhi.w	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x34>
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a62:	e0db      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a68:	e0db      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a6e:	e0d8      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	462b      	mov	r3, r5
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0159      	lsls	r1, r3, #5
 8001ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab4:	0150      	lsls	r0, r2, #5
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4621      	mov	r1, r4
 8001abc:	1a51      	subs	r1, r2, r1
 8001abe:	6139      	str	r1, [r7, #16]
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad4:	4659      	mov	r1, fp
 8001ad6:	018b      	lsls	r3, r1, #6
 8001ad8:	4651      	mov	r1, sl
 8001ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ade:	4651      	mov	r1, sl
 8001ae0:	018a      	lsls	r2, r1, #6
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae8:	4659      	mov	r1, fp
 8001aea:	eb63 0901 	sbc.w	r9, r3, r1
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	eb18 0303 	adds.w	r3, r8, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	462b      	mov	r3, r5
 8001b10:	eb49 0303 	adc.w	r3, r9, r3
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b22:	4629      	mov	r1, r5
 8001b24:	024b      	lsls	r3, r1, #9
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	024a      	lsls	r2, r1, #9
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b40:	f7fe fb9e 	bl	8000280 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b4c:	e058      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	2200      	movs	r2, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	4611      	mov	r1, r2
 8001b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b68:	4642      	mov	r2, r8
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	f04f 0000 	mov.w	r0, #0
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	0159      	lsls	r1, r3, #5
 8001b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7a:	0150      	lsls	r0, r2, #5
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4641      	mov	r1, r8
 8001b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b86:	4649      	mov	r1, r9
 8001b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	00eb      	lsls	r3, r5, #3
 8001bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb6:	00e2      	lsls	r2, r4, #3
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	18e3      	adds	r3, r4, r3
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	eb45 0303 	adc.w	r3, r5, r3
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	028b      	lsls	r3, r1, #10
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be0:	4621      	mov	r1, r4
 8001be2:	028a      	lsls	r2, r1, #10
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	61fa      	str	r2, [r7, #28]
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fb44 	bl	8000280 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3750      	adds	r7, #80	; 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	080062e0 	.word	0x080062e0

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffdc 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0b5b      	lsrs	r3, r3, #13
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	080062e0 	.word	0x080062e0

08001ca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_RCC_GetClockConfig+0x60>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0207 	and.w	r2, r3, #7
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e041      	b.n	8001d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f839 	bl	8001da6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f000 f9d8 	bl	80020fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d001      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e04e      	b.n	8001e72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_TIM_Base_Start_IT+0xc4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d022      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d01d      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d018      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00e      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d111      	bne.n	8001e60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d010      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5e:	e007      	b.n	8001e70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40010400 	.word	0x40010400
 8001e94:	40014000 	.word	0x40014000
 8001e98:	40001800 	.word	0x40001800

08001e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0202 	mvn.w	r2, #2
 8001ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8ee 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8e0 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8f1 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0204 	mvn.w	r2, #4
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2202      	movs	r2, #2
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8c4 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8b6 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8c7 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0208 	mvn.w	r2, #8
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f89a 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f88c 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f89d 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0210 	mvn.w	r2, #16
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f870 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f862 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f873 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0201 	mvn.w	r2, #1
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fcac 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d10e      	bne.n	800204c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d107      	bne.n	800204c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f902 	bl	8002250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d107      	bne.n	8002078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f838 	bl	80020e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b20      	cmp	r3, #32
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0220 	mvn.w	r2, #32
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8cc 	bl	800223c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <TIM_Base_SetConfig+0x114>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211a:	d00f      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3d      	ldr	r2, [pc, #244]	; (8002214 <TIM_Base_SetConfig+0x118>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00b      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3c      	ldr	r2, [pc, #240]	; (8002218 <TIM_Base_SetConfig+0x11c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3b      	ldr	r2, [pc, #236]	; (800221c <TIM_Base_SetConfig+0x120>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d003      	beq.n	800213c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <TIM_Base_SetConfig+0x124>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d108      	bne.n	800214e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <TIM_Base_SetConfig+0x114>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d02b      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d027      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <TIM_Base_SetConfig+0x118>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d023      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2b      	ldr	r2, [pc, #172]	; (8002218 <TIM_Base_SetConfig+0x11c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <TIM_Base_SetConfig+0x120>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01b      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <TIM_Base_SetConfig+0x124>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d017      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <TIM_Base_SetConfig+0x128>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <TIM_Base_SetConfig+0x12c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00f      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <TIM_Base_SetConfig+0x130>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00b      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <TIM_Base_SetConfig+0x134>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <TIM_Base_SetConfig+0x138>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d003      	beq.n	80021ae <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a23      	ldr	r2, [pc, #140]	; (8002238 <TIM_Base_SetConfig+0x13c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d108      	bne.n	80021c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <TIM_Base_SetConfig+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_Base_SetConfig+0xf8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <TIM_Base_SetConfig+0x124>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d103      	bne.n	80021fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	615a      	str	r2, [r3, #20]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40010400 	.word	0x40010400
 8002224:	40014000 	.word	0x40014000
 8002228:	40014400 	.word	0x40014400
 800222c:	40014800 	.word	0x40014800
 8002230:	40001800 	.word	0x40001800
 8002234:	40001c00 	.word	0x40001c00
 8002238:	40002000 	.word	0x40002000

0800223c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e03f      	b.n	80022f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fbb8 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fd7b 	bl	8002da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af02      	add	r7, sp, #8
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b20      	cmp	r3, #32
 800231c:	d17c      	bne.n	8002418 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_UART_Transmit+0x2c>
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e075      	b.n	800241a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_UART_Transmit+0x3e>
 8002338:	2302      	movs	r3, #2
 800233a:	e06e      	b.n	800241a <HAL_UART_Transmit+0x11c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2221      	movs	r2, #33	; 0x21
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002352:	f7fe fcf3 	bl	8000d3c <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236c:	d108      	bne.n	8002380 <HAL_UART_Transmit+0x82>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e003      	b.n	8002388 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002390:	e02a      	b.n	80023e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 faf9 	bl	8002994 <UART_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e036      	b.n	800241a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10b      	bne.n	80023ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	3302      	adds	r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e007      	b.n	80023da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1cf      	bne.n	8002392 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fac9 	bl	8002994 <UART_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e006      	b.n	800241a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0ba      	sub	sp, #232	; 0xe8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_UART_IRQHandler+0x66>
 8002476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fbd3 	bl	8002c2e <UART_Receive_IT>
      return;
 8002488:	e256      	b.n	8002938 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800248a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80de 	beq.w	8002650 <HAL_UART_IRQHandler+0x22c>
 8002494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80d1 	beq.w	8002650 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_UART_IRQHandler+0xae>
 80024ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_UART_IRQHandler+0xd2>
 80024de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0202 	orr.w	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_UART_IRQHandler+0xf6>
 8002502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800251a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d011      	beq.n	800254a <HAL_UART_IRQHandler+0x126>
 8002526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f043 0208 	orr.w	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 81ed 	beq.w	800292e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_UART_IRQHandler+0x14e>
 8002560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fb5e 	bl	8002c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_UART_IRQHandler+0x17a>
 8002596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d04f      	beq.n	800263e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa66 	bl	8002a70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d141      	bne.n	8002636 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3314      	adds	r3, #20
 80025b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3314      	adds	r3, #20
 80025da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025ee:	e841 2300 	strex	r3, r2, [r1]
 80025f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1d9      	bne.n	80025b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	2b00      	cmp	r3, #0
 8002604:	d013      	beq.n	800262e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	4a7d      	ldr	r2, [pc, #500]	; (8002800 <HAL_UART_IRQHandler+0x3dc>)
 800260c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fcf0 	bl	8000ff8 <HAL_DMA_Abort_IT>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e00e      	b.n	800264c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f99a 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e00a      	b.n	800264c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f996 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	e006      	b.n	800264c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f992 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800264a:	e170      	b.n	800292e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	bf00      	nop
    return;
 800264e:	e16e      	b.n	800292e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b01      	cmp	r3, #1
 8002656:	f040 814a 	bne.w	80028ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8143 	beq.w	80028ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 813c 	beq.w	80028ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	f040 80b4 	bne.w	8002804 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8140 	beq.w	8002932 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ba:	429a      	cmp	r2, r3
 80026bc:	f080 8139 	bcs.w	8002932 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d2:	f000 8088 	beq.w	80027e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e4:	e853 3f00 	ldrex	r3, [r3]
 80026e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800270e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800271a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1d9      	bne.n	80026d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3314      	adds	r3, #20
 8002742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002746:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800274a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800274e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002752:	e841 2300 	strex	r3, r2, [r1]
 8002756:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1e1      	bne.n	8002722 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3314      	adds	r3, #20
 8002764:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002768:	e853 3f00 	ldrex	r3, [r3]
 800276c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800276e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002784:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002786:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800278a:	e841 2300 	strex	r3, r2, [r1]
 800278e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e3      	bne.n	800275e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b6:	f023 0310 	bic.w	r3, r3, #16
 80027ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e3      	bne.n	80027a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fb99 	bl	8000f18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8c0 	bl	800297c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027fc:	e099      	b.n	8002932 <HAL_UART_IRQHandler+0x50e>
 80027fe:	bf00      	nop
 8002800:	08002b37 	.word	0x08002b37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800280c:	b29b      	uxth	r3, r3
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 808b 	beq.w	8002936 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8086 	beq.w	8002936 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800284e:	647a      	str	r2, [r7, #68]	; 0x44
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002856:	e841 2300 	strex	r3, r2, [r1]
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e3      	bne.n	800282a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3314      	adds	r3, #20
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	e853 3f00 	ldrex	r3, [r3]
 8002870:	623b      	str	r3, [r7, #32]
   return(result);
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3314      	adds	r3, #20
 8002882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002886:	633a      	str	r2, [r7, #48]	; 0x30
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800288c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288e:	e841 2300 	strex	r3, r2, [r1]
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e3      	bne.n	8002862 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	e853 3f00 	ldrex	r3, [r3]
 80028b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0310 	bic.w	r3, r3, #16
 80028be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028cc:	61fa      	str	r2, [r7, #28]
 80028ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	69b9      	ldr	r1, [r7, #24]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	e841 2300 	strex	r3, r2, [r1]
 80028d8:	617b      	str	r3, [r7, #20]
   return(result);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e3      	bne.n	80028a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f848 	bl	800297c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ec:	e023      	b.n	8002936 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_UART_IRQHandler+0x4ea>
 80028fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f929 	bl	8002b5e <UART_Transmit_IT>
    return;
 800290c:	e014      	b.n	8002938 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800290e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <HAL_UART_IRQHandler+0x514>
 800291a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f969 	bl	8002bfe <UART_EndTransmit_IT>
    return;
 800292c:	e004      	b.n	8002938 <HAL_UART_IRQHandler+0x514>
    return;
 800292e:	bf00      	nop
 8002930:	e002      	b.n	8002938 <HAL_UART_IRQHandler+0x514>
      return;
 8002932:	bf00      	nop
 8002934:	e000      	b.n	8002938 <HAL_UART_IRQHandler+0x514>
      return;
 8002936:	bf00      	nop
  }
}
 8002938:	37e8      	adds	r7, #232	; 0xe8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop

08002940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b090      	sub	sp, #64	; 0x40
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a4:	e050      	b.n	8002a48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d04c      	beq.n	8002a48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029b4:	f7fe f9c2 	bl	8000d3c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d241      	bcs.n	8002a48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	e853 3f00 	ldrex	r3, [r3]
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029e4:	637a      	str	r2, [r7, #52]	; 0x34
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ec:	e841 2300 	strex	r3, r2, [r1]
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e5      	bne.n	80029c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	613b      	str	r3, [r7, #16]
   return(result);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a18:	623a      	str	r2, [r7, #32]
 8002a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	69f9      	ldr	r1, [r7, #28]
 8002a1e:	6a3a      	ldr	r2, [r7, #32]
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e5      	bne.n	80029f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e00f      	b.n	8002a68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d09f      	beq.n	80029a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3740      	adds	r7, #64	; 0x40
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b095      	sub	sp, #84	; 0x54
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	e853 3f00 	ldrex	r3, [r3]
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a98:	643a      	str	r2, [r7, #64]	; 0x40
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aa0:	e841 2300 	strex	r3, r2, [r1]
 8002aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e5      	bne.n	8002a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	e853 3f00 	ldrex	r3, [r3]
 8002aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad4:	e841 2300 	strex	r3, r2, [r1]
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e5      	bne.n	8002aac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d119      	bne.n	8002b1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	e853 3f00 	ldrex	r3, [r3]
 8002af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f023 0310 	bic.w	r3, r3, #16
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b08:	61ba      	str	r2, [r7, #24]
 8002b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	6979      	ldr	r1, [r7, #20]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	e841 2300 	strex	r3, r2, [r1]
 8002b14:	613b      	str	r3, [r7, #16]
   return(result);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e5      	bne.n	8002ae8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b2a:	bf00      	nop
 8002b2c:	3754      	adds	r7, #84	; 0x54
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff ff09 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b21      	cmp	r3, #33	; 0x21
 8002b70:	d13e      	bne.n	8002bf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d114      	bne.n	8002ba6 <UART_Transmit_IT+0x48>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d110      	bne.n	8002ba6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	621a      	str	r2, [r3, #32]
 8002ba4:	e008      	b.n	8002bb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	1c59      	adds	r1, r3, #1
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6211      	str	r1, [r2, #32]
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fe8e 	bl	8002940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08c      	sub	sp, #48	; 0x30
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	f040 80ab 	bne.w	8002d9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d117      	bne.n	8002c7e <UART_Receive_IT+0x50>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	1c9a      	adds	r2, r3, #2
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c7c:	e026      	b.n	8002ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d007      	beq.n	8002ca2 <UART_Receive_IT+0x74>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <UART_Receive_IT+0x82>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e008      	b.n	8002cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d15a      	bne.n	8002d96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0220 	bic.w	r2, r2, #32
 8002cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d135      	bne.n	8002d8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	613b      	str	r3, [r7, #16]
   return(result);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f023 0310 	bic.w	r3, r3, #16
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d46:	623a      	str	r2, [r7, #32]
 8002d48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	69f9      	ldr	r1, [r7, #28]
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e5      	bne.n	8002d26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d10a      	bne.n	8002d7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fdf9 	bl	800297c <HAL_UARTEx_RxEventCallback>
 8002d8a:	e002      	b.n	8002d92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fde1 	bl	8002954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e002      	b.n	8002d9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3730      	adds	r7, #48	; 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da8:	b0c0      	sub	sp, #256	; 0x100
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	68d9      	ldr	r1, [r3, #12]
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	ea40 0301 	orr.w	r3, r0, r1
 8002dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002dfc:	f021 010c 	bic.w	r1, r1, #12
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	6999      	ldr	r1, [r3, #24]
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	ea40 0301 	orr.w	r3, r0, r1
 8002e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b8f      	ldr	r3, [pc, #572]	; (8003070 <UART_SetConfig+0x2cc>)
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d005      	beq.n	8002e44 <UART_SetConfig+0xa0>
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b8d      	ldr	r3, [pc, #564]	; (8003074 <UART_SetConfig+0x2d0>)
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d104      	bne.n	8002e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e44:	f7fe ff1a 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002e48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e4c:	e003      	b.n	8002e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e4e:	f7fe ff01 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002e52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e60:	f040 810c 	bne.w	800307c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e76:	4622      	mov	r2, r4
 8002e78:	462b      	mov	r3, r5
 8002e7a:	1891      	adds	r1, r2, r2
 8002e7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e7e:	415b      	adcs	r3, r3
 8002e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e86:	4621      	mov	r1, r4
 8002e88:	eb12 0801 	adds.w	r8, r2, r1
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	eb43 0901 	adc.w	r9, r3, r1
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ea6:	4690      	mov	r8, r2
 8002ea8:	4699      	mov	r9, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	eb18 0303 	adds.w	r3, r8, r3
 8002eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	eb49 0303 	adc.w	r3, r9, r3
 8002eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	18db      	adds	r3, r3, r3
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ed8:	4613      	mov	r3, r2
 8002eda:	eb42 0303 	adc.w	r3, r2, r3
 8002ede:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ee8:	f7fd f9ca 	bl	8000280 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <UART_SetConfig+0x2d4>)
 8002ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	011c      	lsls	r4, r3, #4
 8002efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	1891      	adds	r1, r2, r2
 8002f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f14:	415b      	adcs	r3, r3
 8002f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f22:	4649      	mov	r1, r9
 8002f24:	eb43 0b01 	adc.w	fp, r3, r1
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f3c:	4692      	mov	sl, r2
 8002f3e:	469b      	mov	fp, r3
 8002f40:	4643      	mov	r3, r8
 8002f42:	eb1a 0303 	adds.w	r3, sl, r3
 8002f46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	18db      	adds	r3, r3, r3
 8002f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f6e:	4613      	mov	r3, r2
 8002f70:	eb42 0303 	adc.w	r3, r2, r3
 8002f74:	647b      	str	r3, [r7, #68]	; 0x44
 8002f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f7e:	f7fd f97f 	bl	8000280 <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <UART_SetConfig+0x2d4>)
 8002f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2264      	movs	r2, #100	; 0x64
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	1acb      	subs	r3, r1, r3
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <UART_SetConfig+0x2d4>)
 8002fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fac:	441c      	add	r4, r3
 8002fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	1891      	adds	r1, r2, r2
 8002fc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fc8:	415b      	adcs	r3, r3
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	1851      	adds	r1, r2, r1
 8002fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	414b      	adcs	r3, r1
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fe8:	4659      	mov	r1, fp
 8002fea:	00cb      	lsls	r3, r1, #3
 8002fec:	4651      	mov	r1, sl
 8002fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	00ca      	lsls	r2, r1, #3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003004:	464b      	mov	r3, r9
 8003006:	460a      	mov	r2, r1
 8003008:	eb42 0303 	adc.w	r3, r2, r3
 800300c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800301c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003024:	460b      	mov	r3, r1
 8003026:	18db      	adds	r3, r3, r3
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
 800302a:	4613      	mov	r3, r2
 800302c:	eb42 0303 	adc.w	r3, r2, r3
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800303a:	f7fd f921 	bl	8000280 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <UART_SetConfig+0x2d4>)
 8003044:	fba3 1302 	umull	r1, r3, r3, r2
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	2164      	movs	r1, #100	; 0x64
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	3332      	adds	r3, #50	; 0x32
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <UART_SetConfig+0x2d4>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	f003 0207 	and.w	r2, r3, #7
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4422      	add	r2, r4
 800306a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800306c:	e105      	b.n	800327a <UART_SetConfig+0x4d6>
 800306e:	bf00      	nop
 8003070:	40011000 	.word	0x40011000
 8003074:	40011400 	.word	0x40011400
 8003078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800307c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003080:	2200      	movs	r2, #0
 8003082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003086:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800308a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800308e:	4642      	mov	r2, r8
 8003090:	464b      	mov	r3, r9
 8003092:	1891      	adds	r1, r2, r2
 8003094:	6239      	str	r1, [r7, #32]
 8003096:	415b      	adcs	r3, r3
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800309e:	4641      	mov	r1, r8
 80030a0:	1854      	adds	r4, r2, r1
 80030a2:	4649      	mov	r1, r9
 80030a4:	eb43 0501 	adc.w	r5, r3, r1
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030c4:	464b      	mov	r3, r9
 80030c6:	eb45 0303 	adc.w	r3, r5, r3
 80030ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030ea:	4629      	mov	r1, r5
 80030ec:	008b      	lsls	r3, r1, #2
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030f4:	4621      	mov	r1, r4
 80030f6:	008a      	lsls	r2, r1, #2
 80030f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030fc:	f7fd f8c0 	bl	8000280 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4b60      	ldr	r3, [pc, #384]	; (8003288 <UART_SetConfig+0x4e4>)
 8003106:	fba3 2302 	umull	r2, r3, r3, r2
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	011c      	lsls	r4, r3, #4
 800310e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800311c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003120:	4642      	mov	r2, r8
 8003122:	464b      	mov	r3, r9
 8003124:	1891      	adds	r1, r2, r2
 8003126:	61b9      	str	r1, [r7, #24]
 8003128:	415b      	adcs	r3, r3
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003130:	4641      	mov	r1, r8
 8003132:	1851      	adds	r1, r2, r1
 8003134:	6139      	str	r1, [r7, #16]
 8003136:	4649      	mov	r1, r9
 8003138:	414b      	adcs	r3, r1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003148:	4659      	mov	r1, fp
 800314a:	00cb      	lsls	r3, r1, #3
 800314c:	4651      	mov	r1, sl
 800314e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003152:	4651      	mov	r1, sl
 8003154:	00ca      	lsls	r2, r1, #3
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	4603      	mov	r3, r0
 800315c:	4642      	mov	r2, r8
 800315e:	189b      	adds	r3, r3, r2
 8003160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003164:	464b      	mov	r3, r9
 8003166:	460a      	mov	r2, r1
 8003168:	eb42 0303 	adc.w	r3, r2, r3
 800316c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	67bb      	str	r3, [r7, #120]	; 0x78
 800317a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003188:	4649      	mov	r1, r9
 800318a:	008b      	lsls	r3, r1, #2
 800318c:	4641      	mov	r1, r8
 800318e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003192:	4641      	mov	r1, r8
 8003194:	008a      	lsls	r2, r1, #2
 8003196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800319a:	f7fd f871 	bl	8000280 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4b39      	ldr	r3, [pc, #228]	; (8003288 <UART_SetConfig+0x4e4>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2164      	movs	r1, #100	; 0x64
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	3332      	adds	r3, #50	; 0x32
 80031b6:	4a34      	ldr	r2, [pc, #208]	; (8003288 <UART_SetConfig+0x4e4>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c2:	441c      	add	r4, r3
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	673b      	str	r3, [r7, #112]	; 0x70
 80031cc:	677a      	str	r2, [r7, #116]	; 0x74
 80031ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031d2:	4642      	mov	r2, r8
 80031d4:	464b      	mov	r3, r9
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	415b      	adcs	r3, r3
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031e2:	4641      	mov	r1, r8
 80031e4:	1851      	adds	r1, r2, r1
 80031e6:	6039      	str	r1, [r7, #0]
 80031e8:	4649      	mov	r1, r9
 80031ea:	414b      	adcs	r3, r1
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031fa:	4659      	mov	r1, fp
 80031fc:	00cb      	lsls	r3, r1, #3
 80031fe:	4651      	mov	r1, sl
 8003200:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003204:	4651      	mov	r1, sl
 8003206:	00ca      	lsls	r2, r1, #3
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	4603      	mov	r3, r0
 800320e:	4642      	mov	r2, r8
 8003210:	189b      	adds	r3, r3, r2
 8003212:	66bb      	str	r3, [r7, #104]	; 0x68
 8003214:	464b      	mov	r3, r9
 8003216:	460a      	mov	r2, r1
 8003218:	eb42 0303 	adc.w	r3, r2, r3
 800321c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	663b      	str	r3, [r7, #96]	; 0x60
 8003228:	667a      	str	r2, [r7, #100]	; 0x64
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003236:	4649      	mov	r1, r9
 8003238:	008b      	lsls	r3, r1, #2
 800323a:	4641      	mov	r1, r8
 800323c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003240:	4641      	mov	r1, r8
 8003242:	008a      	lsls	r2, r1, #2
 8003244:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003248:	f7fd f81a 	bl	8000280 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <UART_SetConfig+0x4e4>)
 8003252:	fba3 1302 	umull	r1, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2164      	movs	r1, #100	; 0x64
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	3332      	adds	r3, #50	; 0x32
 8003264:	4a08      	ldr	r2, [pc, #32]	; (8003288 <UART_SetConfig+0x4e4>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4422      	add	r2, r4
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	bf00      	nop
 800327c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	51eb851f 	.word	0x51eb851f

0800328c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800329a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800329e:	2b84      	cmp	r3, #132	; 0x84
 80032a0:	d005      	beq.n	80032ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	3303      	adds	r3, #3
 80032ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032ae:	68fb      	ldr	r3, [r7, #12]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c2:	f3ef 8305 	mrs	r3, IPSR
 80032c6:	607b      	str	r3, [r7, #4]
  return(result);
 80032c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032e4:	f001 f916 	bl	8004514 <vTaskStartScheduler>
  
  return osOK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	bd80      	pop	{r7, pc}

080032ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f0:	b089      	sub	sp, #36	; 0x24
 80032f2:	af04      	add	r7, sp, #16
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <osThreadCreate+0x54>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685c      	ldr	r4, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681d      	ldr	r5, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691e      	ldr	r6, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ffb6 	bl	800328c <makeFreeRtosPriority>
 8003320:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800332a:	9202      	str	r2, [sp, #8]
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	9100      	str	r1, [sp, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4632      	mov	r2, r6
 8003334:	4629      	mov	r1, r5
 8003336:	4620      	mov	r0, r4
 8003338:	f000 ff0e 	bl	8004158 <xTaskCreateStatic>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e01c      	b.n	800337c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685c      	ldr	r4, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800334e:	b29e      	uxth	r6, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff98 	bl	800328c <makeFreeRtosPriority>
 800335c:	4602      	mov	r2, r0
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	9200      	str	r2, [sp, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4632      	mov	r2, r6
 800336a:	4629      	mov	r1, r5
 800336c:	4620      	mov	r0, r4
 800336e:	f000 ff50 	bl	8004212 <xTaskCreate>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d001      	beq.n	800337c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800337c:	68fb      	ldr	r3, [r7, #12]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003386 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <osDelay+0x16>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	e000      	b.n	800339e <osDelay+0x18>
 800339c:	2301      	movs	r3, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 f884 	bl	80044ac <vTaskDelay>
  
  return osOK;
 80033a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80033ae:	b590      	push	{r4, r7, lr}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af02      	add	r7, sp, #8
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d011      	beq.n	80033e4 <osMessageCreate+0x36>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2400      	movs	r4, #0
 80033da:	9400      	str	r4, [sp, #0]
 80033dc:	f000 f9e0 	bl	80037a0 <xQueueGenericCreateStatic>
 80033e0:	4603      	mov	r3, r0
 80033e2:	e008      	b.n	80033f6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	4619      	mov	r1, r3
 80033f0:	f000 fa4e 	bl	8003890 <xQueueGenericCreate>
 80033f4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}
	...

08003400 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <osMessagePut+0x1e>
    ticks = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800341e:	f7ff ff4d 	bl	80032bc <inHandlerMode>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d018      	beq.n	800345a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003428:	f107 0210 	add.w	r2, r7, #16
 800342c:	f107 0108 	add.w	r1, r7, #8
 8003430:	2300      	movs	r3, #0
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fb84 	bl	8003b40 <xQueueGenericSendFromISR>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d001      	beq.n	8003442 <osMessagePut+0x42>
      return osErrorOS;
 800343e:	23ff      	movs	r3, #255	; 0xff
 8003440:	e018      	b.n	8003474 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d014      	beq.n	8003472 <osMessagePut+0x72>
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <osMessagePut+0x7c>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	e00b      	b.n	8003472 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800345a:	f107 0108 	add.w	r1, r7, #8
 800345e:	2300      	movs	r3, #0
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fa6e 	bl	8003944 <xQueueGenericSend>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <osMessagePut+0x72>
      return osErrorOS;
 800346e:	23ff      	movs	r3, #255	; 0xff
 8003470:	e000      	b.n	8003474 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	e000ed04 	.word	0xe000ed04

08003480 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b08b      	sub	sp, #44	; 0x2c
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	617b      	str	r3, [r7, #20]
    return event;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	461c      	mov	r4, r3
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034ae:	e054      	b.n	800355a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d103      	bne.n	80034c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	e009      	b.n	80034dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <osMessageGet+0x5c>
      ticks = 1;
 80034d8:	2301      	movs	r3, #1
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80034dc:	f7ff feee 	bl	80032bc <inHandlerMode>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01c      	beq.n	8003520 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80034e6:	f107 0220 	add.w	r2, r7, #32
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	68b8      	ldr	r0, [r7, #8]
 80034f4:	f000 fca0 	bl	8003e38 <xQueueReceiveFromISR>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80034fe:	2310      	movs	r3, #16
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e001      	b.n	8003508 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01d      	beq.n	800354a <osMessageGet+0xca>
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <osMessageGet+0xe4>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	e014      	b.n	800354a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	3304      	adds	r3, #4
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	4619      	mov	r1, r3
 800352a:	68b8      	ldr	r0, [r7, #8]
 800352c:	f000 fba4 	bl	8003c78 <xQueueReceive>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003536:	2310      	movs	r3, #16
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e006      	b.n	800354a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <osMessageGet+0xc6>
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <osMessageGet+0xc8>
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	461c      	mov	r4, r3
 800354e:	f107 0314 	add.w	r3, r7, #20
 8003552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	372c      	adds	r7, #44	; 0x2c
 800355e:	46bd      	mov	sp, r7
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	bf00      	nop
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0208 	add.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 0208 	add.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d103      	bne.n	800362a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e00c      	b.n	8003644 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e002      	b.n	8003638 <vListInsert+0x2e>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d2f6      	bcs.n	8003632 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d103      	bne.n	80036b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036fa:	f001 fd53 	bl	80051a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	3b01      	subs	r3, #1
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	22ff      	movs	r2, #255	; 0xff
 800373e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d114      	bne.n	800377a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01a      	beq.n	800378e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f001 f92b 	bl	80049b8 <xTaskRemoveFromEventList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d012      	beq.n	800378e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <xQueueGenericReset+0xcc>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	e009      	b.n	800378e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3310      	adds	r3, #16
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fef2 	bl	8003568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff feed 	bl	8003568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800378e:	f001 fd39 	bl	8005204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	; 0x38
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <xQueueGenericCreateStatic+0x52>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <xQueueGenericCreateStatic+0x56>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueGenericCreateStatic+0x58>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	623b      	str	r3, [r7, #32]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xQueueGenericCreateStatic+0x7e>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueGenericCreateStatic+0x82>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueGenericCreateStatic+0x84>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	61fb      	str	r3, [r7, #28]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800383e:	2348      	movs	r3, #72	; 0x48
 8003840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b48      	cmp	r3, #72	; 0x48
 8003846:	d00a      	beq.n	800385e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	61bb      	str	r3, [r7, #24]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800385e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003872:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f83f 	bl	8003904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	4613      	mov	r3, r2
 800389c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	613b      	str	r3, [r7, #16]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3348      	adds	r3, #72	; 0x48
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fd8d 	bl	80053e8 <pvPortMalloc>
 80038ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3348      	adds	r3, #72	; 0x48
 80038de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038e8:	79fa      	ldrb	r2, [r7, #7]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f805 	bl	8003904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038fa:	69bb      	ldr	r3, [r7, #24]
	}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e002      	b.n	8003926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003932:	2101      	movs	r1, #1
 8003934:	69b8      	ldr	r0, [r7, #24]
 8003936:	f7ff fecb 	bl	80036d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xQueueGenericSend+0x32>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <xQueueGenericSend+0x40>
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <xQueueGenericSend+0x44>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <xQueueGenericSend+0x46>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <xQueueGenericSend+0x60>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d103      	bne.n	80039b2 <xQueueGenericSend+0x6e>
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <xQueueGenericSend+0x72>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <xQueueGenericSend+0x74>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	623b      	str	r3, [r7, #32]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039d2:	f001 f9b1 	bl	8004d38 <xTaskGetSchedulerState>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <xQueueGenericSend+0x9e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <xQueueGenericSend+0xa2>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <xQueueGenericSend+0xa4>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <xQueueGenericSend+0xbe>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	61fb      	str	r3, [r7, #28]
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a02:	f001 fbcf 	bl	80051a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <xQueueGenericSend+0xd4>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d129      	bne.n	8003a6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1e:	f000 fa8b 	bl	8003f38 <prvCopyDataToQueue>
 8003a22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	3324      	adds	r3, #36	; 0x24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 ffc1 	bl	80049b8 <xTaskRemoveFromEventList>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a3c:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <xQueueGenericSend+0x1f8>)
 8003a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	e00a      	b.n	8003a64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a54:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <xQueueGenericSend+0x1f8>)
 8003a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a64:	f001 fbce 	bl	8005204 <vPortExitCritical>
				return pdPASS;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e063      	b.n	8003b34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d103      	bne.n	8003a7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a72:	f001 fbc7 	bl	8005204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e05c      	b.n	8003b34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fff9 	bl	8004a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a8e:	f001 fbb9 	bl	8005204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a92:	f000 fda9 	bl	80045e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a96:	f001 fb85 	bl	80051a4 <vPortEnterCritical>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d103      	bne.n	8003ab0 <xQueueGenericSend+0x16c>
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d103      	bne.n	8003ac6 <xQueueGenericSend+0x182>
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac6:	f001 fb9d 	bl	8005204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aca:	1d3a      	adds	r2, r7, #4
 8003acc:	f107 0314 	add.w	r3, r7, #20
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 ffe8 	bl	8004aa8 <xTaskCheckForTimeOut>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d124      	bne.n	8003b28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ae0:	f000 fb22 	bl	8004128 <prvIsQueueFull>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d018      	beq.n	8003b1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	3310      	adds	r3, #16
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 ff3c 	bl	8004970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afa:	f000 faad 	bl	8004058 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003afe:	f000 fd81 	bl	8004604 <xTaskResumeAll>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af7c 	bne.w	8003a02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <xQueueGenericSend+0x1f8>)
 8003b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	e772      	b.n	8003a02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b1e:	f000 fa9b 	bl	8004058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b22:	f000 fd6f 	bl	8004604 <xTaskResumeAll>
 8003b26:	e76c      	b.n	8003a02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2a:	f000 fa95 	bl	8004058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b2e:	f000 fd69 	bl	8004604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3738      	adds	r7, #56	; 0x38
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b090      	sub	sp, #64	; 0x40
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <xQueueGenericSendFromISR+0x3c>
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <xQueueGenericSendFromISR+0x40>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <xQueueGenericSendFromISR+0x42>
 8003b80:	2300      	movs	r3, #0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d103      	bne.n	8003baa <xQueueGenericSendFromISR+0x6a>
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <xQueueGenericSendFromISR+0x6e>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <xQueueGenericSendFromISR+0x70>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	623b      	str	r3, [r7, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bca:	f001 fbcd 	bl	8005368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bce:	f3ef 8211 	mrs	r2, BASEPRI
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	61fa      	str	r2, [r7, #28]
 8003be4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003be6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <xQueueGenericSendFromISR+0xbc>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d12f      	bne.n	8003c5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c12:	f000 f991 	bl	8003f38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d112      	bne.n	8003c46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d016      	beq.n	8003c56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fec3 	bl	80049b8 <xTaskRemoveFromEventList>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e007      	b.n	8003c56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	b25a      	sxtb	r2, r3
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c56:	2301      	movs	r3, #1
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c5a:	e001      	b.n	8003c60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3740      	adds	r7, #64	; 0x40
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	; 0x30
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xQueueReceive+0x30>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	623b      	str	r3, [r7, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <xQueueReceive+0x3e>
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <xQueueReceive+0x42>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <xQueueReceive+0x44>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xQueueReceive+0x5e>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	61fb      	str	r3, [r7, #28]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd6:	f001 f82f 	bl	8004d38 <xTaskGetSchedulerState>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <xQueueReceive+0x6e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <xQueueReceive+0x72>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <xQueueReceive+0x74>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueReceive+0x8e>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61bb      	str	r3, [r7, #24]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d06:	f001 fa4d 	bl	80051a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01f      	beq.n	8003d56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d16:	68b9      	ldr	r1, [r7, #8]
 8003d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d1a:	f000 f977 	bl	800400c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1e5a      	subs	r2, r3, #1
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00f      	beq.n	8003d4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	3310      	adds	r3, #16
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fe40 	bl	80049b8 <xTaskRemoveFromEventList>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <xQueueReceive+0x1bc>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d4e:	f001 fa59 	bl	8005204 <vPortExitCritical>
				return pdPASS;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e069      	b.n	8003e2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d5c:	f001 fa52 	bl	8005204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e062      	b.n	8003e2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d6a:	f107 0310 	add.w	r3, r7, #16
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fe84 	bl	8004a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d78:	f001 fa44 	bl	8005204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d7c:	f000 fc34 	bl	80045e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d80:	f001 fa10 	bl	80051a4 <vPortEnterCritical>
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d103      	bne.n	8003d9a <xQueueReceive+0x122>
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d103      	bne.n	8003db0 <xQueueReceive+0x138>
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db0:	f001 fa28 	bl	8005204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003db4:	1d3a      	adds	r2, r7, #4
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fe73 	bl	8004aa8 <xTaskCheckForTimeOut>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d123      	bne.n	8003e10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dca:	f000 f997 	bl	80040fc <prvIsQueueEmpty>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d017      	beq.n	8003e04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fdc7 	bl	8004970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de4:	f000 f938 	bl	8004058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003de8:	f000 fc0c 	bl	8004604 <xTaskResumeAll>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d189      	bne.n	8003d06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <xQueueReceive+0x1bc>)
 8003df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	e780      	b.n	8003d06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e06:	f000 f927 	bl	8004058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e0a:	f000 fbfb 	bl	8004604 <xTaskResumeAll>
 8003e0e:	e77a      	b.n	8003d06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e12:	f000 f921 	bl	8004058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e16:	f000 fbf5 	bl	8004604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e1c:	f000 f96e 	bl	80040fc <prvIsQueueEmpty>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f43f af6f 	beq.w	8003d06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3730      	adds	r7, #48	; 0x30
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	; 0x38
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	623b      	str	r3, [r7, #32]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <xQueueReceiveFromISR+0x3a>
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <xQueueReceiveFromISR+0x3e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xQueueReceiveFromISR+0x40>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	61fb      	str	r3, [r7, #28]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e92:	f001 fa69 	bl	8005368 <vPortValidateInterruptPriority>
	__asm volatile
 8003e96:	f3ef 8211 	mrs	r2, BASEPRI
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	61ba      	str	r2, [r7, #24]
 8003eac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003eae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d02f      	beq.n	8003f1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ecc:	f000 f89e 	bl	800400c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	1e5a      	subs	r2, r3, #1
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d112      	bne.n	8003f08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	3310      	adds	r3, #16
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fd62 	bl	80049b8 <xTaskRemoveFromEventList>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e007      	b.n	8003f18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	b25a      	sxtb	r2, r3
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1c:	e001      	b.n	8003f22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f383 8811 	msr	BASEPRI, r3
}
 8003f2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3738      	adds	r7, #56	; 0x38
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d14d      	bne.n	8003ffa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 ff06 	bl	8004d74 <xTaskPriorityDisinherit>
 8003f68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	e043      	b.n	8003ffa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d119      	bne.n	8003fac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6858      	ldr	r0, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	461a      	mov	r2, r3
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	f001 fc46 	bl	8005814 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d32b      	bcc.n	8003ffa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	e026      	b.n	8003ffa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68d8      	ldr	r0, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	f001 fc2c 	bl	8005814 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d207      	bcs.n	8003fe8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	425b      	negs	r3, r3
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d105      	bne.n	8003ffa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004002:	697b      	ldr	r3, [r7, #20]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d018      	beq.n	8004050 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	441a      	add	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	d303      	bcc.n	8004040 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68d9      	ldr	r1, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	461a      	mov	r2, r3
 800404a:	6838      	ldr	r0, [r7, #0]
 800404c:	f001 fbe2 	bl	8005814 <memcpy>
	}
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004060:	f001 f8a0 	bl	80051a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800406a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800406c:	e011      	b.n	8004092 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d012      	beq.n	800409c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3324      	adds	r3, #36	; 0x24
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fc9c 	bl	80049b8 <xTaskRemoveFromEventList>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004086:	f000 fd71 	bl	8004b6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3b01      	subs	r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	dce9      	bgt.n	800406e <prvUnlockQueue+0x16>
 800409a:	e000      	b.n	800409e <prvUnlockQueue+0x46>
					break;
 800409c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	22ff      	movs	r2, #255	; 0xff
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040a6:	f001 f8ad 	bl	8005204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040aa:	f001 f87b 	bl	80051a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b6:	e011      	b.n	80040dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d012      	beq.n	80040e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3310      	adds	r3, #16
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fc77 	bl	80049b8 <xTaskRemoveFromEventList>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040d0:	f000 fd4c 	bl	8004b6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040d4:	7bbb      	ldrb	r3, [r7, #14]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	dce9      	bgt.n	80040b8 <prvUnlockQueue+0x60>
 80040e4:	e000      	b.n	80040e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	22ff      	movs	r2, #255	; 0xff
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040f0:	f001 f888 	bl	8005204 <vPortExitCritical>
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004104:	f001 f84e 	bl	80051a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e001      	b.n	800411a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800411a:	f001 f873 	bl	8005204 <vPortExitCritical>

	return xReturn;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004130:	f001 f838 	bl	80051a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	429a      	cmp	r2, r3
 800413e:	d102      	bne.n	8004146 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e001      	b.n	800414a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800414a:	f001 f85b 	bl	8005204 <vPortExitCritical>

	return xReturn;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af04      	add	r7, sp, #16
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <xTaskCreateStatic+0x2a>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	623b      	str	r3, [r7, #32]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <xTaskCreateStatic+0x46>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	61fb      	str	r3, [r7, #28]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800419e:	23b4      	movs	r3, #180	; 0xb4
 80041a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2bb4      	cmp	r3, #180	; 0xb4
 80041a6:	d00a      	beq.n	80041be <xTaskCreateStatic+0x66>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	61bb      	str	r3, [r7, #24]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01e      	beq.n	8004204 <xTaskCreateStatic+0xac>
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041de:	2300      	movs	r3, #0
 80041e0:	9303      	str	r3, [sp, #12]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	f107 0314 	add.w	r3, r7, #20
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f850 	bl	800429c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041fe:	f000 f8eb 	bl	80043d8 <prvAddNewTaskToReadyList>
 8004202:	e001      	b.n	8004208 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004208:	697b      	ldr	r3, [r7, #20]
	}
 800420a:	4618      	mov	r0, r3
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004212:	b580      	push	{r7, lr}
 8004214:	b08c      	sub	sp, #48	; 0x30
 8004216:	af04      	add	r7, sp, #16
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f8de 	bl	80053e8 <pvPortMalloc>
 800422c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004234:	20b4      	movs	r0, #180	; 0xb4
 8004236:	f001 f8d7 	bl	80053e8 <pvPortMalloc>
 800423a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
 8004248:	e005      	b.n	8004256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	f001 f998 	bl	8005580 <vPortFree>
 8004250:	e001      	b.n	8004256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d017      	beq.n	800428c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	2300      	movs	r3, #0
 8004268:	9303      	str	r3, [sp, #12]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	9302      	str	r3, [sp, #8]
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f80e 	bl	800429c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004280:	69f8      	ldr	r0, [r7, #28]
 8004282:	f000 f8a9 	bl	80043d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004286:	2301      	movs	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	e002      	b.n	8004292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004292:	69bb      	ldr	r3, [r7, #24]
	}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042b4:	3b01      	subs	r3, #1
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	617b      	str	r3, [r7, #20]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01f      	beq.n	800432a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	e012      	b.n	8004316 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	7819      	ldrb	r1, [r3, #0]
 80042f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	3334      	adds	r3, #52	; 0x34
 8004300:	460a      	mov	r2, r1
 8004302:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3301      	adds	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b0f      	cmp	r3, #15
 800431a:	d9e9      	bls.n	80042f0 <prvInitialiseNewTask+0x54>
 800431c:	e000      	b.n	8004320 <prvInitialiseNewTask+0x84>
			{
				break;
 800431e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004328:	e003      	b.n	8004332 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2b06      	cmp	r3, #6
 8004336:	d901      	bls.n	800433c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004338:	2306      	movs	r3, #6
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004346:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff f928 	bl	80035a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	3318      	adds	r3, #24
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff f923 	bl	80035a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004366:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	f1c3 0207 	rsb	r2, r3, #7
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	334c      	adds	r3, #76	; 0x4c
 800438c:	2260      	movs	r2, #96	; 0x60
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fa4d 	bl	8005830 <memset>
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <prvInitialiseNewTask+0x130>)
 800439a:	651a      	str	r2, [r3, #80]	; 0x50
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <prvInitialiseNewTask+0x134>)
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <prvInitialiseNewTask+0x138>)
 80043a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	69b8      	ldr	r0, [r7, #24]
 80043ae:	f000 fdcd 	bl	8004f4c <pxPortInitialiseStack>
 80043b2:	4602      	mov	r2, r0
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c4:	bf00      	nop
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	08006308 	.word	0x08006308
 80043d0:	08006328 	.word	0x08006328
 80043d4:	080062e8 	.word	0x080062e8

080043d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043e0:	f000 fee0 	bl	80051a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e4:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <prvAddNewTaskToReadyList+0xb8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a29      	ldr	r2, [pc, #164]	; (8004490 <prvAddNewTaskToReadyList+0xb8>)
 80043ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ee:	4b29      	ldr	r3, [pc, #164]	; (8004494 <prvAddNewTaskToReadyList+0xbc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f6:	4a27      	ldr	r2, [pc, #156]	; (8004494 <prvAddNewTaskToReadyList+0xbc>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <prvAddNewTaskToReadyList+0xb8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d110      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004404:	f000 fbd6 	bl	8004bb4 <prvInitialiseTaskLists>
 8004408:	e00d      	b.n	8004426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <prvAddNewTaskToReadyList+0xc0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004412:	4b20      	ldr	r3, [pc, #128]	; (8004494 <prvAddNewTaskToReadyList+0xbc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	429a      	cmp	r2, r3
 800441e:	d802      	bhi.n	8004426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004420:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <prvAddNewTaskToReadyList+0xbc>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a1b      	ldr	r2, [pc, #108]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 800442e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	2201      	movs	r2, #1
 8004436:	409a      	lsls	r2, r3
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4313      	orrs	r3, r2
 800443e:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3304      	adds	r3, #4
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f7ff f8b2 	bl	80035c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800445e:	f000 fed1 	bl	8005204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <prvAddNewTaskToReadyList+0xc0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <prvAddNewTaskToReadyList+0xbc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	429a      	cmp	r2, r3
 8004476:	d207      	bcs.n	8004488 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200004f4 	.word	0x200004f4
 8004494:	200003f4 	.word	0x200003f4
 8004498:	20000500 	.word	0x20000500
 800449c:	20000510 	.word	0x20000510
 80044a0:	200004fc 	.word	0x200004fc
 80044a4:	200003f8 	.word	0x200003f8
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d017      	beq.n	80044ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <vTaskDelay+0x60>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <vTaskDelay+0x30>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60bb      	str	r3, [r7, #8]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044dc:	f000 f884 	bl	80045e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044e0:	2100      	movs	r1, #0
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fccc 	bl	8004e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044e8:	f000 f88c 	bl	8004604 <xTaskResumeAll>
 80044ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <vTaskDelay+0x64>)
 80044f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	2000051c 	.word	0x2000051c
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004522:	463a      	mov	r2, r7
 8004524:	1d39      	adds	r1, r7, #4
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc f82a 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	9202      	str	r2, [sp, #8]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	2300      	movs	r3, #0
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2300      	movs	r3, #0
 8004540:	460a      	mov	r2, r1
 8004542:	4921      	ldr	r1, [pc, #132]	; (80045c8 <vTaskStartScheduler+0xb4>)
 8004544:	4821      	ldr	r0, [pc, #132]	; (80045cc <vTaskStartScheduler+0xb8>)
 8004546:	f7ff fe07 	bl	8004158 <xTaskCreateStatic>
 800454a:	4603      	mov	r3, r0
 800454c:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <vTaskStartScheduler+0xbc>)
 800454e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004550:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <vTaskStartScheduler+0xbc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e001      	b.n	8004562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d11b      	bne.n	80045a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	613b      	str	r3, [r7, #16]
}
 800457a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800457c:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <vTaskStartScheduler+0xc0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	334c      	adds	r3, #76	; 0x4c
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <vTaskStartScheduler+0xc4>)
 8004584:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <vTaskStartScheduler+0xc8>)
 8004588:	f04f 32ff 	mov.w	r2, #4294967295
 800458c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <vTaskStartScheduler+0xcc>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <vTaskStartScheduler+0xd0>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800459a:	f000 fd61 	bl	8005060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800459e:	e00e      	b.n	80045be <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d10a      	bne.n	80045be <vTaskStartScheduler+0xaa>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <vTaskStartScheduler+0xa8>
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	080062c8 	.word	0x080062c8
 80045cc:	08004b85 	.word	0x08004b85
 80045d0:	20000518 	.word	0x20000518
 80045d4:	200003f4 	.word	0x200003f4
 80045d8:	20000018 	.word	0x20000018
 80045dc:	20000514 	.word	0x20000514
 80045e0:	20000500 	.word	0x20000500
 80045e4:	200004f8 	.word	0x200004f8

080045e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <vTaskSuspendAll+0x18>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	4a03      	ldr	r2, [pc, #12]	; (8004600 <vTaskSuspendAll+0x18>)
 80045f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	2000051c 	.word	0x2000051c

08004604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004612:	4b41      	ldr	r3, [pc, #260]	; (8004718 <xTaskResumeAll+0x114>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <xTaskResumeAll+0x2c>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	603b      	str	r3, [r7, #0]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004630:	f000 fdb8 	bl	80051a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004634:	4b38      	ldr	r3, [pc, #224]	; (8004718 <xTaskResumeAll+0x114>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3b01      	subs	r3, #1
 800463a:	4a37      	ldr	r2, [pc, #220]	; (8004718 <xTaskResumeAll+0x114>)
 800463c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <xTaskResumeAll+0x114>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d161      	bne.n	800470a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004646:	4b35      	ldr	r3, [pc, #212]	; (800471c <xTaskResumeAll+0x118>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d05d      	beq.n	800470a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800464e:	e02e      	b.n	80046ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004650:	4b33      	ldr	r3, [pc, #204]	; (8004720 <xTaskResumeAll+0x11c>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3318      	adds	r3, #24
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff f80d 	bl	800367c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3304      	adds	r3, #4
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff f808 	bl	800367c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <xTaskResumeAll+0x120>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4313      	orrs	r3, r2
 800467a:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <xTaskResumeAll+0x120>)
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a27      	ldr	r2, [pc, #156]	; (8004728 <xTaskResumeAll+0x124>)
 800468c:	441a      	add	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3304      	adds	r3, #4
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f7fe ff94 	bl	80035c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	4b23      	ldr	r3, [pc, #140]	; (800472c <xTaskResumeAll+0x128>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <xTaskResumeAll+0x12c>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046ae:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <xTaskResumeAll+0x11c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1cc      	bne.n	8004650 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046bc:	f000 fb1c 	bl	8004cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046c0:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <xTaskResumeAll+0x130>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d010      	beq.n	80046ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046cc:	f000 f836 	bl	800473c <xTaskIncrementTick>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <xTaskResumeAll+0x12c>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f1      	bne.n	80046cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <xTaskResumeAll+0x130>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <xTaskResumeAll+0x12c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046fa:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <xTaskResumeAll+0x134>)
 80046fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800470a:	f000 fd7b 	bl	8005204 <vPortExitCritical>

	return xAlreadyYielded;
 800470e:	68bb      	ldr	r3, [r7, #8]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2000051c 	.word	0x2000051c
 800471c:	200004f4 	.word	0x200004f4
 8004720:	200004b4 	.word	0x200004b4
 8004724:	200004fc 	.word	0x200004fc
 8004728:	200003f8 	.word	0x200003f8
 800472c:	200003f4 	.word	0x200003f4
 8004730:	20000508 	.word	0x20000508
 8004734:	20000504 	.word	0x20000504
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004746:	4b4e      	ldr	r3, [pc, #312]	; (8004880 <xTaskIncrementTick+0x144>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 808e 	bne.w	800486c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004750:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <xTaskIncrementTick+0x148>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004758:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <xTaskIncrementTick+0x148>)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d120      	bne.n	80047a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004764:	4b48      	ldr	r3, [pc, #288]	; (8004888 <xTaskIncrementTick+0x14c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <xTaskIncrementTick+0x48>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	603b      	str	r3, [r7, #0]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <xTaskIncrementTick+0x46>
 8004784:	4b40      	ldr	r3, [pc, #256]	; (8004888 <xTaskIncrementTick+0x14c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	4b40      	ldr	r3, [pc, #256]	; (800488c <xTaskIncrementTick+0x150>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a3e      	ldr	r2, [pc, #248]	; (8004888 <xTaskIncrementTick+0x14c>)
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4a3e      	ldr	r2, [pc, #248]	; (800488c <xTaskIncrementTick+0x150>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <xTaskIncrementTick+0x154>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	4a3c      	ldr	r2, [pc, #240]	; (8004890 <xTaskIncrementTick+0x154>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	f000 faa9 	bl	8004cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <xTaskIncrementTick+0x158>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d348      	bcc.n	8004842 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b0:	4b35      	ldr	r3, [pc, #212]	; (8004888 <xTaskIncrementTick+0x14c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ba:	4b36      	ldr	r3, [pc, #216]	; (8004894 <xTaskIncrementTick+0x158>)
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295
 80047c0:	601a      	str	r2, [r3, #0]
					break;
 80047c2:	e03e      	b.n	8004842 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c4:	4b30      	ldr	r3, [pc, #192]	; (8004888 <xTaskIncrementTick+0x14c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d203      	bcs.n	80047e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047dc:	4a2d      	ldr	r2, [pc, #180]	; (8004894 <xTaskIncrementTick+0x158>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047e2:	e02e      	b.n	8004842 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe ff47 	bl	800367c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d004      	beq.n	8004800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	3318      	adds	r3, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe ff3e 	bl	800367c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	4b23      	ldr	r3, [pc, #140]	; (8004898 <xTaskIncrementTick+0x15c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	4a22      	ldr	r2, [pc, #136]	; (8004898 <xTaskIncrementTick+0x15c>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4a1f      	ldr	r2, [pc, #124]	; (800489c <xTaskIncrementTick+0x160>)
 8004820:	441a      	add	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f7fe feca 	bl	80035c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <xTaskIncrementTick+0x164>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	429a      	cmp	r2, r3
 800483a:	d3b9      	bcc.n	80047b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004840:	e7b6      	b.n	80047b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004842:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <xTaskIncrementTick+0x164>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4914      	ldr	r1, [pc, #80]	; (800489c <xTaskIncrementTick+0x160>)
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d901      	bls.n	800485e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <xTaskIncrementTick+0x168>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e004      	b.n	8004876 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <xTaskIncrementTick+0x16c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3301      	adds	r3, #1
 8004872:	4a0d      	ldr	r2, [pc, #52]	; (80048a8 <xTaskIncrementTick+0x16c>)
 8004874:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004876:	697b      	ldr	r3, [r7, #20]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000051c 	.word	0x2000051c
 8004884:	200004f8 	.word	0x200004f8
 8004888:	200004ac 	.word	0x200004ac
 800488c:	200004b0 	.word	0x200004b0
 8004890:	2000050c 	.word	0x2000050c
 8004894:	20000514 	.word	0x20000514
 8004898:	200004fc 	.word	0x200004fc
 800489c:	200003f8 	.word	0x200003f8
 80048a0:	200003f4 	.word	0x200003f4
 80048a4:	20000508 	.word	0x20000508
 80048a8:	20000504 	.word	0x20000504

080048ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <vTaskSwitchContext+0xac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048ba:	4b28      	ldr	r3, [pc, #160]	; (800495c <vTaskSwitchContext+0xb0>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048c0:	e044      	b.n	800494c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80048c2:	4b26      	ldr	r3, [pc, #152]	; (800495c <vTaskSwitchContext+0xb0>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <vTaskSwitchContext+0xb4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	fab3 f383 	clz	r3, r3
 80048d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	f1c3 031f 	rsb	r3, r3, #31
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	4921      	ldr	r1, [pc, #132]	; (8004964 <vTaskSwitchContext+0xb8>)
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vTaskSwitchContext+0x5c>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vTaskSwitchContext+0x5a>
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a14      	ldr	r2, [pc, #80]	; (8004964 <vTaskSwitchContext+0xb8>)
 8004914:	4413      	add	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3308      	adds	r3, #8
 800492a:	429a      	cmp	r2, r3
 800492c:	d104      	bne.n	8004938 <vTaskSwitchContext+0x8c>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <vTaskSwitchContext+0xbc>)
 8004940:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <vTaskSwitchContext+0xbc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	334c      	adds	r3, #76	; 0x4c
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <vTaskSwitchContext+0xc0>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	2000051c 	.word	0x2000051c
 800495c:	20000508 	.word	0x20000508
 8004960:	200004fc 	.word	0x200004fc
 8004964:	200003f8 	.word	0x200003f8
 8004968:	200003f4 	.word	0x200003f4
 800496c:	20000018 	.word	0x20000018

08004970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <vTaskPlaceOnEventList+0x44>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3318      	adds	r3, #24
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fe fe33 	bl	800360a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049a4:	2101      	movs	r1, #1
 80049a6:	6838      	ldr	r0, [r7, #0]
 80049a8:	f000 fa6a 	bl	8004e80 <prvAddCurrentTaskToDelayedList>
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	200003f4 	.word	0x200003f4

080049b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	3318      	adds	r3, #24
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fe47 	bl	800367c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ee:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <xTaskRemoveFromEventList+0xac>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d11c      	bne.n	8004a30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fe3e 	bl	800367c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	2201      	movs	r2, #1
 8004a06:	409a      	lsls	r2, r3
 8004a08:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <xTaskRemoveFromEventList+0xb0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <xTaskRemoveFromEventList+0xb0>)
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <xTaskRemoveFromEventList+0xb4>)
 8004a20:	441a      	add	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f7fe fdca 	bl	80035c2 <vListInsertEnd>
 8004a2e:	e005      	b.n	8004a3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3318      	adds	r3, #24
 8004a34:	4619      	mov	r1, r3
 8004a36:	480e      	ldr	r0, [pc, #56]	; (8004a70 <xTaskRemoveFromEventList+0xb8>)
 8004a38:	f7fe fdc3 	bl	80035c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <xTaskRemoveFromEventList+0xbc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d905      	bls.n	8004a56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <xTaskRemoveFromEventList+0xc0>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e001      	b.n	8004a5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a5a:	697b      	ldr	r3, [r7, #20]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	2000051c 	.word	0x2000051c
 8004a68:	200004fc 	.word	0x200004fc
 8004a6c:	200003f8 	.word	0x200003f8
 8004a70:	200004b4 	.word	0x200004b4
 8004a74:	200003f4 	.word	0x200003f4
 8004a78:	20000508 	.word	0x20000508

08004a7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <vTaskInternalSetTimeOutState+0x24>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <vTaskInternalSetTimeOutState+0x28>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	605a      	str	r2, [r3, #4]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	2000050c 	.word	0x2000050c
 8004aa4:	200004f8 	.word	0x200004f8

08004aa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	613b      	str	r3, [r7, #16]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60fb      	str	r3, [r7, #12]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004aea:	f000 fb5b 	bl	80051a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <xTaskCheckForTimeOut+0xbc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d102      	bne.n	8004b0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	e023      	b.n	8004b56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <xTaskCheckForTimeOut+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d007      	beq.n	8004b2a <xTaskCheckForTimeOut+0x82>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d302      	bcc.n	8004b2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e015      	b.n	8004b56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d20b      	bcs.n	8004b4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff9b 	bl	8004a7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e004      	b.n	8004b56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b56:	f000 fb55 	bl	8005204 <vPortExitCritical>

	return xReturn;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200004f8 	.word	0x200004f8
 8004b68:	2000050c 	.word	0x2000050c

08004b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <vTaskMissedYield+0x14>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	20000508 	.word	0x20000508

08004b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b8c:	f000 f852 	bl	8004c34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <prvIdleTask+0x28>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d9f9      	bls.n	8004b8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <prvIdleTask+0x2c>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ba8:	e7f0      	b.n	8004b8c <prvIdleTask+0x8>
 8004baa:	bf00      	nop
 8004bac:	200003f8 	.word	0x200003f8
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	e00c      	b.n	8004bda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <prvInitialiseTaskLists+0x60>)
 8004bcc:	4413      	add	r3, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fcca 	bl	8003568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b06      	cmp	r3, #6
 8004bde:	d9ef      	bls.n	8004bc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004be0:	480d      	ldr	r0, [pc, #52]	; (8004c18 <prvInitialiseTaskLists+0x64>)
 8004be2:	f7fe fcc1 	bl	8003568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004be6:	480d      	ldr	r0, [pc, #52]	; (8004c1c <prvInitialiseTaskLists+0x68>)
 8004be8:	f7fe fcbe 	bl	8003568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bec:	480c      	ldr	r0, [pc, #48]	; (8004c20 <prvInitialiseTaskLists+0x6c>)
 8004bee:	f7fe fcbb 	bl	8003568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bf2:	480c      	ldr	r0, [pc, #48]	; (8004c24 <prvInitialiseTaskLists+0x70>)
 8004bf4:	f7fe fcb8 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bf8:	480b      	ldr	r0, [pc, #44]	; (8004c28 <prvInitialiseTaskLists+0x74>)
 8004bfa:	f7fe fcb5 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <prvInitialiseTaskLists+0x78>)
 8004c00:	4a05      	ldr	r2, [pc, #20]	; (8004c18 <prvInitialiseTaskLists+0x64>)
 8004c02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c04:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <prvInitialiseTaskLists+0x7c>)
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <prvInitialiseTaskLists+0x68>)
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200003f8 	.word	0x200003f8
 8004c18:	20000484 	.word	0x20000484
 8004c1c:	20000498 	.word	0x20000498
 8004c20:	200004b4 	.word	0x200004b4
 8004c24:	200004c8 	.word	0x200004c8
 8004c28:	200004e0 	.word	0x200004e0
 8004c2c:	200004ac 	.word	0x200004ac
 8004c30:	200004b0 	.word	0x200004b0

08004c34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c3a:	e019      	b.n	8004c70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c3c:	f000 fab2 	bl	80051a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c40:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <prvCheckTasksWaitingTermination+0x50>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fe fd15 	bl	800367c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <prvCheckTasksWaitingTermination+0x54>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <prvCheckTasksWaitingTermination+0x54>)
 8004c5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <prvCheckTasksWaitingTermination+0x58>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <prvCheckTasksWaitingTermination+0x58>)
 8004c64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c66:	f000 facd 	bl	8005204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f810 	bl	8004c90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <prvCheckTasksWaitingTermination+0x58>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e1      	bne.n	8004c3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200004c8 	.word	0x200004c8
 8004c88:	200004f4 	.word	0x200004f4
 8004c8c:	200004dc 	.word	0x200004dc

08004c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	334c      	adds	r3, #76	; 0x4c
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fe71 	bl	8005984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d108      	bne.n	8004cbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fc65 	bl	8005580 <vPortFree>
				vPortFree( pxTCB );
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fc62 	bl	8005580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cbc:	e018      	b.n	8004cf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d103      	bne.n	8004cd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fc59 	bl	8005580 <vPortFree>
	}
 8004cce:	e00f      	b.n	8004cf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d00a      	beq.n	8004cf0 <prvDeleteTCB+0x60>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	60fb      	str	r3, [r7, #12]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <prvDeleteTCB+0x5e>
	}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <prvResetNextTaskUnblockTime+0x38>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <prvResetNextTaskUnblockTime+0x3c>)
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d10:	e008      	b.n	8004d24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d12:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <prvResetNextTaskUnblockTime+0x38>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <prvResetNextTaskUnblockTime+0x3c>)
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	200004ac 	.word	0x200004ac
 8004d34:	20000514 	.word	0x20000514

08004d38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <xTaskGetSchedulerState+0x34>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d46:	2301      	movs	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	e008      	b.n	8004d5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <xTaskGetSchedulerState+0x38>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d54:	2302      	movs	r3, #2
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	e001      	b.n	8004d5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d5e:	687b      	ldr	r3, [r7, #4]
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000500 	.word	0x20000500
 8004d70:	2000051c 	.word	0x2000051c

08004d74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d06e      	beq.n	8004e68 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <xTaskPriorityDisinherit+0x100>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d00a      	beq.n	8004daa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60fb      	str	r3, [r7, #12]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60bb      	str	r3, [r7, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d044      	beq.n	8004e68 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d140      	bne.n	8004e68 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fc46 	bl	800367c <uxListRemove>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d115      	bne.n	8004e22 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	491f      	ldr	r1, [pc, #124]	; (8004e78 <xTaskPriorityDisinherit+0x104>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xTaskPriorityDisinherit+0xae>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2201      	movs	r2, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <xTaskPriorityDisinherit+0x108>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <xTaskPriorityDisinherit+0x108>)
 8004e20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	f1c3 0207 	rsb	r2, r3, #7
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <xTaskPriorityDisinherit+0x108>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <xTaskPriorityDisinherit+0x108>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <xTaskPriorityDisinherit+0x104>)
 8004e56:	441a      	add	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7fe fbaf 	bl	80035c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e68:	697b      	ldr	r3, [r7, #20]
	}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200003f4 	.word	0x200003f4
 8004e78:	200003f8 	.word	0x200003f8
 8004e7c:	200004fc 	.word	0x200004fc

08004e80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e8a:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fbf0 	bl	800367c <uxListRemove>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ea2:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	4a20      	ldr	r2, [pc, #128]	; (8004f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004eb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d10a      	bne.n	8004ed8 <prvAddCurrentTaskToDelayedList+0x58>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	481a      	ldr	r0, [pc, #104]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ed2:	f7fe fb76 	bl	80035c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ed6:	e026      	b.n	8004f26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ee0:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d209      	bcs.n	8004f04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef0:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f7fe fb84 	bl	800360a <vListInsert>
}
 8004f02:	e010      	b.n	8004f26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7fe fb7a 	bl	800360a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d202      	bcs.n	8004f26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6013      	str	r3, [r2, #0]
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	200004f8 	.word	0x200004f8
 8004f34:	200003f4 	.word	0x200003f4
 8004f38:	200004fc 	.word	0x200004fc
 8004f3c:	200004e0 	.word	0x200004e0
 8004f40:	200004b0 	.word	0x200004b0
 8004f44:	200004ac 	.word	0x200004ac
 8004f48:	20000514 	.word	0x20000514

08004f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <pxPortInitialiseStack+0x64>)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b14      	subs	r3, #20
 8004f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b04      	subs	r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f06f 0202 	mvn.w	r2, #2
 8004f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b20      	subs	r3, #32
 8004fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	08004fb5 	.word	0x08004fb5

08004fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fbe:	4b12      	ldr	r3, [pc, #72]	; (8005008 <prvTaskExitError+0x54>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d00a      	beq.n	8004fde <prvTaskExitError+0x2a>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60fb      	str	r3, [r7, #12]
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <prvTaskExitError+0x28>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60bb      	str	r3, [r7, #8]
}
 8004ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ff2:	bf00      	nop
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0fc      	beq.n	8004ff4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	20000014 	.word	0x20000014
 800500c:	00000000 	.word	0x00000000

08005010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <pxCurrentTCBConst2>)
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	6808      	ldr	r0, [r1, #0]
 8005016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	f380 8809 	msr	PSP, r0
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8811 	msr	BASEPRI, r0
 800502a:	4770      	bx	lr
 800502c:	f3af 8000 	nop.w

08005030 <pxCurrentTCBConst2>:
 8005030:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005038:	4808      	ldr	r0, [pc, #32]	; (800505c <prvPortStartFirstTask+0x24>)
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	6800      	ldr	r0, [r0, #0]
 800503e:	f380 8808 	msr	MSP, r0
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8814 	msr	CONTROL, r0
 800504a:	b662      	cpsie	i
 800504c:	b661      	cpsie	f
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	df00      	svc	0
 8005058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800505a:	bf00      	nop
 800505c:	e000ed08 	.word	0xe000ed08

08005060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005066:	4b46      	ldr	r3, [pc, #280]	; (8005180 <xPortStartScheduler+0x120>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a46      	ldr	r2, [pc, #280]	; (8005184 <xPortStartScheduler+0x124>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10a      	bne.n	8005086 <xPortStartScheduler+0x26>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	613b      	str	r3, [r7, #16]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <xPortStartScheduler+0x120>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3f      	ldr	r2, [pc, #252]	; (8005188 <xPortStartScheduler+0x128>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10a      	bne.n	80050a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050a6:	4b39      	ldr	r3, [pc, #228]	; (800518c <xPortStartScheduler+0x12c>)
 80050a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	22ff      	movs	r2, #255	; 0xff
 80050b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b31      	ldr	r3, [pc, #196]	; (8005190 <xPortStartScheduler+0x130>)
 80050cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ce:	4b31      	ldr	r3, [pc, #196]	; (8005194 <xPortStartScheduler+0x134>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050d4:	e009      	b.n	80050ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050d6:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <xPortStartScheduler+0x134>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3b01      	subs	r3, #1
 80050dc:	4a2d      	ldr	r2, [pc, #180]	; (8005194 <xPortStartScheduler+0x134>)
 80050de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b80      	cmp	r3, #128	; 0x80
 80050f4:	d0ef      	beq.n	80050d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050f6:	4b27      	ldr	r3, [pc, #156]	; (8005194 <xPortStartScheduler+0x134>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1c3 0307 	rsb	r3, r3, #7
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d00a      	beq.n	8005118 <xPortStartScheduler+0xb8>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60bb      	str	r3, [r7, #8]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005118:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <xPortStartScheduler+0x134>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <xPortStartScheduler+0x134>)
 8005120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <xPortStartScheduler+0x134>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800512a:	4a1a      	ldr	r2, [pc, #104]	; (8005194 <xPortStartScheduler+0x134>)
 800512c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005136:	4b18      	ldr	r3, [pc, #96]	; (8005198 <xPortStartScheduler+0x138>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <xPortStartScheduler+0x138>)
 800513c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <xPortStartScheduler+0x138>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a14      	ldr	r2, [pc, #80]	; (8005198 <xPortStartScheduler+0x138>)
 8005148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800514c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800514e:	f000 f8dd 	bl	800530c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <xPortStartScheduler+0x13c>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005158:	f000 f8fc 	bl	8005354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800515c:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <xPortStartScheduler+0x140>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <xPortStartScheduler+0x140>)
 8005162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005168:	f7ff ff66 	bl	8005038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800516c:	f7ff fb9e 	bl	80048ac <vTaskSwitchContext>
	prvTaskExitError();
 8005170:	f7ff ff20 	bl	8004fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	e000ed00 	.word	0xe000ed00
 8005184:	410fc271 	.word	0x410fc271
 8005188:	410fc270 	.word	0x410fc270
 800518c:	e000e400 	.word	0xe000e400
 8005190:	20000520 	.word	0x20000520
 8005194:	20000524 	.word	0x20000524
 8005198:	e000ed20 	.word	0xe000ed20
 800519c:	20000014 	.word	0x20000014
 80051a0:	e000ef34 	.word	0xe000ef34

080051a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	607b      	str	r3, [r7, #4]
}
 80051bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <vPortEnterCritical+0x58>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <vPortEnterCritical+0x58>)
 80051c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <vPortEnterCritical+0x58>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10f      	bne.n	80051f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <vPortEnterCritical+0x5c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	603b      	str	r3, [r7, #0]
}
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <vPortEnterCritical+0x4a>
	}
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000014 	.word	0x20000014
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <vPortExitCritical+0x50>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <vPortExitCritical+0x24>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	607b      	str	r3, [r7, #4]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <vPortExitCritical+0x50>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3b01      	subs	r3, #1
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <vPortExitCritical+0x50>)
 8005230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <vPortExitCritical+0x50>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d105      	bne.n	8005246 <vPortExitCritical+0x42>
 800523a:	2300      	movs	r3, #0
 800523c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f383 8811 	msr	BASEPRI, r3
}
 8005244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000014 	.word	0x20000014
	...

08005260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005260:	f3ef 8009 	mrs	r0, PSP
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <pxCurrentTCBConst>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	f01e 0f10 	tst.w	lr, #16
 8005270:	bf08      	it	eq
 8005272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	6010      	str	r0, [r2, #0]
 800527c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005284:	f380 8811 	msr	BASEPRI, r0
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f7ff fb0c 	bl	80048ac <vTaskSwitchContext>
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f380 8811 	msr	BASEPRI, r0
 800529c:	bc09      	pop	{r0, r3}
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	6808      	ldr	r0, [r1, #0]
 80052a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a6:	f01e 0f10 	tst.w	lr, #16
 80052aa:	bf08      	it	eq
 80052ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052b0:	f380 8809 	msr	PSP, r0
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	f3af 8000 	nop.w

080052c0 <pxCurrentTCBConst>:
 80052c0:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052e2:	f7ff fa2b 	bl	800473c <xTaskIncrementTick>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <SysTick_Handler+0x40>)
 80052ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	2300      	movs	r3, #0
 80052f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f383 8811 	msr	BASEPRI, r3
}
 80052fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <vPortSetupTimerInterrupt+0x34>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <vPortSetupTimerInterrupt+0x38>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <vPortSetupTimerInterrupt+0x3c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <vPortSetupTimerInterrupt+0x40>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <vPortSetupTimerInterrupt+0x44>)
 800532a:	3b01      	subs	r3, #1
 800532c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <vPortSetupTimerInterrupt+0x34>)
 8005330:	2207      	movs	r2, #7
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e010 	.word	0xe000e010
 8005344:	e000e018 	.word	0xe000e018
 8005348:	20000008 	.word	0x20000008
 800534c:	10624dd3 	.word	0x10624dd3
 8005350:	e000e014 	.word	0xe000e014

08005354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005364 <vPortEnableVFP+0x10>
 8005358:	6801      	ldr	r1, [r0, #0]
 800535a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800535e:	6001      	str	r1, [r0, #0]
 8005360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005362:	bf00      	nop
 8005364:	e000ed88 	.word	0xe000ed88

08005368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800536e:	f3ef 8305 	mrs	r3, IPSR
 8005372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b0f      	cmp	r3, #15
 8005378:	d914      	bls.n	80053a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800537a:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <vPortValidateInterruptPriority+0x70>)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005384:	4b15      	ldr	r3, [pc, #84]	; (80053dc <vPortValidateInterruptPriority+0x74>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	7afa      	ldrb	r2, [r7, #11]
 800538a:	429a      	cmp	r2, r3
 800538c:	d20a      	bcs.n	80053a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <vPortValidateInterruptPriority+0x78>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053ac:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <vPortValidateInterruptPriority+0x7c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d90a      	bls.n	80053ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	603b      	str	r3, [r7, #0]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <vPortValidateInterruptPriority+0x60>
	}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	e000e3f0 	.word	0xe000e3f0
 80053dc:	20000520 	.word	0x20000520
 80053e0:	e000ed0c 	.word	0xe000ed0c
 80053e4:	20000524 	.word	0x20000524

080053e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053f4:	f7ff f8f8 	bl	80045e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053f8:	4b5b      	ldr	r3, [pc, #364]	; (8005568 <pvPortMalloc+0x180>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005400:	f000 f920 	bl	8005644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005404:	4b59      	ldr	r3, [pc, #356]	; (800556c <pvPortMalloc+0x184>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8093 	bne.w	8005538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01d      	beq.n	8005454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005418:	2208      	movs	r2, #8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	3308      	adds	r3, #8
 8005432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <pvPortMalloc+0x6c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	617b      	str	r3, [r7, #20]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d06e      	beq.n	8005538 <pvPortMalloc+0x150>
 800545a:	4b45      	ldr	r3, [pc, #276]	; (8005570 <pvPortMalloc+0x188>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d869      	bhi.n	8005538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005464:	4b43      	ldr	r3, [pc, #268]	; (8005574 <pvPortMalloc+0x18c>)
 8005466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005468:	4b42      	ldr	r3, [pc, #264]	; (8005574 <pvPortMalloc+0x18c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800546e:	e004      	b.n	800547a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <pvPortMalloc+0xa4>
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f1      	bne.n	8005470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <pvPortMalloc+0x180>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	429a      	cmp	r2, r3
 8005494:	d050      	beq.n	8005538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2208      	movs	r2, #8
 800549c:	4413      	add	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	2308      	movs	r3, #8
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d91f      	bls.n	80054f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <pvPortMalloc+0xf8>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	613b      	str	r3, [r7, #16]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054f2:	69b8      	ldr	r0, [r7, #24]
 80054f4:	f000 f908 	bl	8005708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054f8:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <pvPortMalloc+0x188>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <pvPortMalloc+0x188>)
 8005504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005506:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <pvPortMalloc+0x188>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <pvPortMalloc+0x190>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d203      	bcs.n	800551a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005512:	4b17      	ldr	r3, [pc, #92]	; (8005570 <pvPortMalloc+0x188>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <pvPortMalloc+0x190>)
 8005518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <pvPortMalloc+0x184>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	431a      	orrs	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <pvPortMalloc+0x194>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <pvPortMalloc+0x194>)
 8005536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005538:	f7ff f864 	bl	8004604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <pvPortMalloc+0x174>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60fb      	str	r3, [r7, #12]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <pvPortMalloc+0x172>
	return pvReturn;
 800555c:	69fb      	ldr	r3, [r7, #28]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20004130 	.word	0x20004130
 800556c:	20004144 	.word	0x20004144
 8005570:	20004134 	.word	0x20004134
 8005574:	20004128 	.word	0x20004128
 8005578:	20004138 	.word	0x20004138
 800557c:	2000413c 	.word	0x2000413c

08005580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04d      	beq.n	800562e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005592:	2308      	movs	r3, #8
 8005594:	425b      	negs	r3, r3
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <vPortFree+0xb8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <vPortFree+0x44>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60fb      	str	r3, [r7, #12]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <vPortFree+0x62>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60bb      	str	r3, [r7, #8]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <vPortFree+0xb8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01e      	beq.n	800562e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11a      	bne.n	800562e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <vPortFree+0xb8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005608:	f7fe ffee 	bl	80045e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <vPortFree+0xbc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4413      	add	r3, r2
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <vPortFree+0xbc>)
 8005618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f000 f874 	bl	8005708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <vPortFree+0xc0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a06      	ldr	r2, [pc, #24]	; (8005640 <vPortFree+0xc0>)
 8005628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800562a:	f7fe ffeb 	bl	8004604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800562e:	bf00      	nop
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20004144 	.word	0x20004144
 800563c:	20004134 	.word	0x20004134
 8005640:	20004140 	.word	0x20004140

08005644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800564a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800564e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005650:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <prvHeapInit+0xac>)
 8005652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3307      	adds	r3, #7
 8005662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <prvHeapInit+0xac>)
 8005674:	4413      	add	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800567c:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <prvHeapInit+0xb0>)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <prvHeapInit+0xb0>)
 8005684:	2200      	movs	r2, #0
 8005686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005690:	2208      	movs	r2, #8
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <prvHeapInit+0xb4>)
 80056a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <prvHeapInit+0xb4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <prvHeapInit+0xb4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <prvHeapInit+0xb4>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <prvHeapInit+0xb8>)
 80056d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <prvHeapInit+0xbc>)
 80056da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <prvHeapInit+0xc0>)
 80056de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000528 	.word	0x20000528
 80056f4:	20004128 	.word	0x20004128
 80056f8:	20004130 	.word	0x20004130
 80056fc:	20004138 	.word	0x20004138
 8005700:	20004134 	.word	0x20004134
 8005704:	20004144 	.word	0x20004144

08005708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005710:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <prvInsertBlockIntoFreeList+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e002      	b.n	800571c <prvInsertBlockIntoFreeList+0x14>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d8f7      	bhi.n	8005716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d108      	bne.n	800574a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	441a      	add	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	441a      	add	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d118      	bne.n	8005790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d00d      	beq.n	8005786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	441a      	add	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e008      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e003      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d002      	beq.n	80057a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20004128 	.word	0x20004128
 80057b8:	20004130 	.word	0x20004130

080057bc <__errno>:
 80057bc:	4b01      	ldr	r3, [pc, #4]	; (80057c4 <__errno+0x8>)
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000018 	.word	0x20000018

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	; (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	; (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	; (800580c <__libc_init_array+0x44>)
 80057dc:	f000 fcf8 	bl	80061d0 <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	08006384 	.word	0x08006384
 8005804:	08006384 	.word	0x08006384
 8005808:	08006384 	.word	0x08006384
 800580c:	08006388 	.word	0x08006388

08005810 <__retarget_lock_acquire_recursive>:
 8005810:	4770      	bx	lr

08005812 <__retarget_lock_release_recursive>:
 8005812:	4770      	bx	lr

08005814 <memcpy>:
 8005814:	440a      	add	r2, r1
 8005816:	4291      	cmp	r1, r2
 8005818:	f100 33ff 	add.w	r3, r0, #4294967295
 800581c:	d100      	bne.n	8005820 <memcpy+0xc>
 800581e:	4770      	bx	lr
 8005820:	b510      	push	{r4, lr}
 8005822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800582a:	4291      	cmp	r1, r2
 800582c:	d1f9      	bne.n	8005822 <memcpy+0xe>
 800582e:	bd10      	pop	{r4, pc}

08005830 <memset>:
 8005830:	4402      	add	r2, r0
 8005832:	4603      	mov	r3, r0
 8005834:	4293      	cmp	r3, r2
 8005836:	d100      	bne.n	800583a <memset+0xa>
 8005838:	4770      	bx	lr
 800583a:	f803 1b01 	strb.w	r1, [r3], #1
 800583e:	e7f9      	b.n	8005834 <memset+0x4>

08005840 <sbrk_aligned>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	4e0e      	ldr	r6, [pc, #56]	; (800587c <sbrk_aligned+0x3c>)
 8005844:	460c      	mov	r4, r1
 8005846:	6831      	ldr	r1, [r6, #0]
 8005848:	4605      	mov	r5, r0
 800584a:	b911      	cbnz	r1, 8005852 <sbrk_aligned+0x12>
 800584c:	f000 f8f6 	bl	8005a3c <_sbrk_r>
 8005850:	6030      	str	r0, [r6, #0]
 8005852:	4621      	mov	r1, r4
 8005854:	4628      	mov	r0, r5
 8005856:	f000 f8f1 	bl	8005a3c <_sbrk_r>
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	d00a      	beq.n	8005874 <sbrk_aligned+0x34>
 800585e:	1cc4      	adds	r4, r0, #3
 8005860:	f024 0403 	bic.w	r4, r4, #3
 8005864:	42a0      	cmp	r0, r4
 8005866:	d007      	beq.n	8005878 <sbrk_aligned+0x38>
 8005868:	1a21      	subs	r1, r4, r0
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f8e6 	bl	8005a3c <_sbrk_r>
 8005870:	3001      	adds	r0, #1
 8005872:	d101      	bne.n	8005878 <sbrk_aligned+0x38>
 8005874:	f04f 34ff 	mov.w	r4, #4294967295
 8005878:	4620      	mov	r0, r4
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	20004150 	.word	0x20004150

08005880 <_malloc_r>:
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	1ccd      	adds	r5, r1, #3
 8005886:	f025 0503 	bic.w	r5, r5, #3
 800588a:	3508      	adds	r5, #8
 800588c:	2d0c      	cmp	r5, #12
 800588e:	bf38      	it	cc
 8005890:	250c      	movcc	r5, #12
 8005892:	2d00      	cmp	r5, #0
 8005894:	4607      	mov	r7, r0
 8005896:	db01      	blt.n	800589c <_malloc_r+0x1c>
 8005898:	42a9      	cmp	r1, r5
 800589a:	d905      	bls.n	80058a8 <_malloc_r+0x28>
 800589c:	230c      	movs	r3, #12
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	2600      	movs	r6, #0
 80058a2:	4630      	mov	r0, r6
 80058a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a8:	4e2e      	ldr	r6, [pc, #184]	; (8005964 <_malloc_r+0xe4>)
 80058aa:	f000 f8f7 	bl	8005a9c <__malloc_lock>
 80058ae:	6833      	ldr	r3, [r6, #0]
 80058b0:	461c      	mov	r4, r3
 80058b2:	bb34      	cbnz	r4, 8005902 <_malloc_r+0x82>
 80058b4:	4629      	mov	r1, r5
 80058b6:	4638      	mov	r0, r7
 80058b8:	f7ff ffc2 	bl	8005840 <sbrk_aligned>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	4604      	mov	r4, r0
 80058c0:	d14d      	bne.n	800595e <_malloc_r+0xde>
 80058c2:	6834      	ldr	r4, [r6, #0]
 80058c4:	4626      	mov	r6, r4
 80058c6:	2e00      	cmp	r6, #0
 80058c8:	d140      	bne.n	800594c <_malloc_r+0xcc>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	4631      	mov	r1, r6
 80058ce:	4638      	mov	r0, r7
 80058d0:	eb04 0803 	add.w	r8, r4, r3
 80058d4:	f000 f8b2 	bl	8005a3c <_sbrk_r>
 80058d8:	4580      	cmp	r8, r0
 80058da:	d13a      	bne.n	8005952 <_malloc_r+0xd2>
 80058dc:	6821      	ldr	r1, [r4, #0]
 80058de:	3503      	adds	r5, #3
 80058e0:	1a6d      	subs	r5, r5, r1
 80058e2:	f025 0503 	bic.w	r5, r5, #3
 80058e6:	3508      	adds	r5, #8
 80058e8:	2d0c      	cmp	r5, #12
 80058ea:	bf38      	it	cc
 80058ec:	250c      	movcc	r5, #12
 80058ee:	4629      	mov	r1, r5
 80058f0:	4638      	mov	r0, r7
 80058f2:	f7ff ffa5 	bl	8005840 <sbrk_aligned>
 80058f6:	3001      	adds	r0, #1
 80058f8:	d02b      	beq.n	8005952 <_malloc_r+0xd2>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	442b      	add	r3, r5
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	e00e      	b.n	8005920 <_malloc_r+0xa0>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	1b52      	subs	r2, r2, r5
 8005906:	d41e      	bmi.n	8005946 <_malloc_r+0xc6>
 8005908:	2a0b      	cmp	r2, #11
 800590a:	d916      	bls.n	800593a <_malloc_r+0xba>
 800590c:	1961      	adds	r1, r4, r5
 800590e:	42a3      	cmp	r3, r4
 8005910:	6025      	str	r5, [r4, #0]
 8005912:	bf18      	it	ne
 8005914:	6059      	strne	r1, [r3, #4]
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	bf08      	it	eq
 800591a:	6031      	streq	r1, [r6, #0]
 800591c:	5162      	str	r2, [r4, r5]
 800591e:	604b      	str	r3, [r1, #4]
 8005920:	4638      	mov	r0, r7
 8005922:	f104 060b 	add.w	r6, r4, #11
 8005926:	f000 f8bf 	bl	8005aa8 <__malloc_unlock>
 800592a:	f026 0607 	bic.w	r6, r6, #7
 800592e:	1d23      	adds	r3, r4, #4
 8005930:	1af2      	subs	r2, r6, r3
 8005932:	d0b6      	beq.n	80058a2 <_malloc_r+0x22>
 8005934:	1b9b      	subs	r3, r3, r6
 8005936:	50a3      	str	r3, [r4, r2]
 8005938:	e7b3      	b.n	80058a2 <_malloc_r+0x22>
 800593a:	6862      	ldr	r2, [r4, #4]
 800593c:	42a3      	cmp	r3, r4
 800593e:	bf0c      	ite	eq
 8005940:	6032      	streq	r2, [r6, #0]
 8005942:	605a      	strne	r2, [r3, #4]
 8005944:	e7ec      	b.n	8005920 <_malloc_r+0xa0>
 8005946:	4623      	mov	r3, r4
 8005948:	6864      	ldr	r4, [r4, #4]
 800594a:	e7b2      	b.n	80058b2 <_malloc_r+0x32>
 800594c:	4634      	mov	r4, r6
 800594e:	6876      	ldr	r6, [r6, #4]
 8005950:	e7b9      	b.n	80058c6 <_malloc_r+0x46>
 8005952:	230c      	movs	r3, #12
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	4638      	mov	r0, r7
 8005958:	f000 f8a6 	bl	8005aa8 <__malloc_unlock>
 800595c:	e7a1      	b.n	80058a2 <_malloc_r+0x22>
 800595e:	6025      	str	r5, [r4, #0]
 8005960:	e7de      	b.n	8005920 <_malloc_r+0xa0>
 8005962:	bf00      	nop
 8005964:	2000414c 	.word	0x2000414c

08005968 <cleanup_glue>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	460c      	mov	r4, r1
 800596c:	6809      	ldr	r1, [r1, #0]
 800596e:	4605      	mov	r5, r0
 8005970:	b109      	cbz	r1, 8005976 <cleanup_glue+0xe>
 8005972:	f7ff fff9 	bl	8005968 <cleanup_glue>
 8005976:	4621      	mov	r1, r4
 8005978:	4628      	mov	r0, r5
 800597a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800597e:	f000 b899 	b.w	8005ab4 <_free_r>
	...

08005984 <_reclaim_reent>:
 8005984:	4b2c      	ldr	r3, [pc, #176]	; (8005a38 <_reclaim_reent+0xb4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4283      	cmp	r3, r0
 800598a:	b570      	push	{r4, r5, r6, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	d051      	beq.n	8005a34 <_reclaim_reent+0xb0>
 8005990:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005992:	b143      	cbz	r3, 80059a6 <_reclaim_reent+0x22>
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d14a      	bne.n	8005a30 <_reclaim_reent+0xac>
 800599a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	b111      	cbz	r1, 80059a6 <_reclaim_reent+0x22>
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f887 	bl	8005ab4 <_free_r>
 80059a6:	6961      	ldr	r1, [r4, #20]
 80059a8:	b111      	cbz	r1, 80059b0 <_reclaim_reent+0x2c>
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 f882 	bl	8005ab4 <_free_r>
 80059b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059b2:	b111      	cbz	r1, 80059ba <_reclaim_reent+0x36>
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 f87d 	bl	8005ab4 <_free_r>
 80059ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80059bc:	b111      	cbz	r1, 80059c4 <_reclaim_reent+0x40>
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 f878 	bl	8005ab4 <_free_r>
 80059c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80059c6:	b111      	cbz	r1, 80059ce <_reclaim_reent+0x4a>
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 f873 	bl	8005ab4 <_free_r>
 80059ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80059d0:	b111      	cbz	r1, 80059d8 <_reclaim_reent+0x54>
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 f86e 	bl	8005ab4 <_free_r>
 80059d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80059da:	b111      	cbz	r1, 80059e2 <_reclaim_reent+0x5e>
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 f869 	bl	8005ab4 <_free_r>
 80059e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80059e4:	b111      	cbz	r1, 80059ec <_reclaim_reent+0x68>
 80059e6:	4620      	mov	r0, r4
 80059e8:	f000 f864 	bl	8005ab4 <_free_r>
 80059ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ee:	b111      	cbz	r1, 80059f6 <_reclaim_reent+0x72>
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 f85f 	bl	8005ab4 <_free_r>
 80059f6:	69a3      	ldr	r3, [r4, #24]
 80059f8:	b1e3      	cbz	r3, 8005a34 <_reclaim_reent+0xb0>
 80059fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059fc:	4620      	mov	r0, r4
 80059fe:	4798      	blx	r3
 8005a00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a02:	b1b9      	cbz	r1, 8005a34 <_reclaim_reent+0xb0>
 8005a04:	4620      	mov	r0, r4
 8005a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a0a:	f7ff bfad 	b.w	8005968 <cleanup_glue>
 8005a0e:	5949      	ldr	r1, [r1, r5]
 8005a10:	b941      	cbnz	r1, 8005a24 <_reclaim_reent+0xa0>
 8005a12:	3504      	adds	r5, #4
 8005a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a16:	2d80      	cmp	r5, #128	; 0x80
 8005a18:	68d9      	ldr	r1, [r3, #12]
 8005a1a:	d1f8      	bne.n	8005a0e <_reclaim_reent+0x8a>
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 f849 	bl	8005ab4 <_free_r>
 8005a22:	e7ba      	b.n	800599a <_reclaim_reent+0x16>
 8005a24:	680e      	ldr	r6, [r1, #0]
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f844 	bl	8005ab4 <_free_r>
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	e7ef      	b.n	8005a10 <_reclaim_reent+0x8c>
 8005a30:	2500      	movs	r5, #0
 8005a32:	e7ef      	b.n	8005a14 <_reclaim_reent+0x90>
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
 8005a36:	bf00      	nop
 8005a38:	20000018 	.word	0x20000018

08005a3c <_sbrk_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	; (8005a58 <_sbrk_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb f8d0 	bl	8000bec <_sbrk>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_sbrk_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_sbrk_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20004154 	.word	0x20004154

08005a5c <siprintf>:
 8005a5c:	b40e      	push	{r1, r2, r3}
 8005a5e:	b500      	push	{lr}
 8005a60:	b09c      	sub	sp, #112	; 0x70
 8005a62:	ab1d      	add	r3, sp, #116	; 0x74
 8005a64:	9002      	str	r0, [sp, #8]
 8005a66:	9006      	str	r0, [sp, #24]
 8005a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a6c:	4809      	ldr	r0, [pc, #36]	; (8005a94 <siprintf+0x38>)
 8005a6e:	9107      	str	r1, [sp, #28]
 8005a70:	9104      	str	r1, [sp, #16]
 8005a72:	4909      	ldr	r1, [pc, #36]	; (8005a98 <siprintf+0x3c>)
 8005a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a78:	9105      	str	r1, [sp, #20]
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	a902      	add	r1, sp, #8
 8005a80:	f000 f8c0 	bl	8005c04 <_svfiprintf_r>
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	b01c      	add	sp, #112	; 0x70
 8005a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a90:	b003      	add	sp, #12
 8005a92:	4770      	bx	lr
 8005a94:	20000018 	.word	0x20000018
 8005a98:	ffff0208 	.word	0xffff0208

08005a9c <__malloc_lock>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <__malloc_lock+0x8>)
 8005a9e:	f7ff beb7 	b.w	8005810 <__retarget_lock_acquire_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20004148 	.word	0x20004148

08005aa8 <__malloc_unlock>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <__malloc_unlock+0x8>)
 8005aaa:	f7ff beb2 	b.w	8005812 <__retarget_lock_release_recursive>
 8005aae:	bf00      	nop
 8005ab0:	20004148 	.word	0x20004148

08005ab4 <_free_r>:
 8005ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ab6:	2900      	cmp	r1, #0
 8005ab8:	d044      	beq.n	8005b44 <_free_r+0x90>
 8005aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abe:	9001      	str	r0, [sp, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ac6:	bfb8      	it	lt
 8005ac8:	18e4      	addlt	r4, r4, r3
 8005aca:	f7ff ffe7 	bl	8005a9c <__malloc_lock>
 8005ace:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <_free_r+0x94>)
 8005ad0:	9801      	ldr	r0, [sp, #4]
 8005ad2:	6813      	ldr	r3, [r2, #0]
 8005ad4:	b933      	cbnz	r3, 8005ae4 <_free_r+0x30>
 8005ad6:	6063      	str	r3, [r4, #4]
 8005ad8:	6014      	str	r4, [r2, #0]
 8005ada:	b003      	add	sp, #12
 8005adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ae0:	f7ff bfe2 	b.w	8005aa8 <__malloc_unlock>
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	d908      	bls.n	8005afa <_free_r+0x46>
 8005ae8:	6825      	ldr	r5, [r4, #0]
 8005aea:	1961      	adds	r1, r4, r5
 8005aec:	428b      	cmp	r3, r1
 8005aee:	bf01      	itttt	eq
 8005af0:	6819      	ldreq	r1, [r3, #0]
 8005af2:	685b      	ldreq	r3, [r3, #4]
 8005af4:	1949      	addeq	r1, r1, r5
 8005af6:	6021      	streq	r1, [r4, #0]
 8005af8:	e7ed      	b.n	8005ad6 <_free_r+0x22>
 8005afa:	461a      	mov	r2, r3
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	b10b      	cbz	r3, 8005b04 <_free_r+0x50>
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d9fa      	bls.n	8005afa <_free_r+0x46>
 8005b04:	6811      	ldr	r1, [r2, #0]
 8005b06:	1855      	adds	r5, r2, r1
 8005b08:	42a5      	cmp	r5, r4
 8005b0a:	d10b      	bne.n	8005b24 <_free_r+0x70>
 8005b0c:	6824      	ldr	r4, [r4, #0]
 8005b0e:	4421      	add	r1, r4
 8005b10:	1854      	adds	r4, r2, r1
 8005b12:	42a3      	cmp	r3, r4
 8005b14:	6011      	str	r1, [r2, #0]
 8005b16:	d1e0      	bne.n	8005ada <_free_r+0x26>
 8005b18:	681c      	ldr	r4, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	6053      	str	r3, [r2, #4]
 8005b1e:	4421      	add	r1, r4
 8005b20:	6011      	str	r1, [r2, #0]
 8005b22:	e7da      	b.n	8005ada <_free_r+0x26>
 8005b24:	d902      	bls.n	8005b2c <_free_r+0x78>
 8005b26:	230c      	movs	r3, #12
 8005b28:	6003      	str	r3, [r0, #0]
 8005b2a:	e7d6      	b.n	8005ada <_free_r+0x26>
 8005b2c:	6825      	ldr	r5, [r4, #0]
 8005b2e:	1961      	adds	r1, r4, r5
 8005b30:	428b      	cmp	r3, r1
 8005b32:	bf04      	itt	eq
 8005b34:	6819      	ldreq	r1, [r3, #0]
 8005b36:	685b      	ldreq	r3, [r3, #4]
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	bf04      	itt	eq
 8005b3c:	1949      	addeq	r1, r1, r5
 8005b3e:	6021      	streq	r1, [r4, #0]
 8005b40:	6054      	str	r4, [r2, #4]
 8005b42:	e7ca      	b.n	8005ada <_free_r+0x26>
 8005b44:	b003      	add	sp, #12
 8005b46:	bd30      	pop	{r4, r5, pc}
 8005b48:	2000414c 	.word	0x2000414c

08005b4c <__ssputs_r>:
 8005b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	688e      	ldr	r6, [r1, #8]
 8005b52:	429e      	cmp	r6, r3
 8005b54:	4682      	mov	sl, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	4690      	mov	r8, r2
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	d838      	bhi.n	8005bd0 <__ssputs_r+0x84>
 8005b5e:	898a      	ldrh	r2, [r1, #12]
 8005b60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b64:	d032      	beq.n	8005bcc <__ssputs_r+0x80>
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	6909      	ldr	r1, [r1, #16]
 8005b6a:	eba5 0901 	sub.w	r9, r5, r1
 8005b6e:	6965      	ldr	r5, [r4, #20]
 8005b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b78:	3301      	adds	r3, #1
 8005b7a:	444b      	add	r3, r9
 8005b7c:	106d      	asrs	r5, r5, #1
 8005b7e:	429d      	cmp	r5, r3
 8005b80:	bf38      	it	cc
 8005b82:	461d      	movcc	r5, r3
 8005b84:	0553      	lsls	r3, r2, #21
 8005b86:	d531      	bpl.n	8005bec <__ssputs_r+0xa0>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f7ff fe79 	bl	8005880 <_malloc_r>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	b950      	cbnz	r0, 8005ba8 <__ssputs_r+0x5c>
 8005b92:	230c      	movs	r3, #12
 8005b94:	f8ca 3000 	str.w	r3, [sl]
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba8:	6921      	ldr	r1, [r4, #16]
 8005baa:	464a      	mov	r2, r9
 8005bac:	f7ff fe32 	bl	8005814 <memcpy>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	6126      	str	r6, [r4, #16]
 8005bbe:	6165      	str	r5, [r4, #20]
 8005bc0:	444e      	add	r6, r9
 8005bc2:	eba5 0509 	sub.w	r5, r5, r9
 8005bc6:	6026      	str	r6, [r4, #0]
 8005bc8:	60a5      	str	r5, [r4, #8]
 8005bca:	463e      	mov	r6, r7
 8005bcc:	42be      	cmp	r6, r7
 8005bce:	d900      	bls.n	8005bd2 <__ssputs_r+0x86>
 8005bd0:	463e      	mov	r6, r7
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	f000 faa8 	bl	800612c <memmove>
 8005bdc:	68a3      	ldr	r3, [r4, #8]
 8005bde:	1b9b      	subs	r3, r3, r6
 8005be0:	60a3      	str	r3, [r4, #8]
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	4433      	add	r3, r6
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	2000      	movs	r0, #0
 8005bea:	e7db      	b.n	8005ba4 <__ssputs_r+0x58>
 8005bec:	462a      	mov	r2, r5
 8005bee:	f000 fab7 	bl	8006160 <_realloc_r>
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d1e1      	bne.n	8005bbc <__ssputs_r+0x70>
 8005bf8:	6921      	ldr	r1, [r4, #16]
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	f7ff ff5a 	bl	8005ab4 <_free_r>
 8005c00:	e7c7      	b.n	8005b92 <__ssputs_r+0x46>
	...

08005c04 <_svfiprintf_r>:
 8005c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c08:	4698      	mov	r8, r3
 8005c0a:	898b      	ldrh	r3, [r1, #12]
 8005c0c:	061b      	lsls	r3, r3, #24
 8005c0e:	b09d      	sub	sp, #116	; 0x74
 8005c10:	4607      	mov	r7, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	d50e      	bpl.n	8005c36 <_svfiprintf_r+0x32>
 8005c18:	690b      	ldr	r3, [r1, #16]
 8005c1a:	b963      	cbnz	r3, 8005c36 <_svfiprintf_r+0x32>
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	f7ff fe2f 	bl	8005880 <_malloc_r>
 8005c22:	6028      	str	r0, [r5, #0]
 8005c24:	6128      	str	r0, [r5, #16]
 8005c26:	b920      	cbnz	r0, 8005c32 <_svfiprintf_r+0x2e>
 8005c28:	230c      	movs	r3, #12
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e0d1      	b.n	8005dd6 <_svfiprintf_r+0x1d2>
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	616b      	str	r3, [r5, #20]
 8005c36:	2300      	movs	r3, #0
 8005c38:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3a:	2320      	movs	r3, #32
 8005c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c44:	2330      	movs	r3, #48	; 0x30
 8005c46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005df0 <_svfiprintf_r+0x1ec>
 8005c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c4e:	f04f 0901 	mov.w	r9, #1
 8005c52:	4623      	mov	r3, r4
 8005c54:	469a      	mov	sl, r3
 8005c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c5a:	b10a      	cbz	r2, 8005c60 <_svfiprintf_r+0x5c>
 8005c5c:	2a25      	cmp	r2, #37	; 0x25
 8005c5e:	d1f9      	bne.n	8005c54 <_svfiprintf_r+0x50>
 8005c60:	ebba 0b04 	subs.w	fp, sl, r4
 8005c64:	d00b      	beq.n	8005c7e <_svfiprintf_r+0x7a>
 8005c66:	465b      	mov	r3, fp
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f7ff ff6d 	bl	8005b4c <__ssputs_r>
 8005c72:	3001      	adds	r0, #1
 8005c74:	f000 80aa 	beq.w	8005dcc <_svfiprintf_r+0x1c8>
 8005c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7a:	445a      	add	r2, fp
 8005c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80a2 	beq.w	8005dcc <_svfiprintf_r+0x1c8>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c92:	f10a 0a01 	add.w	sl, sl, #1
 8005c96:	9304      	str	r3, [sp, #16]
 8005c98:	9307      	str	r3, [sp, #28]
 8005c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005ca0:	4654      	mov	r4, sl
 8005ca2:	2205      	movs	r2, #5
 8005ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca8:	4851      	ldr	r0, [pc, #324]	; (8005df0 <_svfiprintf_r+0x1ec>)
 8005caa:	f7fa fa99 	bl	80001e0 <memchr>
 8005cae:	9a04      	ldr	r2, [sp, #16]
 8005cb0:	b9d8      	cbnz	r0, 8005cea <_svfiprintf_r+0xe6>
 8005cb2:	06d0      	lsls	r0, r2, #27
 8005cb4:	bf44      	itt	mi
 8005cb6:	2320      	movmi	r3, #32
 8005cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cbc:	0711      	lsls	r1, r2, #28
 8005cbe:	bf44      	itt	mi
 8005cc0:	232b      	movmi	r3, #43	; 0x2b
 8005cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cca:	2b2a      	cmp	r3, #42	; 0x2a
 8005ccc:	d015      	beq.n	8005cfa <_svfiprintf_r+0xf6>
 8005cce:	9a07      	ldr	r2, [sp, #28]
 8005cd0:	4654      	mov	r4, sl
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f04f 0c0a 	mov.w	ip, #10
 8005cd8:	4621      	mov	r1, r4
 8005cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cde:	3b30      	subs	r3, #48	; 0x30
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d94e      	bls.n	8005d82 <_svfiprintf_r+0x17e>
 8005ce4:	b1b0      	cbz	r0, 8005d14 <_svfiprintf_r+0x110>
 8005ce6:	9207      	str	r2, [sp, #28]
 8005ce8:	e014      	b.n	8005d14 <_svfiprintf_r+0x110>
 8005cea:	eba0 0308 	sub.w	r3, r0, r8
 8005cee:	fa09 f303 	lsl.w	r3, r9, r3
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	46a2      	mov	sl, r4
 8005cf8:	e7d2      	b.n	8005ca0 <_svfiprintf_r+0x9c>
 8005cfa:	9b03      	ldr	r3, [sp, #12]
 8005cfc:	1d19      	adds	r1, r3, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	9103      	str	r1, [sp, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bfbb      	ittet	lt
 8005d06:	425b      	neglt	r3, r3
 8005d08:	f042 0202 	orrlt.w	r2, r2, #2
 8005d0c:	9307      	strge	r3, [sp, #28]
 8005d0e:	9307      	strlt	r3, [sp, #28]
 8005d10:	bfb8      	it	lt
 8005d12:	9204      	strlt	r2, [sp, #16]
 8005d14:	7823      	ldrb	r3, [r4, #0]
 8005d16:	2b2e      	cmp	r3, #46	; 0x2e
 8005d18:	d10c      	bne.n	8005d34 <_svfiprintf_r+0x130>
 8005d1a:	7863      	ldrb	r3, [r4, #1]
 8005d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d1e:	d135      	bne.n	8005d8c <_svfiprintf_r+0x188>
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	9203      	str	r2, [sp, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bfb8      	it	lt
 8005d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d30:	3402      	adds	r4, #2
 8005d32:	9305      	str	r3, [sp, #20]
 8005d34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e00 <_svfiprintf_r+0x1fc>
 8005d38:	7821      	ldrb	r1, [r4, #0]
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	4650      	mov	r0, sl
 8005d3e:	f7fa fa4f 	bl	80001e0 <memchr>
 8005d42:	b140      	cbz	r0, 8005d56 <_svfiprintf_r+0x152>
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	eba0 000a 	sub.w	r0, r0, sl
 8005d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d4e:	9b04      	ldr	r3, [sp, #16]
 8005d50:	4303      	orrs	r3, r0
 8005d52:	3401      	adds	r4, #1
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5a:	4826      	ldr	r0, [pc, #152]	; (8005df4 <_svfiprintf_r+0x1f0>)
 8005d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d60:	2206      	movs	r2, #6
 8005d62:	f7fa fa3d 	bl	80001e0 <memchr>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d038      	beq.n	8005ddc <_svfiprintf_r+0x1d8>
 8005d6a:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <_svfiprintf_r+0x1f4>)
 8005d6c:	bb1b      	cbnz	r3, 8005db6 <_svfiprintf_r+0x1b2>
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	3307      	adds	r3, #7
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	3308      	adds	r3, #8
 8005d78:	9303      	str	r3, [sp, #12]
 8005d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7c:	4433      	add	r3, r6
 8005d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d80:	e767      	b.n	8005c52 <_svfiprintf_r+0x4e>
 8005d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d86:	460c      	mov	r4, r1
 8005d88:	2001      	movs	r0, #1
 8005d8a:	e7a5      	b.n	8005cd8 <_svfiprintf_r+0xd4>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	3401      	adds	r4, #1
 8005d90:	9305      	str	r3, [sp, #20]
 8005d92:	4619      	mov	r1, r3
 8005d94:	f04f 0c0a 	mov.w	ip, #10
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d9e:	3a30      	subs	r2, #48	; 0x30
 8005da0:	2a09      	cmp	r2, #9
 8005da2:	d903      	bls.n	8005dac <_svfiprintf_r+0x1a8>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0c5      	beq.n	8005d34 <_svfiprintf_r+0x130>
 8005da8:	9105      	str	r1, [sp, #20]
 8005daa:	e7c3      	b.n	8005d34 <_svfiprintf_r+0x130>
 8005dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005db0:	4604      	mov	r4, r0
 8005db2:	2301      	movs	r3, #1
 8005db4:	e7f0      	b.n	8005d98 <_svfiprintf_r+0x194>
 8005db6:	ab03      	add	r3, sp, #12
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	462a      	mov	r2, r5
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <_svfiprintf_r+0x1f8>)
 8005dbe:	a904      	add	r1, sp, #16
 8005dc0:	4638      	mov	r0, r7
 8005dc2:	f3af 8000 	nop.w
 8005dc6:	1c42      	adds	r2, r0, #1
 8005dc8:	4606      	mov	r6, r0
 8005dca:	d1d6      	bne.n	8005d7a <_svfiprintf_r+0x176>
 8005dcc:	89ab      	ldrh	r3, [r5, #12]
 8005dce:	065b      	lsls	r3, r3, #25
 8005dd0:	f53f af2c 	bmi.w	8005c2c <_svfiprintf_r+0x28>
 8005dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dd6:	b01d      	add	sp, #116	; 0x74
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	ab03      	add	r3, sp, #12
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	462a      	mov	r2, r5
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <_svfiprintf_r+0x1f8>)
 8005de4:	a904      	add	r1, sp, #16
 8005de6:	4638      	mov	r0, r7
 8005de8:	f000 f87a 	bl	8005ee0 <_printf_i>
 8005dec:	e7eb      	b.n	8005dc6 <_svfiprintf_r+0x1c2>
 8005dee:	bf00      	nop
 8005df0:	08006348 	.word	0x08006348
 8005df4:	08006352 	.word	0x08006352
 8005df8:	00000000 	.word	0x00000000
 8005dfc:	08005b4d 	.word	0x08005b4d
 8005e00:	0800634e 	.word	0x0800634e

08005e04 <_printf_common>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4616      	mov	r6, r2
 8005e0a:	4699      	mov	r9, r3
 8005e0c:	688a      	ldr	r2, [r1, #8]
 8005e0e:	690b      	ldr	r3, [r1, #16]
 8005e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	bfb8      	it	lt
 8005e18:	4613      	movlt	r3, r2
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e20:	4607      	mov	r7, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b10a      	cbz	r2, 8005e2a <_printf_common+0x26>
 8005e26:	3301      	adds	r3, #1
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	0699      	lsls	r1, r3, #26
 8005e2e:	bf42      	ittt	mi
 8005e30:	6833      	ldrmi	r3, [r6, #0]
 8005e32:	3302      	addmi	r3, #2
 8005e34:	6033      	strmi	r3, [r6, #0]
 8005e36:	6825      	ldr	r5, [r4, #0]
 8005e38:	f015 0506 	ands.w	r5, r5, #6
 8005e3c:	d106      	bne.n	8005e4c <_printf_common+0x48>
 8005e3e:	f104 0a19 	add.w	sl, r4, #25
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	6832      	ldr	r2, [r6, #0]
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dc26      	bgt.n	8005e9a <_printf_common+0x96>
 8005e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e50:	1e13      	subs	r3, r2, #0
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	bf18      	it	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	0692      	lsls	r2, r2, #26
 8005e5a:	d42b      	bmi.n	8005eb4 <_printf_common+0xb0>
 8005e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e60:	4649      	mov	r1, r9
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d01e      	beq.n	8005ea8 <_printf_common+0xa4>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	68e5      	ldr	r5, [r4, #12]
 8005e6e:	6832      	ldr	r2, [r6, #0]
 8005e70:	f003 0306 	and.w	r3, r3, #6
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	bf08      	it	eq
 8005e78:	1aad      	subeq	r5, r5, r2
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	6922      	ldr	r2, [r4, #16]
 8005e7e:	bf0c      	ite	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	2500      	movne	r5, #0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	bfc4      	itt	gt
 8005e8a:	1a9b      	subgt	r3, r3, r2
 8005e8c:	18ed      	addgt	r5, r5, r3
 8005e8e:	2600      	movs	r6, #0
 8005e90:	341a      	adds	r4, #26
 8005e92:	42b5      	cmp	r5, r6
 8005e94:	d11a      	bne.n	8005ecc <_printf_common+0xc8>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e008      	b.n	8005eac <_printf_common+0xa8>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d103      	bne.n	8005eb0 <_printf_common+0xac>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7c6      	b.n	8005e42 <_printf_common+0x3e>
 8005eb4:	18e1      	adds	r1, r4, r3
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	2030      	movs	r0, #48	; 0x30
 8005eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ebe:	4422      	add	r2, r4
 8005ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec8:	3302      	adds	r3, #2
 8005eca:	e7c7      	b.n	8005e5c <_printf_common+0x58>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c0      	blx	r8
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d0e6      	beq.n	8005ea8 <_printf_common+0xa4>
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7d9      	b.n	8005e92 <_printf_common+0x8e>
	...

08005ee0 <_printf_i>:
 8005ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	7e0f      	ldrb	r7, [r1, #24]
 8005ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ee8:	2f78      	cmp	r7, #120	; 0x78
 8005eea:	4691      	mov	r9, r2
 8005eec:	4680      	mov	r8, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ef6:	d807      	bhi.n	8005f08 <_printf_i+0x28>
 8005ef8:	2f62      	cmp	r7, #98	; 0x62
 8005efa:	d80a      	bhi.n	8005f12 <_printf_i+0x32>
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	f000 80d8 	beq.w	80060b2 <_printf_i+0x1d2>
 8005f02:	2f58      	cmp	r7, #88	; 0x58
 8005f04:	f000 80a3 	beq.w	800604e <_printf_i+0x16e>
 8005f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f10:	e03a      	b.n	8005f88 <_printf_i+0xa8>
 8005f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f16:	2b15      	cmp	r3, #21
 8005f18:	d8f6      	bhi.n	8005f08 <_printf_i+0x28>
 8005f1a:	a101      	add	r1, pc, #4	; (adr r1, 8005f20 <_printf_i+0x40>)
 8005f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	08005f8d 	.word	0x08005f8d
 8005f28:	08005f09 	.word	0x08005f09
 8005f2c:	08005f09 	.word	0x08005f09
 8005f30:	08005f09 	.word	0x08005f09
 8005f34:	08005f09 	.word	0x08005f09
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08005f09 	.word	0x08005f09
 8005f40:	08005f09 	.word	0x08005f09
 8005f44:	08005f09 	.word	0x08005f09
 8005f48:	08005f09 	.word	0x08005f09
 8005f4c:	08006099 	.word	0x08006099
 8005f50:	08005fbd 	.word	0x08005fbd
 8005f54:	0800607b 	.word	0x0800607b
 8005f58:	08005f09 	.word	0x08005f09
 8005f5c:	08005f09 	.word	0x08005f09
 8005f60:	080060bb 	.word	0x080060bb
 8005f64:	08005f09 	.word	0x08005f09
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005f09 	.word	0x08005f09
 8005f70:	08005f09 	.word	0x08005f09
 8005f74:	08006083 	.word	0x08006083
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	602a      	str	r2, [r5, #0]
 8005f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0a3      	b.n	80060d4 <_printf_i+0x1f4>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	6829      	ldr	r1, [r5, #0]
 8005f90:	0606      	lsls	r6, r0, #24
 8005f92:	f101 0304 	add.w	r3, r1, #4
 8005f96:	d50a      	bpl.n	8005fae <_printf_i+0xce>
 8005f98:	680e      	ldr	r6, [r1, #0]
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	da03      	bge.n	8005fa8 <_printf_i+0xc8>
 8005fa0:	232d      	movs	r3, #45	; 0x2d
 8005fa2:	4276      	negs	r6, r6
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa8:	485e      	ldr	r0, [pc, #376]	; (8006124 <_printf_i+0x244>)
 8005faa:	230a      	movs	r3, #10
 8005fac:	e019      	b.n	8005fe2 <_printf_i+0x102>
 8005fae:	680e      	ldr	r6, [r1, #0]
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fb6:	bf18      	it	ne
 8005fb8:	b236      	sxthne	r6, r6
 8005fba:	e7ef      	b.n	8005f9c <_printf_i+0xbc>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	6820      	ldr	r0, [r4, #0]
 8005fc0:	1d19      	adds	r1, r3, #4
 8005fc2:	6029      	str	r1, [r5, #0]
 8005fc4:	0601      	lsls	r1, r0, #24
 8005fc6:	d501      	bpl.n	8005fcc <_printf_i+0xec>
 8005fc8:	681e      	ldr	r6, [r3, #0]
 8005fca:	e002      	b.n	8005fd2 <_printf_i+0xf2>
 8005fcc:	0646      	lsls	r6, r0, #25
 8005fce:	d5fb      	bpl.n	8005fc8 <_printf_i+0xe8>
 8005fd0:	881e      	ldrh	r6, [r3, #0]
 8005fd2:	4854      	ldr	r0, [pc, #336]	; (8006124 <_printf_i+0x244>)
 8005fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2308      	moveq	r3, #8
 8005fda:	230a      	movne	r3, #10
 8005fdc:	2100      	movs	r1, #0
 8005fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe2:	6865      	ldr	r5, [r4, #4]
 8005fe4:	60a5      	str	r5, [r4, #8]
 8005fe6:	2d00      	cmp	r5, #0
 8005fe8:	bfa2      	ittt	ge
 8005fea:	6821      	ldrge	r1, [r4, #0]
 8005fec:	f021 0104 	bicge.w	r1, r1, #4
 8005ff0:	6021      	strge	r1, [r4, #0]
 8005ff2:	b90e      	cbnz	r6, 8005ff8 <_printf_i+0x118>
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	d04d      	beq.n	8006094 <_printf_i+0x1b4>
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8006002:	5dc7      	ldrb	r7, [r0, r7]
 8006004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006008:	4637      	mov	r7, r6
 800600a:	42bb      	cmp	r3, r7
 800600c:	460e      	mov	r6, r1
 800600e:	d9f4      	bls.n	8005ffa <_printf_i+0x11a>
 8006010:	2b08      	cmp	r3, #8
 8006012:	d10b      	bne.n	800602c <_printf_i+0x14c>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	07de      	lsls	r6, r3, #31
 8006018:	d508      	bpl.n	800602c <_printf_i+0x14c>
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	6861      	ldr	r1, [r4, #4]
 800601e:	4299      	cmp	r1, r3
 8006020:	bfde      	ittt	le
 8006022:	2330      	movle	r3, #48	; 0x30
 8006024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800602c:	1b52      	subs	r2, r2, r5
 800602e:	6122      	str	r2, [r4, #16]
 8006030:	f8cd a000 	str.w	sl, [sp]
 8006034:	464b      	mov	r3, r9
 8006036:	aa03      	add	r2, sp, #12
 8006038:	4621      	mov	r1, r4
 800603a:	4640      	mov	r0, r8
 800603c:	f7ff fee2 	bl	8005e04 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	d14c      	bne.n	80060de <_printf_i+0x1fe>
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	b004      	add	sp, #16
 800604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604e:	4835      	ldr	r0, [pc, #212]	; (8006124 <_printf_i+0x244>)
 8006050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006054:	6829      	ldr	r1, [r5, #0]
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f851 6b04 	ldr.w	r6, [r1], #4
 800605c:	6029      	str	r1, [r5, #0]
 800605e:	061d      	lsls	r5, r3, #24
 8006060:	d514      	bpl.n	800608c <_printf_i+0x1ac>
 8006062:	07df      	lsls	r7, r3, #31
 8006064:	bf44      	itt	mi
 8006066:	f043 0320 	orrmi.w	r3, r3, #32
 800606a:	6023      	strmi	r3, [r4, #0]
 800606c:	b91e      	cbnz	r6, 8006076 <_printf_i+0x196>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f023 0320 	bic.w	r3, r3, #32
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	2310      	movs	r3, #16
 8006078:	e7b0      	b.n	8005fdc <_printf_i+0xfc>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f043 0320 	orr.w	r3, r3, #32
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	2378      	movs	r3, #120	; 0x78
 8006084:	4828      	ldr	r0, [pc, #160]	; (8006128 <_printf_i+0x248>)
 8006086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800608a:	e7e3      	b.n	8006054 <_printf_i+0x174>
 800608c:	0659      	lsls	r1, r3, #25
 800608e:	bf48      	it	mi
 8006090:	b2b6      	uxthmi	r6, r6
 8006092:	e7e6      	b.n	8006062 <_printf_i+0x182>
 8006094:	4615      	mov	r5, r2
 8006096:	e7bb      	b.n	8006010 <_printf_i+0x130>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	6826      	ldr	r6, [r4, #0]
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6028      	str	r0, [r5, #0]
 80060a2:	0635      	lsls	r5, r6, #24
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0x1cc>
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0x1d2>
 80060ac:	0670      	lsls	r0, r6, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0x1c8>
 80060b0:	8019      	strh	r1, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	4615      	mov	r5, r2
 80060b8:	e7ba      	b.n	8006030 <_printf_i+0x150>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	681d      	ldr	r5, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	2100      	movs	r1, #0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f7fa f88a 	bl	80001e0 <memchr>
 80060cc:	b108      	cbz	r0, 80060d2 <_printf_i+0x1f2>
 80060ce:	1b40      	subs	r0, r0, r5
 80060d0:	6060      	str	r0, [r4, #4]
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	2300      	movs	r3, #0
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060dc:	e7a8      	b.n	8006030 <_printf_i+0x150>
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	462a      	mov	r2, r5
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0ab      	beq.n	8006044 <_printf_i+0x164>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	d413      	bmi.n	800611a <_printf_i+0x23a>
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bfb8      	it	lt
 80060fa:	4618      	movlt	r0, r3
 80060fc:	e7a4      	b.n	8006048 <_printf_i+0x168>
 80060fe:	2301      	movs	r3, #1
 8006100:	4632      	mov	r2, r6
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d09b      	beq.n	8006044 <_printf_i+0x164>
 800610c:	3501      	adds	r5, #1
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	9903      	ldr	r1, [sp, #12]
 8006112:	1a5b      	subs	r3, r3, r1
 8006114:	42ab      	cmp	r3, r5
 8006116:	dcf2      	bgt.n	80060fe <_printf_i+0x21e>
 8006118:	e7eb      	b.n	80060f2 <_printf_i+0x212>
 800611a:	2500      	movs	r5, #0
 800611c:	f104 0619 	add.w	r6, r4, #25
 8006120:	e7f5      	b.n	800610e <_printf_i+0x22e>
 8006122:	bf00      	nop
 8006124:	08006359 	.word	0x08006359
 8006128:	0800636a 	.word	0x0800636a

0800612c <memmove>:
 800612c:	4288      	cmp	r0, r1
 800612e:	b510      	push	{r4, lr}
 8006130:	eb01 0402 	add.w	r4, r1, r2
 8006134:	d902      	bls.n	800613c <memmove+0x10>
 8006136:	4284      	cmp	r4, r0
 8006138:	4623      	mov	r3, r4
 800613a:	d807      	bhi.n	800614c <memmove+0x20>
 800613c:	1e43      	subs	r3, r0, #1
 800613e:	42a1      	cmp	r1, r4
 8006140:	d008      	beq.n	8006154 <memmove+0x28>
 8006142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800614a:	e7f8      	b.n	800613e <memmove+0x12>
 800614c:	4402      	add	r2, r0
 800614e:	4601      	mov	r1, r0
 8006150:	428a      	cmp	r2, r1
 8006152:	d100      	bne.n	8006156 <memmove+0x2a>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800615a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800615e:	e7f7      	b.n	8006150 <memmove+0x24>

08006160 <_realloc_r>:
 8006160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006164:	4680      	mov	r8, r0
 8006166:	4614      	mov	r4, r2
 8006168:	460e      	mov	r6, r1
 800616a:	b921      	cbnz	r1, 8006176 <_realloc_r+0x16>
 800616c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006170:	4611      	mov	r1, r2
 8006172:	f7ff bb85 	b.w	8005880 <_malloc_r>
 8006176:	b92a      	cbnz	r2, 8006184 <_realloc_r+0x24>
 8006178:	f7ff fc9c 	bl	8005ab4 <_free_r>
 800617c:	4625      	mov	r5, r4
 800617e:	4628      	mov	r0, r5
 8006180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006184:	f000 f81b 	bl	80061be <_malloc_usable_size_r>
 8006188:	4284      	cmp	r4, r0
 800618a:	4607      	mov	r7, r0
 800618c:	d802      	bhi.n	8006194 <_realloc_r+0x34>
 800618e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006192:	d812      	bhi.n	80061ba <_realloc_r+0x5a>
 8006194:	4621      	mov	r1, r4
 8006196:	4640      	mov	r0, r8
 8006198:	f7ff fb72 	bl	8005880 <_malloc_r>
 800619c:	4605      	mov	r5, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0ed      	beq.n	800617e <_realloc_r+0x1e>
 80061a2:	42bc      	cmp	r4, r7
 80061a4:	4622      	mov	r2, r4
 80061a6:	4631      	mov	r1, r6
 80061a8:	bf28      	it	cs
 80061aa:	463a      	movcs	r2, r7
 80061ac:	f7ff fb32 	bl	8005814 <memcpy>
 80061b0:	4631      	mov	r1, r6
 80061b2:	4640      	mov	r0, r8
 80061b4:	f7ff fc7e 	bl	8005ab4 <_free_r>
 80061b8:	e7e1      	b.n	800617e <_realloc_r+0x1e>
 80061ba:	4635      	mov	r5, r6
 80061bc:	e7df      	b.n	800617e <_realloc_r+0x1e>

080061be <_malloc_usable_size_r>:
 80061be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c2:	1f18      	subs	r0, r3, #4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bfbc      	itt	lt
 80061c8:	580b      	ldrlt	r3, [r1, r0]
 80061ca:	18c0      	addlt	r0, r0, r3
 80061cc:	4770      	bx	lr
	...

080061d0 <_init>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	bf00      	nop
 80061d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d6:	bc08      	pop	{r3}
 80061d8:	469e      	mov	lr, r3
 80061da:	4770      	bx	lr

080061dc <_fini>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr
