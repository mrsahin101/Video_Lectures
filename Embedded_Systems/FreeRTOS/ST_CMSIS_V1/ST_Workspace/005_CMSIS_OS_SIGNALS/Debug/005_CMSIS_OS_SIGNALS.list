
005_CMSIS_OS_SIGNALS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043e8  080043e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080043f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040c0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004134  20004134  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dc6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029af  00000000  00000000  00033e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00036820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  00037868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002255e  00000000  00000000  000387b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e93  00000000  00000000  0005ad16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2998  00000000  00000000  0006cba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f541  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046d8  00000000  00000000  0013f594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800430c 	.word	0x0800430c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800430c 	.word	0x0800430c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000090 	.word	0x20000090
 8000514:	20000144 	.word	0x20000144

08000518 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0) {
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d105      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x1c>
	  osSignalSet(ReceiverHandle,0x01);
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_GPIO_EXTI_Callback+0x24>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f002 f936 	bl	80027a0 <osSignalSet>
  }
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000388 	.word	0x20000388

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fa87 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f81d 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8af 	bl	80006b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f883 	bl	800065c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Receiver */
  osThreadDef(Receiver, Receiver1, osPriorityNormal, 0, 128);
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <main+0x40>)
 8000558:	1d3c      	adds	r4, r7, #4
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverHandle = osThreadCreate(osThread(Receiver), NULL);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 f8b6 	bl	80026de <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <main+0x44>)
 8000576:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000578:	f002 f8aa 	bl	80026d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	e7fe      	b.n	800057c <main+0x3c>
 800057e:	bf00      	nop
 8000580:	08004330 	.word	0x08004330
 8000584:	20000388 	.word	0x20000388

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fdee 	bl	8004178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xd0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f8:	2308      	movs	r3, #8
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fcfa 	bl	8001008 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061a:	f000 f8c3 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2105      	movs	r1, #5
 800063c:	4618      	mov	r0, r3
 800063e:	f000 ff5b 	bl	80014f8 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000648:	f000 f8ac 	bl	80007a4 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_USART2_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000694:	f001 fc30 	bl	8001ef8 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 f881 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000344 	.word	0x20000344
 80006ac:	40004400 	.word	0x40004400

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_GPIO_Init+0x80>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_GPIO_Init+0x80>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_GPIO_Init+0x80>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_GPIO_Init+0x80>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <MX_GPIO_Init+0x80>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_GPIO_Init+0x80>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000702:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <MX_GPIO_Init+0x84>)
 8000714:	f000 fac4 	bl	8000ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2105      	movs	r1, #5
 800071c:	2006      	movs	r0, #6
 800071e:	f000 fa95 	bl	8000c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000722:	2006      	movs	r0, #6
 8000724:	f000 faae 	bl	8000c84 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000

08000738 <Receiver1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Receiver1 */
void Receiver1(void const * argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  osEvent eventStatus;
  const char *msg = "Button Pressed\r\n";
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <Receiver1+0x40>)
 8000742:	617b      	str	r3, [r7, #20]
  for(;;)
  {
	eventStatus = osSignalWait(0x01, 0xFFFFFFFF);
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	2101      	movs	r1, #1
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f866 	bl	8002820 <osSignalWait>
	if(eventStatus.status == osEventSignal)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b08      	cmp	r3, #8
 8000758:	d10a      	bne.n	8000770 <Receiver1+0x38>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800075a:	6978      	ldr	r0, [r7, #20]
 800075c:	f7ff fd38 	bl	80001d0 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	b29a      	uxth	r2, r3
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	6979      	ldr	r1, [r7, #20]
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <Receiver1+0x44>)
 800076c:	f001 fc11 	bl	8001f92 <HAL_UART_Transmit>
    osDelay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f002 f800 	bl	8002776 <osDelay>
	eventStatus = osSignalWait(0x01, 0xFFFFFFFF);
 8000776:	e7e5      	b.n	8000744 <Receiver1+0xc>
 8000778:	0800434c 	.word	0x0800434c
 800077c:	20000344 	.word	0x20000344

08000780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 f983 	bl	8000a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40002000 	.word	0x40002000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_MspInit+0x54>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <HAL_MspInit+0x54>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x54>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_MspInit+0x54>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_MspInit+0x54>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_MspInit+0x54>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	210f      	movs	r1, #15
 80007f2:	f06f 0001 	mvn.w	r0, #1
 80007f6:	f000 fa29 	bl	8000c4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <HAL_UART_MspInit+0x84>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d12b      	bne.n	8000882 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_UART_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000862:	230c      	movs	r3, #12
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000872:	2307      	movs	r3, #7
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_UART_MspInit+0x8c>)
 800087e:	f000 fa0f 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40004400 	.word	0x40004400
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4b33      	ldr	r3, [pc, #204]	; (800097c <HAL_InitTick+0xe4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a32      	ldr	r2, [pc, #200]	; (800097c <HAL_InitTick+0xe4>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b30      	ldr	r3, [pc, #192]	; (800097c <HAL_InitTick+0xe4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c4:	f107 0210 	add.w	r2, r7, #16
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f832 	bl	8001938 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008de:	f001 f803 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80008e2:	6378      	str	r0, [r7, #52]	; 0x34
 80008e4:	e004      	b.n	80008f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008e6:	f000 ffff 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80008ea:	4603      	mov	r3, r0
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <HAL_InitTick+0xe8>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	0c9b      	lsrs	r3, r3, #18
 80008fa:	3b01      	subs	r3, #1
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <HAL_InitTick+0xec>)
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <HAL_InitTick+0xf0>)
 8000902:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <HAL_InitTick+0xec>)
 8000906:	f240 32e7 	movw	r2, #999	; 0x3e7
 800090a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800090c:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <HAL_InitTick+0xec>)
 800090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000910:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_InitTick+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_InitTick+0xec>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_InitTick+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000924:	4817      	ldr	r0, [pc, #92]	; (8000984 <HAL_InitTick+0xec>)
 8000926:	f001 f839 	bl	800199c <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000930:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000934:	2b00      	cmp	r3, #0
 8000936:	d11b      	bne.n	8000970 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000938:	4812      	ldr	r0, [pc, #72]	; (8000984 <HAL_InitTick+0xec>)
 800093a:	f001 f889 	bl	8001a50 <HAL_TIM_Base_Start_IT>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000948:	2b00      	cmp	r3, #0
 800094a:	d111      	bne.n	8000970 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800094c:	202d      	movs	r0, #45	; 0x2d
 800094e:	f000 f999 	bl	8000c84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d808      	bhi.n	800096a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	202d      	movs	r0, #45	; 0x2d
 800095e:	f000 f975 	bl	8000c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_InitTick+0xf4>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e002      	b.n	8000970 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000974:	4618      	mov	r0, r3
 8000976:	3738      	adds	r7, #56	; 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	431bde83 	.word	0x431bde83
 8000984:	2000038c 	.word	0x2000038c
 8000988:	40002000 	.word	0x40002000
 800098c:	20000004 	.word	0x20000004

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f000 fb09 	bl	8000fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009d2:	f001 f8ad 	bl	8001b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000038c 	.word	0x2000038c

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f003 fb7b 	bl	800412c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fd83 	bl	8000540 <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a48:	080043f0 	.word	0x080043f0
  ldr r2, =_sbss
 8000a4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a50:	20004134 	.word	0x20004134

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_Init+0x40>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_Init+0x40>)
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x40>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f8d8 	bl	8000c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f7ff ff06 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fe90 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200003d4 	.word	0x200003d4

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200003d4 	.word	0x200003d4

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff4c 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5e:	f7ff ff61 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f7ff ffb1 	bl	8000bd0 <NVIC_EncodePriority>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff80 	bl	8000b7c <__NVIC_SetPriority>
}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff54 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e16b      	b.n	8000f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 815a 	bne.w	8000f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d005      	beq.n	8000cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80b4 	beq.w	8000f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b60      	ldr	r3, [pc, #384]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a5f      	ldr	r2, [pc, #380]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a5b      	ldr	r2, [pc, #364]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a51      	ldr	r2, [pc, #324]	; (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x222>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x21e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_GPIO_Init+0x328>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x32c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eaa:	2308      	movs	r3, #8
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0a:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f ae90 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40021c00 	.word	0x40021c00
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fa8e 	bl	8000518 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40013c00 	.word	0x40013c00

08001008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e267      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d075      	beq.n	8001112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001026:	4b88      	ldr	r3, [pc, #544]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b04      	cmp	r3, #4
 8001030:	d00c      	beq.n	800104c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001032:	4b85      	ldr	r3, [pc, #532]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103a:	2b08      	cmp	r3, #8
 800103c:	d112      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	4b82      	ldr	r3, [pc, #520]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800104a:	d10b      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	4b7e      	ldr	r3, [pc, #504]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d05b      	beq.n	8001110 <HAL_RCC_OscConfig+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d157      	bne.n	8001110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e242      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d106      	bne.n	800107c <HAL_RCC_OscConfig+0x74>
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e01d      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b70      	ldr	r3, [pc, #448]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6c      	ldr	r2, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a68      	ldr	r2, [pc, #416]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a65      	ldr	r2, [pc, #404]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fd00 	bl	8000ac4 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fcfc 	bl	8000ac4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e207      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xc0>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fcec 	bl	8000ac4 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fce8 	bl	8000ac4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1f3      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b51      	ldr	r3, [pc, #324]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0xe8>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001132:	2b08      	cmp	r3, #8
 8001134:	d11c      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1c7      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e03a      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_RCC_OscConfig+0x244>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117e:	f7ff fca1 	bl	8000ac4 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fc9d 	bl	8000ac4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a8      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4925      	ldr	r1, [pc, #148]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_RCC_OscConfig+0x244>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc80 	bl	8000ac4 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc7c 	bl	8000ac4 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e187      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d036      	beq.n	8001260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d016      	beq.n	8001228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_RCC_OscConfig+0x248>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001200:	f7ff fc60 	bl	8000ac4 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fc5c 	bl	8000ac4 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e167      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800121c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x200>
 8001226:	e01b      	b.n	8001260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_OscConfig+0x248>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fc49 	bl	8000ac4 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001234:	e00e      	b.n	8001254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001236:	f7ff fc45 	bl	8000ac4 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d907      	bls.n	8001254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e150      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001248:	40023800 	.word	0x40023800
 800124c:	42470000 	.word	0x42470000
 8001250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ea      	bne.n	8001236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8097 	beq.w	800139c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a7c      	ldr	r2, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b77      	ldr	r3, [pc, #476]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a73      	ldr	r2, [pc, #460]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fc05 	bl	8000ac4 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fc01 	bl	8000ac4 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e10c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2ea>
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e8:	4a63      	ldr	r2, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	; 0x70
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x30c>
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fe:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6713      	str	r3, [r2, #112]	; 0x70
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130a:	4a5b      	ldr	r2, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6713      	str	r3, [r2, #112]	; 0x70
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 8001314:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a57      	ldr	r2, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	4a54      	ldr	r2, [pc, #336]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d015      	beq.n	8001360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001334:	f7ff fbc6 	bl	8000ac4 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fbc2 	bl	8000ac4 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0cb      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0ee      	beq.n	800133c <HAL_RCC_OscConfig+0x334>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fbb0 	bl	8000ac4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001368:	f7ff fbac 	bl	8000ac4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0b5      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ee      	bne.n	8001368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a38      	ldr	r2, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a1 	beq.w	80014e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d05c      	beq.n	800146c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d141      	bne.n	800143e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb80 	bl	8000ac4 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fb7c 	bl	8000ac4 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e087      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69da      	ldr	r2, [r3, #28]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	491b      	ldr	r1, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb55 	bl	8000ac4 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb51 	bl	8000ac4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e05c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x416>
 800143c:	e054      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fb3e 	bl	8000ac4 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fb3a 	bl	8000ac4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e045      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x444>
 800146a:	e03d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d107      	bne.n	8001484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e038      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000
 8001480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d028      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d121      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d11a      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014bc:	4293      	cmp	r3, r2
 80014be:	d111      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0cc      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d90c      	bls.n	8001534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b8      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800156e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	494d      	ldr	r1, [pc, #308]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d044      	beq.n	8001618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e067      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 0203 	bic.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4934      	ldr	r1, [pc, #208]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e8:	f7ff fa6c 	bl	8000ac4 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff fa68 	bl	8000ac4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e04f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 020c 	and.w	r2, r3, #12
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d1eb      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d20c      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e032      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4916      	ldr	r1, [pc, #88]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167e:	f000 f821 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490a      	ldr	r1, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f8fa 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	08004368 	.word	0x08004368
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b094      	sub	sp, #80	; 0x50
 80016ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
 80016d0:	2300      	movs	r3, #0
 80016d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016d4:	2300      	movs	r3, #0
 80016d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016dc:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d00d      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x40>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f200 80e1 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x34>
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x3a>
 80016f6:	e0db      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80016fc:	e0db      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001702:	e0d8      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	2200      	movs	r2, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
 8001724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
 8001732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001736:	4622      	mov	r2, r4
 8001738:	462b      	mov	r3, r5
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	0159      	lsls	r1, r3, #5
 8001744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001748:	0150      	lsls	r0, r2, #5
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4621      	mov	r1, r4
 8001750:	1a51      	subs	r1, r2, r1
 8001752:	6139      	str	r1, [r7, #16]
 8001754:	4629      	mov	r1, r5
 8001756:	eb63 0301 	sbc.w	r3, r3, r1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001768:	4659      	mov	r1, fp
 800176a:	018b      	lsls	r3, r1, #6
 800176c:	4651      	mov	r1, sl
 800176e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001772:	4651      	mov	r1, sl
 8001774:	018a      	lsls	r2, r1, #6
 8001776:	4651      	mov	r1, sl
 8001778:	ebb2 0801 	subs.w	r8, r2, r1
 800177c:	4659      	mov	r1, fp
 800177e:	eb63 0901 	sbc.w	r9, r3, r1
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800178e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001796:	4690      	mov	r8, r2
 8001798:	4699      	mov	r9, r3
 800179a:	4623      	mov	r3, r4
 800179c:	eb18 0303 	adds.w	r3, r8, r3
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	462b      	mov	r3, r5
 80017a4:	eb49 0303 	adc.w	r3, r9, r3
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017b6:	4629      	mov	r1, r5
 80017b8:	024b      	lsls	r3, r1, #9
 80017ba:	4621      	mov	r1, r4
 80017bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017c0:	4621      	mov	r1, r4
 80017c2:	024a      	lsls	r2, r1, #9
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ca:	2200      	movs	r2, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017d4:	f7fe fd04 	bl	80001e0 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e0:	e058      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	4611      	mov	r1, r2
 80017ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017fc:	4642      	mov	r2, r8
 80017fe:	464b      	mov	r3, r9
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	0159      	lsls	r1, r3, #5
 800180a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180e:	0150      	lsls	r0, r2, #5
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4641      	mov	r1, r8
 8001816:	ebb2 0a01 	subs.w	sl, r2, r1
 800181a:	4649      	mov	r1, r9
 800181c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800182c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001834:	ebb2 040a 	subs.w	r4, r2, sl
 8001838:	eb63 050b 	sbc.w	r5, r3, fp
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	00eb      	lsls	r3, r5, #3
 8001846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184a:	00e2      	lsls	r2, r4, #3
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	4643      	mov	r3, r8
 8001852:	18e3      	adds	r3, r4, r3
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	464b      	mov	r3, r9
 8001858:	eb45 0303 	adc.w	r3, r5, r3
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186a:	4629      	mov	r1, r5
 800186c:	028b      	lsls	r3, r1, #10
 800186e:	4621      	mov	r1, r4
 8001870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001874:	4621      	mov	r1, r4
 8001876:	028a      	lsls	r2, r1, #10
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187e:	2200      	movs	r2, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	61fa      	str	r2, [r7, #28]
 8001884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001888:	f7fe fcaa 	bl	80001e0 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3750      	adds	r7, #80	; 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	007a1200 	.word	0x007a1200

080018d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	08004378 	.word	0x08004378

08001910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001914:	f7ff ffdc 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0b5b      	lsrs	r3, r3, #13
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08004378 	.word	0x08004378

08001938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	220f      	movs	r2, #15
 8001946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_RCC_GetClockConfig+0x60>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0207 	and.w	r2, r3, #7
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	601a      	str	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40023c00 	.word	0x40023c00

0800199c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e041      	b.n	8001a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f839 	bl	8001a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f000 f9d8 	bl	8001d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d001      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e04e      	b.n	8001b06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d022      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x80>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a92:	d01d      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x80>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d018      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x80>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d013      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x80>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00e      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x80>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d009      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x80>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d004      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x80>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d111      	bne.n	8001af4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d010      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af2:	e007      	b.n	8001b04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40000800 	.word	0x40000800
 8001b20:	40000c00 	.word	0x40000c00
 8001b24:	40010400 	.word	0x40010400
 8001b28:	40014000 	.word	0x40014000
 8001b2c:	40001800 	.word	0x40001800

08001b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0202 	mvn.w	r2, #2
 8001b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8ee 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8e0 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8f1 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d122      	bne.n	8001be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d11b      	bne.n	8001be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0204 	mvn.w	r2, #4
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8c4 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8b6 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f8c7 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0208 	mvn.w	r2, #8
 8001c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f89a 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f88c 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f89d 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0210 	mvn.w	r2, #16
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f870 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f862 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f873 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0201 	mvn.w	r2, #1
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fd66 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	2b80      	cmp	r3, #128	; 0x80
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d107      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f902 	bl	8001ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f838 	bl	8001d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d107      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0220 	mvn.w	r2, #32
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8cc 	bl	8001ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <TIM_Base_SetConfig+0x114>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dae:	d00f      	beq.n	8001dd0 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <TIM_Base_SetConfig+0x118>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00b      	beq.n	8001dd0 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <TIM_Base_SetConfig+0x11c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <TIM_Base_SetConfig+0x40>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <TIM_Base_SetConfig+0x120>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <TIM_Base_SetConfig+0x40>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <TIM_Base_SetConfig+0x124>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d108      	bne.n	8001de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <TIM_Base_SetConfig+0x114>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d02b      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d027      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <TIM_Base_SetConfig+0x118>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d023      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <TIM_Base_SetConfig+0x11c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a2a      	ldr	r2, [pc, #168]	; (8001eb0 <TIM_Base_SetConfig+0x120>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01b      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a29      	ldr	r2, [pc, #164]	; (8001eb4 <TIM_Base_SetConfig+0x124>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d017      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <TIM_Base_SetConfig+0x128>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <TIM_Base_SetConfig+0x12c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00f      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <TIM_Base_SetConfig+0x130>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00b      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <TIM_Base_SetConfig+0x134>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <TIM_Base_SetConfig+0x138>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d003      	beq.n	8001e42 <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <TIM_Base_SetConfig+0x13c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d108      	bne.n	8001e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <TIM_Base_SetConfig+0x114>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TIM_Base_SetConfig+0xf8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <TIM_Base_SetConfig+0x124>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d103      	bne.n	8001e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	615a      	str	r2, [r3, #20]
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40010400 	.word	0x40010400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40014400 	.word	0x40014400
 8001ec0:	40014800 	.word	0x40014800
 8001ec4:	40001800 	.word	0x40001800
 8001ec8:	40001c00 	.word	0x40001c00
 8001ecc:	40002000 	.word	0x40002000

08001ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e03f      	b.n	8001f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fc72 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f929 	bl	8002194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b08a      	sub	sp, #40	; 0x28
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d17c      	bne.n	80020ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_UART_Transmit+0x2c>
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e075      	b.n	80020ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_UART_Transmit+0x3e>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e06e      	b.n	80020ae <HAL_UART_Transmit+0x11c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2221      	movs	r2, #33	; 0x21
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fe6:	f7fe fd6d 	bl	8000ac4 <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002000:	d108      	bne.n	8002014 <HAL_UART_Transmit+0x82>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e003      	b.n	800201c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002024:	e02a      	b.n	800207c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f840 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e036      	b.n	80020ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3302      	adds	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e007      	b.n	800206e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1cf      	bne.n	8002026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f810 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e006      	b.n	80020ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b090      	sub	sp, #64	; 0x40
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c6:	e050      	b.n	800216a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d04c      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80020d6:	f7fe fcf5 	bl	8000ac4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d241      	bcs.n	800216a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	330c      	adds	r3, #12
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	e853 3f00 	ldrex	r3, [r3]
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	330c      	adds	r3, #12
 8002104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002106:	637a      	str	r2, [r7, #52]	; 0x34
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800210c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800210e:	e841 2300 	strex	r3, r2, [r1]
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e5      	bne.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3314      	adds	r3, #20
 8002120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	e853 3f00 	ldrex	r3, [r3]
 8002128:	613b      	str	r3, [r7, #16]
   return(result);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3314      	adds	r3, #20
 8002138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800213a:	623a      	str	r2, [r7, #32]
 800213c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	69f9      	ldr	r1, [r7, #28]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	61bb      	str	r3, [r7, #24]
   return(result);
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e5      	bne.n	800211a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e00f      	b.n	800218a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4013      	ands	r3, r2
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	429a      	cmp	r2, r3
 8002186:	d09f      	beq.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3740      	adds	r7, #64	; 0x40
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002198:	b0c0      	sub	sp, #256	; 0x100
 800219a:	af00      	add	r7, sp, #0
 800219c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	68d9      	ldr	r1, [r3, #12]
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	ea40 0301 	orr.w	r3, r0, r1
 80021bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021ec:	f021 010c 	bic.w	r1, r1, #12
 80021f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021fa:	430b      	orrs	r3, r1
 80021fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220e:	6999      	ldr	r1, [r3, #24]
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	ea40 0301 	orr.w	r3, r0, r1
 800221a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b8f      	ldr	r3, [pc, #572]	; (8002460 <UART_SetConfig+0x2cc>)
 8002224:	429a      	cmp	r2, r3
 8002226:	d005      	beq.n	8002234 <UART_SetConfig+0xa0>
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b8d      	ldr	r3, [pc, #564]	; (8002464 <UART_SetConfig+0x2d0>)
 8002230:	429a      	cmp	r2, r3
 8002232:	d104      	bne.n	800223e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002234:	f7ff fb6c 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002238:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800223c:	e003      	b.n	8002246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800223e:	f7ff fb53 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002242:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002250:	f040 810c 	bne.w	800246c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002258:	2200      	movs	r2, #0
 800225a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800225e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002266:	4622      	mov	r2, r4
 8002268:	462b      	mov	r3, r5
 800226a:	1891      	adds	r1, r2, r2
 800226c:	65b9      	str	r1, [r7, #88]	; 0x58
 800226e:	415b      	adcs	r3, r3
 8002270:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002276:	4621      	mov	r1, r4
 8002278:	eb12 0801 	adds.w	r8, r2, r1
 800227c:	4629      	mov	r1, r5
 800227e:	eb43 0901 	adc.w	r9, r3, r1
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002296:	4690      	mov	r8, r2
 8002298:	4699      	mov	r9, r3
 800229a:	4623      	mov	r3, r4
 800229c:	eb18 0303 	adds.w	r3, r8, r3
 80022a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022a4:	462b      	mov	r3, r5
 80022a6:	eb49 0303 	adc.w	r3, r9, r3
 80022aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80022be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80022c2:	460b      	mov	r3, r1
 80022c4:	18db      	adds	r3, r3, r3
 80022c6:	653b      	str	r3, [r7, #80]	; 0x50
 80022c8:	4613      	mov	r3, r2
 80022ca:	eb42 0303 	adc.w	r3, r2, r3
 80022ce:	657b      	str	r3, [r7, #84]	; 0x54
 80022d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022d8:	f7fd ff82 	bl	80001e0 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4b61      	ldr	r3, [pc, #388]	; (8002468 <UART_SetConfig+0x2d4>)
 80022e2:	fba3 2302 	umull	r2, r3, r3, r2
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	011c      	lsls	r4, r3, #4
 80022ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ee:	2200      	movs	r2, #0
 80022f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022fc:	4642      	mov	r2, r8
 80022fe:	464b      	mov	r3, r9
 8002300:	1891      	adds	r1, r2, r2
 8002302:	64b9      	str	r1, [r7, #72]	; 0x48
 8002304:	415b      	adcs	r3, r3
 8002306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800230c:	4641      	mov	r1, r8
 800230e:	eb12 0a01 	adds.w	sl, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb43 0b01 	adc.w	fp, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800232c:	4692      	mov	sl, r2
 800232e:	469b      	mov	fp, r3
 8002330:	4643      	mov	r3, r8
 8002332:	eb1a 0303 	adds.w	r3, sl, r3
 8002336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800233a:	464b      	mov	r3, r9
 800233c:	eb4b 0303 	adc.w	r3, fp, r3
 8002340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002350:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002358:	460b      	mov	r3, r1
 800235a:	18db      	adds	r3, r3, r3
 800235c:	643b      	str	r3, [r7, #64]	; 0x40
 800235e:	4613      	mov	r3, r2
 8002360:	eb42 0303 	adc.w	r3, r2, r3
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
 8002366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800236a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800236e:	f7fd ff37 	bl	80001e0 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4611      	mov	r1, r2
 8002378:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <UART_SetConfig+0x2d4>)
 800237a:	fba3 2301 	umull	r2, r3, r3, r1
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2264      	movs	r2, #100	; 0x64
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	1acb      	subs	r3, r1, r3
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <UART_SetConfig+0x2d4>)
 8002390:	fba3 2302 	umull	r2, r3, r3, r2
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800239c:	441c      	add	r4, r3
 800239e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023a2:	2200      	movs	r2, #0
 80023a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023b0:	4642      	mov	r2, r8
 80023b2:	464b      	mov	r3, r9
 80023b4:	1891      	adds	r1, r2, r2
 80023b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80023b8:	415b      	adcs	r3, r3
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023c0:	4641      	mov	r1, r8
 80023c2:	1851      	adds	r1, r2, r1
 80023c4:	6339      	str	r1, [r7, #48]	; 0x30
 80023c6:	4649      	mov	r1, r9
 80023c8:	414b      	adcs	r3, r1
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80023d8:	4659      	mov	r1, fp
 80023da:	00cb      	lsls	r3, r1, #3
 80023dc:	4651      	mov	r1, sl
 80023de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023e2:	4651      	mov	r1, sl
 80023e4:	00ca      	lsls	r2, r1, #3
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	4642      	mov	r2, r8
 80023ee:	189b      	adds	r3, r3, r2
 80023f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023f4:	464b      	mov	r3, r9
 80023f6:	460a      	mov	r2, r1
 80023f8:	eb42 0303 	adc.w	r3, r2, r3
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800240c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002414:	460b      	mov	r3, r1
 8002416:	18db      	adds	r3, r3, r3
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
 800241a:	4613      	mov	r3, r2
 800241c:	eb42 0303 	adc.w	r3, r2, r3
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800242a:	f7fd fed9 	bl	80001e0 <__aeabi_uldivmod>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <UART_SetConfig+0x2d4>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	2164      	movs	r1, #100	; 0x64
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	3332      	adds	r3, #50	; 0x32
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <UART_SetConfig+0x2d4>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 0207 	and.w	r2, r3, #7
 8002452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4422      	add	r2, r4
 800245a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800245c:	e105      	b.n	800266a <UART_SetConfig+0x4d6>
 800245e:	bf00      	nop
 8002460:	40011000 	.word	0x40011000
 8002464:	40011400 	.word	0x40011400
 8002468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800246c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002470:	2200      	movs	r2, #0
 8002472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002476:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800247a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800247e:	4642      	mov	r2, r8
 8002480:	464b      	mov	r3, r9
 8002482:	1891      	adds	r1, r2, r2
 8002484:	6239      	str	r1, [r7, #32]
 8002486:	415b      	adcs	r3, r3
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800248e:	4641      	mov	r1, r8
 8002490:	1854      	adds	r4, r2, r1
 8002492:	4649      	mov	r1, r9
 8002494:	eb43 0501 	adc.w	r5, r3, r1
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	00eb      	lsls	r3, r5, #3
 80024a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a6:	00e2      	lsls	r2, r4, #3
 80024a8:	4614      	mov	r4, r2
 80024aa:	461d      	mov	r5, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	18e3      	adds	r3, r4, r3
 80024b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024b4:	464b      	mov	r3, r9
 80024b6:	eb45 0303 	adc.w	r3, r5, r3
 80024ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024da:	4629      	mov	r1, r5
 80024dc:	008b      	lsls	r3, r1, #2
 80024de:	4621      	mov	r1, r4
 80024e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e4:	4621      	mov	r1, r4
 80024e6:	008a      	lsls	r2, r1, #2
 80024e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80024ec:	f7fd fe78 	bl	80001e0 <__aeabi_uldivmod>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4b60      	ldr	r3, [pc, #384]	; (8002678 <UART_SetConfig+0x4e4>)
 80024f6:	fba3 2302 	umull	r2, r3, r3, r2
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	011c      	lsls	r4, r3, #4
 80024fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002502:	2200      	movs	r2, #0
 8002504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002508:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800250c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002510:	4642      	mov	r2, r8
 8002512:	464b      	mov	r3, r9
 8002514:	1891      	adds	r1, r2, r2
 8002516:	61b9      	str	r1, [r7, #24]
 8002518:	415b      	adcs	r3, r3
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002520:	4641      	mov	r1, r8
 8002522:	1851      	adds	r1, r2, r1
 8002524:	6139      	str	r1, [r7, #16]
 8002526:	4649      	mov	r1, r9
 8002528:	414b      	adcs	r3, r1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002538:	4659      	mov	r1, fp
 800253a:	00cb      	lsls	r3, r1, #3
 800253c:	4651      	mov	r1, sl
 800253e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002542:	4651      	mov	r1, sl
 8002544:	00ca      	lsls	r2, r1, #3
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	4603      	mov	r3, r0
 800254c:	4642      	mov	r2, r8
 800254e:	189b      	adds	r3, r3, r2
 8002550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002554:	464b      	mov	r3, r9
 8002556:	460a      	mov	r2, r1
 8002558:	eb42 0303 	adc.w	r3, r2, r3
 800255c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	67bb      	str	r3, [r7, #120]	; 0x78
 800256a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002578:	4649      	mov	r1, r9
 800257a:	008b      	lsls	r3, r1, #2
 800257c:	4641      	mov	r1, r8
 800257e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002582:	4641      	mov	r1, r8
 8002584:	008a      	lsls	r2, r1, #2
 8002586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800258a:	f7fd fe29 	bl	80001e0 <__aeabi_uldivmod>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <UART_SetConfig+0x4e4>)
 8002594:	fba3 1302 	umull	r1, r3, r3, r2
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	2164      	movs	r1, #100	; 0x64
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	3332      	adds	r3, #50	; 0x32
 80025a6:	4a34      	ldr	r2, [pc, #208]	; (8002678 <UART_SetConfig+0x4e4>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b2:	441c      	add	r4, r3
 80025b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025b8:	2200      	movs	r2, #0
 80025ba:	673b      	str	r3, [r7, #112]	; 0x70
 80025bc:	677a      	str	r2, [r7, #116]	; 0x74
 80025be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80025c2:	4642      	mov	r2, r8
 80025c4:	464b      	mov	r3, r9
 80025c6:	1891      	adds	r1, r2, r2
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	415b      	adcs	r3, r3
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d2:	4641      	mov	r1, r8
 80025d4:	1851      	adds	r1, r2, r1
 80025d6:	6039      	str	r1, [r7, #0]
 80025d8:	4649      	mov	r1, r9
 80025da:	414b      	adcs	r3, r1
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025ea:	4659      	mov	r1, fp
 80025ec:	00cb      	lsls	r3, r1, #3
 80025ee:	4651      	mov	r1, sl
 80025f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f4:	4651      	mov	r1, sl
 80025f6:	00ca      	lsls	r2, r1, #3
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	4642      	mov	r2, r8
 8002600:	189b      	adds	r3, r3, r2
 8002602:	66bb      	str	r3, [r7, #104]	; 0x68
 8002604:	464b      	mov	r3, r9
 8002606:	460a      	mov	r2, r1
 8002608:	eb42 0303 	adc.w	r3, r2, r3
 800260c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	663b      	str	r3, [r7, #96]	; 0x60
 8002618:	667a      	str	r2, [r7, #100]	; 0x64
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002626:	4649      	mov	r1, r9
 8002628:	008b      	lsls	r3, r1, #2
 800262a:	4641      	mov	r1, r8
 800262c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002630:	4641      	mov	r1, r8
 8002632:	008a      	lsls	r2, r1, #2
 8002634:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002638:	f7fd fdd2 	bl	80001e0 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <UART_SetConfig+0x4e4>)
 8002642:	fba3 1302 	umull	r1, r3, r3, r2
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2164      	movs	r1, #100	; 0x64
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	3332      	adds	r3, #50	; 0x32
 8002654:	4a08      	ldr	r2, [pc, #32]	; (8002678 <UART_SetConfig+0x4e4>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4422      	add	r2, r4
 8002668:	609a      	str	r2, [r3, #8]
}
 800266a:	bf00      	nop
 800266c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002676:	bf00      	nop
 8002678:	51eb851f 	.word	0x51eb851f

0800267c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800268a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800268e:	2b84      	cmp	r3, #132	; 0x84
 8002690:	d005      	beq.n	800269e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002692:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	3303      	adds	r3, #3
 800269c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026b2:	f3ef 8305 	mrs	r3, IPSR
 80026b6:	607b      	str	r3, [r7, #4]
  return(result);
 80026b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026d4:	f000 fb82 	bl	8002ddc <vTaskStartScheduler>
  
  return osOK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	bd80      	pop	{r7, pc}

080026de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e0:	b089      	sub	sp, #36	; 0x24
 80026e2:	af04      	add	r7, sp, #16
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <osThreadCreate+0x54>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01c      	beq.n	8002732 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685c      	ldr	r4, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681d      	ldr	r5, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691e      	ldr	r6, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ffb6 	bl	800267c <makeFreeRtosPriority>
 8002710:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800271a:	9202      	str	r2, [sp, #8]
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	9100      	str	r1, [sp, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4632      	mov	r2, r6
 8002724:	4629      	mov	r1, r5
 8002726:	4620      	mov	r0, r4
 8002728:	f000 f97a 	bl	8002a20 <xTaskCreateStatic>
 800272c:	4603      	mov	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e01c      	b.n	800276c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685c      	ldr	r4, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800273e:	b29e      	uxth	r6, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff98 	bl	800267c <makeFreeRtosPriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9200      	str	r2, [sp, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	4632      	mov	r2, r6
 800275a:	4629      	mov	r1, r5
 800275c:	4620      	mov	r0, r4
 800275e:	f000 f9bc 	bl	8002ada <xTaskCreate>
 8002762:	4603      	mov	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d001      	beq.n	800276c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002776 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <osDelay+0x16>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	e000      	b.n	800278e <osDelay+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f000 faf0 	bl	8002d74 <vTaskDelay>
  
  return osOK;
 8002794:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80027b2:	f7ff ff7b 	bl	80026ac <inHandlerMode>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01c      	beq.n	80027f6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	f107 0208 	add.w	r2, r7, #8
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	2201      	movs	r2, #1
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 ff2b 	bl	8003628 <xTaskGenericNotifyFromISR>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d002      	beq.n	80027de <osSignalSet+0x3e>
      return 0x80000000;
 80027d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027dc:	e019      	b.n	8002812 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <osSignalSet+0x70>
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <osSignalSet+0x7c>)
 80027e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	e00c      	b.n	8002810 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	f107 0308 	add.w	r3, r7, #8
 80027fc:	2201      	movs	r2, #1
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fe54 	bl	80034ac <xTaskGenericNotify>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d002      	beq.n	8002810 <osSignalSet+0x70>
    return 0x80000000;
 800280a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800280e:	e000      	b.n	8002812 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002810:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000ed04 	.word	0xe000ed04

08002820 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d103      	bne.n	8002844 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e009      	b.n	8002858 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <osSignalWait+0x38>
      ticks = 1;
 8002854:	2301      	movs	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8002858:	f7ff ff28 	bl	80026ac <inHandlerMode>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8002862:	2382      	movs	r3, #130	; 0x82
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	e01b      	b.n	80028a0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	1d1a      	adds	r2, r3, #4
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2000      	movs	r0, #0
 8002874:	f000 fdba 	bl	80033ec <xTaskNotifyWait>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d008      	beq.n	8002890 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <osSignalWait+0x6a>
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e00a      	b.n	80028a0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800288a:	2340      	movs	r3, #64	; 0x40
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e007      	b.n	80028a0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	da02      	bge.n	800289c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8002896:	2386      	movs	r3, #134	; 0x86
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	e001      	b.n	80028a0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800289c:	2308      	movs	r3, #8
 800289e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	461c      	mov	r4, r3
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	3724      	adds	r7, #36	; 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}

080028b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 0208 	add.w	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f103 0208 	add.w	r2, r3, #8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f103 0208 	add.w	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d103      	bne.n	800297a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e00c      	b.n	8002994 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3308      	adds	r3, #8
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e002      	b.n	8002988 <vListInsert+0x2e>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d2f6      	bcs.n	8002982 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6852      	ldr	r2, [r2, #4]
 80029ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d103      	bne.n	8002a00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1e5a      	subs	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	; 0x38
 8002a24:	af04      	add	r7, sp, #16
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	61fb      	str	r3, [r7, #28]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a66:	23b4      	movs	r3, #180	; 0xb4
 8002a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2bb4      	cmp	r3, #180	; 0xb4
 8002a6e:	d00a      	beq.n	8002a86 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	61bb      	str	r3, [r7, #24]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01e      	beq.n	8002acc <xTaskCreateStatic+0xac>
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9303      	str	r3, [sp, #12]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f850 	bl	8002b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac6:	f000 f8eb 	bl	8002ca0 <prvAddNewTaskToReadyList>
 8002aca:	e001      	b.n	8002ad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ad0:	697b      	ldr	r3, [r7, #20]
	}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b08c      	sub	sp, #48	; 0x30
 8002ade:	af04      	add	r7, sp, #16
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f932 	bl	8003d58 <pvPortMalloc>
 8002af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002afc:	20b4      	movs	r0, #180	; 0xb4
 8002afe:	f001 f92b 	bl	8003d58 <pvPortMalloc>
 8002b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	e005      	b.n	8002b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f001 f9ec 	bl	8003ef0 <vPortFree>
 8002b18:	e001      	b.n	8002b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9303      	str	r3, [sp, #12]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f80e 	bl	8002b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b48:	69f8      	ldr	r0, [r7, #28]
 8002b4a:	f000 f8a9 	bl	8002ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e002      	b.n	8002b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f023 0307 	bic.w	r3, r3, #7
 8002b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <prvInitialiseNewTask+0x48>
	__asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	617b      	str	r3, [r7, #20]
}
 8002ba8:	bf00      	nop
 8002baa:	e7fe      	b.n	8002baa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01f      	beq.n	8002bf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e012      	b.n	8002bde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	7819      	ldrb	r1, [r3, #0]
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3334      	adds	r3, #52	; 0x34
 8002bc8:	460a      	mov	r2, r1
 8002bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	d9e9      	bls.n	8002bb8 <prvInitialiseNewTask+0x54>
 8002be4:	e000      	b.n	8002be8 <prvInitialiseNewTask+0x84>
			{
				break;
 8002be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf0:	e003      	b.n	8002bfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d901      	bls.n	8002c04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c00:	2306      	movs	r3, #6
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	2200      	movs	r2, #0
 8002c14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fe6c 	bl	80028f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	3318      	adds	r3, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fe67 	bl	80028f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	f1c3 0207 	rsb	r2, r3, #7
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	2260      	movs	r2, #96	; 0x60
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 fa8d 	bl	8004178 <memset>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <prvInitialiseNewTask+0x130>)
 8002c62:	651a      	str	r2, [r3, #80]	; 0x50
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <prvInitialiseNewTask+0x134>)
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <prvInitialiseNewTask+0x138>)
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	68f9      	ldr	r1, [r7, #12]
 8002c74:	69b8      	ldr	r0, [r7, #24]
 8002c76:	f000 fe21 	bl	80038bc <pxPortInitialiseStack>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	080043a0 	.word	0x080043a0
 8002c98:	080043c0 	.word	0x080043c0
 8002c9c:	08004380 	.word	0x08004380

08002ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ca8:	f000 ff34 	bl	8003b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <prvAddNewTaskToReadyList+0xb8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <prvAddNewTaskToReadyList+0xb8>)
 8002cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cbe:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <prvAddNewTaskToReadyList+0xb8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d110      	bne.n	8002cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ccc:	f000 facc 	bl	8003268 <prvInitialiseTaskLists>
 8002cd0:	e00d      	b.n	8002cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <prvAddNewTaskToReadyList+0xc0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d802      	bhi.n	8002cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ce8:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <prvAddNewTaskToReadyList+0xc4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <prvAddNewTaskToReadyList+0xc4>)
 8002cf6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <prvAddNewTaskToReadyList+0xc8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <prvAddNewTaskToReadyList+0xc8>)
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <prvAddNewTaskToReadyList+0xcc>)
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7ff fdf6 	bl	8002912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d26:	f000 ff25 	bl	8003b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <prvAddNewTaskToReadyList+0xc0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <prvAddNewTaskToReadyList+0xd0>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200004d8 	.word	0x200004d8
 8002d5c:	200003d8 	.word	0x200003d8
 8002d60:	200004e4 	.word	0x200004e4
 8002d64:	200004f4 	.word	0x200004f4
 8002d68:	200004e0 	.word	0x200004e0
 8002d6c:	200003dc 	.word	0x200003dc
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d017      	beq.n	8002db6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <vTaskDelay+0x60>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <vTaskDelay+0x30>
	__asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	60bb      	str	r3, [r7, #8]
}
 8002da0:	bf00      	nop
 8002da2:	e7fe      	b.n	8002da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002da4:	f000 f884 	bl	8002eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002da8:	2100      	movs	r1, #0
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fd20 	bl	80037f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002db0:	f000 f88c 	bl	8002ecc <xTaskResumeAll>
 8002db4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <vTaskDelay+0x64>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000500 	.word	0x20000500
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dea:	463a      	mov	r2, r7
 8002dec:	1d39      	adds	r1, r7, #4
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fb76 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	460a      	mov	r2, r1
 8002e0a:	4921      	ldr	r1, [pc, #132]	; (8002e90 <vTaskStartScheduler+0xb4>)
 8002e0c:	4821      	ldr	r0, [pc, #132]	; (8002e94 <vTaskStartScheduler+0xb8>)
 8002e0e:	f7ff fe07 	bl	8002a20 <xTaskCreateStatic>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <vTaskStartScheduler+0xbc>)
 8002e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <vTaskStartScheduler+0xbc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e20:	2301      	movs	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e001      	b.n	8002e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11b      	bne.n	8002e68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
}
 8002e42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <vTaskStartScheduler+0xc0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	334c      	adds	r3, #76	; 0x4c
 8002e4a:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <vTaskStartScheduler+0xc4>)
 8002e4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <vTaskStartScheduler+0xc8>)
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <vTaskStartScheduler+0xcc>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <vTaskStartScheduler+0xd0>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e62:	f000 fdb5 	bl	80039d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e66:	e00e      	b.n	8002e86 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d10a      	bne.n	8002e86 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	60fb      	str	r3, [r7, #12]
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <vTaskStartScheduler+0xa8>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	08004360 	.word	0x08004360
 8002e94:	08003239 	.word	0x08003239
 8002e98:	200004fc 	.word	0x200004fc
 8002e9c:	200003d8 	.word	0x200003d8
 8002ea0:	20000010 	.word	0x20000010
 8002ea4:	200004f8 	.word	0x200004f8
 8002ea8:	200004e4 	.word	0x200004e4
 8002eac:	200004dc 	.word	0x200004dc

08002eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <vTaskSuspendAll+0x18>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <vTaskSuspendAll+0x18>)
 8002ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000500 	.word	0x20000500

08002ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	603b      	str	r3, [r7, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ef8:	f000 fe0c 	bl	8003b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002efc:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002f04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d161      	bne.n	8002fd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f0e:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <xTaskResumeAll+0x118>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d05d      	beq.n	8002fd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f16:	e02e      	b.n	8002f76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <xTaskResumeAll+0x11c>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3318      	adds	r3, #24
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fd51 	bl	80029cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fd4c 	bl	80029cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <xTaskResumeAll+0x120>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <xTaskResumeAll+0x120>)
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <xTaskResumeAll+0x124>)
 8002f54:	441a      	add	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f7ff fcd8 	bl	8002912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <xTaskResumeAll+0x128>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <xTaskResumeAll+0x12c>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <xTaskResumeAll+0x11c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1cc      	bne.n	8002f18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f84:	f000 fa12 	bl	80033ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <xTaskResumeAll+0x130>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f94:	f000 f836 	bl	8003004 <xTaskIncrementTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <xTaskResumeAll+0x12c>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f1      	bne.n	8002f94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <xTaskResumeAll+0x130>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <xTaskResumeAll+0x12c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <xTaskResumeAll+0x134>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fd2:	f000 fdcf 	bl	8003b74 <vPortExitCritical>

	return xAlreadyYielded;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000500 	.word	0x20000500
 8002fe4:	200004d8 	.word	0x200004d8
 8002fe8:	20000498 	.word	0x20000498
 8002fec:	200004e0 	.word	0x200004e0
 8002ff0:	200003dc 	.word	0x200003dc
 8002ff4:	200003d8 	.word	0x200003d8
 8002ff8:	200004ec 	.word	0x200004ec
 8002ffc:	200004e8 	.word	0x200004e8
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800300e:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <xTaskIncrementTick+0x144>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 808e 	bne.w	8003134 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <xTaskIncrementTick+0x148>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003020:	4a4a      	ldr	r2, [pc, #296]	; (800314c <xTaskIncrementTick+0x148>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d120      	bne.n	800306e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800302c:	4b48      	ldr	r3, [pc, #288]	; (8003150 <xTaskIncrementTick+0x14c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <xTaskIncrementTick+0x48>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	603b      	str	r3, [r7, #0]
}
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <xTaskIncrementTick+0x46>
 800304c:	4b40      	ldr	r3, [pc, #256]	; (8003150 <xTaskIncrementTick+0x14c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b40      	ldr	r3, [pc, #256]	; (8003154 <xTaskIncrementTick+0x150>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3e      	ldr	r2, [pc, #248]	; (8003150 <xTaskIncrementTick+0x14c>)
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4a3e      	ldr	r2, [pc, #248]	; (8003154 <xTaskIncrementTick+0x150>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <xTaskIncrementTick+0x154>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a3c      	ldr	r2, [pc, #240]	; (8003158 <xTaskIncrementTick+0x154>)
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	f000 f99f 	bl	80033ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <xTaskIncrementTick+0x158>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d348      	bcc.n	800310a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <xTaskIncrementTick+0x14c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <xTaskIncrementTick+0x158>)
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	601a      	str	r2, [r3, #0]
					break;
 800308a:	e03e      	b.n	800310a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308c:	4b30      	ldr	r3, [pc, #192]	; (8003150 <xTaskIncrementTick+0x14c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d203      	bcs.n	80030ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030a4:	4a2d      	ldr	r2, [pc, #180]	; (800315c <xTaskIncrementTick+0x158>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030aa:	e02e      	b.n	800310a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fc8b 	bl	80029cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3318      	adds	r3, #24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fc82 	bl	80029cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <xTaskIncrementTick+0x15c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <xTaskIncrementTick+0x15c>)
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <xTaskIncrementTick+0x160>)
 80030e8:	441a      	add	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7ff fc0e 	bl	8002912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <xTaskIncrementTick+0x164>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	429a      	cmp	r2, r3
 8003102:	d3b9      	bcc.n	8003078 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003108:	e7b6      	b.n	8003078 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <xTaskIncrementTick+0x164>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4914      	ldr	r1, [pc, #80]	; (8003164 <xTaskIncrementTick+0x160>)
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d901      	bls.n	8003126 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <xTaskIncrementTick+0x168>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e004      	b.n	800313e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <xTaskIncrementTick+0x16c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <xTaskIncrementTick+0x16c>)
 800313c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800313e:	697b      	ldr	r3, [r7, #20]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000500 	.word	0x20000500
 800314c:	200004dc 	.word	0x200004dc
 8003150:	20000490 	.word	0x20000490
 8003154:	20000494 	.word	0x20000494
 8003158:	200004f0 	.word	0x200004f0
 800315c:	200004f8 	.word	0x200004f8
 8003160:	200004e0 	.word	0x200004e0
 8003164:	200003dc 	.word	0x200003dc
 8003168:	200003d8 	.word	0x200003d8
 800316c:	200004ec 	.word	0x200004ec
 8003170:	200004e8 	.word	0x200004e8

08003174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <vTaskSwitchContext+0xac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003182:	4b28      	ldr	r3, [pc, #160]	; (8003224 <vTaskSwitchContext+0xb0>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003188:	e044      	b.n	8003214 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <vTaskSwitchContext+0xb0>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <vTaskSwitchContext+0xb4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	f1c3 031f 	rsb	r3, r3, #31
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	4921      	ldr	r1, [pc, #132]	; (800322c <vTaskSwitchContext+0xb8>)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	607b      	str	r3, [r7, #4]
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <vTaskSwitchContext+0x5a>
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <vTaskSwitchContext+0xb8>)
 80031dc:	4413      	add	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3308      	adds	r3, #8
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d104      	bne.n	8003200 <vTaskSwitchContext+0x8c>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <vTaskSwitchContext+0xbc>)
 8003208:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <vTaskSwitchContext+0xbc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	334c      	adds	r3, #76	; 0x4c
 8003210:	4a08      	ldr	r2, [pc, #32]	; (8003234 <vTaskSwitchContext+0xc0>)
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	20000500 	.word	0x20000500
 8003224:	200004ec 	.word	0x200004ec
 8003228:	200004e0 	.word	0x200004e0
 800322c:	200003dc 	.word	0x200003dc
 8003230:	200003d8 	.word	0x200003d8
 8003234:	20000010 	.word	0x20000010

08003238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003240:	f000 f852 	bl	80032e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <prvIdleTask+0x28>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d9f9      	bls.n	8003240 <prvIdleTask+0x8>
			{
				taskYIELD();
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <prvIdleTask+0x2c>)
 800324e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800325c:	e7f0      	b.n	8003240 <prvIdleTask+0x8>
 800325e:	bf00      	nop
 8003260:	200003dc 	.word	0x200003dc
 8003264:	e000ed04 	.word	0xe000ed04

08003268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	e00c      	b.n	800328e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <prvInitialiseTaskLists+0x60>)
 8003280:	4413      	add	r3, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb18 	bl	80028b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b06      	cmp	r3, #6
 8003292:	d9ef      	bls.n	8003274 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003294:	480d      	ldr	r0, [pc, #52]	; (80032cc <prvInitialiseTaskLists+0x64>)
 8003296:	f7ff fb0f 	bl	80028b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800329a:	480d      	ldr	r0, [pc, #52]	; (80032d0 <prvInitialiseTaskLists+0x68>)
 800329c:	f7ff fb0c 	bl	80028b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032a0:	480c      	ldr	r0, [pc, #48]	; (80032d4 <prvInitialiseTaskLists+0x6c>)
 80032a2:	f7ff fb09 	bl	80028b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032a6:	480c      	ldr	r0, [pc, #48]	; (80032d8 <prvInitialiseTaskLists+0x70>)
 80032a8:	f7ff fb06 	bl	80028b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <prvInitialiseTaskLists+0x74>)
 80032ae:	f7ff fb03 	bl	80028b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <prvInitialiseTaskLists+0x78>)
 80032b4:	4a05      	ldr	r2, [pc, #20]	; (80032cc <prvInitialiseTaskLists+0x64>)
 80032b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <prvInitialiseTaskLists+0x7c>)
 80032ba:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <prvInitialiseTaskLists+0x68>)
 80032bc:	601a      	str	r2, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200003dc 	.word	0x200003dc
 80032cc:	20000468 	.word	0x20000468
 80032d0:	2000047c 	.word	0x2000047c
 80032d4:	20000498 	.word	0x20000498
 80032d8:	200004ac 	.word	0x200004ac
 80032dc:	200004c4 	.word	0x200004c4
 80032e0:	20000490 	.word	0x20000490
 80032e4:	20000494 	.word	0x20000494

080032e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ee:	e019      	b.n	8003324 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032f0:	f000 fc10 	bl	8003b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <prvCheckTasksWaitingTermination+0x50>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fb63 	bl	80029cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <prvCheckTasksWaitingTermination+0x54>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3b01      	subs	r3, #1
 800330c:	4a0b      	ldr	r2, [pc, #44]	; (800333c <prvCheckTasksWaitingTermination+0x54>)
 800330e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <prvCheckTasksWaitingTermination+0x58>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3b01      	subs	r3, #1
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <prvCheckTasksWaitingTermination+0x58>)
 8003318:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800331a:	f000 fc2b 	bl	8003b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f810 	bl	8003344 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <prvCheckTasksWaitingTermination+0x58>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e1      	bne.n	80032f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200004ac 	.word	0x200004ac
 800333c:	200004d8 	.word	0x200004d8
 8003340:	200004c0 	.word	0x200004c0

08003344 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	334c      	adds	r3, #76	; 0x4c
 8003350:	4618      	mov	r0, r3
 8003352:	f000 ff27 	bl	80041a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fdc3 	bl	8003ef0 <vPortFree>
				vPortFree( pxTCB );
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fdc0 	bl	8003ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003370:	e018      	b.n	80033a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d103      	bne.n	8003384 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fdb7 	bl	8003ef0 <vPortFree>
	}
 8003382:	e00f      	b.n	80033a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800338a:	2b02      	cmp	r3, #2
 800338c:	d00a      	beq.n	80033a4 <prvDeleteTCB+0x60>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	60fb      	str	r3, [r7, #12]
}
 80033a0:	bf00      	nop
 80033a2:	e7fe      	b.n	80033a2 <prvDeleteTCB+0x5e>
	}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <prvResetNextTaskUnblockTime+0x38>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <prvResetNextTaskUnblockTime+0x3c>)
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033c4:	e008      	b.n	80033d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <prvResetNextTaskUnblockTime+0x38>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <prvResetNextTaskUnblockTime+0x3c>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000490 	.word	0x20000490
 80033e8:	200004f8 	.word	0x200004f8

080033ec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80033fa:	f000 fb8b 	bl	8003b14 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <xTaskNotifyWait+0xb8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d01c      	beq.n	8003446 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <xTaskNotifyWait+0xb8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	43d2      	mvns	r2, r2
 8003418:	400a      	ands	r2, r1
 800341a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <xTaskNotifyWait+0xb8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800342e:	2101      	movs	r1, #1
 8003430:	6838      	ldr	r0, [r7, #0]
 8003432:	f000 f9dd 	bl	80037f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <xTaskNotifyWait+0xbc>)
 8003438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003446:	f000 fb95 	bl	8003b74 <vPortExitCritical>

		taskENTER_CRITICAL();
 800344a:	f000 fb63 	bl	8003b14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <xTaskNotifyWait+0xb8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <xTaskNotifyWait+0xb8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d002      	beq.n	8003474 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e00a      	b.n	800348a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <xTaskNotifyWait+0xb8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	43d2      	mvns	r2, r2
 8003480:	400a      	ands	r2, r1
 8003482:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8003486:	2301      	movs	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <xTaskNotifyWait+0xb8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8003494:	f000 fb6e 	bl	8003b74 <vPortExitCritical>

		return xReturn;
 8003498:	697b      	ldr	r3, [r7, #20]
	}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200003d8 	.word	0x200003d8
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80034bc:	2301      	movs	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <xTaskGenericNotify+0x30>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	61bb      	str	r3, [r7, #24]
}
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80034e0:	f000 fb18 	bl	8003b14 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80034fa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d82d      	bhi.n	8003566 <xTaskGenericNotify+0xba>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <xTaskGenericNotify+0x64>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003589 	.word	0x08003589
 8003514:	08003525 	.word	0x08003525
 8003518:	08003537 	.word	0x08003537
 800351c:	08003547 	.word	0x08003547
 8003520:	08003551 	.word	0x08003551
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	431a      	orrs	r2, r3
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003534:	e02b      	b.n	800358e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003544:	e023      	b.n	800358e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800354e:	e01e      	b.n	800358e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d004      	beq.n	8003560 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800355e:	e016      	b.n	800358e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003564:	e013      	b.n	800358e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d00c      	beq.n	800358c <xTaskGenericNotify+0xe0>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	617b      	str	r3, [r7, #20]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xTaskGenericNotify+0xda>
					break;
 8003588:	bf00      	nop
 800358a:	e000      	b.n	800358e <xTaskGenericNotify+0xe2>

					break;
 800358c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800358e:	7ffb      	ldrb	r3, [r7, #31]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d139      	bne.n	8003608 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	3304      	adds	r3, #4
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fa17 	bl	80029cc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	2201      	movs	r2, #1
 80035a4:	409a      	lsls	r2, r3
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <xTaskGenericNotify+0x16c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <xTaskGenericNotify+0x16c>)
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <xTaskGenericNotify+0x170>)
 80035be:	441a      	add	r2, r3
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f7ff f9a3 	bl	8002912 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <xTaskGenericNotify+0x13e>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	613b      	str	r3, [r7, #16]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <xTaskGenericNotify+0x174>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d907      	bls.n	8003608 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <xTaskGenericNotify+0x178>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003608:	f000 fab4 	bl	8003b74 <vPortExitCritical>

		return xReturn;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200004e0 	.word	0x200004e0
 800361c:	200003dc 	.word	0x200003dc
 8003620:	200003d8 	.word	0x200003d8
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	; 0x38
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003638:	2301      	movs	r3, #1
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003658:	f000 fb3e 	bl	8003cd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003660:	f3ef 8211 	mrs	r2, BASEPRI
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	623a      	str	r2, [r7, #32]
 8003676:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003678:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	2202      	movs	r2, #2
 800369a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d82f      	bhi.n	8003704 <xTaskGenericNotifyFromISR+0xdc>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <xTaskGenericNotifyFromISR+0x84>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	08003727 	.word	0x08003727
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036d3 	.word	0x080036d3
 80036b8:	080036e3 	.word	0x080036e3
 80036bc:	080036ed 	.word	0x080036ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80036d0:	e02c      	b.n	800372c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80036e0:	e024      	b.n	800372c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80036ea:	e01f      	b.n	800372c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80036ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d004      	beq.n	80036fe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80036fc:	e016      	b.n	800372c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80036fe:	2300      	movs	r3, #0
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8003702:	e013      	b.n	800372c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d00c      	beq.n	800372a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	61bb      	str	r3, [r7, #24]
}
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <xTaskGenericNotifyFromISR+0x104>
					break;
 800372a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800372c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003730:	2b01      	cmp	r3, #1
 8003732:	d145      	bne.n	80037c0 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	617b      	str	r3, [r7, #20]
}
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003752:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <xTaskGenericNotifyFromISR+0x1b0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11c      	bne.n	8003794 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	3304      	adds	r3, #4
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f934 	bl	80029cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	409a      	lsls	r2, r3
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <xTaskGenericNotifyFromISR+0x1b4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <xTaskGenericNotifyFromISR+0x1b4>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <xTaskGenericNotifyFromISR+0x1b8>)
 8003784:	441a      	add	r2, r3
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff f8c0 	bl	8002912 <vListInsertEnd>
 8003792:	e005      	b.n	80037a0 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	3318      	adds	r3, #24
 8003798:	4619      	mov	r1, r3
 800379a:	4812      	ldr	r0, [pc, #72]	; (80037e4 <xTaskGenericNotifyFromISR+0x1bc>)
 800379c:	f7ff f8b9 	bl	8002912 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <xTaskGenericNotifyFromISR+0x1c0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d908      	bls.n	80037c0 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80037b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <xTaskGenericNotifyFromISR+0x1c4>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037ca:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3738      	adds	r7, #56	; 0x38
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000500 	.word	0x20000500
 80037dc:	200004e0 	.word	0x200004e0
 80037e0:	200003dc 	.word	0x200003dc
 80037e4:	20000498 	.word	0x20000498
 80037e8:	200003d8 	.word	0x200003d8
 80037ec:	200004ec 	.word	0x200004ec

080037f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3304      	adds	r3, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f8e0 	bl	80029cc <uxListRemove>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2201      	movs	r2, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4013      	ands	r3, r2
 8003826:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003828:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d10a      	bne.n	8003848 <prvAddCurrentTaskToDelayedList+0x58>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	481a      	ldr	r0, [pc, #104]	; (80038ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8003842:	f7ff f866 	bl	8002912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003846:	e026      	b.n	8003896 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	429a      	cmp	r2, r3
 800385e:	d209      	bcs.n	8003874 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f7ff f874 	bl	800295a <vListInsert>
}
 8003872:	e010      	b.n	8003896 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff f86a 	bl	800295a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d202      	bcs.n	8003896 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6013      	str	r3, [r2, #0]
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200004dc 	.word	0x200004dc
 80038a4:	200003d8 	.word	0x200003d8
 80038a8:	200004e0 	.word	0x200004e0
 80038ac:	200004c4 	.word	0x200004c4
 80038b0:	20000494 	.word	0x20000494
 80038b4:	20000490 	.word	0x20000490
 80038b8:	200004f8 	.word	0x200004f8

080038bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3b04      	subs	r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b04      	subs	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b04      	subs	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <pxPortInitialiseStack+0x64>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b14      	subs	r3, #20
 80038f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b04      	subs	r3, #4
 8003902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f06f 0202 	mvn.w	r2, #2
 800390a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3b20      	subs	r3, #32
 8003910:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	08003925 	.word	0x08003925

08003924 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <prvTaskExitError+0x54>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d00a      	beq.n	800394e <prvTaskExitError+0x2a>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	60fb      	str	r3, [r7, #12]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <prvTaskExitError+0x28>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60bb      	str	r3, [r7, #8]
}
 8003960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003962:	bf00      	nop
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0fc      	beq.n	8003964 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	2000000c 	.word	0x2000000c
 800397c:	00000000 	.word	0x00000000

08003980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <pxCurrentTCBConst2>)
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	6808      	ldr	r0, [r1, #0]
 8003986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398a:	f380 8809 	msr	PSP, r0
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f380 8811 	msr	BASEPRI, r0
 800399a:	4770      	bx	lr
 800399c:	f3af 8000 	nop.w

080039a0 <pxCurrentTCBConst2>:
 80039a0:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop

080039a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80039a8:	4808      	ldr	r0, [pc, #32]	; (80039cc <prvPortStartFirstTask+0x24>)
 80039aa:	6800      	ldr	r0, [r0, #0]
 80039ac:	6800      	ldr	r0, [r0, #0]
 80039ae:	f380 8808 	msr	MSP, r0
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f380 8814 	msr	CONTROL, r0
 80039ba:	b662      	cpsie	i
 80039bc:	b661      	cpsie	f
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	df00      	svc	0
 80039c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039ca:	bf00      	nop
 80039cc:	e000ed08 	.word	0xe000ed08

080039d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039d6:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <xPortStartScheduler+0x120>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a46      	ldr	r2, [pc, #280]	; (8003af4 <xPortStartScheduler+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d10a      	bne.n	80039f6 <xPortStartScheduler+0x26>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039f6:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <xPortStartScheduler+0x120>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a3f      	ldr	r2, [pc, #252]	; (8003af8 <xPortStartScheduler+0x128>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10a      	bne.n	8003a16 <xPortStartScheduler+0x46>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	60fb      	str	r3, [r7, #12]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a16:	4b39      	ldr	r3, [pc, #228]	; (8003afc <xPortStartScheduler+0x12c>)
 8003a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	22ff      	movs	r2, #255	; 0xff
 8003a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <xPortStartScheduler+0x130>)
 8003a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a40:	2207      	movs	r2, #7
 8003a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a44:	e009      	b.n	8003a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003a46:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d0ef      	beq.n	8003a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a66:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d00a      	beq.n	8003a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	60bb      	str	r3, [r7, #8]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a88:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a9a:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <xPortStartScheduler+0x134>)
 8003a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003aa6:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <xPortStartScheduler+0x138>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <xPortStartScheduler+0x138>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <xPortStartScheduler+0x138>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <xPortStartScheduler+0x138>)
 8003ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003abe:	f000 f8dd 	bl	8003c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <xPortStartScheduler+0x13c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ac8:	f000 f8fc 	bl	8003cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <xPortStartScheduler+0x140>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <xPortStartScheduler+0x140>)
 8003ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ad8:	f7ff ff66 	bl	80039a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003adc:	f7ff fb4a 	bl	8003174 <vTaskSwitchContext>
	prvTaskExitError();
 8003ae0:	f7ff ff20 	bl	8003924 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000ed00 	.word	0xe000ed00
 8003af4:	410fc271 	.word	0x410fc271
 8003af8:	410fc270 	.word	0x410fc270
 8003afc:	e000e400 	.word	0xe000e400
 8003b00:	20000504 	.word	0x20000504
 8003b04:	20000508 	.word	0x20000508
 8003b08:	e000ed20 	.word	0xe000ed20
 8003b0c:	2000000c 	.word	0x2000000c
 8003b10:	e000ef34 	.word	0xe000ef34

08003b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	607b      	str	r3, [r7, #4]
}
 8003b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <vPortEnterCritical+0x58>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <vPortEnterCritical+0x58>)
 8003b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <vPortEnterCritical+0x58>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10f      	bne.n	8003b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <vPortEnterCritical+0x5c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	603b      	str	r3, [r7, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <vPortEnterCritical+0x4a>
	}
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <vPortExitCritical+0x50>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <vPortExitCritical+0x24>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	607b      	str	r3, [r7, #4]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <vPortExitCritical+0x50>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <vPortExitCritical+0x50>)
 8003ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <vPortExitCritical+0x50>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <vPortExitCritical+0x42>
 8003baa:	2300      	movs	r3, #0
 8003bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
}
 8003bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	2000000c 	.word	0x2000000c
	...

08003bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003bd0:	f3ef 8009 	mrs	r0, PSP
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <pxCurrentTCBConst>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	f01e 0f10 	tst.w	lr, #16
 8003be0:	bf08      	it	eq
 8003be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bea:	6010      	str	r0, [r2, #0]
 8003bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003bf4:	f380 8811 	msr	BASEPRI, r0
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f7ff fab8 	bl	8003174 <vTaskSwitchContext>
 8003c04:	f04f 0000 	mov.w	r0, #0
 8003c08:	f380 8811 	msr	BASEPRI, r0
 8003c0c:	bc09      	pop	{r0, r3}
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	6808      	ldr	r0, [r1, #0]
 8003c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c16:	f01e 0f10 	tst.w	lr, #16
 8003c1a:	bf08      	it	eq
 8003c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c20:	f380 8809 	msr	PSP, r0
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	f3af 8000 	nop.w

08003c30 <pxCurrentTCBConst>:
 8003c30:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop

08003c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	607b      	str	r3, [r7, #4]
}
 8003c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c52:	f7ff f9d7 	bl	8003004 <xTaskIncrementTick>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <SysTick_Handler+0x40>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f383 8811 	msr	BASEPRI, r3
}
 8003c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <vPortSetupTimerInterrupt+0x34>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <vPortSetupTimerInterrupt+0x38>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <vPortSetupTimerInterrupt+0x3c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <vPortSetupTimerInterrupt+0x40>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <vPortSetupTimerInterrupt+0x44>)
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <vPortSetupTimerInterrupt+0x34>)
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	601a      	str	r2, [r3, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	e000e010 	.word	0xe000e010
 8003cb4:	e000e018 	.word	0xe000e018
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	10624dd3 	.word	0x10624dd3
 8003cc0:	e000e014 	.word	0xe000e014

08003cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003cd4 <vPortEnableVFP+0x10>
 8003cc8:	6801      	ldr	r1, [r0, #0]
 8003cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003cce:	6001      	str	r1, [r0, #0]
 8003cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003cd2:	bf00      	nop
 8003cd4:	e000ed88 	.word	0xe000ed88

08003cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003cde:	f3ef 8305 	mrs	r3, IPSR
 8003ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d914      	bls.n	8003d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <vPortValidateInterruptPriority+0x70>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <vPortValidateInterruptPriority+0x74>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	7afa      	ldrb	r2, [r7, #11]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d20a      	bcs.n	8003d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	607b      	str	r3, [r7, #4]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <vPortValidateInterruptPriority+0x78>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <vPortValidateInterruptPriority+0x7c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d90a      	bls.n	8003d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	603b      	str	r3, [r7, #0]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <vPortValidateInterruptPriority+0x60>
	}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000e3f0 	.word	0xe000e3f0
 8003d4c:	20000504 	.word	0x20000504
 8003d50:	e000ed0c 	.word	0xe000ed0c
 8003d54:	20000508 	.word	0x20000508

08003d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d64:	f7ff f8a4 	bl	8002eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d68:	4b5b      	ldr	r3, [pc, #364]	; (8003ed8 <pvPortMalloc+0x180>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d70:	f000 f920 	bl	8003fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <pvPortMalloc+0x184>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 8093 	bne.w	8003ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01d      	beq.n	8003dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d88:	2208      	movs	r2, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d014      	beq.n	8003dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f023 0307 	bic.w	r3, r3, #7
 8003da0:	3308      	adds	r3, #8
 8003da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	617b      	str	r3, [r7, #20]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06e      	beq.n	8003ea8 <pvPortMalloc+0x150>
 8003dca:	4b45      	ldr	r3, [pc, #276]	; (8003ee0 <pvPortMalloc+0x188>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d869      	bhi.n	8003ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <pvPortMalloc+0x18c>)
 8003dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003dd8:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <pvPortMalloc+0x18c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dde:	e004      	b.n	8003dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d903      	bls.n	8003dfc <pvPortMalloc+0xa4>
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f1      	bne.n	8003de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <pvPortMalloc+0x180>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d050      	beq.n	8003ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	4413      	add	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	2308      	movs	r3, #8
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d91f      	bls.n	8003e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <pvPortMalloc+0xf8>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	613b      	str	r3, [r7, #16]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad2      	subs	r2, r2, r3
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e62:	69b8      	ldr	r0, [r7, #24]
 8003e64:	f000 f908 	bl	8004078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <pvPortMalloc+0x190>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d203      	bcs.n	8003e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <pvPortMalloc+0x190>)
 8003e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <pvPortMalloc+0x184>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <pvPortMalloc+0x194>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	4a11      	ldr	r2, [pc, #68]	; (8003eec <pvPortMalloc+0x194>)
 8003ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ea8:	f7ff f810 	bl	8002ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <pvPortMalloc+0x174>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60fb      	str	r3, [r7, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <pvPortMalloc+0x172>
	return pvReturn;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20004114 	.word	0x20004114
 8003edc:	20004128 	.word	0x20004128
 8003ee0:	20004118 	.word	0x20004118
 8003ee4:	2000410c 	.word	0x2000410c
 8003ee8:	2000411c 	.word	0x2000411c
 8003eec:	20004120 	.word	0x20004120

08003ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04d      	beq.n	8003f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f02:	2308      	movs	r3, #8
 8003f04:	425b      	negs	r3, r3
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4413      	add	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <vPortFree+0xb8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <vPortFree+0x44>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60fb      	str	r3, [r7, #12]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <vPortFree+0x62>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	60bb      	str	r3, [r7, #8]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <vPortFree+0xb8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01e      	beq.n	8003f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d11a      	bne.n	8003f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <vPortFree+0xb8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f78:	f7fe ff9a 	bl	8002eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <vPortFree+0xbc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4413      	add	r3, r2
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <vPortFree+0xbc>)
 8003f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f8a:	6938      	ldr	r0, [r7, #16]
 8003f8c:	f000 f874 	bl	8004078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <vPortFree+0xc0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <vPortFree+0xc0>)
 8003f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f9a:	f7fe ff97 	bl	8002ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20004128 	.word	0x20004128
 8003fac:	20004118 	.word	0x20004118
 8003fb0:	20004124 	.word	0x20004124

08003fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <prvHeapInit+0xac>)
 8003fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3307      	adds	r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0307 	bic.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <prvHeapInit+0xac>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <prvHeapInit+0xb0>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <prvHeapInit+0xb0>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004000:	2208      	movs	r2, #8
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <prvHeapInit+0xb4>)
 8004014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvHeapInit+0xb4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <prvHeapInit+0xb4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	1ad2      	subs	r2, r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <prvHeapInit+0xb4>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <prvHeapInit+0xb8>)
 8004042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <prvHeapInit+0xbc>)
 800404a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <prvHeapInit+0xc0>)
 800404e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004052:	601a      	str	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	2000050c 	.word	0x2000050c
 8004064:	2000410c 	.word	0x2000410c
 8004068:	20004114 	.word	0x20004114
 800406c:	2000411c 	.word	0x2000411c
 8004070:	20004118 	.word	0x20004118
 8004074:	20004128 	.word	0x20004128

08004078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004080:	4b28      	ldr	r3, [pc, #160]	; (8004124 <prvInsertBlockIntoFreeList+0xac>)
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e002      	b.n	800408c <prvInsertBlockIntoFreeList+0x14>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d8f7      	bhi.n	8004086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4413      	add	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d108      	bne.n	80040ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	441a      	add	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d118      	bne.n	8004100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <prvInsertBlockIntoFreeList+0xb0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d00d      	beq.n	80040f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e008      	b.n	8004108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <prvInsertBlockIntoFreeList+0xb0>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e003      	b.n	8004108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d002      	beq.n	8004116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	2000410c 	.word	0x2000410c
 8004128:	20004114 	.word	0x20004114

0800412c <__libc_init_array>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	4d0d      	ldr	r5, [pc, #52]	; (8004164 <__libc_init_array+0x38>)
 8004130:	4c0d      	ldr	r4, [pc, #52]	; (8004168 <__libc_init_array+0x3c>)
 8004132:	1b64      	subs	r4, r4, r5
 8004134:	10a4      	asrs	r4, r4, #2
 8004136:	2600      	movs	r6, #0
 8004138:	42a6      	cmp	r6, r4
 800413a:	d109      	bne.n	8004150 <__libc_init_array+0x24>
 800413c:	4d0b      	ldr	r5, [pc, #44]	; (800416c <__libc_init_array+0x40>)
 800413e:	4c0c      	ldr	r4, [pc, #48]	; (8004170 <__libc_init_array+0x44>)
 8004140:	f000 f8e4 	bl	800430c <_init>
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	2600      	movs	r6, #0
 800414a:	42a6      	cmp	r6, r4
 800414c:	d105      	bne.n	800415a <__libc_init_array+0x2e>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	f855 3b04 	ldr.w	r3, [r5], #4
 8004154:	4798      	blx	r3
 8004156:	3601      	adds	r6, #1
 8004158:	e7ee      	b.n	8004138 <__libc_init_array+0xc>
 800415a:	f855 3b04 	ldr.w	r3, [r5], #4
 800415e:	4798      	blx	r3
 8004160:	3601      	adds	r6, #1
 8004162:	e7f2      	b.n	800414a <__libc_init_array+0x1e>
 8004164:	080043e8 	.word	0x080043e8
 8004168:	080043e8 	.word	0x080043e8
 800416c:	080043e8 	.word	0x080043e8
 8004170:	080043ec 	.word	0x080043ec

08004174 <__retarget_lock_acquire_recursive>:
 8004174:	4770      	bx	lr

08004176 <__retarget_lock_release_recursive>:
 8004176:	4770      	bx	lr

08004178 <memset>:
 8004178:	4402      	add	r2, r0
 800417a:	4603      	mov	r3, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <cleanup_glue>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	460c      	mov	r4, r1
 800418c:	6809      	ldr	r1, [r1, #0]
 800418e:	4605      	mov	r5, r0
 8004190:	b109      	cbz	r1, 8004196 <cleanup_glue+0xe>
 8004192:	f7ff fff9 	bl	8004188 <cleanup_glue>
 8004196:	4621      	mov	r1, r4
 8004198:	4628      	mov	r0, r5
 800419a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800419e:	f000 b869 	b.w	8004274 <_free_r>
	...

080041a4 <_reclaim_reent>:
 80041a4:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <_reclaim_reent+0xb4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4283      	cmp	r3, r0
 80041aa:	b570      	push	{r4, r5, r6, lr}
 80041ac:	4604      	mov	r4, r0
 80041ae:	d051      	beq.n	8004254 <_reclaim_reent+0xb0>
 80041b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041b2:	b143      	cbz	r3, 80041c6 <_reclaim_reent+0x22>
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d14a      	bne.n	8004250 <_reclaim_reent+0xac>
 80041ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	b111      	cbz	r1, 80041c6 <_reclaim_reent+0x22>
 80041c0:	4620      	mov	r0, r4
 80041c2:	f000 f857 	bl	8004274 <_free_r>
 80041c6:	6961      	ldr	r1, [r4, #20]
 80041c8:	b111      	cbz	r1, 80041d0 <_reclaim_reent+0x2c>
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 f852 	bl	8004274 <_free_r>
 80041d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80041d2:	b111      	cbz	r1, 80041da <_reclaim_reent+0x36>
 80041d4:	4620      	mov	r0, r4
 80041d6:	f000 f84d 	bl	8004274 <_free_r>
 80041da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041dc:	b111      	cbz	r1, 80041e4 <_reclaim_reent+0x40>
 80041de:	4620      	mov	r0, r4
 80041e0:	f000 f848 	bl	8004274 <_free_r>
 80041e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80041e6:	b111      	cbz	r1, 80041ee <_reclaim_reent+0x4a>
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 f843 	bl	8004274 <_free_r>
 80041ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80041f0:	b111      	cbz	r1, 80041f8 <_reclaim_reent+0x54>
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 f83e 	bl	8004274 <_free_r>
 80041f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80041fa:	b111      	cbz	r1, 8004202 <_reclaim_reent+0x5e>
 80041fc:	4620      	mov	r0, r4
 80041fe:	f000 f839 	bl	8004274 <_free_r>
 8004202:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004204:	b111      	cbz	r1, 800420c <_reclaim_reent+0x68>
 8004206:	4620      	mov	r0, r4
 8004208:	f000 f834 	bl	8004274 <_free_r>
 800420c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420e:	b111      	cbz	r1, 8004216 <_reclaim_reent+0x72>
 8004210:	4620      	mov	r0, r4
 8004212:	f000 f82f 	bl	8004274 <_free_r>
 8004216:	69a3      	ldr	r3, [r4, #24]
 8004218:	b1e3      	cbz	r3, 8004254 <_reclaim_reent+0xb0>
 800421a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800421c:	4620      	mov	r0, r4
 800421e:	4798      	blx	r3
 8004220:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004222:	b1b9      	cbz	r1, 8004254 <_reclaim_reent+0xb0>
 8004224:	4620      	mov	r0, r4
 8004226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800422a:	f7ff bfad 	b.w	8004188 <cleanup_glue>
 800422e:	5949      	ldr	r1, [r1, r5]
 8004230:	b941      	cbnz	r1, 8004244 <_reclaim_reent+0xa0>
 8004232:	3504      	adds	r5, #4
 8004234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004236:	2d80      	cmp	r5, #128	; 0x80
 8004238:	68d9      	ldr	r1, [r3, #12]
 800423a:	d1f8      	bne.n	800422e <_reclaim_reent+0x8a>
 800423c:	4620      	mov	r0, r4
 800423e:	f000 f819 	bl	8004274 <_free_r>
 8004242:	e7ba      	b.n	80041ba <_reclaim_reent+0x16>
 8004244:	680e      	ldr	r6, [r1, #0]
 8004246:	4620      	mov	r0, r4
 8004248:	f000 f814 	bl	8004274 <_free_r>
 800424c:	4631      	mov	r1, r6
 800424e:	e7ef      	b.n	8004230 <_reclaim_reent+0x8c>
 8004250:	2500      	movs	r5, #0
 8004252:	e7ef      	b.n	8004234 <_reclaim_reent+0x90>
 8004254:	bd70      	pop	{r4, r5, r6, pc}
 8004256:	bf00      	nop
 8004258:	20000010 	.word	0x20000010

0800425c <__malloc_lock>:
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <__malloc_lock+0x8>)
 800425e:	f7ff bf89 	b.w	8004174 <__retarget_lock_acquire_recursive>
 8004262:	bf00      	nop
 8004264:	2000412c 	.word	0x2000412c

08004268 <__malloc_unlock>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__malloc_unlock+0x8>)
 800426a:	f7ff bf84 	b.w	8004176 <__retarget_lock_release_recursive>
 800426e:	bf00      	nop
 8004270:	2000412c 	.word	0x2000412c

08004274 <_free_r>:
 8004274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004276:	2900      	cmp	r1, #0
 8004278:	d044      	beq.n	8004304 <_free_r+0x90>
 800427a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800427e:	9001      	str	r0, [sp, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f1a1 0404 	sub.w	r4, r1, #4
 8004286:	bfb8      	it	lt
 8004288:	18e4      	addlt	r4, r4, r3
 800428a:	f7ff ffe7 	bl	800425c <__malloc_lock>
 800428e:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <_free_r+0x94>)
 8004290:	9801      	ldr	r0, [sp, #4]
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	b933      	cbnz	r3, 80042a4 <_free_r+0x30>
 8004296:	6063      	str	r3, [r4, #4]
 8004298:	6014      	str	r4, [r2, #0]
 800429a:	b003      	add	sp, #12
 800429c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042a0:	f7ff bfe2 	b.w	8004268 <__malloc_unlock>
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d908      	bls.n	80042ba <_free_r+0x46>
 80042a8:	6825      	ldr	r5, [r4, #0]
 80042aa:	1961      	adds	r1, r4, r5
 80042ac:	428b      	cmp	r3, r1
 80042ae:	bf01      	itttt	eq
 80042b0:	6819      	ldreq	r1, [r3, #0]
 80042b2:	685b      	ldreq	r3, [r3, #4]
 80042b4:	1949      	addeq	r1, r1, r5
 80042b6:	6021      	streq	r1, [r4, #0]
 80042b8:	e7ed      	b.n	8004296 <_free_r+0x22>
 80042ba:	461a      	mov	r2, r3
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	b10b      	cbz	r3, 80042c4 <_free_r+0x50>
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d9fa      	bls.n	80042ba <_free_r+0x46>
 80042c4:	6811      	ldr	r1, [r2, #0]
 80042c6:	1855      	adds	r5, r2, r1
 80042c8:	42a5      	cmp	r5, r4
 80042ca:	d10b      	bne.n	80042e4 <_free_r+0x70>
 80042cc:	6824      	ldr	r4, [r4, #0]
 80042ce:	4421      	add	r1, r4
 80042d0:	1854      	adds	r4, r2, r1
 80042d2:	42a3      	cmp	r3, r4
 80042d4:	6011      	str	r1, [r2, #0]
 80042d6:	d1e0      	bne.n	800429a <_free_r+0x26>
 80042d8:	681c      	ldr	r4, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	6053      	str	r3, [r2, #4]
 80042de:	4421      	add	r1, r4
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	e7da      	b.n	800429a <_free_r+0x26>
 80042e4:	d902      	bls.n	80042ec <_free_r+0x78>
 80042e6:	230c      	movs	r3, #12
 80042e8:	6003      	str	r3, [r0, #0]
 80042ea:	e7d6      	b.n	800429a <_free_r+0x26>
 80042ec:	6825      	ldr	r5, [r4, #0]
 80042ee:	1961      	adds	r1, r4, r5
 80042f0:	428b      	cmp	r3, r1
 80042f2:	bf04      	itt	eq
 80042f4:	6819      	ldreq	r1, [r3, #0]
 80042f6:	685b      	ldreq	r3, [r3, #4]
 80042f8:	6063      	str	r3, [r4, #4]
 80042fa:	bf04      	itt	eq
 80042fc:	1949      	addeq	r1, r1, r5
 80042fe:	6021      	streq	r1, [r4, #0]
 8004300:	6054      	str	r4, [r2, #4]
 8004302:	e7ca      	b.n	800429a <_free_r+0x26>
 8004304:	b003      	add	sp, #12
 8004306:	bd30      	pop	{r4, r5, pc}
 8004308:	20004130 	.word	0x20004130

0800430c <_init>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr

08004318 <_fini>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr
