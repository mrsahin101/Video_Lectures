
003_CMSIS_OS_QUEUE_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800584c  0800584c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800584c  0800584c  0001584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005854  08005854  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800585c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040c8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000413c  2000413c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160fc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f3a  00000000  00000000  000361a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  000390e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  0003a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002266d  00000000  00000000  0003b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014211  00000000  00000000  0005d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d32c5  00000000  00000000  00071c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144ecb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dbc  00000000  00000000  00144f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005758 	.word	0x08005758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005758 	.word	0x08005758

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b092      	sub	sp, #72	; 0x48
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fab1 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f847 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8d9 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f8ad 	bl	8000678 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue1 */
  osMessageQDef(Queue1, 256, uint8_t);
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <main+0x84>)
 8000520:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue1Handle = osMessageCreate(osMessageQ(Queue1), NULL);
 800052a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f002 fe0e 	bl	8003152 <osMessageCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a15      	ldr	r2, [pc, #84]	; (8000590 <main+0x88>)
 800053a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Sender1 */
  osThreadDef(Sender1, StartSender1, osPriorityNormal, 0, 128);
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <main+0x8c>)
 800053e:	f107 041c 	add.w	r4, r7, #28
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sender1Handle = osThreadCreate(osThread(Sender1), NULL);
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fd9b 	bl	8003092 <osThreadCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <main+0x90>)
 8000560:	6013      	str	r3, [r2, #0]

  /* definition and creation of Receiver */
  osThreadDef(Receiver, StartReceiver, osPriorityNormal, 0, 128);
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <main+0x94>)
 8000564:	463c      	mov	r4, r7
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverHandle = osThreadCreate(osThread(Receiver), NULL);
 8000574:	463b      	mov	r3, r7
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fd8a 	bl	8003092 <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <main+0x98>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f002 fd7e 	bl	8003084 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x80>
 800058a:	bf00      	nop
 800058c:	08005784 	.word	0x08005784
 8000590:	20000390 	.word	0x20000390
 8000594:	08005794 	.word	0x08005794
 8000598:	20000388 	.word	0x20000388
 800059c:	080057b0 	.word	0x080057b0
 80005a0:	2000038c 	.word	0x2000038c

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 f806 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fd74 	bl	8001118 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000636:	f000 f8b9 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2105      	movs	r1, #5
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ffd5 	bl	8001608 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000664:	f000 f8a2 	bl	80007ac <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fcaa 	bl	8002008 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f877 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000344 	.word	0x20000344
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void const * argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osMessagePut(Queue1Handle, 0x1,200);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <StartSender1+0x20>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	22c8      	movs	r2, #200	; 0xc8
 800072a:	2101      	movs	r1, #1
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fd39 	bl	80031a4 <osMessagePut>
    osDelay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f002 fcf8 	bl	800312a <osDelay>
	osMessagePut(Queue1Handle, 0x1,200);
 800073a:	e7f3      	b.n	8000724 <StartSender1+0x8>
 800073c:	20000390 	.word	0x20000390

08000740 <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartReceiver */
  /* Infinite loop */
  osEvent retvalue;
  for(;;)
  {
	retvalue = osMessageGet(Queue1Handle,4000);
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <StartReceiver+0x40>)
 800074a:	6819      	ldr	r1, [r3, #0]
 800074c:	463b      	mov	r3, r7
 800074e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fd66 	bl	8003224 <osMessageGet>
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	463a      	mov	r2, r7
 800075e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000760:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, (uint8_t*)&(retvalue.value.v), 1,HAL_MAX_DELAY);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	1d19      	adds	r1, r3, #4
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2201      	movs	r2, #1
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <StartReceiver+0x44>)
 8000772:	f001 fc96 	bl	80020a2 <HAL_UART_Transmit>
    osDelay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f002 fcd7 	bl	800312a <osDelay>
	retvalue = osMessageGet(Queue1Handle,4000);
 800077c:	e7e4      	b.n	8000748 <StartReceiver+0x8>
 800077e:	bf00      	nop
 8000780:	20000390 	.word	0x20000390
 8000784:	20000344 	.word	0x20000344

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f98d 	bl	8000ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40002000 	.word	0x40002000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_MspInit+0x54>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <HAL_MspInit+0x54>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x54>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_MspInit+0x54>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_MspInit+0x54>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_MspInit+0x54>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	210f      	movs	r1, #15
 80007fa:	f06f 0001 	mvn.w	r0, #1
 80007fe:	f000 fa33 	bl	8000c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_UART_MspInit+0x94>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d133      	bne.n	800089a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_UART_MspInit+0x98>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <HAL_UART_MspInit+0x98>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_UART_MspInit+0x98>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x98>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0x98>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_UART_MspInit+0x98>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086a:	230c      	movs	r3, #12
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087a:	2307      	movs	r3, #7
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <HAL_UART_MspInit+0x9c>)
 8000886:	f000 faab 	bl	8000de0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2105      	movs	r1, #5
 800088e:	2026      	movs	r0, #38	; 0x26
 8000890:	f000 f9ea 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000894:	2026      	movs	r0, #38	; 0x26
 8000896:	f000 fa03 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4b33      	ldr	r3, [pc, #204]	; (8000994 <HAL_InitTick+0xe4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a32      	ldr	r2, [pc, #200]	; (8000994 <HAL_InitTick+0xe4>)
 80008ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b30      	ldr	r3, [pc, #192]	; (8000994 <HAL_InitTick+0xe4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008dc:	f107 0210 	add.w	r2, r7, #16
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f8ae 	bl	8001a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d103      	bne.n	80008fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f6:	f001 f87f 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80008fa:	6378      	str	r0, [r7, #52]	; 0x34
 80008fc:	e004      	b.n	8000908 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fe:	f001 f87b 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8000902:	4603      	mov	r3, r0
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090a:	4a23      	ldr	r2, [pc, #140]	; (8000998 <HAL_InitTick+0xe8>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9b      	lsrs	r3, r3, #18
 8000912:	3b01      	subs	r3, #1
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_InitTick+0xec>)
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <HAL_InitTick+0xf0>)
 800091a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <HAL_InitTick+0xec>)
 800091e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000922:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000924:	4a1d      	ldr	r2, [pc, #116]	; (800099c <HAL_InitTick+0xec>)
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_InitTick+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_InitTick+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_InitTick+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800093c:	4817      	ldr	r0, [pc, #92]	; (800099c <HAL_InitTick+0xec>)
 800093e:	f001 f8b5 	bl	8001aac <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000948:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800094c:	2b00      	cmp	r3, #0
 800094e:	d11b      	bne.n	8000988 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <HAL_InitTick+0xec>)
 8000952:	f001 f905 	bl	8001b60 <HAL_TIM_Base_Start_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800095c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000960:	2b00      	cmp	r3, #0
 8000962:	d111      	bne.n	8000988 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000964:	202d      	movs	r0, #45	; 0x2d
 8000966:	f000 f99b 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d808      	bhi.n	8000982 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	202d      	movs	r0, #45	; 0x2d
 8000976:	f000 f977 	bl	8000c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_InitTick+0xf4>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	e002      	b.n	8000988 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800098c:	4618      	mov	r0, r3
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	431bde83 	.word	0x431bde83
 800099c:	20000394 	.word	0x20000394
 80009a0:	40002000 	.word	0x40002000
 80009a4:	20000004 	.word	0x20000004

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <USART2_IRQHandler+0x10>)
 80009da:	f001 fbf5 	bl	80021c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000344 	.word	0x20000344

080009e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009ee:	f001 f927 	bl	8001c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000394 	.word	0x20000394

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4a:	f7ff ffd7 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f004 fd85 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd59 	bl	8000508 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a64:	0800585c 	.word	0x0800585c
  ldr r2, =_sbss
 8000a68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a6c:	2000413c 	.word	0x2000413c

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f8d8 	bl	8000c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f7ff ff04 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe86 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	200003dc 	.word	0x200003dc

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200003dc 	.word	0x200003dc

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff4c 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7a:	f7ff ff61 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f7ff ffb1 	bl	8000bec <NVIC_EncodePriority>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff80 	bl	8000b98 <__NVIC_SetPriority>
}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff54 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cca:	f7ff ff09 	bl	8000ae0 <HAL_GetTick>
 8000cce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d008      	beq.n	8000cee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e052      	b.n	8000d94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0216 	bic.w	r2, r2, #22
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	695a      	ldr	r2, [r3, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d103      	bne.n	8000d1e <HAL_DMA_Abort+0x62>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d007      	beq.n	8000d2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0208 	bic.w	r2, r2, #8
 8000d2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0201 	bic.w	r2, r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d3e:	e013      	b.n	8000d68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d40:	f7ff fece 	bl	8000ae0 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d90c      	bls.n	8000d68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2220      	movs	r2, #32
 8000d52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2203      	movs	r2, #3
 8000d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e015      	b.n	8000d94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1e4      	bne.n	8000d40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d7a:	223f      	movs	r2, #63	; 0x3f
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d004      	beq.n	8000dba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00c      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2205      	movs	r2, #5
 8000dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e16b      	b.n	80010d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 815a 	bne.w	80010ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80b4 	beq.w	80010ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b60      	ldr	r3, [pc, #384]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a5f      	ldr	r2, [pc, #380]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f82:	4a5b      	ldr	r2, [pc, #364]	; (80010f0 <HAL_GPIO_Init+0x310>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a52      	ldr	r2, [pc, #328]	; (80010f4 <HAL_GPIO_Init+0x314>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d02b      	beq.n	8001006 <HAL_GPIO_Init+0x226>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a51      	ldr	r2, [pc, #324]	; (80010f8 <HAL_GPIO_Init+0x318>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x222>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x31c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x21e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x320>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x21a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x324>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x216>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x328>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x32c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x20e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x330>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x20a>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00e      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000fea:	2308      	movs	r3, #8
 8000fec:	e00c      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00a      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8001006:	2300      	movs	r3, #0
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x310>)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104a:	4a32      	ldr	r2, [pc, #200]	; (8001114 <HAL_GPIO_Init+0x334>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x334>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109e:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	f67f ae90 	bls.w	8000dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40021400 	.word	0x40021400
 800110c:	40021800 	.word	0x40021800
 8001110:	40021c00 	.word	0x40021c00
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e267      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d075      	beq.n	8001222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	d00c      	beq.n	800115c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800114a:	2b08      	cmp	r3, #8
 800114c:	d112      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b82      	ldr	r3, [pc, #520]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800115a:	d10b      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	4b7e      	ldr	r3, [pc, #504]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05b      	beq.n	8001220 <HAL_RCC_OscConfig+0x108>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d157      	bne.n	8001220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e242      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d106      	bne.n	800118c <HAL_RCC_OscConfig+0x74>
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01d      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b70      	ldr	r3, [pc, #448]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6f      	ldr	r2, [pc, #444]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b6d      	ldr	r3, [pc, #436]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6c      	ldr	r2, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 80011b0:	4b69      	ldr	r3, [pc, #420]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a68      	ldr	r2, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b66      	ldr	r3, [pc, #408]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a65      	ldr	r2, [pc, #404]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc86 	bl	8000ae0 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc82 	bl	8000ae0 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e207      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xc0>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc72 	bl	8000ae0 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fc6e 	bl	8000ae0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1f3      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0xe8>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d063      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001242:	2b08      	cmp	r3, #8
 8001244:	d11c      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d116      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e1c7      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4937      	ldr	r1, [pc, #220]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	e03a      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001288:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_RCC_OscConfig+0x244>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff fc27 	bl	8000ae0 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fc23 	bl	8000ae0 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e1a8      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4925      	ldr	r1, [pc, #148]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x244>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc06 	bl	8000ae0 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc02 	bl	8000ae0 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e187      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d036      	beq.n	8001370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d016      	beq.n	8001338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x248>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fbe6 	bl	8000ae0 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fbe2 	bl	8000ae0 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e167      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_OscConfig+0x240>)
 800132c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x200>
 8001336:	e01b      	b.n	8001370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x248>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fbcf 	bl	8000ae0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e00e      	b.n	8001364 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fbcb 	bl	8000ae0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d907      	bls.n	8001364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e150      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001358:	40023800 	.word	0x40023800
 800135c:	42470000 	.word	0x42470000
 8001360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ea      	bne.n	8001346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8097 	beq.w	80014ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b7d      	ldr	r3, [pc, #500]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a7c      	ldr	r2, [pc, #496]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b77      	ldr	r3, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d118      	bne.n	80013ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ba:	4b74      	ldr	r3, [pc, #464]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a73      	ldr	r2, [pc, #460]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb8b 	bl	8000ae0 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fb87 	bl	8000ae0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e10c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x474>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x2ea>
 80013f4:	4b64      	ldr	r3, [pc, #400]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a63      	ldr	r2, [pc, #396]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	e01c      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x30c>
 800140a:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	4a5e      	ldr	r2, [pc, #376]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	4b5c      	ldr	r3, [pc, #368]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a5b      	ldr	r2, [pc, #364]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a57      	ldr	r2, [pc, #348]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	4b55      	ldr	r3, [pc, #340]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a54      	ldr	r2, [pc, #336]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0304 	bic.w	r3, r3, #4
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d015      	beq.n	8001470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fb4c 	bl	8000ae0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fb48 	bl	8000ae0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0cb      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001462:	4b49      	ldr	r3, [pc, #292]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0ee      	beq.n	800144c <HAL_RCC_OscConfig+0x334>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fb36 	bl	8000ae0 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fb32 	bl	8000ae0 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e0b5      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148e:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ee      	bne.n	8001478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a38      	ldr	r2, [pc, #224]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a1 	beq.w	80015f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d05c      	beq.n	800157c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d141      	bne.n	800154e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_RCC_OscConfig+0x478>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb06 	bl	8000ae0 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb02 	bl	8000ae0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e087      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	491b      	ldr	r1, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x478>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fadb 	bl	8000ae0 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fad7 	bl	8000ae0 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e05c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x416>
 800154c:	e054      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x478>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fac4 	bl	8000ae0 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fac0 	bl	8000ae0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e045      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_RCC_OscConfig+0x470>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x444>
 800157a:	e03d      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d107      	bne.n	8001594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e038      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000
 8001590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x4ec>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d028      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d121      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d111      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	3b01      	subs	r3, #1
 80015de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0cc      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d90c      	bls.n	8001644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800167e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	494d      	ldr	r1, [pc, #308]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d044      	beq.n	8001728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d119      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e07f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e06f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e067      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4934      	ldr	r1, [pc, #208]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff f9f2 	bl	8000ae0 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff f9ee 	bl	8000ae0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e04f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d20c      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e032      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4916      	ldr	r1, [pc, #88]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490e      	ldr	r1, [pc, #56]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178e:	f000 f821 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	490a      	ldr	r1, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f87e 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	080057d4 	.word	0x080057d4
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d8:	b094      	sub	sp, #80	; 0x50
 80017da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
 80017e0:	2300      	movs	r3, #0
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e4:	2300      	movs	r3, #0
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ec:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d00d      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x40>
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	f200 80e1 	bhi.w	80019c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x34>
 8001802:	2b04      	cmp	r3, #4
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x3a>
 8001806:	e0db      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b73      	ldr	r3, [pc, #460]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800180c:	e0db      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180e:	4b73      	ldr	r3, [pc, #460]	; (80019dc <HAL_RCC_GetSysClockFreq+0x208>)
 8001810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001812:	e0d8      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001814:	4b6f      	ldr	r3, [pc, #444]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181e:	4b6d      	ldr	r3, [pc, #436]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d063      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182a:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	2200      	movs	r2, #0
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
 8001834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
 8001842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001846:	4622      	mov	r2, r4
 8001848:	462b      	mov	r3, r5
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	0159      	lsls	r1, r3, #5
 8001854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001858:	0150      	lsls	r0, r2, #5
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4621      	mov	r1, r4
 8001860:	1a51      	subs	r1, r2, r1
 8001862:	6139      	str	r1, [r7, #16]
 8001864:	4629      	mov	r1, r5
 8001866:	eb63 0301 	sbc.w	r3, r3, r1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001878:	4659      	mov	r1, fp
 800187a:	018b      	lsls	r3, r1, #6
 800187c:	4651      	mov	r1, sl
 800187e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001882:	4651      	mov	r1, sl
 8001884:	018a      	lsls	r2, r1, #6
 8001886:	4651      	mov	r1, sl
 8001888:	ebb2 0801 	subs.w	r8, r2, r1
 800188c:	4659      	mov	r1, fp
 800188e:	eb63 0901 	sbc.w	r9, r3, r1
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a6:	4690      	mov	r8, r2
 80018a8:	4699      	mov	r9, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	eb18 0303 	adds.w	r3, r8, r3
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	eb49 0303 	adc.w	r3, r9, r3
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c6:	4629      	mov	r1, r5
 80018c8:	024b      	lsls	r3, r1, #9
 80018ca:	4621      	mov	r1, r4
 80018cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018d0:	4621      	mov	r1, r4
 80018d2:	024a      	lsls	r2, r1, #9
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018da:	2200      	movs	r2, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018e4:	f7fe fc74 	bl	80001d0 <__aeabi_uldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4613      	mov	r3, r2
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018f0:	e058      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	2200      	movs	r2, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	4611      	mov	r1, r2
 80018fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800190c:	4642      	mov	r2, r8
 800190e:	464b      	mov	r3, r9
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	0159      	lsls	r1, r3, #5
 800191a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191e:	0150      	lsls	r0, r2, #5
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4641      	mov	r1, r8
 8001926:	ebb2 0a01 	subs.w	sl, r2, r1
 800192a:	4649      	mov	r1, r9
 800192c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800193c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001944:	ebb2 040a 	subs.w	r4, r2, sl
 8001948:	eb63 050b 	sbc.w	r5, r3, fp
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	00eb      	lsls	r3, r5, #3
 8001956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800195a:	00e2      	lsls	r2, r4, #3
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	4643      	mov	r3, r8
 8001962:	18e3      	adds	r3, r4, r3
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	464b      	mov	r3, r9
 8001968:	eb45 0303 	adc.w	r3, r5, r3
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800197a:	4629      	mov	r1, r5
 800197c:	028b      	lsls	r3, r1, #10
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001984:	4621      	mov	r1, r4
 8001986:	028a      	lsls	r2, r1, #10
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198e:	2200      	movs	r2, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	61fa      	str	r2, [r7, #28]
 8001994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001998:	f7fe fc1a 	bl	80001d0 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3750      	adds	r7, #80	; 0x50
 80019cc:	46bd      	mov	sp, r7
 80019ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	007a1200 	.word	0x007a1200

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0a9b      	lsrs	r3, r3, #10
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	080057e4 	.word	0x080057e4

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffdc 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0b5b      	lsrs	r3, r3, #13
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	080057e4 	.word	0x080057e4

08001a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	220f      	movs	r2, #15
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_RCC_GetClockConfig+0x60>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0207 	and.w	r2, r3, #7
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e041      	b.n	8001b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f839 	bl	8001b4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4610      	mov	r0, r2
 8001aec:	f000 f9d8 	bl	8001ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d001      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e04e      	b.n	8001c16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d022      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x80>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba2:	d01d      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x80>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <HAL_TIM_Base_Start_IT+0xc8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d018      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x80>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_TIM_Base_Start_IT+0xcc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x80>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00e      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x80>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x80>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x80>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_TIM_Base_Start_IT+0xdc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d111      	bne.n	8001c04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d010      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c02:	e007      	b.n	8001c14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40010000 	.word	0x40010000
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	40000800 	.word	0x40000800
 8001c30:	40000c00 	.word	0x40000c00
 8001c34:	40010400 	.word	0x40010400
 8001c38:	40014000 	.word	0x40014000
 8001c3c:	40001800 	.word	0x40001800

08001c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0202 	mvn.w	r2, #2
 8001c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8ee 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8e0 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f8f1 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0204 	mvn.w	r2, #4
 8001cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8c4 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8b6 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f8c7 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0208 	mvn.w	r2, #8
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f89a 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f88c 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f89d 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d122      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d11b      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0210 	mvn.w	r2, #16
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f870 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f862 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f873 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0201 	mvn.w	r2, #1
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fce2 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dce:	2b80      	cmp	r3, #128	; 0x80
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b80      	cmp	r3, #128	; 0x80
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f902 	bl	8001ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfa:	2b40      	cmp	r3, #64	; 0x40
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e08:	2b40      	cmp	r3, #64	; 0x40
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f838 	bl	8001e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0220 	mvn.w	r2, #32
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8cc 	bl	8001fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <TIM_Base_SetConfig+0x114>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d00f      	beq.n	8001ee0 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3d      	ldr	r2, [pc, #244]	; (8001fb8 <TIM_Base_SetConfig+0x118>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00b      	beq.n	8001ee0 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3c      	ldr	r2, [pc, #240]	; (8001fbc <TIM_Base_SetConfig+0x11c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3b      	ldr	r2, [pc, #236]	; (8001fc0 <TIM_Base_SetConfig+0x120>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3a      	ldr	r2, [pc, #232]	; (8001fc4 <TIM_Base_SetConfig+0x124>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d108      	bne.n	8001ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <TIM_Base_SetConfig+0x114>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02b      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d027      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <TIM_Base_SetConfig+0x118>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d023      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2b      	ldr	r2, [pc, #172]	; (8001fbc <TIM_Base_SetConfig+0x11c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <TIM_Base_SetConfig+0x120>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01b      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a29      	ldr	r2, [pc, #164]	; (8001fc4 <TIM_Base_SetConfig+0x124>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d017      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a28      	ldr	r2, [pc, #160]	; (8001fc8 <TIM_Base_SetConfig+0x128>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <TIM_Base_SetConfig+0x12c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00f      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <TIM_Base_SetConfig+0x130>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <TIM_Base_SetConfig+0x134>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <TIM_Base_SetConfig+0x138>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d003      	beq.n	8001f52 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <TIM_Base_SetConfig+0x13c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d108      	bne.n	8001f64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <TIM_Base_SetConfig+0x114>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d003      	beq.n	8001f98 <TIM_Base_SetConfig+0xf8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <TIM_Base_SetConfig+0x124>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d103      	bne.n	8001fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	40010400 	.word	0x40010400
 8001fc8:	40014000 	.word	0x40014000
 8001fcc:	40014400 	.word	0x40014400
 8001fd0:	40014800 	.word	0x40014800
 8001fd4:	40001800 	.word	0x40001800
 8001fd8:	40001c00 	.word	0x40001c00
 8001fdc:	40002000 	.word	0x40002000

08001fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e03f      	b.n	800209a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fbee 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800204a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fd7b 	bl	8002b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b08a      	sub	sp, #40	; 0x28
 80020a6:	af02      	add	r7, sp, #8
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d17c      	bne.n	80021bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_UART_Transmit+0x2c>
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e075      	b.n	80021be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_UART_Transmit+0x3e>
 80020dc:	2302      	movs	r3, #2
 80020de:	e06e      	b.n	80021be <HAL_UART_Transmit+0x11c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2221      	movs	r2, #33	; 0x21
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f6:	f7fe fcf3 	bl	8000ae0 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	88fa      	ldrh	r2, [r7, #6]
 8002100:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002110:	d108      	bne.n	8002124 <HAL_UART_Transmit+0x82>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e003      	b.n	800212c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002134:	e02a      	b.n	800218c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 faf9 	bl	8002738 <UART_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e036      	b.n	80021be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002164:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3302      	adds	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e007      	b.n	800217e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3301      	adds	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1cf      	bne.n	8002136 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	2140      	movs	r1, #64	; 0x40
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fac9 	bl	8002738 <UART_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e006      	b.n	80021be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b0ba      	sub	sp, #232	; 0xe8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10f      	bne.n	800222e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800220e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_UART_IRQHandler+0x66>
 800221a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fbd3 	bl	80029d2 <UART_Receive_IT>
      return;
 800222c:	e256      	b.n	80026dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800222e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80de 	beq.w	80023f4 <HAL_UART_IRQHandler+0x22c>
 8002238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002248:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80d1 	beq.w	80023f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_UART_IRQHandler+0xae>
 800225e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_UART_IRQHandler+0xd2>
 8002282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800229a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_UART_IRQHandler+0xf6>
 80022a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d011      	beq.n	80022ee <HAL_UART_IRQHandler+0x126>
 80022ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f043 0208 	orr.w	r2, r3, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 81ed 	beq.w	80026d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_UART_IRQHandler+0x14e>
 8002304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fb5e 	bl	80029d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <HAL_UART_IRQHandler+0x17a>
 800233a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d04f      	beq.n	80023e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fa66 	bl	8002814 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d141      	bne.n	80023da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3314      	adds	r3, #20
 800235c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002364:	e853 3f00 	ldrex	r3, [r3]
 8002368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800236c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3314      	adds	r3, #20
 800237e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800238e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002392:	e841 2300 	strex	r3, r2, [r1]
 8002396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800239a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1d9      	bne.n	8002356 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d013      	beq.n	80023d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	4a7d      	ldr	r2, [pc, #500]	; (80025a4 <HAL_UART_IRQHandler+0x3dc>)
 80023b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fcf0 	bl	8000d9c <HAL_DMA_Abort_IT>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023cc:	4610      	mov	r0, r2
 80023ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	e00e      	b.n	80023f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f99a 	bl	800270c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	e00a      	b.n	80023f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f996 	bl	800270c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e0:	e006      	b.n	80023f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f992 	bl	800270c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023ee:	e170      	b.n	80026d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f0:	bf00      	nop
    return;
 80023f2:	e16e      	b.n	80026d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	f040 814a 	bne.w	8002692 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8143 	beq.w	8002692 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800240c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 813c 	beq.w	8002692 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	f040 80b4 	bne.w	80025a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800244c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8140 	beq.w	80026d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800245a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800245e:	429a      	cmp	r2, r3
 8002460:	f080 8139 	bcs.w	80026d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800246a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002476:	f000 8088 	beq.w	800258a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002488:	e853 3f00 	ldrex	r3, [r3]
 800248c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024b6:	e841 2300 	strex	r3, r2, [r1]
 80024ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1d9      	bne.n	800247a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3314      	adds	r3, #20
 80024cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d0:	e853 3f00 	ldrex	r3, [r3]
 80024d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3314      	adds	r3, #20
 80024e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e1      	bne.n	80024c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3314      	adds	r3, #20
 8002508:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250c:	e853 3f00 	ldrex	r3, [r3]
 8002510:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3314      	adds	r3, #20
 8002522:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002526:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002528:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800252c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800252e:	e841 2300 	strex	r3, r2, [r1]
 8002532:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e3      	bne.n	8002502 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255a:	f023 0310 	bic.w	r3, r3, #16
 800255e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800256c:	65ba      	str	r2, [r7, #88]	; 0x58
 800256e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002574:	e841 2300 	strex	r3, r2, [r1]
 8002578:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800257a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e3      	bne.n	8002548 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fb99 	bl	8000cbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002592:	b29b      	uxth	r3, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	b29b      	uxth	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8c0 	bl	8002720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025a0:	e099      	b.n	80026d6 <HAL_UART_IRQHandler+0x50e>
 80025a2:	bf00      	nop
 80025a4:	080028db 	.word	0x080028db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 808b 	beq.w	80026da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8086 	beq.w	80026da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025f2:	647a      	str	r2, [r7, #68]	; 0x44
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e3      	bne.n	80025ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3314      	adds	r3, #20
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	623b      	str	r3, [r7, #32]
   return(result);
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800262a:	633a      	str	r2, [r7, #48]	; 0x30
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002632:	e841 2300 	strex	r3, r2, [r1]
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e3      	bne.n	8002606 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	60fb      	str	r3, [r7, #12]
   return(result);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 0310 	bic.w	r3, r3, #16
 8002662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002670:	61fa      	str	r2, [r7, #28]
 8002672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002674:	69b9      	ldr	r1, [r7, #24]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	e841 2300 	strex	r3, r2, [r1]
 800267c:	617b      	str	r3, [r7, #20]
   return(result);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e3      	bne.n	800264c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f848 	bl	8002720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002690:	e023      	b.n	80026da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_UART_IRQHandler+0x4ea>
 800269e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f929 	bl	8002902 <UART_Transmit_IT>
    return;
 80026b0:	e014      	b.n	80026dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <HAL_UART_IRQHandler+0x514>
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f969 	bl	80029a2 <UART_EndTransmit_IT>
    return;
 80026d0:	e004      	b.n	80026dc <HAL_UART_IRQHandler+0x514>
    return;
 80026d2:	bf00      	nop
 80026d4:	e002      	b.n	80026dc <HAL_UART_IRQHandler+0x514>
      return;
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <HAL_UART_IRQHandler+0x514>
      return;
 80026da:	bf00      	nop
  }
}
 80026dc:	37e8      	adds	r7, #232	; 0xe8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop

080026e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b090      	sub	sp, #64	; 0x40
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002748:	e050      	b.n	80027ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d04c      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <UART_WaitOnFlagUntilTimeout+0x30>
 8002758:	f7fe f9c2 	bl	8000ae0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002764:	429a      	cmp	r2, r3
 8002766:	d241      	bcs.n	80027ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002788:	637a      	str	r2, [r7, #52]	; 0x34
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800278e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e5      	bne.n	8002768 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	613b      	str	r3, [r7, #16]
   return(result);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3314      	adds	r3, #20
 80027ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027bc:	623a      	str	r2, [r7, #32]
 80027be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	69f9      	ldr	r1, [r7, #28]
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e5      	bne.n	800279c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e00f      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4013      	ands	r3, r2
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	429a      	cmp	r2, r3
 8002808:	d09f      	beq.n	800274a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3740      	adds	r7, #64	; 0x40
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b095      	sub	sp, #84	; 0x54
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	e853 3f00 	ldrex	r3, [r3]
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283c:	643a      	str	r2, [r7, #64]	; 0x40
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e5      	bne.n	800281c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002870:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	2b01      	cmp	r3, #1
 800288a:	d119      	bne.n	80028c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	330c      	adds	r3, #12
 8002892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	60bb      	str	r3, [r7, #8]
   return(result);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f023 0310 	bic.w	r3, r3, #16
 80028a2:	647b      	str	r3, [r7, #68]	; 0x44
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ac:	61ba      	str	r2, [r7, #24]
 80028ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	6979      	ldr	r1, [r7, #20]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e5      	bne.n	800288c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028ce:	bf00      	nop
 80028d0:	3754      	adds	r7, #84	; 0x54
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff ff09 	bl	800270c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b21      	cmp	r3, #33	; 0x21
 8002914:	d13e      	bne.n	8002994 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d114      	bne.n	800294a <UART_Transmit_IT+0x48>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d110      	bne.n	800294a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	621a      	str	r2, [r3, #32]
 8002948:	e008      	b.n	800295c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6211      	str	r1, [r2, #32]
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29b      	uxth	r3, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4619      	mov	r1, r3
 800296a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10f      	bne.n	8002990 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fe8e 	bl	80026e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b08c      	sub	sp, #48	; 0x30
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b22      	cmp	r3, #34	; 0x22
 80029e4:	f040 80ab 	bne.w	8002b3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f0:	d117      	bne.n	8002a22 <UART_Receive_IT+0x50>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d113      	bne.n	8002a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	1c9a      	adds	r2, r3, #2
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a20:	e026      	b.n	8002a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d007      	beq.n	8002a46 <UART_Receive_IT+0x74>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <UART_Receive_IT+0x82>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e008      	b.n	8002a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d15a      	bne.n	8002b3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0220 	bic.w	r2, r2, #32
 8002a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d135      	bne.n	8002b30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f023 0310 	bic.w	r3, r3, #16
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aea:	623a      	str	r2, [r7, #32]
 8002aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	69f9      	ldr	r1, [r7, #28]
 8002af0:	6a3a      	ldr	r2, [r7, #32]
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d10a      	bne.n	8002b22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fdf9 	bl	8002720 <HAL_UARTEx_RxEventCallback>
 8002b2e:	e002      	b.n	8002b36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fde1 	bl	80026f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e002      	b.n	8002b40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b4c:	b0c0      	sub	sp, #256	; 0x100
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b64:	68d9      	ldr	r1, [r3, #12]
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	ea40 0301 	orr.w	r3, r0, r1
 8002b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ba0:	f021 010c 	bic.w	r1, r1, #12
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc2:	6999      	ldr	r1, [r3, #24]
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	ea40 0301 	orr.w	r3, r0, r1
 8002bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <UART_SetConfig+0x2cc>)
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d005      	beq.n	8002be8 <UART_SetConfig+0xa0>
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <UART_SetConfig+0x2d0>)
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d104      	bne.n	8002bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be8:	f7fe ff1a 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8002bec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bf0:	e003      	b.n	8002bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bf2:	f7fe ff01 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c04:	f040 810c 	bne.w	8002e20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	1891      	adds	r1, r2, r2
 8002c20:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c22:	415b      	adcs	r3, r3
 8002c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	eb12 0801 	adds.w	r8, r2, r1
 8002c30:	4629      	mov	r1, r5
 8002c32:	eb43 0901 	adc.w	r9, r3, r1
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c4a:	4690      	mov	r8, r2
 8002c4c:	4699      	mov	r9, r3
 8002c4e:	4623      	mov	r3, r4
 8002c50:	eb18 0303 	adds.w	r3, r8, r3
 8002c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c58:	462b      	mov	r3, r5
 8002c5a:	eb49 0303 	adc.w	r3, r9, r3
 8002c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c76:	460b      	mov	r3, r1
 8002c78:	18db      	adds	r3, r3, r3
 8002c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	eb42 0303 	adc.w	r3, r2, r3
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
 8002c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c8c:	f7fd faa0 	bl	80001d0 <__aeabi_uldivmod>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002c96:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	011c      	lsls	r4, r3, #4
 8002c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	1891      	adds	r1, r2, r2
 8002cb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cb8:	415b      	adcs	r3, r3
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	eb12 0a01 	adds.w	sl, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb43 0b01 	adc.w	fp, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce0:	4692      	mov	sl, r2
 8002ce2:	469b      	mov	fp, r3
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	eb1a 0303 	adds.w	r3, sl, r3
 8002cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8002cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	18db      	adds	r3, r3, r3
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
 8002d12:	4613      	mov	r3, r2
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d22:	f7fd fa55 	bl	80001d0 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2264      	movs	r2, #100	; 0x64
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	1acb      	subs	r3, r1, r3
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002d44:	fba3 2302 	umull	r2, r3, r3, r2
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d50:	441c      	add	r4, r3
 8002d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d64:	4642      	mov	r2, r8
 8002d66:	464b      	mov	r3, r9
 8002d68:	1891      	adds	r1, r2, r2
 8002d6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d6c:	415b      	adcs	r3, r3
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d74:	4641      	mov	r1, r8
 8002d76:	1851      	adds	r1, r2, r1
 8002d78:	6339      	str	r1, [r7, #48]	; 0x30
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	414b      	adcs	r3, r1
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d8c:	4659      	mov	r1, fp
 8002d8e:	00cb      	lsls	r3, r1, #3
 8002d90:	4651      	mov	r1, sl
 8002d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d96:	4651      	mov	r1, sl
 8002d98:	00ca      	lsls	r2, r1, #3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4642      	mov	r2, r8
 8002da2:	189b      	adds	r3, r3, r2
 8002da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da8:	464b      	mov	r3, r9
 8002daa:	460a      	mov	r2, r1
 8002dac:	eb42 0303 	adc.w	r3, r2, r3
 8002db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dc8:	460b      	mov	r3, r1
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dce:	4613      	mov	r3, r2
 8002dd0:	eb42 0303 	adc.w	r3, r2, r3
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dde:	f7fd f9f7 	bl	80001d0 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002de8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2164      	movs	r1, #100	; 0x64
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <UART_SetConfig+0x2d4>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 0207 	and.w	r2, r3, #7
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4422      	add	r2, r4
 8002e0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e10:	e105      	b.n	800301e <UART_SetConfig+0x4d6>
 8002e12:	bf00      	nop
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40011400 	.word	0x40011400
 8002e1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e32:	4642      	mov	r2, r8
 8002e34:	464b      	mov	r3, r9
 8002e36:	1891      	adds	r1, r2, r2
 8002e38:	6239      	str	r1, [r7, #32]
 8002e3a:	415b      	adcs	r3, r3
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e42:	4641      	mov	r1, r8
 8002e44:	1854      	adds	r4, r2, r1
 8002e46:	4649      	mov	r1, r9
 8002e48:	eb43 0501 	adc.w	r5, r3, r1
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	00eb      	lsls	r3, r5, #3
 8002e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5a:	00e2      	lsls	r2, r4, #3
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	461d      	mov	r5, r3
 8002e60:	4643      	mov	r3, r8
 8002e62:	18e3      	adds	r3, r4, r3
 8002e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e68:	464b      	mov	r3, r9
 8002e6a:	eb45 0303 	adc.w	r3, r5, r3
 8002e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e8e:	4629      	mov	r1, r5
 8002e90:	008b      	lsls	r3, r1, #2
 8002e92:	4621      	mov	r1, r4
 8002e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e98:	4621      	mov	r1, r4
 8002e9a:	008a      	lsls	r2, r1, #2
 8002e9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ea0:	f7fd f996 	bl	80001d0 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4b60      	ldr	r3, [pc, #384]	; (800302c <UART_SetConfig+0x4e4>)
 8002eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	011c      	lsls	r4, r3, #4
 8002eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ebc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ec0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	1891      	adds	r1, r2, r2
 8002eca:	61b9      	str	r1, [r7, #24]
 8002ecc:	415b      	adcs	r3, r3
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	1851      	adds	r1, r2, r1
 8002ed8:	6139      	str	r1, [r7, #16]
 8002eda:	4649      	mov	r1, r9
 8002edc:	414b      	adcs	r3, r1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eec:	4659      	mov	r1, fp
 8002eee:	00cb      	lsls	r3, r1, #3
 8002ef0:	4651      	mov	r1, sl
 8002ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	00ca      	lsls	r2, r1, #3
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	4642      	mov	r2, r8
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f08:	464b      	mov	r3, r9
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	eb42 0303 	adc.w	r3, r2, r3
 8002f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	008b      	lsls	r3, r1, #2
 8002f30:	4641      	mov	r1, r8
 8002f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f36:	4641      	mov	r1, r8
 8002f38:	008a      	lsls	r2, r1, #2
 8002f3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f3e:	f7fd f947 	bl	80001d0 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4b39      	ldr	r3, [pc, #228]	; (800302c <UART_SetConfig+0x4e4>)
 8002f48:	fba3 1302 	umull	r1, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	2164      	movs	r1, #100	; 0x64
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	3332      	adds	r3, #50	; 0x32
 8002f5a:	4a34      	ldr	r2, [pc, #208]	; (800302c <UART_SetConfig+0x4e4>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f66:	441c      	add	r4, r3
 8002f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f70:	677a      	str	r2, [r7, #116]	; 0x74
 8002f72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f76:	4642      	mov	r2, r8
 8002f78:	464b      	mov	r3, r9
 8002f7a:	1891      	adds	r1, r2, r2
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	415b      	adcs	r3, r3
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f86:	4641      	mov	r1, r8
 8002f88:	1851      	adds	r1, r2, r1
 8002f8a:	6039      	str	r1, [r7, #0]
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	414b      	adcs	r3, r1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	00cb      	lsls	r3, r1, #3
 8002fa2:	4651      	mov	r1, sl
 8002fa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa8:	4651      	mov	r1, sl
 8002faa:	00ca      	lsls	r2, r1, #3
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4642      	mov	r2, r8
 8002fb4:	189b      	adds	r3, r3, r2
 8002fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fb8:	464b      	mov	r3, r9
 8002fba:	460a      	mov	r2, r1
 8002fbc:	eb42 0303 	adc.w	r3, r2, r3
 8002fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	663b      	str	r3, [r7, #96]	; 0x60
 8002fcc:	667a      	str	r2, [r7, #100]	; 0x64
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fda:	4649      	mov	r1, r9
 8002fdc:	008b      	lsls	r3, r1, #2
 8002fde:	4641      	mov	r1, r8
 8002fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	008a      	lsls	r2, r1, #2
 8002fe8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fec:	f7fd f8f0 	bl	80001d0 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <UART_SetConfig+0x4e4>)
 8002ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2164      	movs	r1, #100	; 0x64
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	3332      	adds	r3, #50	; 0x32
 8003008:	4a08      	ldr	r2, [pc, #32]	; (800302c <UART_SetConfig+0x4e4>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4422      	add	r2, r4
 800301c:	609a      	str	r2, [r3, #8]
}
 800301e:	bf00      	nop
 8003020:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	51eb851f 	.word	0x51eb851f

08003030 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800303e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003042:	2b84      	cmp	r3, #132	; 0x84
 8003044:	d005      	beq.n	8003052 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003046:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	3303      	adds	r3, #3
 8003050:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003066:	f3ef 8305 	mrs	r3, IPSR
 800306a:	607b      	str	r3, [r7, #4]
  return(result);
 800306c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800306e:	2b00      	cmp	r3, #0
 8003070:	bf14      	ite	ne
 8003072:	2301      	movne	r3, #1
 8003074:	2300      	moveq	r3, #0
 8003076:	b2db      	uxtb	r3, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003088:	f001 f916 	bl	80042b8 <vTaskStartScheduler>
  
  return osOK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	bd80      	pop	{r7, pc}

08003092 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003094:	b089      	sub	sp, #36	; 0x24
 8003096:	af04      	add	r7, sp, #16
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <osThreadCreate+0x54>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01c      	beq.n	80030e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685c      	ldr	r4, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681d      	ldr	r5, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691e      	ldr	r6, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ffb6 	bl	8003030 <makeFreeRtosPriority>
 80030c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ce:	9202      	str	r2, [sp, #8]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	9100      	str	r1, [sp, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4632      	mov	r2, r6
 80030d8:	4629      	mov	r1, r5
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 ff0e 	bl	8003efc <xTaskCreateStatic>
 80030e0:	4603      	mov	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e01c      	b.n	8003120 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685c      	ldr	r4, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030f2:	b29e      	uxth	r6, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff98 	bl	8003030 <makeFreeRtosPriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	9200      	str	r2, [sp, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	4632      	mov	r2, r6
 800310e:	4629      	mov	r1, r5
 8003110:	4620      	mov	r0, r4
 8003112:	f000 ff50 	bl	8003fb6 <xTaskCreate>
 8003116:	4603      	mov	r3, r0
 8003118:	2b01      	cmp	r3, #1
 800311a:	d001      	beq.n	8003120 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003120:	68fb      	ldr	r3, [r7, #12]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800312a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <osDelay+0x16>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	e000      	b.n	8003142 <osDelay+0x18>
 8003140:	2301      	movs	r3, #1
 8003142:	4618      	mov	r0, r3
 8003144:	f001 f884 	bl	8004250 <vTaskDelay>
  
  return osOK;
 8003148:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003152:	b590      	push	{r4, r7, lr}
 8003154:	b085      	sub	sp, #20
 8003156:	af02      	add	r7, sp, #8
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d011      	beq.n	8003188 <osMessageCreate+0x36>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2400      	movs	r4, #0
 800317e:	9400      	str	r4, [sp, #0]
 8003180:	f000 f9e0 	bl	8003544 <xQueueGenericCreateStatic>
 8003184:	4603      	mov	r3, r0
 8003186:	e008      	b.n	800319a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	4619      	mov	r1, r3
 8003194:	f000 fa4e 	bl	8003634 <xQueueGenericCreate>
 8003198:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}
	...

080031a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <osMessagePut+0x1e>
    ticks = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80031c2:	f7ff ff4d 	bl	8003060 <inHandlerMode>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d018      	beq.n	80031fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80031cc:	f107 0210 	add.w	r2, r7, #16
 80031d0:	f107 0108 	add.w	r1, r7, #8
 80031d4:	2300      	movs	r3, #0
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fb84 	bl	80038e4 <xQueueGenericSendFromISR>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <osMessagePut+0x42>
      return osErrorOS;
 80031e2:	23ff      	movs	r3, #255	; 0xff
 80031e4:	e018      	b.n	8003218 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d014      	beq.n	8003216 <osMessagePut+0x72>
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <osMessagePut+0x7c>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	e00b      	b.n	8003216 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80031fe:	f107 0108 	add.w	r1, r7, #8
 8003202:	2300      	movs	r3, #0
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa6e 	bl	80036e8 <xQueueGenericSend>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <osMessagePut+0x72>
      return osErrorOS;
 8003212:	23ff      	movs	r3, #255	; 0xff
 8003214:	e000      	b.n	8003218 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b08b      	sub	sp, #44	; 0x2c
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	617b      	str	r3, [r7, #20]
    return event;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	461c      	mov	r4, r3
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800324e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003252:	e054      	b.n	80032fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d103      	bne.n	800326c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
 800326a:	e009      	b.n	8003280 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <osMessageGet+0x5c>
      ticks = 1;
 800327c:	2301      	movs	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003280:	f7ff feee 	bl	8003060 <inHandlerMode>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01c      	beq.n	80032c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800328a:	f107 0220 	add.w	r2, r7, #32
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f000 fca0 	bl	8003bdc <xQueueReceiveFromISR>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80032a2:	2310      	movs	r3, #16
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e001      	b.n	80032ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01d      	beq.n	80032ee <osMessageGet+0xca>
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <osMessageGet+0xe4>)
 80032b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	e014      	b.n	80032ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	3304      	adds	r3, #4
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	4619      	mov	r1, r3
 80032ce:	68b8      	ldr	r0, [r7, #8]
 80032d0:	f000 fba4 	bl	8003a1c <xQueueReceive>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80032da:	2310      	movs	r3, #16
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e006      	b.n	80032ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <osMessageGet+0xc6>
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <osMessageGet+0xc8>
 80032ea:	2340      	movs	r3, #64	; 0x40
 80032ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	461c      	mov	r4, r3
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	372c      	adds	r7, #44	; 0x2c
 8003302:	46bd      	mov	sp, r7
 8003304:	bd90      	pop	{r4, r7, pc}
 8003306:	bf00      	nop
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f103 0208 	add.w	r2, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f103 0208 	add.w	r2, r3, #8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f103 0208 	add.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d103      	bne.n	80033ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e00c      	b.n	80033e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3308      	adds	r3, #8
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e002      	b.n	80033dc <vListInsert+0x2e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d2f6      	bcs.n	80033d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6852      	ldr	r2, [r2, #4]
 8003440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d103      	bne.n	8003454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800349e:	f001 fd51 	bl	8004f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	3b01      	subs	r3, #1
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	22ff      	movs	r2, #255	; 0xff
 80034e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	22ff      	movs	r2, #255	; 0xff
 80034ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d114      	bne.n	800351e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01a      	beq.n	8003532 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3310      	adds	r3, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f92b 	bl	800475c <xTaskRemoveFromEventList>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <xQueueGenericReset+0xcc>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	e009      	b.n	8003532 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3310      	adds	r3, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fef2 	bl	800330c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3324      	adds	r3, #36	; 0x24
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff feed 	bl	800330c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003532:	f001 fd37 	bl	8004fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003536:	2301      	movs	r3, #1
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	e000ed04 	.word	0xe000ed04

08003544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08e      	sub	sp, #56	; 0x38
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <xQueueGenericCreateStatic+0x52>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <xQueueGenericCreateStatic+0x56>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <xQueueGenericCreateStatic+0x58>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	623b      	str	r3, [r7, #32]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <xQueueGenericCreateStatic+0x7e>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <xQueueGenericCreateStatic+0x82>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <xQueueGenericCreateStatic+0x84>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	61fb      	str	r3, [r7, #28]
}
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035e2:	2348      	movs	r3, #72	; 0x48
 80035e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b48      	cmp	r3, #72	; 0x48
 80035ea:	d00a      	beq.n	8003602 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	61bb      	str	r3, [r7, #24]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003602:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003616:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f83f 	bl	80036a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800362c:	4618      	mov	r0, r3
 800362e:	3730      	adds	r7, #48	; 0x30
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	613b      	str	r3, [r7, #16]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	3348      	adds	r3, #72	; 0x48
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fd8b 	bl	8005188 <pvPortMalloc>
 8003672:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3348      	adds	r3, #72	; 0x48
 8003682:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800368c:	79fa      	ldrb	r2, [r7, #7]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f805 	bl	80036a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800369e:	69bb      	ldr	r3, [r7, #24]
	}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e002      	b.n	80036ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036d6:	2101      	movs	r1, #1
 80036d8:	69b8      	ldr	r0, [r7, #24]
 80036da:	f7ff fecb 	bl	8003474 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036f6:	2300      	movs	r3, #0
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueGenericSend+0x32>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <xQueueGenericSend+0x40>
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <xQueueGenericSend+0x44>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <xQueueGenericSend+0x46>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <xQueueGenericSend+0x60>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d103      	bne.n	8003756 <xQueueGenericSend+0x6e>
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <xQueueGenericSend+0x72>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <xQueueGenericSend+0x74>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <xQueueGenericSend+0x8e>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	623b      	str	r3, [r7, #32]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003776:	f001 f9b1 	bl	8004adc <xTaskGetSchedulerState>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <xQueueGenericSend+0x9e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <xQueueGenericSend+0xa2>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xQueueGenericSend+0xa4>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	61fb      	str	r3, [r7, #28]
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037a6:	f001 fbcd 	bl	8004f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <xQueueGenericSend+0xd4>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d129      	bne.n	8003810 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c2:	f000 fa8b 	bl	8003cdc <prvCopyDataToQueue>
 80037c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d010      	beq.n	80037f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	3324      	adds	r3, #36	; 0x24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 ffc1 	bl	800475c <xTaskRemoveFromEventList>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037e0:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <xQueueGenericSend+0x1f8>)
 80037e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	e00a      	b.n	8003808 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <xQueueGenericSend+0x1f8>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003808:	f001 fbcc 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 800380c:	2301      	movs	r3, #1
 800380e:	e063      	b.n	80038d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003816:	f001 fbc5 	bl	8004fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800381a:	2300      	movs	r3, #0
 800381c:	e05c      	b.n	80038d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fff9 	bl	8004820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800382e:	2301      	movs	r3, #1
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003832:	f001 fbb7 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003836:	f000 fda9 	bl	800438c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800383a:	f001 fb83 	bl	8004f44 <vPortEnterCritical>
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003844:	b25b      	sxtb	r3, r3
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d103      	bne.n	8003854 <xQueueGenericSend+0x16c>
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800385a:	b25b      	sxtb	r3, r3
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d103      	bne.n	800386a <xQueueGenericSend+0x182>
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800386a:	f001 fb9b 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800386e:	1d3a      	adds	r2, r7, #4
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f000 ffe8 	bl	800484c <xTaskCheckForTimeOut>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d124      	bne.n	80038cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003884:	f000 fb22 	bl	8003ecc <prvIsQueueFull>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	3310      	adds	r3, #16
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 ff3c 	bl	8004714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800389c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800389e:	f000 faad 	bl	8003dfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038a2:	f000 fd81 	bl	80043a8 <xTaskResumeAll>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f47f af7c 	bne.w	80037a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <xQueueGenericSend+0x1f8>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	e772      	b.n	80037a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038c2:	f000 fa9b 	bl	8003dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038c6:	f000 fd6f 	bl	80043a8 <xTaskResumeAll>
 80038ca:	e76c      	b.n	80037a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ce:	f000 fa95 	bl	8003dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038d2:	f000 fd69 	bl	80043a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3738      	adds	r7, #56	; 0x38
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b090      	sub	sp, #64	; 0x40
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <xQueueGenericSendFromISR+0x3c>
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueGenericSendFromISR+0x40>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <xQueueGenericSendFromISR+0x42>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <xQueueGenericSendFromISR+0x6a>
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <xQueueGenericSendFromISR+0x6e>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSendFromISR+0x70>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800396e:	f001 fbcb 	bl	8005108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003972:	f3ef 8211 	mrs	r2, BASEPRI
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	61fa      	str	r2, [r7, #28]
 8003988:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800398a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <xQueueGenericSendFromISR+0xbc>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d12f      	bne.n	8003a00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039b6:	f000 f991 	bl	8003cdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d112      	bne.n	80039ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d016      	beq.n	80039fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	3324      	adds	r3, #36	; 0x24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fec3 	bl	800475c <xTaskRemoveFromEventList>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e007      	b.n	80039fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039ee:	3301      	adds	r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	b25a      	sxtb	r2, r3
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039fa:	2301      	movs	r3, #1
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80039fe:	e001      	b.n	8003a04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3740      	adds	r7, #64	; 0x40
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	; 0x30
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <xQueueReceive+0x30>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	623b      	str	r3, [r7, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueReceive+0x3e>
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <xQueueReceive+0x42>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <xQueueReceive+0x44>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xQueueReceive+0x5e>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	61fb      	str	r3, [r7, #28]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a7a:	f001 f82f 	bl	8004adc <xTaskGetSchedulerState>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <xQueueReceive+0x6e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <xQueueReceive+0x72>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <xQueueReceive+0x74>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <xQueueReceive+0x8e>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	61bb      	str	r3, [r7, #24]
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003aaa:	f001 fa4b 	bl	8004f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01f      	beq.n	8003afa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003abe:	f000 f977 	bl	8003db0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	1e5a      	subs	r2, r3, #1
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00f      	beq.n	8003af2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	3310      	adds	r3, #16
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fe40 	bl	800475c <xTaskRemoveFromEventList>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <xQueueReceive+0x1bc>)
 8003ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003af2:	f001 fa57 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e069      	b.n	8003bce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b00:	f001 fa50 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e062      	b.n	8003bce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b0e:	f107 0310 	add.w	r3, r7, #16
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fe84 	bl	8004820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b1c:	f001 fa42 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b20:	f000 fc34 	bl	800438c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b24:	f001 fa0e 	bl	8004f44 <vPortEnterCritical>
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d103      	bne.n	8003b3e <xQueueReceive+0x122>
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b44:	b25b      	sxtb	r3, r3
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d103      	bne.n	8003b54 <xQueueReceive+0x138>
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b54:	f001 fa26 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b58:	1d3a      	adds	r2, r7, #4
 8003b5a:	f107 0310 	add.w	r3, r7, #16
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fe73 	bl	800484c <xTaskCheckForTimeOut>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d123      	bne.n	8003bb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b6e:	f000 f997 	bl	8003ea0 <prvIsQueueEmpty>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d017      	beq.n	8003ba8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	3324      	adds	r3, #36	; 0x24
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fdc7 	bl	8004714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b88:	f000 f938 	bl	8003dfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b8c:	f000 fc0c 	bl	80043a8 <xTaskResumeAll>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d189      	bne.n	8003aaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <xQueueReceive+0x1bc>)
 8003b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	e780      	b.n	8003aaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003baa:	f000 f927 	bl	8003dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bae:	f000 fbfb 	bl	80043a8 <xTaskResumeAll>
 8003bb2:	e77a      	b.n	8003aaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb6:	f000 f921 	bl	8003dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bba:	f000 fbf5 	bl	80043a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc0:	f000 f96e 	bl	8003ea0 <prvIsQueueEmpty>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f43f af6f 	beq.w	8003aaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3730      	adds	r7, #48	; 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08e      	sub	sp, #56	; 0x38
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	623b      	str	r3, [r7, #32]
}
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <xQueueReceiveFromISR+0x3a>
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <xQueueReceiveFromISR+0x3e>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <xQueueReceiveFromISR+0x40>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	61fb      	str	r3, [r7, #28]
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c36:	f001 fa67 	bl	8005108 <vPortValidateInterruptPriority>
	__asm volatile
 8003c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	61ba      	str	r2, [r7, #24]
 8003c50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02f      	beq.n	8003cc2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c70:	f000 f89e 	bl	8003db0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	1e5a      	subs	r2, r3, #1
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003c7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d112      	bne.n	8003cac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	3310      	adds	r3, #16
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fd62 	bl	800475c <xTaskRemoveFromEventList>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e007      	b.n	8003cbc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b25a      	sxtb	r2, r3
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc0:	e001      	b.n	8003cc6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f383 8811 	msr	BASEPRI, r3
}
 8003cd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3738      	adds	r7, #56	; 0x38
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d14d      	bne.n	8003d9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 ff06 	bl	8004b18 <xTaskPriorityDisinherit>
 8003d0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e043      	b.n	8003d9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d119      	bne.n	8003d50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6858      	ldr	r0, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	461a      	mov	r2, r3
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	f001 fc3e 	bl	80055a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	441a      	add	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d32b      	bcc.n	8003d9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	e026      	b.n	8003d9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68d8      	ldr	r0, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	f001 fc24 	bl	80055a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	425b      	negs	r3, r3
 8003d6a:	441a      	add	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d207      	bcs.n	8003d8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	425b      	negs	r3, r3
 8003d86:	441a      	add	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d105      	bne.n	8003d9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003da6:	697b      	ldr	r3, [r7, #20]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d018      	beq.n	8003df4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	441a      	add	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d303      	bcc.n	8003de4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68d9      	ldr	r1, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	461a      	mov	r2, r3
 8003dee:	6838      	ldr	r0, [r7, #0]
 8003df0:	f001 fbda 	bl	80055a8 <memcpy>
	}
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e04:	f001 f89e 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e10:	e011      	b.n	8003e36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d012      	beq.n	8003e40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3324      	adds	r3, #36	; 0x24
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fc9c 	bl	800475c <xTaskRemoveFromEventList>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e2a:	f000 fd71 	bl	8004910 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	dce9      	bgt.n	8003e12 <prvUnlockQueue+0x16>
 8003e3e:	e000      	b.n	8003e42 <prvUnlockQueue+0x46>
					break;
 8003e40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	22ff      	movs	r2, #255	; 0xff
 8003e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e4a:	f001 f8ab 	bl	8004fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e4e:	f001 f879 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e5a:	e011      	b.n	8003e80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d012      	beq.n	8003e8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3310      	adds	r3, #16
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fc77 	bl	800475c <xTaskRemoveFromEventList>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e74:	f000 fd4c 	bl	8004910 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	dce9      	bgt.n	8003e5c <prvUnlockQueue+0x60>
 8003e88:	e000      	b.n	8003e8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	22ff      	movs	r2, #255	; 0xff
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e94:	f001 f886 	bl	8004fa4 <vPortExitCritical>
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ea8:	f001 f84c 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e001      	b.n	8003ebe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ebe:	f001 f871 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ed4:	f001 f836 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d102      	bne.n	8003eea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e001      	b.n	8003eee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eee:	f001 f859 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08e      	sub	sp, #56	; 0x38
 8003f00:	af04      	add	r7, sp, #16
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	623b      	str	r3, [r7, #32]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61fb      	str	r3, [r7, #28]
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f42:	23b4      	movs	r3, #180	; 0xb4
 8003f44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2bb4      	cmp	r3, #180	; 0xb4
 8003f4a:	d00a      	beq.n	8003f62 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	61bb      	str	r3, [r7, #24]
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01e      	beq.n	8003fa8 <xTaskCreateStatic+0xac>
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f82:	2300      	movs	r3, #0
 8003f84:	9303      	str	r3, [sp, #12]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	9302      	str	r3, [sp, #8]
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f850 	bl	8004040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa2:	f000 f8eb 	bl	800417c <prvAddNewTaskToReadyList>
 8003fa6:	e001      	b.n	8003fac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fac:	697b      	ldr	r3, [r7, #20]
	}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08c      	sub	sp, #48	; 0x30
 8003fba:	af04      	add	r7, sp, #16
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f8dc 	bl	8005188 <pvPortMalloc>
 8003fd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fd8:	20b4      	movs	r0, #180	; 0xb4
 8003fda:	f001 f8d5 	bl	8005188 <pvPortMalloc>
 8003fde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
 8003fec:	e005      	b.n	8003ffa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fee:	6978      	ldr	r0, [r7, #20]
 8003ff0:	f001 f996 	bl	8005320 <vPortFree>
 8003ff4:	e001      	b.n	8003ffa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	2300      	movs	r3, #0
 800400c:	9303      	str	r3, [sp, #12]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f80e 	bl	8004040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004024:	69f8      	ldr	r0, [r7, #28]
 8004026:	f000 f8a9 	bl	800417c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800402a:	2301      	movs	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e002      	b.n	8004036 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004036:	69bb      	ldr	r3, [r7, #24]
	}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004058:	3b01      	subs	r3, #1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	617b      	str	r3, [r7, #20]
}
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01f      	beq.n	80040ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e012      	b.n	80040ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	7819      	ldrb	r1, [r3, #0]
 800409c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	3334      	adds	r3, #52	; 0x34
 80040a4:	460a      	mov	r2, r1
 80040a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	3301      	adds	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d9e9      	bls.n	8004094 <prvInitialiseNewTask+0x54>
 80040c0:	e000      	b.n	80040c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80040c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040cc:	e003      	b.n	80040d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d901      	bls.n	80040e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040dc:	2306      	movs	r3, #6
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	2200      	movs	r2, #0
 80040f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	3304      	adds	r3, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f928 	bl	800334c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	3318      	adds	r3, #24
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff f923 	bl	800334c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	f1c3 0207 	rsb	r2, r3, #7
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	2200      	movs	r2, #0
 8004120:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	2200      	movs	r2, #0
 8004128:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	334c      	adds	r3, #76	; 0x4c
 8004130:	2260      	movs	r2, #96	; 0x60
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fa45 	bl	80055c4 <memset>
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <prvInitialiseNewTask+0x130>)
 800413e:	651a      	str	r2, [r3, #80]	; 0x50
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <prvInitialiseNewTask+0x134>)
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	4a0b      	ldr	r2, [pc, #44]	; (8004178 <prvInitialiseNewTask+0x138>)
 800414a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	69b8      	ldr	r0, [r7, #24]
 8004152:	f000 fdcd 	bl	8004cf0 <pxPortInitialiseStack>
 8004156:	4602      	mov	r2, r0
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004166:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004168:	bf00      	nop
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	0800580c 	.word	0x0800580c
 8004174:	0800582c 	.word	0x0800582c
 8004178:	080057ec 	.word	0x080057ec

0800417c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004184:	f000 fede 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004188:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <prvAddNewTaskToReadyList+0xb8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	4a29      	ldr	r2, [pc, #164]	; (8004234 <prvAddNewTaskToReadyList+0xb8>)
 8004190:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <prvAddNewTaskToReadyList+0xbc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800419a:	4a27      	ldr	r2, [pc, #156]	; (8004238 <prvAddNewTaskToReadyList+0xbc>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041a0:	4b24      	ldr	r3, [pc, #144]	; (8004234 <prvAddNewTaskToReadyList+0xb8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d110      	bne.n	80041ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041a8:	f000 fbd6 	bl	8004958 <prvInitialiseTaskLists>
 80041ac:	e00d      	b.n	80041ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <prvAddNewTaskToReadyList+0xc0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <prvAddNewTaskToReadyList+0xbc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d802      	bhi.n	80041ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041c4:	4a1c      	ldr	r2, [pc, #112]	; (8004238 <prvAddNewTaskToReadyList+0xbc>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <prvAddNewTaskToReadyList+0xc4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <prvAddNewTaskToReadyList+0xc4>)
 80041d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <prvAddNewTaskToReadyList+0xc8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	4a18      	ldr	r2, [pc, #96]	; (8004244 <prvAddNewTaskToReadyList+0xc8>)
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4a15      	ldr	r2, [pc, #84]	; (8004248 <prvAddNewTaskToReadyList+0xcc>)
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7ff f8b2 	bl	8003366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004202:	f000 fecf 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <prvAddNewTaskToReadyList+0xc0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <prvAddNewTaskToReadyList+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	429a      	cmp	r2, r3
 800421a:	d207      	bcs.n	800422c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <prvAddNewTaskToReadyList+0xd0>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200004e0 	.word	0x200004e0
 8004238:	200003e0 	.word	0x200003e0
 800423c:	200004ec 	.word	0x200004ec
 8004240:	200004fc 	.word	0x200004fc
 8004244:	200004e8 	.word	0x200004e8
 8004248:	200003e4 	.word	0x200003e4
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <vTaskDelay+0x60>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <vTaskDelay+0x30>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	60bb      	str	r3, [r7, #8]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004280:	f000 f884 	bl	800438c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004284:	2100      	movs	r1, #0
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fccc 	bl	8004c24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800428c:	f000 f88c 	bl	80043a8 <xTaskResumeAll>
 8004290:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <vTaskDelay+0x64>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000508 	.word	0x20000508
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042c6:	463a      	mov	r2, r7
 80042c8:	1d39      	adds	r1, r7, #4
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc f900 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	9202      	str	r2, [sp, #8]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	2300      	movs	r3, #0
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	460a      	mov	r2, r1
 80042e6:	4921      	ldr	r1, [pc, #132]	; (800436c <vTaskStartScheduler+0xb4>)
 80042e8:	4821      	ldr	r0, [pc, #132]	; (8004370 <vTaskStartScheduler+0xb8>)
 80042ea:	f7ff fe07 	bl	8003efc <xTaskCreateStatic>
 80042ee:	4603      	mov	r3, r0
 80042f0:	4a20      	ldr	r2, [pc, #128]	; (8004374 <vTaskStartScheduler+0xbc>)
 80042f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042f4:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <vTaskStartScheduler+0xbc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e001      	b.n	8004306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d11b      	bne.n	8004344 <vTaskStartScheduler+0x8c>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	613b      	str	r3, [r7, #16]
}
 800431e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <vTaskStartScheduler+0xc0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	334c      	adds	r3, #76	; 0x4c
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <vTaskStartScheduler+0xc4>)
 8004328:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <vTaskStartScheduler+0xc8>)
 800432c:	f04f 32ff 	mov.w	r2, #4294967295
 8004330:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <vTaskStartScheduler+0xcc>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <vTaskStartScheduler+0xd0>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800433e:	f000 fd5f 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004342:	e00e      	b.n	8004362 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d10a      	bne.n	8004362 <vTaskStartScheduler+0xaa>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	60fb      	str	r3, [r7, #12]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <vTaskStartScheduler+0xa8>
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	080057cc 	.word	0x080057cc
 8004370:	08004929 	.word	0x08004929
 8004374:	20000504 	.word	0x20000504
 8004378:	200003e0 	.word	0x200003e0
 800437c:	20000010 	.word	0x20000010
 8004380:	20000500 	.word	0x20000500
 8004384:	200004ec 	.word	0x200004ec
 8004388:	200004e4 	.word	0x200004e4

0800438c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <vTaskSuspendAll+0x18>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	4a03      	ldr	r2, [pc, #12]	; (80043a4 <vTaskSuspendAll+0x18>)
 8004398:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	20000508 	.word	0x20000508

080043a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <xTaskResumeAll+0x114>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	603b      	str	r3, [r7, #0]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043d4:	f000 fdb6 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043d8:	4b38      	ldr	r3, [pc, #224]	; (80044bc <xTaskResumeAll+0x114>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4a37      	ldr	r2, [pc, #220]	; (80044bc <xTaskResumeAll+0x114>)
 80043e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e2:	4b36      	ldr	r3, [pc, #216]	; (80044bc <xTaskResumeAll+0x114>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d161      	bne.n	80044ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043ea:	4b35      	ldr	r3, [pc, #212]	; (80044c0 <xTaskResumeAll+0x118>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d05d      	beq.n	80044ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f2:	e02e      	b.n	8004452 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <xTaskResumeAll+0x11c>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3318      	adds	r3, #24
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f80d 	bl	8003420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3304      	adds	r3, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f808 	bl	8003420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <xTaskResumeAll+0x120>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	4a2a      	ldr	r2, [pc, #168]	; (80044c8 <xTaskResumeAll+0x120>)
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <xTaskResumeAll+0x124>)
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fe ff94 	bl	8003366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <xTaskResumeAll+0x128>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800444c:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <xTaskResumeAll+0x12c>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004452:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <xTaskResumeAll+0x11c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1cc      	bne.n	80043f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004460:	f000 fb1c 	bl	8004a9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <xTaskResumeAll+0x130>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d010      	beq.n	8004492 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004470:	f000 f836 	bl	80044e0 <xTaskIncrementTick>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800447a:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <xTaskResumeAll+0x12c>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f1      	bne.n	8004470 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <xTaskResumeAll+0x130>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <xTaskResumeAll+0x12c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <xTaskResumeAll+0x134>)
 80044a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044ae:	f000 fd79 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 80044b2:	68bb      	ldr	r3, [r7, #8]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000508 	.word	0x20000508
 80044c0:	200004e0 	.word	0x200004e0
 80044c4:	200004a0 	.word	0x200004a0
 80044c8:	200004e8 	.word	0x200004e8
 80044cc:	200003e4 	.word	0x200003e4
 80044d0:	200003e0 	.word	0x200003e0
 80044d4:	200004f4 	.word	0x200004f4
 80044d8:	200004f0 	.word	0x200004f0
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ea:	4b4e      	ldr	r3, [pc, #312]	; (8004624 <xTaskIncrementTick+0x144>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 808e 	bne.w	8004610 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044f4:	4b4c      	ldr	r3, [pc, #304]	; (8004628 <xTaskIncrementTick+0x148>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044fc:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <xTaskIncrementTick+0x148>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d120      	bne.n	800454a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004508:	4b48      	ldr	r3, [pc, #288]	; (800462c <xTaskIncrementTick+0x14c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <xTaskIncrementTick+0x48>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	603b      	str	r3, [r7, #0]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <xTaskIncrementTick+0x46>
 8004528:	4b40      	ldr	r3, [pc, #256]	; (800462c <xTaskIncrementTick+0x14c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	4b40      	ldr	r3, [pc, #256]	; (8004630 <xTaskIncrementTick+0x150>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3e      	ldr	r2, [pc, #248]	; (800462c <xTaskIncrementTick+0x14c>)
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4a3e      	ldr	r2, [pc, #248]	; (8004630 <xTaskIncrementTick+0x150>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b3d      	ldr	r3, [pc, #244]	; (8004634 <xTaskIncrementTick+0x154>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	4a3c      	ldr	r2, [pc, #240]	; (8004634 <xTaskIncrementTick+0x154>)
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	f000 faa9 	bl	8004a9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800454a:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <xTaskIncrementTick+0x158>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d348      	bcc.n	80045e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <xTaskIncrementTick+0x14c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <xTaskIncrementTick+0x158>)
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	601a      	str	r2, [r3, #0]
					break;
 8004566:	e03e      	b.n	80045e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004568:	4b30      	ldr	r3, [pc, #192]	; (800462c <xTaskIncrementTick+0x14c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d203      	bcs.n	8004588 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004580:	4a2d      	ldr	r2, [pc, #180]	; (8004638 <xTaskIncrementTick+0x158>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004586:	e02e      	b.n	80045e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe ff47 	bl	8003420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d004      	beq.n	80045a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	3318      	adds	r3, #24
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe ff3e 	bl	8003420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2201      	movs	r2, #1
 80045aa:	409a      	lsls	r2, r3
 80045ac:	4b23      	ldr	r3, [pc, #140]	; (800463c <xTaskIncrementTick+0x15c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	4a22      	ldr	r2, [pc, #136]	; (800463c <xTaskIncrementTick+0x15c>)
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <xTaskIncrementTick+0x160>)
 80045c4:	441a      	add	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe feca 	bl	8003366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <xTaskIncrementTick+0x164>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	429a      	cmp	r2, r3
 80045de:	d3b9      	bcc.n	8004554 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e4:	e7b6      	b.n	8004554 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <xTaskIncrementTick+0x164>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4914      	ldr	r1, [pc, #80]	; (8004640 <xTaskIncrementTick+0x160>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d901      	bls.n	8004602 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80045fe:	2301      	movs	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <xTaskIncrementTick+0x168>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e004      	b.n	800461a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <xTaskIncrementTick+0x16c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	4a0d      	ldr	r2, [pc, #52]	; (800464c <xTaskIncrementTick+0x16c>)
 8004618:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800461a:	697b      	ldr	r3, [r7, #20]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000508 	.word	0x20000508
 8004628:	200004e4 	.word	0x200004e4
 800462c:	20000498 	.word	0x20000498
 8004630:	2000049c 	.word	0x2000049c
 8004634:	200004f8 	.word	0x200004f8
 8004638:	20000500 	.word	0x20000500
 800463c:	200004e8 	.word	0x200004e8
 8004640:	200003e4 	.word	0x200003e4
 8004644:	200003e0 	.word	0x200003e0
 8004648:	200004f4 	.word	0x200004f4
 800464c:	200004f0 	.word	0x200004f0

08004650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <vTaskSwitchContext+0xac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800465e:	4b28      	ldr	r3, [pc, #160]	; (8004700 <vTaskSwitchContext+0xb0>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004664:	e044      	b.n	80046f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <vTaskSwitchContext+0xb0>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <vTaskSwitchContext+0xb4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	f1c3 031f 	rsb	r3, r3, #31
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	4921      	ldr	r1, [pc, #132]	; (8004708 <vTaskSwitchContext+0xb8>)
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	607b      	str	r3, [r7, #4]
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <vTaskSwitchContext+0x5a>
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4a14      	ldr	r2, [pc, #80]	; (8004708 <vTaskSwitchContext+0xb8>)
 80046b8:	4413      	add	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3308      	adds	r3, #8
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d104      	bne.n	80046dc <vTaskSwitchContext+0x8c>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <vTaskSwitchContext+0xbc>)
 80046e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <vTaskSwitchContext+0xbc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	334c      	adds	r3, #76	; 0x4c
 80046ec:	4a08      	ldr	r2, [pc, #32]	; (8004710 <vTaskSwitchContext+0xc0>)
 80046ee:	6013      	str	r3, [r2, #0]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	20000508 	.word	0x20000508
 8004700:	200004f4 	.word	0x200004f4
 8004704:	200004e8 	.word	0x200004e8
 8004708:	200003e4 	.word	0x200003e4
 800470c:	200003e0 	.word	0x200003e0
 8004710:	20000010 	.word	0x20000010

08004714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <vTaskPlaceOnEventList+0x44>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3318      	adds	r3, #24
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fe fe33 	bl	80033ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004748:	2101      	movs	r1, #1
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f000 fa6a 	bl	8004c24 <prvAddCurrentTaskToDelayedList>
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	200003e0 	.word	0x200003e0

0800475c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60fb      	str	r3, [r7, #12]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	3318      	adds	r3, #24
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe fe47 	bl	8003420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <xTaskRemoveFromEventList+0xac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11c      	bne.n	80047d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3304      	adds	r3, #4
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fe3e 	bl	8003420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	2201      	movs	r2, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <xTaskRemoveFromEventList+0xb0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	4a16      	ldr	r2, [pc, #88]	; (800480c <xTaskRemoveFromEventList+0xb0>)
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <xTaskRemoveFromEventList+0xb4>)
 80047c4:	441a      	add	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f7fe fdca 	bl	8003366 <vListInsertEnd>
 80047d2:	e005      	b.n	80047e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	3318      	adds	r3, #24
 80047d8:	4619      	mov	r1, r3
 80047da:	480e      	ldr	r0, [pc, #56]	; (8004814 <xTaskRemoveFromEventList+0xb8>)
 80047dc:	f7fe fdc3 	bl	8003366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <xTaskRemoveFromEventList+0xbc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d905      	bls.n	80047fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <xTaskRemoveFromEventList+0xc0>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e001      	b.n	80047fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047fe:	697b      	ldr	r3, [r7, #20]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000508 	.word	0x20000508
 800480c:	200004e8 	.word	0x200004e8
 8004810:	200003e4 	.word	0x200003e4
 8004814:	200004a0 	.word	0x200004a0
 8004818:	200003e0 	.word	0x200003e0
 800481c:	200004f4 	.word	0x200004f4

08004820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <vTaskInternalSetTimeOutState+0x24>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <vTaskInternalSetTimeOutState+0x28>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	605a      	str	r2, [r3, #4]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	200004f8 	.word	0x200004f8
 8004848:	200004e4 	.word	0x200004e4

0800484c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	613b      	str	r3, [r7, #16]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	60fb      	str	r3, [r7, #12]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800488e:	f000 fb59 	bl	8004f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004892:	4b1d      	ldr	r3, [pc, #116]	; (8004908 <xTaskCheckForTimeOut+0xbc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d102      	bne.n	80048b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e023      	b.n	80048fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <xTaskCheckForTimeOut+0xc0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d007      	beq.n	80048ce <xTaskCheckForTimeOut+0x82>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e015      	b.n	80048fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d20b      	bcs.n	80048f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff9b 	bl	8004820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	e004      	b.n	80048fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048fa:	f000 fb53 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 80048fe:	69fb      	ldr	r3, [r7, #28]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	200004e4 	.word	0x200004e4
 800490c:	200004f8 	.word	0x200004f8

08004910 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <vTaskMissedYield+0x14>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	200004f4 	.word	0x200004f4

08004928 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004930:	f000 f852 	bl	80049d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <prvIdleTask+0x28>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d9f9      	bls.n	8004930 <prvIdleTask+0x8>
			{
				taskYIELD();
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <prvIdleTask+0x2c>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800494c:	e7f0      	b.n	8004930 <prvIdleTask+0x8>
 800494e:	bf00      	nop
 8004950:	200003e4 	.word	0x200003e4
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	e00c      	b.n	800497e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <prvInitialiseTaskLists+0x60>)
 8004970:	4413      	add	r3, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fcca 	bl	800330c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3301      	adds	r3, #1
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b06      	cmp	r3, #6
 8004982:	d9ef      	bls.n	8004964 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004984:	480d      	ldr	r0, [pc, #52]	; (80049bc <prvInitialiseTaskLists+0x64>)
 8004986:	f7fe fcc1 	bl	800330c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800498a:	480d      	ldr	r0, [pc, #52]	; (80049c0 <prvInitialiseTaskLists+0x68>)
 800498c:	f7fe fcbe 	bl	800330c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004990:	480c      	ldr	r0, [pc, #48]	; (80049c4 <prvInitialiseTaskLists+0x6c>)
 8004992:	f7fe fcbb 	bl	800330c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004996:	480c      	ldr	r0, [pc, #48]	; (80049c8 <prvInitialiseTaskLists+0x70>)
 8004998:	f7fe fcb8 	bl	800330c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800499c:	480b      	ldr	r0, [pc, #44]	; (80049cc <prvInitialiseTaskLists+0x74>)
 800499e:	f7fe fcb5 	bl	800330c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <prvInitialiseTaskLists+0x78>)
 80049a4:	4a05      	ldr	r2, [pc, #20]	; (80049bc <prvInitialiseTaskLists+0x64>)
 80049a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvInitialiseTaskLists+0x7c>)
 80049aa:	4a05      	ldr	r2, [pc, #20]	; (80049c0 <prvInitialiseTaskLists+0x68>)
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200003e4 	.word	0x200003e4
 80049bc:	20000470 	.word	0x20000470
 80049c0:	20000484 	.word	0x20000484
 80049c4:	200004a0 	.word	0x200004a0
 80049c8:	200004b4 	.word	0x200004b4
 80049cc:	200004cc 	.word	0x200004cc
 80049d0:	20000498 	.word	0x20000498
 80049d4:	2000049c 	.word	0x2000049c

080049d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049de:	e019      	b.n	8004a14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049e0:	f000 fab0 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e4:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <prvCheckTasksWaitingTermination+0x50>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fd15 	bl	8003420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <prvCheckTasksWaitingTermination+0x54>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	4a0b      	ldr	r2, [pc, #44]	; (8004a2c <prvCheckTasksWaitingTermination+0x54>)
 80049fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <prvCheckTasksWaitingTermination+0x58>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <prvCheckTasksWaitingTermination+0x58>)
 8004a08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a0a:	f000 facb 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f810 	bl	8004a34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <prvCheckTasksWaitingTermination+0x58>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e1      	bne.n	80049e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	200004b4 	.word	0x200004b4
 8004a2c:	200004e0 	.word	0x200004e0
 8004a30:	200004c8 	.word	0x200004c8

08004a34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	334c      	adds	r3, #76	; 0x4c
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fdd5 	bl	80055f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fc63 	bl	8005320 <vPortFree>
				vPortFree( pxTCB );
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fc60 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a60:	e018      	b.n	8004a94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d103      	bne.n	8004a74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fc57 	bl	8005320 <vPortFree>
	}
 8004a72:	e00f      	b.n	8004a94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d00a      	beq.n	8004a94 <prvDeleteTCB+0x60>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60fb      	str	r3, [r7, #12]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <prvDeleteTCB+0x5e>
	}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <prvResetNextTaskUnblockTime+0x38>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <prvResetNextTaskUnblockTime+0x3c>)
 8004aae:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ab4:	e008      	b.n	8004ac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <prvResetNextTaskUnblockTime+0x38>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ac6:	6013      	str	r3, [r2, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	20000498 	.word	0x20000498
 8004ad8:	20000500 	.word	0x20000500

08004adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <xTaskGetSchedulerState+0x34>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aea:	2301      	movs	r3, #1
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e008      	b.n	8004b02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <xTaskGetSchedulerState+0x38>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004af8:	2302      	movs	r3, #2
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e001      	b.n	8004b02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b02:	687b      	ldr	r3, [r7, #4]
	}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	200004ec 	.word	0x200004ec
 8004b14:	20000508 	.word	0x20000508

08004b18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d06e      	beq.n	8004c0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b2e:	4b3a      	ldr	r3, [pc, #232]	; (8004c18 <xTaskPriorityDisinherit+0x100>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d00a      	beq.n	8004b4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	60bb      	str	r3, [r7, #8]
}
 8004b68:	bf00      	nop
 8004b6a:	e7fe      	b.n	8004b6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	1e5a      	subs	r2, r3, #1
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d044      	beq.n	8004c0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d140      	bne.n	8004c0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fc46 	bl	8003420 <uxListRemove>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d115      	bne.n	8004bc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	491f      	ldr	r1, [pc, #124]	; (8004c1c <xTaskPriorityDisinherit+0x104>)
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <xTaskPriorityDisinherit+0xae>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <xTaskPriorityDisinherit+0x108>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <xTaskPriorityDisinherit+0x108>)
 8004bc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f1c3 0207 	rsb	r2, r3, #7
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	2201      	movs	r2, #1
 8004be0:	409a      	lsls	r2, r3
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <xTaskPriorityDisinherit+0x108>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <xTaskPriorityDisinherit+0x108>)
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <xTaskPriorityDisinherit+0x104>)
 8004bfa:	441a      	add	r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f7fe fbaf 	bl	8003366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c0c:	697b      	ldr	r3, [r7, #20]
	}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200003e0 	.word	0x200003e0
 8004c1c:	200003e4 	.word	0x200003e4
 8004c20:	200004e8 	.word	0x200004e8

08004c24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c34:	4b28      	ldr	r3, [pc, #160]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fbf0 	bl	8003420 <uxListRemove>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43da      	mvns	r2, r3
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d10a      	bne.n	8004c7c <prvAddCurrentTaskToDelayedList+0x58>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	481a      	ldr	r0, [pc, #104]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c76:	f7fe fb76 	bl	8003366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c7a:	e026      	b.n	8004cca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c84:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d209      	bcs.n	8004ca8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7fe fb84 	bl	80033ae <vListInsert>
}
 8004ca6:	e010      	b.n	8004cca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7fe fb7a 	bl	80033ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d202      	bcs.n	8004cca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6013      	str	r3, [r2, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	200004e4 	.word	0x200004e4
 8004cd8:	200003e0 	.word	0x200003e0
 8004cdc:	200004e8 	.word	0x200004e8
 8004ce0:	200004cc 	.word	0x200004cc
 8004ce4:	2000049c 	.word	0x2000049c
 8004ce8:	20000498 	.word	0x20000498
 8004cec:	20000500 	.word	0x20000500

08004cf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b04      	subs	r3, #4
 8004d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b04      	subs	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d20:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <pxPortInitialiseStack+0x64>)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b14      	subs	r3, #20
 8004d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f06f 0202 	mvn.w	r2, #2
 8004d3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b20      	subs	r3, #32
 8004d44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	08004d59 	.word	0x08004d59

08004d58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <prvTaskExitError+0x54>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d00a      	beq.n	8004d82 <prvTaskExitError+0x2a>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60fb      	str	r3, [r7, #12]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <prvTaskExitError+0x28>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60bb      	str	r3, [r7, #8]
}
 8004d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d96:	bf00      	nop
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0fc      	beq.n	8004d98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	200003e0 	.word	0x200003e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7ff fba0 	bl	8004650 <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff22 	bl	8004d58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	2000050c 	.word	0x2000050c
 8004f34:	20000510 	.word	0x20000510
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7ff fb0e 	bl	8004650 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	200003e0 	.word	0x200003e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7ff fa2d 	bl	80044e0 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <SysTick_Handler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	2000050c 	.word	0x2000050c
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	20000510 	.word	0x20000510

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7ff f8fa 	bl	800438c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f920 	bl	80053e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f908 	bl	80054a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7ff f866 	bl	80043a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	2000411c 	.word	0x2000411c
 800530c:	20004130 	.word	0x20004130
 8005310:	20004120 	.word	0x20004120
 8005314:	20004114 	.word	0x20004114
 8005318:	20004124 	.word	0x20004124
 800531c:	20004128 	.word	0x20004128

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fff0 	bl	800438c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f874 	bl	80054a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe ffed 	bl	80043a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20004130 	.word	0x20004130
 80053dc:	20004120 	.word	0x20004120
 80053e0:	2000412c 	.word	0x2000412c

080053e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvHeapInit+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3307      	adds	r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <prvHeapInit+0xac>)
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvHeapInit+0xb0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvHeapInit+0xb0>)
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005430:	2208      	movs	r2, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvHeapInit+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvHeapInit+0xb4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <prvHeapInit+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvHeapInit+0xbc>)
 800547a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <prvHeapInit+0xc0>)
 800547e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000514 	.word	0x20000514
 8005494:	20004114 	.word	0x20004114
 8005498:	2000411c 	.word	0x2000411c
 800549c:	20004124 	.word	0x20004124
 80054a0:	20004120 	.word	0x20004120
 80054a4:	20004130 	.word	0x20004130

080054a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <prvInsertBlockIntoFreeList+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <prvInsertBlockIntoFreeList+0x14>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d8f7      	bhi.n	80054b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d108      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d118      	bne.n	8005530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00d      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d002      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20004114 	.word	0x20004114
 8005558:	2000411c 	.word	0x2000411c

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	; (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	; (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <__libc_init_array+0x44>)
 8005570:	f000 f8f2 	bl	8005758 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08005854 	.word	0x08005854
 8005598:	08005854 	.word	0x08005854
 800559c:	08005854 	.word	0x08005854
 80055a0:	08005858 	.word	0x08005858

080055a4 <__retarget_lock_acquire_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_release_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <memcpy>:
 80055a8:	440a      	add	r2, r1
 80055aa:	4291      	cmp	r1, r2
 80055ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b0:	d100      	bne.n	80055b4 <memcpy+0xc>
 80055b2:	4770      	bx	lr
 80055b4:	b510      	push	{r4, lr}
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055be:	4291      	cmp	r1, r2
 80055c0:	d1f9      	bne.n	80055b6 <memcpy+0xe>
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <memset>:
 80055c4:	4402      	add	r2, r0
 80055c6:	4603      	mov	r3, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <cleanup_glue>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	460c      	mov	r4, r1
 80055d8:	6809      	ldr	r1, [r1, #0]
 80055da:	4605      	mov	r5, r0
 80055dc:	b109      	cbz	r1, 80055e2 <cleanup_glue+0xe>
 80055de:	f7ff fff9 	bl	80055d4 <cleanup_glue>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ea:	f000 b869 	b.w	80056c0 <_free_r>
	...

080055f0 <_reclaim_reent>:
 80055f0:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <_reclaim_reent+0xb4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4283      	cmp	r3, r0
 80055f6:	b570      	push	{r4, r5, r6, lr}
 80055f8:	4604      	mov	r4, r0
 80055fa:	d051      	beq.n	80056a0 <_reclaim_reent+0xb0>
 80055fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055fe:	b143      	cbz	r3, 8005612 <_reclaim_reent+0x22>
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d14a      	bne.n	800569c <_reclaim_reent+0xac>
 8005606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	b111      	cbz	r1, 8005612 <_reclaim_reent+0x22>
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f857 	bl	80056c0 <_free_r>
 8005612:	6961      	ldr	r1, [r4, #20]
 8005614:	b111      	cbz	r1, 800561c <_reclaim_reent+0x2c>
 8005616:	4620      	mov	r0, r4
 8005618:	f000 f852 	bl	80056c0 <_free_r>
 800561c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800561e:	b111      	cbz	r1, 8005626 <_reclaim_reent+0x36>
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f84d 	bl	80056c0 <_free_r>
 8005626:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005628:	b111      	cbz	r1, 8005630 <_reclaim_reent+0x40>
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f848 	bl	80056c0 <_free_r>
 8005630:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005632:	b111      	cbz	r1, 800563a <_reclaim_reent+0x4a>
 8005634:	4620      	mov	r0, r4
 8005636:	f000 f843 	bl	80056c0 <_free_r>
 800563a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800563c:	b111      	cbz	r1, 8005644 <_reclaim_reent+0x54>
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f83e 	bl	80056c0 <_free_r>
 8005644:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005646:	b111      	cbz	r1, 800564e <_reclaim_reent+0x5e>
 8005648:	4620      	mov	r0, r4
 800564a:	f000 f839 	bl	80056c0 <_free_r>
 800564e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005650:	b111      	cbz	r1, 8005658 <_reclaim_reent+0x68>
 8005652:	4620      	mov	r0, r4
 8005654:	f000 f834 	bl	80056c0 <_free_r>
 8005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565a:	b111      	cbz	r1, 8005662 <_reclaim_reent+0x72>
 800565c:	4620      	mov	r0, r4
 800565e:	f000 f82f 	bl	80056c0 <_free_r>
 8005662:	69a3      	ldr	r3, [r4, #24]
 8005664:	b1e3      	cbz	r3, 80056a0 <_reclaim_reent+0xb0>
 8005666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005668:	4620      	mov	r0, r4
 800566a:	4798      	blx	r3
 800566c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800566e:	b1b9      	cbz	r1, 80056a0 <_reclaim_reent+0xb0>
 8005670:	4620      	mov	r0, r4
 8005672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005676:	f7ff bfad 	b.w	80055d4 <cleanup_glue>
 800567a:	5949      	ldr	r1, [r1, r5]
 800567c:	b941      	cbnz	r1, 8005690 <_reclaim_reent+0xa0>
 800567e:	3504      	adds	r5, #4
 8005680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005682:	2d80      	cmp	r5, #128	; 0x80
 8005684:	68d9      	ldr	r1, [r3, #12]
 8005686:	d1f8      	bne.n	800567a <_reclaim_reent+0x8a>
 8005688:	4620      	mov	r0, r4
 800568a:	f000 f819 	bl	80056c0 <_free_r>
 800568e:	e7ba      	b.n	8005606 <_reclaim_reent+0x16>
 8005690:	680e      	ldr	r6, [r1, #0]
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f814 	bl	80056c0 <_free_r>
 8005698:	4631      	mov	r1, r6
 800569a:	e7ef      	b.n	800567c <_reclaim_reent+0x8c>
 800569c:	2500      	movs	r5, #0
 800569e:	e7ef      	b.n	8005680 <_reclaim_reent+0x90>
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	bf00      	nop
 80056a4:	20000010 	.word	0x20000010

080056a8 <__malloc_lock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	; (80056b0 <__malloc_lock+0x8>)
 80056aa:	f7ff bf7b 	b.w	80055a4 <__retarget_lock_acquire_recursive>
 80056ae:	bf00      	nop
 80056b0:	20004134 	.word	0x20004134

080056b4 <__malloc_unlock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__malloc_unlock+0x8>)
 80056b6:	f7ff bf76 	b.w	80055a6 <__retarget_lock_release_recursive>
 80056ba:	bf00      	nop
 80056bc:	20004134 	.word	0x20004134

080056c0 <_free_r>:
 80056c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d044      	beq.n	8005750 <_free_r+0x90>
 80056c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ca:	9001      	str	r0, [sp, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f1a1 0404 	sub.w	r4, r1, #4
 80056d2:	bfb8      	it	lt
 80056d4:	18e4      	addlt	r4, r4, r3
 80056d6:	f7ff ffe7 	bl	80056a8 <__malloc_lock>
 80056da:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <_free_r+0x94>)
 80056dc:	9801      	ldr	r0, [sp, #4]
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	b933      	cbnz	r3, 80056f0 <_free_r+0x30>
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	6014      	str	r4, [r2, #0]
 80056e6:	b003      	add	sp, #12
 80056e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ec:	f7ff bfe2 	b.w	80056b4 <__malloc_unlock>
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	d908      	bls.n	8005706 <_free_r+0x46>
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	1961      	adds	r1, r4, r5
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf01      	itttt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	1949      	addeq	r1, r1, r5
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	e7ed      	b.n	80056e2 <_free_r+0x22>
 8005706:	461a      	mov	r2, r3
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b10b      	cbz	r3, 8005710 <_free_r+0x50>
 800570c:	42a3      	cmp	r3, r4
 800570e:	d9fa      	bls.n	8005706 <_free_r+0x46>
 8005710:	6811      	ldr	r1, [r2, #0]
 8005712:	1855      	adds	r5, r2, r1
 8005714:	42a5      	cmp	r5, r4
 8005716:	d10b      	bne.n	8005730 <_free_r+0x70>
 8005718:	6824      	ldr	r4, [r4, #0]
 800571a:	4421      	add	r1, r4
 800571c:	1854      	adds	r4, r2, r1
 800571e:	42a3      	cmp	r3, r4
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	d1e0      	bne.n	80056e6 <_free_r+0x26>
 8005724:	681c      	ldr	r4, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	6053      	str	r3, [r2, #4]
 800572a:	4421      	add	r1, r4
 800572c:	6011      	str	r1, [r2, #0]
 800572e:	e7da      	b.n	80056e6 <_free_r+0x26>
 8005730:	d902      	bls.n	8005738 <_free_r+0x78>
 8005732:	230c      	movs	r3, #12
 8005734:	6003      	str	r3, [r0, #0]
 8005736:	e7d6      	b.n	80056e6 <_free_r+0x26>
 8005738:	6825      	ldr	r5, [r4, #0]
 800573a:	1961      	adds	r1, r4, r5
 800573c:	428b      	cmp	r3, r1
 800573e:	bf04      	itt	eq
 8005740:	6819      	ldreq	r1, [r3, #0]
 8005742:	685b      	ldreq	r3, [r3, #4]
 8005744:	6063      	str	r3, [r4, #4]
 8005746:	bf04      	itt	eq
 8005748:	1949      	addeq	r1, r1, r5
 800574a:	6021      	streq	r1, [r4, #0]
 800574c:	6054      	str	r4, [r2, #4]
 800574e:	e7ca      	b.n	80056e6 <_free_r+0x26>
 8005750:	b003      	add	sp, #12
 8005752:	bd30      	pop	{r4, r5, pc}
 8005754:	20004138 	.word	0x20004138

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
